
PMPS_Projekat_AjlaPuskarevic_EdinMustafic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d50  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08007ed8  08007ed8  00017ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007efc  08007efc  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08007efc  08007efc  00017efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f04  08007f04  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f04  08007f04  00017f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f08  08007f08  00017f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08007f0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          000008dc  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000970  20000970  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   000182cf  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004203  00000000  00000000  00038393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001278  00000000  00000000  0003c598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010a8  00000000  00000000  0003d810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025173  00000000  00000000  0003e8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ab29  00000000  00000000  00063a2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc20f  00000000  00000000  0007e554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014a763  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d50  00000000  00000000  0014a7b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000094 	.word	0x20000094
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007ec0 	.word	0x08007ec0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000098 	.word	0x20000098
 80001c4:	08007ec0 	.word	0x08007ec0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <LIS3DSH_WriteIO>:
static float __X_Scale = 1.0f;
static float __Y_Scale = 1.0f;
static float __Z_Scale = 1.0f;

void LIS3DSH_WriteIO(uint8_t reg, uint8_t *dataW, uint8_t size)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	6039      	str	r1, [r7, #0]
 80004d6:	71fb      	strb	r3, [r7, #7]
 80004d8:	4613      	mov	r3, r2
 80004da:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = reg;
 80004dc:	79fb      	ldrb	r3, [r7, #7]
 80004de:	73fb      	strb	r3, [r7, #15]
	_LIS3DHS_CS_ENBALE;
 80004e0:	2200      	movs	r2, #0
 80004e2:	2108      	movs	r1, #8
 80004e4:	480c      	ldr	r0, [pc, #48]	; (8000518 <LIS3DSH_WriteIO+0x4c>)
 80004e6:	f001 fb61 	bl	8001bac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&accSPI_Handle, &spiReg, 1, 10);
 80004ea:	f107 010f 	add.w	r1, r7, #15
 80004ee:	230a      	movs	r3, #10
 80004f0:	2201      	movs	r2, #1
 80004f2:	480a      	ldr	r0, [pc, #40]	; (800051c <LIS3DSH_WriteIO+0x50>)
 80004f4:	f004 fbad 	bl	8004c52 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&accSPI_Handle, dataW, size, 10);
 80004f8:	79bb      	ldrb	r3, [r7, #6]
 80004fa:	b29a      	uxth	r2, r3
 80004fc:	230a      	movs	r3, #10
 80004fe:	6839      	ldr	r1, [r7, #0]
 8000500:	4806      	ldr	r0, [pc, #24]	; (800051c <LIS3DSH_WriteIO+0x50>)
 8000502:	f004 fba6 	bl	8004c52 <HAL_SPI_Transmit>
	_LIS3DHS_CS_DISABLE;
 8000506:	2201      	movs	r2, #1
 8000508:	2108      	movs	r1, #8
 800050a:	4803      	ldr	r0, [pc, #12]	; (8000518 <LIS3DSH_WriteIO+0x4c>)
 800050c:	f001 fb4e 	bl	8001bac <HAL_GPIO_WritePin>
}
 8000510:	bf00      	nop
 8000512:	3710      	adds	r7, #16
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40021000 	.word	0x40021000
 800051c:	200000b0 	.word	0x200000b0

08000520 <LIS3DSH_ReadIO>:

void LIS3DSH_ReadIO(uint8_t reg, uint8_t *dataR, uint8_t size)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	6039      	str	r1, [r7, #0]
 800052a:	71fb      	strb	r3, [r7, #7]
 800052c:	4613      	mov	r3, r2
 800052e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[4];
	spiBuf[0] = reg | 0x80;
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000536:	b2db      	uxtb	r3, r3
 8000538:	723b      	strb	r3, [r7, #8]
	_LIS3DHS_CS_ENBALE;
 800053a:	2200      	movs	r2, #0
 800053c:	2108      	movs	r1, #8
 800053e:	4818      	ldr	r0, [pc, #96]	; (80005a0 <LIS3DSH_ReadIO+0x80>)
 8000540:	f001 fb34 	bl	8001bac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&accSPI_Handle, spiBuf, 1, 10);
 8000544:	f107 0108 	add.w	r1, r7, #8
 8000548:	230a      	movs	r3, #10
 800054a:	2201      	movs	r2, #1
 800054c:	4815      	ldr	r0, [pc, #84]	; (80005a4 <LIS3DSH_ReadIO+0x84>)
 800054e:	f004 fb80 	bl	8004c52 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&accSPI_Handle, spiBuf, size, 10);
 8000552:	79bb      	ldrb	r3, [r7, #6]
 8000554:	b29a      	uxth	r2, r3
 8000556:	f107 0108 	add.w	r1, r7, #8
 800055a:	230a      	movs	r3, #10
 800055c:	4811      	ldr	r0, [pc, #68]	; (80005a4 <LIS3DSH_ReadIO+0x84>)
 800055e:	f004 fcb4 	bl	8004eca <HAL_SPI_Receive>
	_LIS3DHS_CS_DISABLE;
 8000562:	2201      	movs	r2, #1
 8000564:	2108      	movs	r1, #8
 8000566:	480e      	ldr	r0, [pc, #56]	; (80005a0 <LIS3DSH_ReadIO+0x80>)
 8000568:	f001 fb20 	bl	8001bac <HAL_GPIO_WritePin>

	for(uint8_t i=0; i<(size&0x3); i++)
 800056c:	2300      	movs	r3, #0
 800056e:	73fb      	strb	r3, [r7, #15]
 8000570:	e00b      	b.n	800058a <LIS3DSH_ReadIO+0x6a>
	{
		dataR[i] = spiBuf[i];
 8000572:	7bfa      	ldrb	r2, [r7, #15]
 8000574:	7bfb      	ldrb	r3, [r7, #15]
 8000576:	6839      	ldr	r1, [r7, #0]
 8000578:	440b      	add	r3, r1
 800057a:	3210      	adds	r2, #16
 800057c:	443a      	add	r2, r7
 800057e:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000582:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<(size&0x3); i++)
 8000584:	7bfb      	ldrb	r3, [r7, #15]
 8000586:	3301      	adds	r3, #1
 8000588:	73fb      	strb	r3, [r7, #15]
 800058a:	7bfa      	ldrb	r2, [r7, #15]
 800058c:	79bb      	ldrb	r3, [r7, #6]
 800058e:	f003 0303 	and.w	r3, r3, #3
 8000592:	429a      	cmp	r2, r3
 8000594:	dbed      	blt.n	8000572 <LIS3DSH_ReadIO+0x52>
	}
}
 8000596:	bf00      	nop
 8000598:	bf00      	nop
 800059a:	3710      	adds	r7, #16
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40021000 	.word	0x40021000
 80005a4:	200000b0 	.word	0x200000b0

080005a8 <LIS3DSH_Init>:


void LIS3DSH_Init(SPI_HandleTypeDef *accSPI, LIS3DSH_InitTypeDef *accInitDef)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	6039      	str	r1, [r7, #0]
	uint8_t spiData = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	73fb      	strb	r3, [r7, #15]

	memcpy(&accSPI_Handle, accSPI, sizeof(*accSPI));
 80005b6:	2258      	movs	r2, #88	; 0x58
 80005b8:	6879      	ldr	r1, [r7, #4]
 80005ba:	485b      	ldr	r0, [pc, #364]	; (8000728 <LIS3DSH_Init+0x180>)
 80005bc:	f007 fb6c 	bl	8007c98 <memcpy>
	spiData |= (accInitDef->enableAxes & 0x07);
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	78db      	ldrb	r3, [r3, #3]
 80005c4:	b25b      	sxtb	r3, r3
 80005c6:	f003 0307 	and.w	r3, r3, #7
 80005ca:	b25a      	sxtb	r2, r3
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
 80005ce:	b25b      	sxtb	r3, r3
 80005d0:	4313      	orrs	r3, r2
 80005d2:	b25b      	sxtb	r3, r3
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->dataRate & 0xF0);
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	b25b      	sxtb	r3, r3
 80005de:	f023 030f 	bic.w	r3, r3, #15
 80005e2:	b25a      	sxtb	r2, r3
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	b25b      	sxtb	r3, r3
 80005e8:	4313      	orrs	r3, r2
 80005ea:	b25b      	sxtb	r3, r3
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	73fb      	strb	r3, [r7, #15]
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG4_ADDR, &spiData, 1);
 80005f0:	f107 030f 	add.w	r3, r7, #15
 80005f4:	2201      	movs	r2, #1
 80005f6:	4619      	mov	r1, r3
 80005f8:	2020      	movs	r0, #32
 80005fa:	f7ff ff67 	bl	80004cc <LIS3DSH_WriteIO>

	spiData = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->antiAliasingBW & 0xC0);
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	789b      	ldrb	r3, [r3, #2]
 8000606:	b25b      	sxtb	r3, r3
 8000608:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800060c:	b25a      	sxtb	r2, r3
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	b25b      	sxtb	r3, r3
 8000612:	4313      	orrs	r3, r2
 8000614:	b25b      	sxtb	r3, r3
 8000616:	b2db      	uxtb	r3, r3
 8000618:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->fullScale & 0x38);
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	785b      	ldrb	r3, [r3, #1]
 800061e:	b25b      	sxtb	r3, r3
 8000620:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000624:	b25a      	sxtb	r2, r3
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	b25b      	sxtb	r3, r3
 800062a:	4313      	orrs	r3, r2
 800062c:	b25b      	sxtb	r3, r3
 800062e:	b2db      	uxtb	r3, r3
 8000630:	73fb      	strb	r3, [r7, #15]
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG5_ADDR, &spiData, 1);
 8000632:	f107 030f 	add.w	r3, r7, #15
 8000636:	2201      	movs	r2, #1
 8000638:	4619      	mov	r1, r3
 800063a:	2024      	movs	r0, #36	; 0x24
 800063c:	f7ff ff46 	bl	80004cc <LIS3DSH_WriteIO>

	if(accInitDef->interruptEnable)
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	791b      	ldrb	r3, [r3, #4]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d008      	beq.n	800065a <LIS3DSH_Init+0xb2>
	{
		spiData = 0x88;
 8000648:	2388      	movs	r3, #136	; 0x88
 800064a:	73fb      	strb	r3, [r7, #15]
		LIS3DSH_WriteIO(LIS3DSH_CTRL_REG3_ADDR, &spiData, 1);
 800064c:	f107 030f 	add.w	r3, r7, #15
 8000650:	2201      	movs	r2, #1
 8000652:	4619      	mov	r1, r3
 8000654:	2023      	movs	r0, #35	; 0x23
 8000656:	f7ff ff39 	bl	80004cc <LIS3DSH_WriteIO>
	}

	switch(accInitDef->fullScale)
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	785b      	ldrb	r3, [r3, #1]
 800065e:	2b20      	cmp	r3, #32
 8000660:	d858      	bhi.n	8000714 <LIS3DSH_Init+0x16c>
 8000662:	a201      	add	r2, pc, #4	; (adr r2, 8000668 <LIS3DSH_Init+0xc0>)
 8000664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000668:	080006ed 	.word	0x080006ed
 800066c:	08000715 	.word	0x08000715
 8000670:	08000715 	.word	0x08000715
 8000674:	08000715 	.word	0x08000715
 8000678:	08000715 	.word	0x08000715
 800067c:	08000715 	.word	0x08000715
 8000680:	08000715 	.word	0x08000715
 8000684:	08000715 	.word	0x08000715
 8000688:	080006f5 	.word	0x080006f5
 800068c:	08000715 	.word	0x08000715
 8000690:	08000715 	.word	0x08000715
 8000694:	08000715 	.word	0x08000715
 8000698:	08000715 	.word	0x08000715
 800069c:	08000715 	.word	0x08000715
 80006a0:	08000715 	.word	0x08000715
 80006a4:	08000715 	.word	0x08000715
 80006a8:	080006fd 	.word	0x080006fd
 80006ac:	08000715 	.word	0x08000715
 80006b0:	08000715 	.word	0x08000715
 80006b4:	08000715 	.word	0x08000715
 80006b8:	08000715 	.word	0x08000715
 80006bc:	08000715 	.word	0x08000715
 80006c0:	08000715 	.word	0x08000715
 80006c4:	08000715 	.word	0x08000715
 80006c8:	08000705 	.word	0x08000705
 80006cc:	08000715 	.word	0x08000715
 80006d0:	08000715 	.word	0x08000715
 80006d4:	08000715 	.word	0x08000715
 80006d8:	08000715 	.word	0x08000715
 80006dc:	08000715 	.word	0x08000715
 80006e0:	08000715 	.word	0x08000715
 80006e4:	08000715 	.word	0x08000715
 80006e8:	0800070d 	.word	0x0800070d
	{
		case LIS3DSH_FULLSCALE_2:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <LIS3DSH_Init+0x184>)
 80006ee:	4a10      	ldr	r2, [pc, #64]	; (8000730 <LIS3DSH_Init+0x188>)
 80006f0:	601a      	str	r2, [r3, #0]
			break;
 80006f2:	e00f      	b.n	8000714 <LIS3DSH_Init+0x16c>

		case LIS3DSH_FULLSCALE_4:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 80006f4:	4b0d      	ldr	r3, [pc, #52]	; (800072c <LIS3DSH_Init+0x184>)
 80006f6:	4a0f      	ldr	r2, [pc, #60]	; (8000734 <LIS3DSH_Init+0x18c>)
 80006f8:	601a      	str	r2, [r3, #0]
			break;
 80006fa:	e00b      	b.n	8000714 <LIS3DSH_Init+0x16c>

		case LIS3DSH_FULLSCALE_6:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 80006fc:	4b0b      	ldr	r3, [pc, #44]	; (800072c <LIS3DSH_Init+0x184>)
 80006fe:	4a0e      	ldr	r2, [pc, #56]	; (8000738 <LIS3DSH_Init+0x190>)
 8000700:	601a      	str	r2, [r3, #0]
			break;
 8000702:	e007      	b.n	8000714 <LIS3DSH_Init+0x16c>

		case LIS3DSH_FULLSCALE_8:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <LIS3DSH_Init+0x184>)
 8000706:	4a0d      	ldr	r2, [pc, #52]	; (800073c <LIS3DSH_Init+0x194>)
 8000708:	601a      	str	r2, [r3, #0]
			break;
 800070a:	e003      	b.n	8000714 <LIS3DSH_Init+0x16c>

		case LIS3DSH_FULLSCALE_16:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <LIS3DSH_Init+0x184>)
 800070e:	4a0c      	ldr	r2, [pc, #48]	; (8000740 <LIS3DSH_Init+0x198>)
 8000710:	601a      	str	r2, [r3, #0]
			break;
 8000712:	bf00      	nop
	}
	_LIS3DHS_CS_DISABLE;
 8000714:	2201      	movs	r2, #1
 8000716:	2108      	movs	r1, #8
 8000718:	480a      	ldr	r0, [pc, #40]	; (8000744 <LIS3DSH_Init+0x19c>)
 800071a:	f001 fa47 	bl	8001bac <HAL_GPIO_WritePin>
}
 800071e:	bf00      	nop
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200000b0 	.word	0x200000b0
 800072c:	20000000 	.word	0x20000000
 8000730:	3d75c28f 	.word	0x3d75c28f
 8000734:	3df5c28f 	.word	0x3df5c28f
 8000738:	3e3851ec 	.word	0x3e3851ec
 800073c:	3e75c28f 	.word	0x3e75c28f
 8000740:	3f3ae148 	.word	0x3f3ae148
 8000744:	40021000 	.word	0x40021000

08000748 <LIS3DSH_GetDataRaw>:

LIS3DSH_DataRaw LIS3DSH_GetDataRaw(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	uint8_t spiBuf[2];
	LIS3DSH_DataRaw tempDataRaw;
	LIS3DSH_ReadIO(LIS3DSH_OUT_X_L_ADDR, spiBuf, 2);
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	2202      	movs	r2, #2
 8000756:	4619      	mov	r1, r3
 8000758:	2028      	movs	r0, #40	; 0x28
 800075a:	f7ff fee1 	bl	8000520 <LIS3DSH_ReadIO>
	tempDataRaw.x = ((spiBuf[1] << 8) + spiBuf[0]);
 800075e:	7d7b      	ldrb	r3, [r7, #21]
 8000760:	b29b      	uxth	r3, r3
 8000762:	021b      	lsls	r3, r3, #8
 8000764:	b29a      	uxth	r2, r3
 8000766:	7d3b      	ldrb	r3, [r7, #20]
 8000768:	b29b      	uxth	r3, r3
 800076a:	4413      	add	r3, r2
 800076c:	b29b      	uxth	r3, r3
 800076e:	b21b      	sxth	r3, r3
 8000770:	81bb      	strh	r3, [r7, #12]

	LIS3DSH_ReadIO(LIS3DSH_OUT_Y_L_ADDR, spiBuf, 2);
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	2202      	movs	r2, #2
 8000778:	4619      	mov	r1, r3
 800077a:	202a      	movs	r0, #42	; 0x2a
 800077c:	f7ff fed0 	bl	8000520 <LIS3DSH_ReadIO>
	tempDataRaw.y = ((spiBuf[1] << 8) + spiBuf[0]);
 8000780:	7d7b      	ldrb	r3, [r7, #21]
 8000782:	b29b      	uxth	r3, r3
 8000784:	021b      	lsls	r3, r3, #8
 8000786:	b29a      	uxth	r2, r3
 8000788:	7d3b      	ldrb	r3, [r7, #20]
 800078a:	b29b      	uxth	r3, r3
 800078c:	4413      	add	r3, r2
 800078e:	b29b      	uxth	r3, r3
 8000790:	b21b      	sxth	r3, r3
 8000792:	81fb      	strh	r3, [r7, #14]

	LIS3DSH_ReadIO(LIS3DSH_OUT_Z_L_ADDR, spiBuf, 2);
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	2202      	movs	r2, #2
 800079a:	4619      	mov	r1, r3
 800079c:	202c      	movs	r0, #44	; 0x2c
 800079e:	f7ff febf 	bl	8000520 <LIS3DSH_ReadIO>
	tempDataRaw.z = ((spiBuf[1] << 8) + spiBuf[0]);
 80007a2:	7d7b      	ldrb	r3, [r7, #21]
 80007a4:	b29b      	uxth	r3, r3
 80007a6:	021b      	lsls	r3, r3, #8
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	7d3b      	ldrb	r3, [r7, #20]
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	4413      	add	r3, r2
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	b21b      	sxth	r3, r3
 80007b4:	823b      	strh	r3, [r7, #16]

	return tempDataRaw;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	461a      	mov	r2, r3
 80007ba:	f107 030c 	add.w	r3, r7, #12
 80007be:	6818      	ldr	r0, [r3, #0]
 80007c0:	6010      	str	r0, [r2, #0]
 80007c2:	889b      	ldrh	r3, [r3, #4]
 80007c4:	8093      	strh	r3, [r2, #4]

}
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	3718      	adds	r7, #24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08c      	sub	sp, #48	; 0x30
 80007d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	61bb      	str	r3, [r7, #24]
 80007ea:	4b76      	ldr	r3, [pc, #472]	; (80009c4 <MX_GPIO_Init+0x1f4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a75      	ldr	r2, [pc, #468]	; (80009c4 <MX_GPIO_Init+0x1f4>)
 80007f0:	f043 0310 	orr.w	r3, r3, #16
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b73      	ldr	r3, [pc, #460]	; (80009c4 <MX_GPIO_Init+0x1f4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0310 	and.w	r3, r3, #16
 80007fe:	61bb      	str	r3, [r7, #24]
 8000800:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
 8000806:	4b6f      	ldr	r3, [pc, #444]	; (80009c4 <MX_GPIO_Init+0x1f4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a6e      	ldr	r2, [pc, #440]	; (80009c4 <MX_GPIO_Init+0x1f4>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b6c      	ldr	r3, [pc, #432]	; (80009c4 <MX_GPIO_Init+0x1f4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	617b      	str	r3, [r7, #20]
 800081c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	4b68      	ldr	r3, [pc, #416]	; (80009c4 <MX_GPIO_Init+0x1f4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a67      	ldr	r2, [pc, #412]	; (80009c4 <MX_GPIO_Init+0x1f4>)
 8000828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b65      	ldr	r3, [pc, #404]	; (80009c4 <MX_GPIO_Init+0x1f4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	4b61      	ldr	r3, [pc, #388]	; (80009c4 <MX_GPIO_Init+0x1f4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a60      	ldr	r2, [pc, #384]	; (80009c4 <MX_GPIO_Init+0x1f4>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b5e      	ldr	r3, [pc, #376]	; (80009c4 <MX_GPIO_Init+0x1f4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	4b5a      	ldr	r3, [pc, #360]	; (80009c4 <MX_GPIO_Init+0x1f4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a59      	ldr	r2, [pc, #356]	; (80009c4 <MX_GPIO_Init+0x1f4>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b57      	ldr	r3, [pc, #348]	; (80009c4 <MX_GPIO_Init+0x1f4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	4b53      	ldr	r3, [pc, #332]	; (80009c4 <MX_GPIO_Init+0x1f4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a52      	ldr	r2, [pc, #328]	; (80009c4 <MX_GPIO_Init+0x1f4>)
 800087c:	f043 0308 	orr.w	r3, r3, #8
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b50      	ldr	r3, [pc, #320]	; (80009c4 <MX_GPIO_Init+0x1f4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0308 	and.w	r3, r3, #8
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MEMS_CS_GPIO_Port, MEMS_CS_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	2108      	movs	r1, #8
 8000892:	484d      	ldr	r0, [pc, #308]	; (80009c8 <MX_GPIO_Init+0x1f8>)
 8000894:	f001 f98a 	bl	8001bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	2101      	movs	r1, #1
 800089c:	484b      	ldr	r0, [pc, #300]	; (80009cc <MX_GPIO_Init+0x1fc>)
 800089e:	f001 f985 	bl	8001bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008a2:	2200      	movs	r2, #0
 80008a4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008a8:	4849      	ldr	r0, [pc, #292]	; (80009d0 <MX_GPIO_Init+0x200>)
 80008aa:	f001 f97f 	bl	8001bac <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_CS_Pin;
 80008ae:	2308      	movs	r3, #8
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b2:	2301      	movs	r3, #1
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(MEMS_CS_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	4840      	ldr	r0, [pc, #256]	; (80009c8 <MX_GPIO_Init+0x1f8>)
 80008c6:	f000 ffd5 	bl	8001874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008ca:	2301      	movs	r3, #1
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	483a      	ldr	r0, [pc, #232]	; (80009cc <MX_GPIO_Init+0x1fc>)
 80008e2:	f000 ffc7 	bl	8001874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008e6:	2308      	movs	r3, #8
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008f6:	2305      	movs	r3, #5
 80008f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	4832      	ldr	r0, [pc, #200]	; (80009cc <MX_GPIO_Init+0x1fc>)
 8000902:	f000 ffb7 	bl	8001874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000906:	2301      	movs	r3, #1
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800090a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000910:	2302      	movs	r3, #2
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	482e      	ldr	r0, [pc, #184]	; (80009d4 <MX_GPIO_Init+0x204>)
 800091c:	f000 ffaa 	bl	8001874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000920:	2304      	movs	r3, #4
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000924:	2300      	movs	r3, #0
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4619      	mov	r1, r3
 8000932:	4829      	ldr	r0, [pc, #164]	; (80009d8 <MX_GPIO_Init+0x208>)
 8000934:	f000 ff9e 	bl	8001874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000938:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800094a:	2305      	movs	r3, #5
 800094c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	4820      	ldr	r0, [pc, #128]	; (80009d8 <MX_GPIO_Init+0x208>)
 8000956:	f000 ff8d 	bl	8001874 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800095a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800095e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000960:	2301      	movs	r3, #1
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	4817      	ldr	r0, [pc, #92]	; (80009d0 <MX_GPIO_Init+0x200>)
 8000974:	f000 ff7e 	bl	8001874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000978:	2320      	movs	r3, #32
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	4811      	ldr	r0, [pc, #68]	; (80009d0 <MX_GPIO_Init+0x200>)
 800098c:	f000 ff72 	bl	8001874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000990:	2302      	movs	r3, #2
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000994:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	4808      	ldr	r0, [pc, #32]	; (80009c8 <MX_GPIO_Init+0x1f8>)
 80009a6:	f000 ff65 	bl	8001874 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2100      	movs	r1, #0
 80009ae:	2006      	movs	r0, #6
 80009b0:	f000 fdc9 	bl	8001546 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009b4:	2006      	movs	r0, #6
 80009b6:	f000 fde2 	bl	800157e <HAL_NVIC_EnableIRQ>

}
 80009ba:	bf00      	nop
 80009bc:	3730      	adds	r7, #48	; 0x30
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40021000 	.word	0x40021000
 80009cc:	40020800 	.word	0x40020800
 80009d0:	40020c00 	.word	0x40020c00
 80009d4:	40020000 	.word	0x40020000
 80009d8:	40020400 	.word	0x40020400

080009dc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <MX_I2C1_Init+0x50>)
 80009e2:	4a13      	ldr	r2, [pc, #76]	; (8000a30 <MX_I2C1_Init+0x54>)
 80009e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_I2C1_Init+0x50>)
 80009e8:	4a12      	ldr	r2, [pc, #72]	; (8000a34 <MX_I2C1_Init+0x58>)
 80009ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <MX_I2C1_Init+0x50>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <MX_I2C1_Init+0x50>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <MX_I2C1_Init+0x50>)
 80009fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a00:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <MX_I2C1_Init+0x50>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_I2C1_Init+0x50>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a0c:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <MX_I2C1_Init+0x50>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <MX_I2C1_Init+0x50>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a18:	4804      	ldr	r0, [pc, #16]	; (8000a2c <MX_I2C1_Init+0x50>)
 8000a1a:	f002 fce9 	bl	80033f0 <HAL_I2C_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a24:	f000 facc 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000108 	.word	0x20000108
 8000a30:	40005400 	.word	0x40005400
 8000a34:	000186a0 	.word	0x000186a0

08000a38 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	; 0x28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a19      	ldr	r2, [pc, #100]	; (8000abc <HAL_I2C_MspInit+0x84>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d12c      	bne.n	8000ab4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <HAL_I2C_MspInit+0x88>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a17      	ldr	r2, [pc, #92]	; (8000ac0 <HAL_I2C_MspInit+0x88>)
 8000a64:	f043 0302 	orr.w	r3, r3, #2
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <HAL_I2C_MspInit+0x88>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a76:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a7c:	2312      	movs	r3, #18
 8000a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a88:	2304      	movs	r3, #4
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	480c      	ldr	r0, [pc, #48]	; (8000ac4 <HAL_I2C_MspInit+0x8c>)
 8000a94:	f000 feee 	bl	8001874 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <HAL_I2C_MspInit+0x88>)
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa0:	4a07      	ldr	r2, [pc, #28]	; (8000ac0 <HAL_I2C_MspInit+0x88>)
 8000aa2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aa6:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <HAL_I2C_MspInit+0x88>)
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ab4:	bf00      	nop
 8000ab6:	3728      	adds	r7, #40	; 0x28
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40005400 	.word	0x40005400
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020400 	.word	0x40020400

08000ac8 <MX_I2S3_Init>:
I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000acc:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <MX_I2S3_Init+0x54>)
 8000ace:	4a14      	ldr	r2, [pc, #80]	; (8000b20 <MX_I2S3_Init+0x58>)
 8000ad0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000ad2:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <MX_I2S3_Init+0x54>)
 8000ad4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ad8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <MX_I2S3_Init+0x54>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000ae0:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <MX_I2S3_Init+0x54>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <MX_I2S3_Init+0x54>)
 8000ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aec:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <MX_I2S3_Init+0x54>)
 8000af0:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000af4:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <MX_I2S3_Init+0x54>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000afc:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <MX_I2S3_Init+0x54>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <MX_I2S3_Init+0x54>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000b08:	4804      	ldr	r0, [pc, #16]	; (8000b1c <MX_I2S3_Init+0x54>)
 8000b0a:	f002 fdb5 	bl	8003678 <HAL_I2S_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000b14:	f000 fa54 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	2000015c 	.word	0x2000015c
 8000b20:	40003c00 	.word	0x40003c00

08000b24 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08e      	sub	sp, #56	; 0x38
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a4e      	ldr	r2, [pc, #312]	; (8000c88 <HAL_I2S_MspInit+0x164>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	f040 8094 	bne.w	8000c7e <HAL_I2S_MspInit+0x15a>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b56:	2301      	movs	r3, #1
 8000b58:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 160;
 8000b5a:	23a0      	movs	r3, #160	; 0xa0
 8000b5c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4618      	mov	r0, r3
 8000b68:	f003 feaa 	bl	80048c0 <HAL_RCCEx_PeriphCLKConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000b72:	f000 fa25 	bl	8000fc0 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	4b44      	ldr	r3, [pc, #272]	; (8000c8c <HAL_I2S_MspInit+0x168>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	4a43      	ldr	r2, [pc, #268]	; (8000c8c <HAL_I2S_MspInit+0x168>)
 8000b80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b84:	6413      	str	r3, [r2, #64]	; 0x40
 8000b86:	4b41      	ldr	r3, [pc, #260]	; (8000c8c <HAL_I2S_MspInit+0x168>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	4b3d      	ldr	r3, [pc, #244]	; (8000c8c <HAL_I2S_MspInit+0x168>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a3c      	ldr	r2, [pc, #240]	; (8000c8c <HAL_I2S_MspInit+0x168>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b3a      	ldr	r3, [pc, #232]	; (8000c8c <HAL_I2S_MspInit+0x168>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	4b36      	ldr	r3, [pc, #216]	; (8000c8c <HAL_I2S_MspInit+0x168>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a35      	ldr	r2, [pc, #212]	; (8000c8c <HAL_I2S_MspInit+0x168>)
 8000bb8:	f043 0304 	orr.w	r3, r3, #4
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b33      	ldr	r3, [pc, #204]	; (8000c8c <HAL_I2S_MspInit+0x168>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0304 	and.w	r3, r3, #4
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bca:	2310      	movs	r3, #16
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bda:	2306      	movs	r3, #6
 8000bdc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be2:	4619      	mov	r1, r3
 8000be4:	482a      	ldr	r0, [pc, #168]	; (8000c90 <HAL_I2S_MspInit+0x16c>)
 8000be6:	f000 fe45 	bl	8001874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bea:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bfc:	2306      	movs	r3, #6
 8000bfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c04:	4619      	mov	r1, r3
 8000c06:	4823      	ldr	r0, [pc, #140]	; (8000c94 <HAL_I2S_MspInit+0x170>)
 8000c08:	f000 fe34 	bl	8001874 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8000c0c:	4b22      	ldr	r3, [pc, #136]	; (8000c98 <HAL_I2S_MspInit+0x174>)
 8000c0e:	4a23      	ldr	r2, [pc, #140]	; (8000c9c <HAL_I2S_MspInit+0x178>)
 8000c10:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000c12:	4b21      	ldr	r3, [pc, #132]	; (8000c98 <HAL_I2S_MspInit+0x174>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c18:	4b1f      	ldr	r3, [pc, #124]	; (8000c98 <HAL_I2S_MspInit+0x174>)
 8000c1a:	2240      	movs	r2, #64	; 0x40
 8000c1c:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c1e:	4b1e      	ldr	r3, [pc, #120]	; (8000c98 <HAL_I2S_MspInit+0x174>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c24:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <HAL_I2S_MspInit+0x174>)
 8000c26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c2a:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c2c:	4b1a      	ldr	r3, [pc, #104]	; (8000c98 <HAL_I2S_MspInit+0x174>)
 8000c2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c32:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c34:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <HAL_I2S_MspInit+0x174>)
 8000c36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c3a:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8000c3c:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <HAL_I2S_MspInit+0x174>)
 8000c3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c42:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c44:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <HAL_I2S_MspInit+0x174>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000c4a:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <HAL_I2S_MspInit+0x174>)
 8000c4c:	2204      	movs	r2, #4
 8000c4e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000c50:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <HAL_I2S_MspInit+0x174>)
 8000c52:	2203      	movs	r2, #3
 8000c54:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000c56:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <HAL_I2S_MspInit+0x174>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000c5c:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <HAL_I2S_MspInit+0x174>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000c62:	480d      	ldr	r0, [pc, #52]	; (8000c98 <HAL_I2S_MspInit+0x174>)
 8000c64:	f000 fca6 	bl	80015b4 <HAL_DMA_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <HAL_I2S_MspInit+0x14e>
    {
      Error_Handler();
 8000c6e:	f000 f9a7 	bl	8000fc0 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a08      	ldr	r2, [pc, #32]	; (8000c98 <HAL_I2S_MspInit+0x174>)
 8000c76:	639a      	str	r2, [r3, #56]	; 0x38
 8000c78:	4a07      	ldr	r2, [pc, #28]	; (8000c98 <HAL_I2S_MspInit+0x174>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000c7e:	bf00      	nop
 8000c80:	3738      	adds	r7, #56	; 0x38
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40003c00 	.word	0x40003c00
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020000 	.word	0x40020000
 8000c94:	40020800 	.word	0x40020800
 8000c98:	200001a4 	.word	0x200001a4
 8000c9c:	40026088 	.word	0x40026088

08000ca0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ca6:	f000 fadd 	bl	8001264 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000caa:	f000 f91f 	bl	8000eec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cae:	f7ff fd8f 	bl	80007d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000cb2:	f7ff fe93 	bl	80009dc <MX_I2C1_Init>
  MX_I2S3_Init();
 8000cb6:	f7ff ff07 	bl	8000ac8 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000cba:	f000 f987 	bl	8000fcc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000cbe:	f006 fd01 	bl	80076c4 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */

  myAccConfigDef.dataRate = LIS3DSH_DATARATE_12_5;
 8000cc2:	2330      	movs	r3, #48	; 0x30
 8000cc4:	703b      	strb	r3, [r7, #0]
   myAccConfigDef.fullScale = LIS3DSH_FULLSCALE_4;
 8000cc6:	2308      	movs	r3, #8
 8000cc8:	707b      	strb	r3, [r7, #1]
   myAccConfigDef.antiAliasingBW = LIS3DSH_FILTER_BW_50;
 8000cca:	23c0      	movs	r3, #192	; 0xc0
 8000ccc:	70bb      	strb	r3, [r7, #2]
   myAccConfigDef.enableAxes = LIS3DSH_XYZ_ENABLE;
 8000cce:	2307      	movs	r3, #7
 8000cd0:	70fb      	strb	r3, [r7, #3]
   myAccConfigDef.interruptEnable = false;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	713b      	strb	r3, [r7, #4]

   LIS3DSH_Init(&hspi1, &myAccConfigDef);
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <main+0x50>)
 8000cdc:	f7ff fc64 	bl	80005a8 <LIS3DSH_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(!isFinished)
 8000ce0:	e001      	b.n	8000ce6 <main+0x46>
	  {
		  HandleTilt();
 8000ce2:	f000 f809 	bl	8000cf8 <HandleTilt>
	  while(!isFinished)
 8000ce6:	4b03      	ldr	r3, [pc, #12]	; (8000cf4 <main+0x54>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d0f9      	beq.n	8000ce2 <main+0x42>
 8000cee:	e7fa      	b.n	8000ce6 <main+0x46>
 8000cf0:	20000220 	.word	0x20000220
 8000cf4:	2000021c 	.word	0x2000021c

08000cf8 <HandleTilt>:
  }
  /* USER CODE END 3 */
}

void HandleTilt()
{
 8000cf8:	b590      	push	{r4, r7, lr}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
	myData = LIS3DSH_GetDataRaw();
 8000cfe:	4c73      	ldr	r4, [pc, #460]	; (8000ecc <HandleTilt+0x1d4>)
 8000d00:	463b      	mov	r3, r7
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fd20 	bl	8000748 <LIS3DSH_GetDataRaw>
 8000d08:	4622      	mov	r2, r4
 8000d0a:	463b      	mov	r3, r7
 8000d0c:	6818      	ldr	r0, [r3, #0]
 8000d0e:	6010      	str	r0, [r2, #0]
 8000d10:	889b      	ldrh	r3, [r3, #4]
 8000d12:	8093      	strh	r3, [r2, #4]
	if(tiltedForward == 0 && tiltedBack == 0)
 8000d14:	4b6e      	ldr	r3, [pc, #440]	; (8000ed0 <HandleTilt+0x1d8>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d166      	bne.n	8000dea <HandleTilt+0xf2>
 8000d1c:	4b6d      	ldr	r3, [pc, #436]	; (8000ed4 <HandleTilt+0x1dc>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d162      	bne.n	8000dea <HandleTilt+0xf2>
	{
		if(myData.x > 5000 && tiltedRight == 0)
 8000d24:	4b69      	ldr	r3, [pc, #420]	; (8000ecc <HandleTilt+0x1d4>)
 8000d26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	dd18      	ble.n	8000d64 <HandleTilt+0x6c>
 8000d32:	4b69      	ldr	r3, [pc, #420]	; (8000ed8 <HandleTilt+0x1e0>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d114      	bne.n	8000d64 <HandleTilt+0x6c>
		{
			// TITED RIGHT
			tiltedRight = 1;
 8000d3a:	4b67      	ldr	r3, [pc, #412]	; (8000ed8 <HandleTilt+0x1e0>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	601a      	str	r2, [r3, #0]
			if(tiltedLeft == 1)
 8000d40:	4b66      	ldr	r3, [pc, #408]	; (8000edc <HandleTilt+0x1e4>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d107      	bne.n	8000d58 <HandleTilt+0x60>
			{
				HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000d48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d4c:	4864      	ldr	r0, [pc, #400]	; (8000ee0 <HandleTilt+0x1e8>)
 8000d4e:	f000 ff46 	bl	8001bde <HAL_GPIO_TogglePin>
				tiltedLeft = 0;
 8000d52:	4b62      	ldr	r3, [pc, #392]	; (8000edc <HandleTilt+0x1e4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
			}
			HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 8000d58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d5c:	4860      	ldr	r0, [pc, #384]	; (8000ee0 <HandleTilt+0x1e8>)
 8000d5e:	f000 ff3e 	bl	8001bde <HAL_GPIO_TogglePin>
 8000d62:	e042      	b.n	8000dea <HandleTilt+0xf2>
		}
		else if(myData.x < -5000 && tiltedLeft == 0)
 8000d64:	4b59      	ldr	r3, [pc, #356]	; (8000ecc <HandleTilt+0x1d4>)
 8000d66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d6a:	4a5e      	ldr	r2, [pc, #376]	; (8000ee4 <HandleTilt+0x1ec>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	da18      	bge.n	8000da2 <HandleTilt+0xaa>
 8000d70:	4b5a      	ldr	r3, [pc, #360]	; (8000edc <HandleTilt+0x1e4>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d114      	bne.n	8000da2 <HandleTilt+0xaa>
		{
			// TILTED LEFT
			tiltedLeft = 1;
 8000d78:	4b58      	ldr	r3, [pc, #352]	; (8000edc <HandleTilt+0x1e4>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	601a      	str	r2, [r3, #0]
			if(tiltedRight == 1)
 8000d7e:	4b56      	ldr	r3, [pc, #344]	; (8000ed8 <HandleTilt+0x1e0>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d107      	bne.n	8000d96 <HandleTilt+0x9e>
			{
				HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 8000d86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d8a:	4855      	ldr	r0, [pc, #340]	; (8000ee0 <HandleTilt+0x1e8>)
 8000d8c:	f000 ff27 	bl	8001bde <HAL_GPIO_TogglePin>
				tiltedRight = 0;
 8000d90:	4b51      	ldr	r3, [pc, #324]	; (8000ed8 <HandleTilt+0x1e0>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
			}
			HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000d96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d9a:	4851      	ldr	r0, [pc, #324]	; (8000ee0 <HandleTilt+0x1e8>)
 8000d9c:	f000 ff1f 	bl	8001bde <HAL_GPIO_TogglePin>
 8000da0:	e023      	b.n	8000dea <HandleTilt+0xf2>
		}
		else if(myData.x > -500 && myData.x < 500)
 8000da2:	4b4a      	ldr	r3, [pc, #296]	; (8000ecc <HandleTilt+0x1d4>)
 8000da4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000da8:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8000dac:	dd1d      	ble.n	8000dea <HandleTilt+0xf2>
 8000dae:	4b47      	ldr	r3, [pc, #284]	; (8000ecc <HandleTilt+0x1d4>)
 8000db0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000db4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000db8:	da17      	bge.n	8000dea <HandleTilt+0xf2>
		{
			// NOT TILTED ON X
			if(tiltedRight == 1)
 8000dba:	4b47      	ldr	r3, [pc, #284]	; (8000ed8 <HandleTilt+0x1e0>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d104      	bne.n	8000dcc <HandleTilt+0xd4>
			{
				HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 8000dc2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dc6:	4846      	ldr	r0, [pc, #280]	; (8000ee0 <HandleTilt+0x1e8>)
 8000dc8:	f000 ff09 	bl	8001bde <HAL_GPIO_TogglePin>
			}
			if(tiltedLeft == 1)
 8000dcc:	4b43      	ldr	r3, [pc, #268]	; (8000edc <HandleTilt+0x1e4>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d104      	bne.n	8000dde <HandleTilt+0xe6>
			{
				HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000dd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dd8:	4841      	ldr	r0, [pc, #260]	; (8000ee0 <HandleTilt+0x1e8>)
 8000dda:	f000 ff00 	bl	8001bde <HAL_GPIO_TogglePin>
			}
			tiltedRight = 0;
 8000dde:	4b3e      	ldr	r3, [pc, #248]	; (8000ed8 <HandleTilt+0x1e0>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
			tiltedLeft = 0;
 8000de4:	4b3d      	ldr	r3, [pc, #244]	; (8000edc <HandleTilt+0x1e4>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
		}
	}
	if(tiltedRight == 0 && tiltedLeft == 0)
 8000dea:	4b3b      	ldr	r3, [pc, #236]	; (8000ed8 <HandleTilt+0x1e0>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d167      	bne.n	8000ec2 <HandleTilt+0x1ca>
 8000df2:	4b3a      	ldr	r3, [pc, #232]	; (8000edc <HandleTilt+0x1e4>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d163      	bne.n	8000ec2 <HandleTilt+0x1ca>
	{
		if(myData.y > 4500 && tiltedForward == 0)
 8000dfa:	4b34      	ldr	r3, [pc, #208]	; (8000ecc <HandleTilt+0x1d4>)
 8000dfc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e00:	f241 1294 	movw	r2, #4500	; 0x1194
 8000e04:	4293      	cmp	r3, r2
 8000e06:	dd18      	ble.n	8000e3a <HandleTilt+0x142>
 8000e08:	4b31      	ldr	r3, [pc, #196]	; (8000ed0 <HandleTilt+0x1d8>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d114      	bne.n	8000e3a <HandleTilt+0x142>
		{
			// TILTED FORWARD
			tiltedForward = 1;
 8000e10:	4b2f      	ldr	r3, [pc, #188]	; (8000ed0 <HandleTilt+0x1d8>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	601a      	str	r2, [r3, #0]
			if(tiltedBack == 1)
 8000e16:	4b2f      	ldr	r3, [pc, #188]	; (8000ed4 <HandleTilt+0x1dc>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d107      	bne.n	8000e2e <HandleTilt+0x136>
			{
				HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 8000e1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e22:	482f      	ldr	r0, [pc, #188]	; (8000ee0 <HandleTilt+0x1e8>)
 8000e24:	f000 fedb 	bl	8001bde <HAL_GPIO_TogglePin>
				tiltedBack = 0;
 8000e28:	4b2a      	ldr	r3, [pc, #168]	; (8000ed4 <HandleTilt+0x1dc>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
			}
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000e2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e32:	482b      	ldr	r0, [pc, #172]	; (8000ee0 <HandleTilt+0x1e8>)
 8000e34:	f000 fed3 	bl	8001bde <HAL_GPIO_TogglePin>
 8000e38:	e043      	b.n	8000ec2 <HandleTilt+0x1ca>
		}
		else if(myData.y < -4500 && tiltedBack == 0)
 8000e3a:	4b24      	ldr	r3, [pc, #144]	; (8000ecc <HandleTilt+0x1d4>)
 8000e3c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e40:	4a29      	ldr	r2, [pc, #164]	; (8000ee8 <HandleTilt+0x1f0>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	da18      	bge.n	8000e78 <HandleTilt+0x180>
 8000e46:	4b23      	ldr	r3, [pc, #140]	; (8000ed4 <HandleTilt+0x1dc>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d114      	bne.n	8000e78 <HandleTilt+0x180>
		{
			// TILTED BACK
			tiltedBack = 1;
 8000e4e:	4b21      	ldr	r3, [pc, #132]	; (8000ed4 <HandleTilt+0x1dc>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	601a      	str	r2, [r3, #0]
			if(tiltedForward == 1)
 8000e54:	4b1e      	ldr	r3, [pc, #120]	; (8000ed0 <HandleTilt+0x1d8>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d107      	bne.n	8000e6c <HandleTilt+0x174>
			{
				HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000e5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e60:	481f      	ldr	r0, [pc, #124]	; (8000ee0 <HandleTilt+0x1e8>)
 8000e62:	f000 febc 	bl	8001bde <HAL_GPIO_TogglePin>
				tiltedForward = 0;
 8000e66:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <HandleTilt+0x1d8>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
			}
			HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 8000e6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e70:	481b      	ldr	r0, [pc, #108]	; (8000ee0 <HandleTilt+0x1e8>)
 8000e72:	f000 feb4 	bl	8001bde <HAL_GPIO_TogglePin>
 8000e76:	e024      	b.n	8000ec2 <HandleTilt+0x1ca>
		}
		else if(myData.y > -500 && myData.y < 500)
 8000e78:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <HandleTilt+0x1d4>)
 8000e7a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e7e:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8000e82:	dd1e      	ble.n	8000ec2 <HandleTilt+0x1ca>
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <HandleTilt+0x1d4>)
 8000e86:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e8a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e8e:	da18      	bge.n	8000ec2 <HandleTilt+0x1ca>
		{
			// NOT TILTED ON Y
			if(tiltedForward == 1)
 8000e90:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <HandleTilt+0x1d8>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d104      	bne.n	8000ea2 <HandleTilt+0x1aa>
			{
				HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000e98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e9c:	4810      	ldr	r0, [pc, #64]	; (8000ee0 <HandleTilt+0x1e8>)
 8000e9e:	f000 fe9e 	bl	8001bde <HAL_GPIO_TogglePin>
			}
			if(tiltedBack == 1)
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <HandleTilt+0x1dc>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d104      	bne.n	8000eb4 <HandleTilt+0x1bc>
			{
				HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 8000eaa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eae:	480c      	ldr	r0, [pc, #48]	; (8000ee0 <HandleTilt+0x1e8>)
 8000eb0:	f000 fe95 	bl	8001bde <HAL_GPIO_TogglePin>
			}
			tiltedForward = 0;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HandleTilt+0x1d8>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
			tiltedBack = 0;
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HandleTilt+0x1dc>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000ec0:	e7ff      	b.n	8000ec2 <HandleTilt+0x1ca>
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd90      	pop	{r4, r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000204 	.word	0x20000204
 8000ed0:	20000214 	.word	0x20000214
 8000ed4:	20000218 	.word	0x20000218
 8000ed8:	20000210 	.word	0x20000210
 8000edc:	2000020c 	.word	0x2000020c
 8000ee0:	40020c00 	.word	0x40020c00
 8000ee4:	ffffec78 	.word	0xffffec78
 8000ee8:	ffffee6c 	.word	0xffffee6c

08000eec <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b094      	sub	sp, #80	; 0x50
 8000ef0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef2:	f107 0320 	add.w	r3, r7, #32
 8000ef6:	2230      	movs	r2, #48	; 0x30
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f006 feda 	bl	8007cb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f00:	f107 030c 	add.w	r3, r7, #12
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f10:	2300      	movs	r3, #0
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	4b28      	ldr	r3, [pc, #160]	; (8000fb8 <SystemClock_Config+0xcc>)
 8000f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f18:	4a27      	ldr	r2, [pc, #156]	; (8000fb8 <SystemClock_Config+0xcc>)
 8000f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f20:	4b25      	ldr	r3, [pc, #148]	; (8000fb8 <SystemClock_Config+0xcc>)
 8000f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	4b22      	ldr	r3, [pc, #136]	; (8000fbc <SystemClock_Config+0xd0>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a21      	ldr	r2, [pc, #132]	; (8000fbc <SystemClock_Config+0xd0>)
 8000f36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f3a:	6013      	str	r3, [r2, #0]
 8000f3c:	4b1f      	ldr	r3, [pc, #124]	; (8000fbc <SystemClock_Config+0xd0>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f44:	607b      	str	r3, [r7, #4]
 8000f46:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f52:	2302      	movs	r3, #2
 8000f54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000f60:	23c0      	movs	r3, #192	; 0xc0
 8000f62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f64:	2304      	movs	r3, #4
 8000f66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000f68:	2308      	movs	r3, #8
 8000f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6c:	f107 0320 	add.w	r3, r7, #32
 8000f70:	4618      	mov	r0, r3
 8000f72:	f003 f821 	bl	8003fb8 <HAL_RCC_OscConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f7c:	f000 f820 	bl	8000fc0 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f80:	230f      	movs	r3, #15
 8000f82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f84:	2302      	movs	r3, #2
 8000f86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f8c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f96:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	2103      	movs	r1, #3
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f003 fa82 	bl	80044a8 <HAL_RCC_ClockConfig>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000faa:	f000 f809 	bl	8000fc0 <Error_Handler>
  }
}
 8000fae:	bf00      	nop
 8000fb0:	3750      	adds	r7, #80	; 0x50
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40007000 	.word	0x40007000

08000fc0 <Error_Handler>:
	}
	return len;
}

void Error_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc4:	b672      	cpsid	i
}
 8000fc6:	bf00      	nop
  __disable_irq();
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <Error_Handler+0x8>
	...

08000fcc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000fd0:	4b17      	ldr	r3, [pc, #92]	; (8001030 <MX_SPI1_Init+0x64>)
 8000fd2:	4a18      	ldr	r2, [pc, #96]	; (8001034 <MX_SPI1_Init+0x68>)
 8000fd4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fd6:	4b16      	ldr	r3, [pc, #88]	; (8001030 <MX_SPI1_Init+0x64>)
 8000fd8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fdc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fde:	4b14      	ldr	r3, [pc, #80]	; (8001030 <MX_SPI1_Init+0x64>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <MX_SPI1_Init+0x64>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fea:	4b11      	ldr	r3, [pc, #68]	; (8001030 <MX_SPI1_Init+0x64>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <MX_SPI1_Init+0x64>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <MX_SPI1_Init+0x64>)
 8000ff8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ffc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <MX_SPI1_Init+0x64>)
 8001000:	2230      	movs	r2, #48	; 0x30
 8001002:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001004:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <MX_SPI1_Init+0x64>)
 8001006:	2200      	movs	r2, #0
 8001008:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <MX_SPI1_Init+0x64>)
 800100c:	2200      	movs	r2, #0
 800100e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001010:	4b07      	ldr	r3, [pc, #28]	; (8001030 <MX_SPI1_Init+0x64>)
 8001012:	2200      	movs	r2, #0
 8001014:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <MX_SPI1_Init+0x64>)
 8001018:	220a      	movs	r2, #10
 800101a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800101c:	4804      	ldr	r0, [pc, #16]	; (8001030 <MX_SPI1_Init+0x64>)
 800101e:	f003 fd8f 	bl	8004b40 <HAL_SPI_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001028:	f7ff ffca 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000220 	.word	0x20000220
 8001034:	40013000 	.word	0x40013000

08001038 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	; 0x28
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a19      	ldr	r2, [pc, #100]	; (80010bc <HAL_SPI_MspInit+0x84>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d12b      	bne.n	80010b2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <HAL_SPI_MspInit+0x88>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	4a17      	ldr	r2, [pc, #92]	; (80010c0 <HAL_SPI_MspInit+0x88>)
 8001064:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001068:	6453      	str	r3, [r2, #68]	; 0x44
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <HAL_SPI_MspInit+0x88>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <HAL_SPI_MspInit+0x88>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	4a10      	ldr	r2, [pc, #64]	; (80010c0 <HAL_SPI_MspInit+0x88>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6313      	str	r3, [r2, #48]	; 0x30
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <HAL_SPI_MspInit+0x88>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001092:	23e0      	movs	r3, #224	; 0xe0
 8001094:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	2300      	movs	r3, #0
 80010a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010a2:	2305      	movs	r3, #5
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	4805      	ldr	r0, [pc, #20]	; (80010c4 <HAL_SPI_MspInit+0x8c>)
 80010ae:	f000 fbe1 	bl	8001874 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80010b2:	bf00      	nop
 80010b4:	3728      	adds	r7, #40	; 0x28
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40013000 	.word	0x40013000
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40020000 	.word	0x40020000

080010c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <HAL_MspInit+0x4c>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	4a0f      	ldr	r2, [pc, #60]	; (8001114 <HAL_MspInit+0x4c>)
 80010d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010dc:	6453      	str	r3, [r2, #68]	; 0x44
 80010de:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <HAL_MspInit+0x4c>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	603b      	str	r3, [r7, #0]
 80010ee:	4b09      	ldr	r3, [pc, #36]	; (8001114 <HAL_MspInit+0x4c>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	4a08      	ldr	r2, [pc, #32]	; (8001114 <HAL_MspInit+0x4c>)
 80010f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f8:	6413      	str	r3, [r2, #64]	; 0x40
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_MspInit+0x4c>)
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001102:	603b      	str	r3, [r7, #0]
 8001104:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001106:	2007      	movs	r0, #7
 8001108:	f000 fa12 	bl	8001530 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40023800 	.word	0x40023800

08001118 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800111c:	e7fe      	b.n	800111c <NMI_Handler+0x4>

0800111e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001122:	e7fe      	b.n	8001122 <HardFault_Handler+0x4>

08001124 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <MemManage_Handler+0x4>

0800112a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800112e:	e7fe      	b.n	800112e <BusFault_Handler+0x4>

08001130 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001134:	e7fe      	b.n	8001134 <UsageFault_Handler+0x4>

08001136 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001164:	f000 f8d0 	bl	8001308 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}

0800116c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001170:	4802      	ldr	r0, [pc, #8]	; (800117c <OTG_FS_IRQHandler+0x10>)
 8001172:	f000 ffb9 	bl	80020e8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	2000065c 	.word	0x2000065c

08001180 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001188:	4a14      	ldr	r2, [pc, #80]	; (80011dc <_sbrk+0x5c>)
 800118a:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <_sbrk+0x60>)
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001194:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <_sbrk+0x64>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d102      	bne.n	80011a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <_sbrk+0x64>)
 800119e:	4a12      	ldr	r2, [pc, #72]	; (80011e8 <_sbrk+0x68>)
 80011a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011a2:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <_sbrk+0x64>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d207      	bcs.n	80011c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011b0:	f006 fd38 	bl	8007c24 <__errno>
 80011b4:	4603      	mov	r3, r0
 80011b6:	220c      	movs	r2, #12
 80011b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ba:	f04f 33ff 	mov.w	r3, #4294967295
 80011be:	e009      	b.n	80011d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <_sbrk+0x64>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011c6:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <_sbrk+0x64>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	4a05      	ldr	r2, [pc, #20]	; (80011e4 <_sbrk+0x64>)
 80011d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011d2:	68fb      	ldr	r3, [r7, #12]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20020000 	.word	0x20020000
 80011e0:	00000400 	.word	0x00000400
 80011e4:	20000278 	.word	0x20000278
 80011e8:	20000970 	.word	0x20000970

080011ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <SystemInit+0x20>)
 80011f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011f6:	4a05      	ldr	r2, [pc, #20]	; (800120c <SystemInit+0x20>)
 80011f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001210:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001248 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001214:	480d      	ldr	r0, [pc, #52]	; (800124c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001216:	490e      	ldr	r1, [pc, #56]	; (8001250 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001218:	4a0e      	ldr	r2, [pc, #56]	; (8001254 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800121c:	e002      	b.n	8001224 <LoopCopyDataInit>

0800121e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001222:	3304      	adds	r3, #4

08001224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001228:	d3f9      	bcc.n	800121e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800122a:	4a0b      	ldr	r2, [pc, #44]	; (8001258 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800122c:	4c0b      	ldr	r4, [pc, #44]	; (800125c <LoopFillZerobss+0x26>)
  movs r3, #0
 800122e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001230:	e001      	b.n	8001236 <LoopFillZerobss>

08001232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001234:	3204      	adds	r2, #4

08001236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001238:	d3fb      	bcc.n	8001232 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800123a:	f7ff ffd7 	bl	80011ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800123e:	f006 fcf7 	bl	8007c30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001242:	f7ff fd2d 	bl	8000ca0 <main>
  bx  lr    
 8001246:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001248:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800124c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001250:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001254:	08007f0c 	.word	0x08007f0c
  ldr r2, =_sbss
 8001258:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 800125c:	20000970 	.word	0x20000970

08001260 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001260:	e7fe      	b.n	8001260 <ADC_IRQHandler>
	...

08001264 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001268:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <HAL_Init+0x40>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a0d      	ldr	r2, [pc, #52]	; (80012a4 <HAL_Init+0x40>)
 800126e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001272:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001274:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <HAL_Init+0x40>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a0a      	ldr	r2, [pc, #40]	; (80012a4 <HAL_Init+0x40>)
 800127a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800127e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001280:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <HAL_Init+0x40>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a07      	ldr	r2, [pc, #28]	; (80012a4 <HAL_Init+0x40>)
 8001286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800128a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800128c:	2003      	movs	r0, #3
 800128e:	f000 f94f 	bl	8001530 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001292:	2000      	movs	r0, #0
 8001294:	f000 f808 	bl	80012a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001298:	f7ff ff16 	bl	80010c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40023c00 	.word	0x40023c00

080012a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012b0:	4b12      	ldr	r3, [pc, #72]	; (80012fc <HAL_InitTick+0x54>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	4b12      	ldr	r3, [pc, #72]	; (8001300 <HAL_InitTick+0x58>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	4619      	mov	r1, r3
 80012ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012be:	fbb3 f3f1 	udiv	r3, r3, r1
 80012c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f967 	bl	800159a <HAL_SYSTICK_Config>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e00e      	b.n	80012f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b0f      	cmp	r3, #15
 80012da:	d80a      	bhi.n	80012f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012dc:	2200      	movs	r2, #0
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	f04f 30ff 	mov.w	r0, #4294967295
 80012e4:	f000 f92f 	bl	8001546 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012e8:	4a06      	ldr	r2, [pc, #24]	; (8001304 <HAL_InitTick+0x5c>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
 80012f0:	e000      	b.n	80012f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000004 	.word	0x20000004
 8001300:	2000000c 	.word	0x2000000c
 8001304:	20000008 	.word	0x20000008

08001308 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <HAL_IncTick+0x20>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	461a      	mov	r2, r3
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_IncTick+0x24>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4413      	add	r3, r2
 8001318:	4a04      	ldr	r2, [pc, #16]	; (800132c <HAL_IncTick+0x24>)
 800131a:	6013      	str	r3, [r2, #0]
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	2000000c 	.word	0x2000000c
 800132c:	2000027c 	.word	0x2000027c

08001330 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  return uwTick;
 8001334:	4b03      	ldr	r3, [pc, #12]	; (8001344 <HAL_GetTick+0x14>)
 8001336:	681b      	ldr	r3, [r3, #0]
}
 8001338:	4618      	mov	r0, r3
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	2000027c 	.word	0x2000027c

08001348 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001350:	f7ff ffee 	bl	8001330 <HAL_GetTick>
 8001354:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001360:	d005      	beq.n	800136e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001362:	4b0a      	ldr	r3, [pc, #40]	; (800138c <HAL_Delay+0x44>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	461a      	mov	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	4413      	add	r3, r2
 800136c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800136e:	bf00      	nop
 8001370:	f7ff ffde 	bl	8001330 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	429a      	cmp	r2, r3
 800137e:	d8f7      	bhi.n	8001370 <HAL_Delay+0x28>
  {
  }
}
 8001380:	bf00      	nop
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	2000000c 	.word	0x2000000c

08001390 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <__NVIC_SetPriorityGrouping+0x44>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013ac:	4013      	ands	r3, r2
 80013ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013c2:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <__NVIC_SetPriorityGrouping+0x44>)
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	60d3      	str	r3, [r2, #12]
}
 80013c8:	bf00      	nop
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013dc:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <__NVIC_GetPriorityGrouping+0x18>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	0a1b      	lsrs	r3, r3, #8
 80013e2:	f003 0307 	and.w	r3, r3, #7
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	2b00      	cmp	r3, #0
 8001404:	db0b      	blt.n	800141e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	f003 021f 	and.w	r2, r3, #31
 800140c:	4907      	ldr	r1, [pc, #28]	; (800142c <__NVIC_EnableIRQ+0x38>)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	095b      	lsrs	r3, r3, #5
 8001414:	2001      	movs	r0, #1
 8001416:	fa00 f202 	lsl.w	r2, r0, r2
 800141a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000e100 	.word	0xe000e100

08001430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	6039      	str	r1, [r7, #0]
 800143a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001440:	2b00      	cmp	r3, #0
 8001442:	db0a      	blt.n	800145a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	b2da      	uxtb	r2, r3
 8001448:	490c      	ldr	r1, [pc, #48]	; (800147c <__NVIC_SetPriority+0x4c>)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	0112      	lsls	r2, r2, #4
 8001450:	b2d2      	uxtb	r2, r2
 8001452:	440b      	add	r3, r1
 8001454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001458:	e00a      	b.n	8001470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	b2da      	uxtb	r2, r3
 800145e:	4908      	ldr	r1, [pc, #32]	; (8001480 <__NVIC_SetPriority+0x50>)
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	f003 030f 	and.w	r3, r3, #15
 8001466:	3b04      	subs	r3, #4
 8001468:	0112      	lsls	r2, r2, #4
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	440b      	add	r3, r1
 800146e:	761a      	strb	r2, [r3, #24]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000e100 	.word	0xe000e100
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001484:	b480      	push	{r7}
 8001486:	b089      	sub	sp, #36	; 0x24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	f1c3 0307 	rsb	r3, r3, #7
 800149e:	2b04      	cmp	r3, #4
 80014a0:	bf28      	it	cs
 80014a2:	2304      	movcs	r3, #4
 80014a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3304      	adds	r3, #4
 80014aa:	2b06      	cmp	r3, #6
 80014ac:	d902      	bls.n	80014b4 <NVIC_EncodePriority+0x30>
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3b03      	subs	r3, #3
 80014b2:	e000      	b.n	80014b6 <NVIC_EncodePriority+0x32>
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b8:	f04f 32ff 	mov.w	r2, #4294967295
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43da      	mvns	r2, r3
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	401a      	ands	r2, r3
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014cc:	f04f 31ff 	mov.w	r1, #4294967295
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	fa01 f303 	lsl.w	r3, r1, r3
 80014d6:	43d9      	mvns	r1, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014dc:	4313      	orrs	r3, r2
         );
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3724      	adds	r7, #36	; 0x24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
	...

080014ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014fc:	d301      	bcc.n	8001502 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014fe:	2301      	movs	r3, #1
 8001500:	e00f      	b.n	8001522 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001502:	4a0a      	ldr	r2, [pc, #40]	; (800152c <SysTick_Config+0x40>)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3b01      	subs	r3, #1
 8001508:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800150a:	210f      	movs	r1, #15
 800150c:	f04f 30ff 	mov.w	r0, #4294967295
 8001510:	f7ff ff8e 	bl	8001430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001514:	4b05      	ldr	r3, [pc, #20]	; (800152c <SysTick_Config+0x40>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800151a:	4b04      	ldr	r3, [pc, #16]	; (800152c <SysTick_Config+0x40>)
 800151c:	2207      	movs	r2, #7
 800151e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	e000e010 	.word	0xe000e010

08001530 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff ff29 	bl	8001390 <__NVIC_SetPriorityGrouping>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001546:	b580      	push	{r7, lr}
 8001548:	b086      	sub	sp, #24
 800154a:	af00      	add	r7, sp, #0
 800154c:	4603      	mov	r3, r0
 800154e:	60b9      	str	r1, [r7, #8]
 8001550:	607a      	str	r2, [r7, #4]
 8001552:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001558:	f7ff ff3e 	bl	80013d8 <__NVIC_GetPriorityGrouping>
 800155c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	68b9      	ldr	r1, [r7, #8]
 8001562:	6978      	ldr	r0, [r7, #20]
 8001564:	f7ff ff8e 	bl	8001484 <NVIC_EncodePriority>
 8001568:	4602      	mov	r2, r0
 800156a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156e:	4611      	mov	r1, r2
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff5d 	bl	8001430 <__NVIC_SetPriority>
}
 8001576:	bf00      	nop
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	4603      	mov	r3, r0
 8001586:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff31 	bl	80013f4 <__NVIC_EnableIRQ>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff ffa2 	bl	80014ec <SysTick_Config>
 80015a8:	4603      	mov	r3, r0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
	...

080015b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80015c0:	f7ff feb6 	bl	8001330 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d101      	bne.n	80015d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e099      	b.n	8001704 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2202      	movs	r2, #2
 80015d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f022 0201 	bic.w	r2, r2, #1
 80015ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015f0:	e00f      	b.n	8001612 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015f2:	f7ff fe9d 	bl	8001330 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b05      	cmp	r3, #5
 80015fe:	d908      	bls.n	8001612 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2220      	movs	r2, #32
 8001604:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2203      	movs	r2, #3
 800160a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e078      	b.n	8001704 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1e8      	bne.n	80015f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001628:	697a      	ldr	r2, [r7, #20]
 800162a:	4b38      	ldr	r3, [pc, #224]	; (800170c <HAL_DMA_Init+0x158>)
 800162c:	4013      	ands	r3, r2
 800162e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800163e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800164a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001656:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	4313      	orrs	r3, r2
 8001662:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001668:	2b04      	cmp	r3, #4
 800166a:	d107      	bne.n	800167c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001674:	4313      	orrs	r3, r2
 8001676:	697a      	ldr	r2, [r7, #20]
 8001678:	4313      	orrs	r3, r2
 800167a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	697a      	ldr	r2, [r7, #20]
 8001682:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	f023 0307 	bic.w	r3, r3, #7
 8001692:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001698:	697a      	ldr	r2, [r7, #20]
 800169a:	4313      	orrs	r3, r2
 800169c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	d117      	bne.n	80016d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d00e      	beq.n	80016d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f000 f85f 	bl	800177c <DMA_CheckFifoParam>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d008      	beq.n	80016d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2240      	movs	r2, #64	; 0x40
 80016c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2201      	movs	r2, #1
 80016ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80016d2:	2301      	movs	r3, #1
 80016d4:	e016      	b.n	8001704 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f000 f816 	bl	8001710 <DMA_CalcBaseAndBitshift>
 80016e4:	4603      	mov	r3, r0
 80016e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ec:	223f      	movs	r2, #63	; 0x3f
 80016ee:	409a      	lsls	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2201      	movs	r2, #1
 80016fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3718      	adds	r7, #24
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	f010803f 	.word	0xf010803f

08001710 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	b2db      	uxtb	r3, r3
 800171e:	3b10      	subs	r3, #16
 8001720:	4a14      	ldr	r2, [pc, #80]	; (8001774 <DMA_CalcBaseAndBitshift+0x64>)
 8001722:	fba2 2303 	umull	r2, r3, r2, r3
 8001726:	091b      	lsrs	r3, r3, #4
 8001728:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800172a:	4a13      	ldr	r2, [pc, #76]	; (8001778 <DMA_CalcBaseAndBitshift+0x68>)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4413      	add	r3, r2
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	461a      	mov	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2b03      	cmp	r3, #3
 800173c:	d909      	bls.n	8001752 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001746:	f023 0303 	bic.w	r3, r3, #3
 800174a:	1d1a      	adds	r2, r3, #4
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	659a      	str	r2, [r3, #88]	; 0x58
 8001750:	e007      	b.n	8001762 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800175a:	f023 0303 	bic.w	r3, r3, #3
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001766:	4618      	mov	r0, r3
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	aaaaaaab 	.word	0xaaaaaaab
 8001778:	08007ef4 	.word	0x08007ef4

0800177c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001784:	2300      	movs	r3, #0
 8001786:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d11f      	bne.n	80017d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	2b03      	cmp	r3, #3
 800179a:	d856      	bhi.n	800184a <DMA_CheckFifoParam+0xce>
 800179c:	a201      	add	r2, pc, #4	; (adr r2, 80017a4 <DMA_CheckFifoParam+0x28>)
 800179e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a2:	bf00      	nop
 80017a4:	080017b5 	.word	0x080017b5
 80017a8:	080017c7 	.word	0x080017c7
 80017ac:	080017b5 	.word	0x080017b5
 80017b0:	0800184b 	.word	0x0800184b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d046      	beq.n	800184e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017c4:	e043      	b.n	800184e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017ce:	d140      	bne.n	8001852 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017d4:	e03d      	b.n	8001852 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017de:	d121      	bne.n	8001824 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	d837      	bhi.n	8001856 <DMA_CheckFifoParam+0xda>
 80017e6:	a201      	add	r2, pc, #4	; (adr r2, 80017ec <DMA_CheckFifoParam+0x70>)
 80017e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ec:	080017fd 	.word	0x080017fd
 80017f0:	08001803 	.word	0x08001803
 80017f4:	080017fd 	.word	0x080017fd
 80017f8:	08001815 	.word	0x08001815
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	73fb      	strb	r3, [r7, #15]
      break;
 8001800:	e030      	b.n	8001864 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001806:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d025      	beq.n	800185a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001812:	e022      	b.n	800185a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001818:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800181c:	d11f      	bne.n	800185e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001822:	e01c      	b.n	800185e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	2b02      	cmp	r3, #2
 8001828:	d903      	bls.n	8001832 <DMA_CheckFifoParam+0xb6>
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	2b03      	cmp	r3, #3
 800182e:	d003      	beq.n	8001838 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001830:	e018      	b.n	8001864 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	73fb      	strb	r3, [r7, #15]
      break;
 8001836:	e015      	b.n	8001864 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d00e      	beq.n	8001862 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	73fb      	strb	r3, [r7, #15]
      break;
 8001848:	e00b      	b.n	8001862 <DMA_CheckFifoParam+0xe6>
      break;
 800184a:	bf00      	nop
 800184c:	e00a      	b.n	8001864 <DMA_CheckFifoParam+0xe8>
      break;
 800184e:	bf00      	nop
 8001850:	e008      	b.n	8001864 <DMA_CheckFifoParam+0xe8>
      break;
 8001852:	bf00      	nop
 8001854:	e006      	b.n	8001864 <DMA_CheckFifoParam+0xe8>
      break;
 8001856:	bf00      	nop
 8001858:	e004      	b.n	8001864 <DMA_CheckFifoParam+0xe8>
      break;
 800185a:	bf00      	nop
 800185c:	e002      	b.n	8001864 <DMA_CheckFifoParam+0xe8>
      break;   
 800185e:	bf00      	nop
 8001860:	e000      	b.n	8001864 <DMA_CheckFifoParam+0xe8>
      break;
 8001862:	bf00      	nop
    }
  } 
  
  return status; 
 8001864:	7bfb      	ldrb	r3, [r7, #15]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop

08001874 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001874:	b480      	push	{r7}
 8001876:	b089      	sub	sp, #36	; 0x24
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001886:	2300      	movs	r3, #0
 8001888:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
 800188e:	e16b      	b.n	8001b68 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001890:	2201      	movs	r2, #1
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	4013      	ands	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	f040 815a 	bne.w	8001b62 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d005      	beq.n	80018c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d130      	bne.n	8001928 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	2203      	movs	r2, #3
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4013      	ands	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	68da      	ldr	r2, [r3, #12]
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018fc:	2201      	movs	r2, #1
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	091b      	lsrs	r3, r3, #4
 8001912:	f003 0201 	and.w	r2, r3, #1
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4313      	orrs	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	2b03      	cmp	r3, #3
 8001932:	d017      	beq.n	8001964 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	2203      	movs	r2, #3
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4013      	ands	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d123      	bne.n	80019b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	08da      	lsrs	r2, r3, #3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3208      	adds	r2, #8
 8001978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800197c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	220f      	movs	r2, #15
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	691a      	ldr	r2, [r3, #16]
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	08da      	lsrs	r2, r3, #3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3208      	adds	r2, #8
 80019b2:	69b9      	ldr	r1, [r7, #24]
 80019b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	2203      	movs	r2, #3
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 0203 	and.w	r2, r3, #3
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 80b4 	beq.w	8001b62 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	4b60      	ldr	r3, [pc, #384]	; (8001b80 <HAL_GPIO_Init+0x30c>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	4a5f      	ldr	r2, [pc, #380]	; (8001b80 <HAL_GPIO_Init+0x30c>)
 8001a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a08:	6453      	str	r3, [r2, #68]	; 0x44
 8001a0a:	4b5d      	ldr	r3, [pc, #372]	; (8001b80 <HAL_GPIO_Init+0x30c>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a16:	4a5b      	ldr	r2, [pc, #364]	; (8001b84 <HAL_GPIO_Init+0x310>)
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	089b      	lsrs	r3, r3, #2
 8001a1c:	3302      	adds	r3, #2
 8001a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	220f      	movs	r2, #15
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43db      	mvns	r3, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4013      	ands	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a52      	ldr	r2, [pc, #328]	; (8001b88 <HAL_GPIO_Init+0x314>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d02b      	beq.n	8001a9a <HAL_GPIO_Init+0x226>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a51      	ldr	r2, [pc, #324]	; (8001b8c <HAL_GPIO_Init+0x318>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d025      	beq.n	8001a96 <HAL_GPIO_Init+0x222>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a50      	ldr	r2, [pc, #320]	; (8001b90 <HAL_GPIO_Init+0x31c>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d01f      	beq.n	8001a92 <HAL_GPIO_Init+0x21e>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a4f      	ldr	r2, [pc, #316]	; (8001b94 <HAL_GPIO_Init+0x320>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d019      	beq.n	8001a8e <HAL_GPIO_Init+0x21a>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a4e      	ldr	r2, [pc, #312]	; (8001b98 <HAL_GPIO_Init+0x324>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d013      	beq.n	8001a8a <HAL_GPIO_Init+0x216>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a4d      	ldr	r2, [pc, #308]	; (8001b9c <HAL_GPIO_Init+0x328>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d00d      	beq.n	8001a86 <HAL_GPIO_Init+0x212>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a4c      	ldr	r2, [pc, #304]	; (8001ba0 <HAL_GPIO_Init+0x32c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d007      	beq.n	8001a82 <HAL_GPIO_Init+0x20e>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a4b      	ldr	r2, [pc, #300]	; (8001ba4 <HAL_GPIO_Init+0x330>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d101      	bne.n	8001a7e <HAL_GPIO_Init+0x20a>
 8001a7a:	2307      	movs	r3, #7
 8001a7c:	e00e      	b.n	8001a9c <HAL_GPIO_Init+0x228>
 8001a7e:	2308      	movs	r3, #8
 8001a80:	e00c      	b.n	8001a9c <HAL_GPIO_Init+0x228>
 8001a82:	2306      	movs	r3, #6
 8001a84:	e00a      	b.n	8001a9c <HAL_GPIO_Init+0x228>
 8001a86:	2305      	movs	r3, #5
 8001a88:	e008      	b.n	8001a9c <HAL_GPIO_Init+0x228>
 8001a8a:	2304      	movs	r3, #4
 8001a8c:	e006      	b.n	8001a9c <HAL_GPIO_Init+0x228>
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e004      	b.n	8001a9c <HAL_GPIO_Init+0x228>
 8001a92:	2302      	movs	r3, #2
 8001a94:	e002      	b.n	8001a9c <HAL_GPIO_Init+0x228>
 8001a96:	2301      	movs	r3, #1
 8001a98:	e000      	b.n	8001a9c <HAL_GPIO_Init+0x228>
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	69fa      	ldr	r2, [r7, #28]
 8001a9e:	f002 0203 	and.w	r2, r2, #3
 8001aa2:	0092      	lsls	r2, r2, #2
 8001aa4:	4093      	lsls	r3, r2
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aac:	4935      	ldr	r1, [pc, #212]	; (8001b84 <HAL_GPIO_Init+0x310>)
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	089b      	lsrs	r3, r3, #2
 8001ab2:	3302      	adds	r3, #2
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aba:	4b3b      	ldr	r3, [pc, #236]	; (8001ba8 <HAL_GPIO_Init+0x334>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ade:	4a32      	ldr	r2, [pc, #200]	; (8001ba8 <HAL_GPIO_Init+0x334>)
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ae4:	4b30      	ldr	r3, [pc, #192]	; (8001ba8 <HAL_GPIO_Init+0x334>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b08:	4a27      	ldr	r2, [pc, #156]	; (8001ba8 <HAL_GPIO_Init+0x334>)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b0e:	4b26      	ldr	r3, [pc, #152]	; (8001ba8 <HAL_GPIO_Init+0x334>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	43db      	mvns	r3, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b32:	4a1d      	ldr	r2, [pc, #116]	; (8001ba8 <HAL_GPIO_Init+0x334>)
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b38:	4b1b      	ldr	r3, [pc, #108]	; (8001ba8 <HAL_GPIO_Init+0x334>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b5c:	4a12      	ldr	r2, [pc, #72]	; (8001ba8 <HAL_GPIO_Init+0x334>)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3301      	adds	r3, #1
 8001b66:	61fb      	str	r3, [r7, #28]
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	2b0f      	cmp	r3, #15
 8001b6c:	f67f ae90 	bls.w	8001890 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b70:	bf00      	nop
 8001b72:	bf00      	nop
 8001b74:	3724      	adds	r7, #36	; 0x24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40013800 	.word	0x40013800
 8001b88:	40020000 	.word	0x40020000
 8001b8c:	40020400 	.word	0x40020400
 8001b90:	40020800 	.word	0x40020800
 8001b94:	40020c00 	.word	0x40020c00
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40021400 	.word	0x40021400
 8001ba0:	40021800 	.word	0x40021800
 8001ba4:	40021c00 	.word	0x40021c00
 8001ba8:	40013c00 	.word	0x40013c00

08001bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	807b      	strh	r3, [r7, #2]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bbc:	787b      	ldrb	r3, [r7, #1]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bc2:	887a      	ldrh	r2, [r7, #2]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bc8:	e003      	b.n	8001bd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bca:	887b      	ldrh	r3, [r7, #2]
 8001bcc:	041a      	lsls	r2, r3, #16
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	619a      	str	r2, [r3, #24]
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b085      	sub	sp, #20
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
 8001be6:	460b      	mov	r3, r1
 8001be8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bf0:	887a      	ldrh	r2, [r7, #2]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	041a      	lsls	r2, r3, #16
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	43d9      	mvns	r1, r3
 8001bfc:	887b      	ldrh	r3, [r7, #2]
 8001bfe:	400b      	ands	r3, r1
 8001c00:	431a      	orrs	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	619a      	str	r2, [r3, #24]
}
 8001c06:	bf00      	nop
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001c12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c14:	b08f      	sub	sp, #60	; 0x3c
 8001c16:	af0a      	add	r7, sp, #40	; 0x28
 8001c18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e054      	b.n	8001cce <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d106      	bne.n	8001c44 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f005 fd94 	bl	800776c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2203      	movs	r2, #3
 8001c48:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d102      	bne.n	8001c5e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f003 fd86 	bl	8005774 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	603b      	str	r3, [r7, #0]
 8001c6e:	687e      	ldr	r6, [r7, #4]
 8001c70:	466d      	mov	r5, sp
 8001c72:	f106 0410 	add.w	r4, r6, #16
 8001c76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c7e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c82:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c86:	1d33      	adds	r3, r6, #4
 8001c88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c8a:	6838      	ldr	r0, [r7, #0]
 8001c8c:	f003 fd00 	bl	8005690 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2101      	movs	r1, #1
 8001c96:	4618      	mov	r0, r3
 8001c98:	f003 fd7d 	bl	8005796 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	603b      	str	r3, [r7, #0]
 8001ca2:	687e      	ldr	r6, [r7, #4]
 8001ca4:	466d      	mov	r5, sp
 8001ca6:	f106 0410 	add.w	r4, r6, #16
 8001caa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cb2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cb6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cba:	1d33      	adds	r3, r6, #4
 8001cbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cbe:	6838      	ldr	r0, [r7, #0]
 8001cc0:	f003 ff06 	bl	8005ad0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cd6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001cd6:	b590      	push	{r4, r7, lr}
 8001cd8:	b089      	sub	sp, #36	; 0x24
 8001cda:	af04      	add	r7, sp, #16
 8001cdc:	6078      	str	r0, [r7, #4]
 8001cde:	4608      	mov	r0, r1
 8001ce0:	4611      	mov	r1, r2
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	70fb      	strb	r3, [r7, #3]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	70bb      	strb	r3, [r7, #2]
 8001cec:	4613      	mov	r3, r2
 8001cee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d101      	bne.n	8001cfe <HAL_HCD_HC_Init+0x28>
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e076      	b.n	8001dec <HAL_HCD_HC_Init+0x116>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2201      	movs	r2, #1
 8001d02:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001d06:	78fb      	ldrb	r3, [r7, #3]
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	212c      	movs	r1, #44	; 0x2c
 8001d0c:	fb01 f303 	mul.w	r3, r1, r3
 8001d10:	4413      	add	r3, r2
 8001d12:	333d      	adds	r3, #61	; 0x3d
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001d18:	78fb      	ldrb	r3, [r7, #3]
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	212c      	movs	r1, #44	; 0x2c
 8001d1e:	fb01 f303 	mul.w	r3, r1, r3
 8001d22:	4413      	add	r3, r2
 8001d24:	3338      	adds	r3, #56	; 0x38
 8001d26:	787a      	ldrb	r2, [r7, #1]
 8001d28:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001d2a:	78fb      	ldrb	r3, [r7, #3]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	212c      	movs	r1, #44	; 0x2c
 8001d30:	fb01 f303 	mul.w	r3, r1, r3
 8001d34:	4413      	add	r3, r2
 8001d36:	3340      	adds	r3, #64	; 0x40
 8001d38:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001d3a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d3c:	78fb      	ldrb	r3, [r7, #3]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	212c      	movs	r1, #44	; 0x2c
 8001d42:	fb01 f303 	mul.w	r3, r1, r3
 8001d46:	4413      	add	r3, r2
 8001d48:	3339      	adds	r3, #57	; 0x39
 8001d4a:	78fa      	ldrb	r2, [r7, #3]
 8001d4c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001d4e:	78fb      	ldrb	r3, [r7, #3]
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	212c      	movs	r1, #44	; 0x2c
 8001d54:	fb01 f303 	mul.w	r3, r1, r3
 8001d58:	4413      	add	r3, r2
 8001d5a:	333f      	adds	r3, #63	; 0x3f
 8001d5c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001d60:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001d62:	78fb      	ldrb	r3, [r7, #3]
 8001d64:	78ba      	ldrb	r2, [r7, #2]
 8001d66:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d6a:	b2d0      	uxtb	r0, r2
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	212c      	movs	r1, #44	; 0x2c
 8001d70:	fb01 f303 	mul.w	r3, r1, r3
 8001d74:	4413      	add	r3, r2
 8001d76:	333a      	adds	r3, #58	; 0x3a
 8001d78:	4602      	mov	r2, r0
 8001d7a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001d7c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	da09      	bge.n	8001d98 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001d84:	78fb      	ldrb	r3, [r7, #3]
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	212c      	movs	r1, #44	; 0x2c
 8001d8a:	fb01 f303 	mul.w	r3, r1, r3
 8001d8e:	4413      	add	r3, r2
 8001d90:	333b      	adds	r3, #59	; 0x3b
 8001d92:	2201      	movs	r2, #1
 8001d94:	701a      	strb	r2, [r3, #0]
 8001d96:	e008      	b.n	8001daa <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001d98:	78fb      	ldrb	r3, [r7, #3]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	212c      	movs	r1, #44	; 0x2c
 8001d9e:	fb01 f303 	mul.w	r3, r1, r3
 8001da2:	4413      	add	r3, r2
 8001da4:	333b      	adds	r3, #59	; 0x3b
 8001da6:	2200      	movs	r2, #0
 8001da8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001daa:	78fb      	ldrb	r3, [r7, #3]
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	212c      	movs	r1, #44	; 0x2c
 8001db0:	fb01 f303 	mul.w	r3, r1, r3
 8001db4:	4413      	add	r3, r2
 8001db6:	333c      	adds	r3, #60	; 0x3c
 8001db8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001dbc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6818      	ldr	r0, [r3, #0]
 8001dc2:	787c      	ldrb	r4, [r7, #1]
 8001dc4:	78ba      	ldrb	r2, [r7, #2]
 8001dc6:	78f9      	ldrb	r1, [r7, #3]
 8001dc8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001dca:	9302      	str	r3, [sp, #8]
 8001dcc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001dd0:	9301      	str	r3, [sp, #4]
 8001dd2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	4623      	mov	r3, r4
 8001dda:	f003 ffd5 	bl	8005d88 <USB_HC_Init>
 8001dde:	4603      	mov	r3, r0
 8001de0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd90      	pop	{r4, r7, pc}

08001df4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001e00:	2300      	movs	r3, #0
 8001e02:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d101      	bne.n	8001e12 <HAL_HCD_HC_Halt+0x1e>
 8001e0e:	2302      	movs	r3, #2
 8001e10:	e00f      	b.n	8001e32 <HAL_HCD_HC_Halt+0x3e>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	78fa      	ldrb	r2, [r7, #3]
 8001e20:	4611      	mov	r1, r2
 8001e22:	4618      	mov	r0, r3
 8001e24:	f004 fa25 	bl	8006272 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	4608      	mov	r0, r1
 8001e46:	4611      	mov	r1, r2
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	70fb      	strb	r3, [r7, #3]
 8001e4e:	460b      	mov	r3, r1
 8001e50:	70bb      	strb	r3, [r7, #2]
 8001e52:	4613      	mov	r3, r2
 8001e54:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001e56:	78fb      	ldrb	r3, [r7, #3]
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	212c      	movs	r1, #44	; 0x2c
 8001e5c:	fb01 f303 	mul.w	r3, r1, r3
 8001e60:	4413      	add	r3, r2
 8001e62:	333b      	adds	r3, #59	; 0x3b
 8001e64:	78ba      	ldrb	r2, [r7, #2]
 8001e66:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001e68:	78fb      	ldrb	r3, [r7, #3]
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	212c      	movs	r1, #44	; 0x2c
 8001e6e:	fb01 f303 	mul.w	r3, r1, r3
 8001e72:	4413      	add	r3, r2
 8001e74:	333f      	adds	r3, #63	; 0x3f
 8001e76:	787a      	ldrb	r2, [r7, #1]
 8001e78:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001e7a:	7c3b      	ldrb	r3, [r7, #16]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d112      	bne.n	8001ea6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001e80:	78fb      	ldrb	r3, [r7, #3]
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	212c      	movs	r1, #44	; 0x2c
 8001e86:	fb01 f303 	mul.w	r3, r1, r3
 8001e8a:	4413      	add	r3, r2
 8001e8c:	3342      	adds	r3, #66	; 0x42
 8001e8e:	2203      	movs	r2, #3
 8001e90:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001e92:	78fb      	ldrb	r3, [r7, #3]
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	212c      	movs	r1, #44	; 0x2c
 8001e98:	fb01 f303 	mul.w	r3, r1, r3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	333d      	adds	r3, #61	; 0x3d
 8001ea0:	7f3a      	ldrb	r2, [r7, #28]
 8001ea2:	701a      	strb	r2, [r3, #0]
 8001ea4:	e008      	b.n	8001eb8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ea6:	78fb      	ldrb	r3, [r7, #3]
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	212c      	movs	r1, #44	; 0x2c
 8001eac:	fb01 f303 	mul.w	r3, r1, r3
 8001eb0:	4413      	add	r3, r2
 8001eb2:	3342      	adds	r3, #66	; 0x42
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001eb8:	787b      	ldrb	r3, [r7, #1]
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	f200 80c6 	bhi.w	800204c <HAL_HCD_HC_SubmitRequest+0x210>
 8001ec0:	a201      	add	r2, pc, #4	; (adr r2, 8001ec8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec6:	bf00      	nop
 8001ec8:	08001ed9 	.word	0x08001ed9
 8001ecc:	08002039 	.word	0x08002039
 8001ed0:	08001f3d 	.word	0x08001f3d
 8001ed4:	08001fbb 	.word	0x08001fbb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001ed8:	7c3b      	ldrb	r3, [r7, #16]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	f040 80b8 	bne.w	8002050 <HAL_HCD_HC_SubmitRequest+0x214>
 8001ee0:	78bb      	ldrb	r3, [r7, #2]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f040 80b4 	bne.w	8002050 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001ee8:	8b3b      	ldrh	r3, [r7, #24]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d108      	bne.n	8001f00 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001eee:	78fb      	ldrb	r3, [r7, #3]
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	212c      	movs	r1, #44	; 0x2c
 8001ef4:	fb01 f303 	mul.w	r3, r1, r3
 8001ef8:	4413      	add	r3, r2
 8001efa:	3355      	adds	r3, #85	; 0x55
 8001efc:	2201      	movs	r2, #1
 8001efe:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f00:	78fb      	ldrb	r3, [r7, #3]
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	212c      	movs	r1, #44	; 0x2c
 8001f06:	fb01 f303 	mul.w	r3, r1, r3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	3355      	adds	r3, #85	; 0x55
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d109      	bne.n	8001f28 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f14:	78fb      	ldrb	r3, [r7, #3]
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	212c      	movs	r1, #44	; 0x2c
 8001f1a:	fb01 f303 	mul.w	r3, r1, r3
 8001f1e:	4413      	add	r3, r2
 8001f20:	3342      	adds	r3, #66	; 0x42
 8001f22:	2200      	movs	r2, #0
 8001f24:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001f26:	e093      	b.n	8002050 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f28:	78fb      	ldrb	r3, [r7, #3]
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	212c      	movs	r1, #44	; 0x2c
 8001f2e:	fb01 f303 	mul.w	r3, r1, r3
 8001f32:	4413      	add	r3, r2
 8001f34:	3342      	adds	r3, #66	; 0x42
 8001f36:	2202      	movs	r2, #2
 8001f38:	701a      	strb	r2, [r3, #0]
      break;
 8001f3a:	e089      	b.n	8002050 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001f3c:	78bb      	ldrb	r3, [r7, #2]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d11d      	bne.n	8001f7e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f42:	78fb      	ldrb	r3, [r7, #3]
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	212c      	movs	r1, #44	; 0x2c
 8001f48:	fb01 f303 	mul.w	r3, r1, r3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3355      	adds	r3, #85	; 0x55
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d109      	bne.n	8001f6a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f56:	78fb      	ldrb	r3, [r7, #3]
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	212c      	movs	r1, #44	; 0x2c
 8001f5c:	fb01 f303 	mul.w	r3, r1, r3
 8001f60:	4413      	add	r3, r2
 8001f62:	3342      	adds	r3, #66	; 0x42
 8001f64:	2200      	movs	r2, #0
 8001f66:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001f68:	e073      	b.n	8002052 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f6a:	78fb      	ldrb	r3, [r7, #3]
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	212c      	movs	r1, #44	; 0x2c
 8001f70:	fb01 f303 	mul.w	r3, r1, r3
 8001f74:	4413      	add	r3, r2
 8001f76:	3342      	adds	r3, #66	; 0x42
 8001f78:	2202      	movs	r2, #2
 8001f7a:	701a      	strb	r2, [r3, #0]
      break;
 8001f7c:	e069      	b.n	8002052 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001f7e:	78fb      	ldrb	r3, [r7, #3]
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	212c      	movs	r1, #44	; 0x2c
 8001f84:	fb01 f303 	mul.w	r3, r1, r3
 8001f88:	4413      	add	r3, r2
 8001f8a:	3354      	adds	r3, #84	; 0x54
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d109      	bne.n	8001fa6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f92:	78fb      	ldrb	r3, [r7, #3]
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	212c      	movs	r1, #44	; 0x2c
 8001f98:	fb01 f303 	mul.w	r3, r1, r3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3342      	adds	r3, #66	; 0x42
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
      break;
 8001fa4:	e055      	b.n	8002052 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fa6:	78fb      	ldrb	r3, [r7, #3]
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	212c      	movs	r1, #44	; 0x2c
 8001fac:	fb01 f303 	mul.w	r3, r1, r3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3342      	adds	r3, #66	; 0x42
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	701a      	strb	r2, [r3, #0]
      break;
 8001fb8:	e04b      	b.n	8002052 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001fba:	78bb      	ldrb	r3, [r7, #2]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d11d      	bne.n	8001ffc <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001fc0:	78fb      	ldrb	r3, [r7, #3]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	212c      	movs	r1, #44	; 0x2c
 8001fc6:	fb01 f303 	mul.w	r3, r1, r3
 8001fca:	4413      	add	r3, r2
 8001fcc:	3355      	adds	r3, #85	; 0x55
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d109      	bne.n	8001fe8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fd4:	78fb      	ldrb	r3, [r7, #3]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	212c      	movs	r1, #44	; 0x2c
 8001fda:	fb01 f303 	mul.w	r3, r1, r3
 8001fde:	4413      	add	r3, r2
 8001fe0:	3342      	adds	r3, #66	; 0x42
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001fe6:	e034      	b.n	8002052 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fe8:	78fb      	ldrb	r3, [r7, #3]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	212c      	movs	r1, #44	; 0x2c
 8001fee:	fb01 f303 	mul.w	r3, r1, r3
 8001ff2:	4413      	add	r3, r2
 8001ff4:	3342      	adds	r3, #66	; 0x42
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	701a      	strb	r2, [r3, #0]
      break;
 8001ffa:	e02a      	b.n	8002052 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ffc:	78fb      	ldrb	r3, [r7, #3]
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	212c      	movs	r1, #44	; 0x2c
 8002002:	fb01 f303 	mul.w	r3, r1, r3
 8002006:	4413      	add	r3, r2
 8002008:	3354      	adds	r3, #84	; 0x54
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d109      	bne.n	8002024 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	212c      	movs	r1, #44	; 0x2c
 8002016:	fb01 f303 	mul.w	r3, r1, r3
 800201a:	4413      	add	r3, r2
 800201c:	3342      	adds	r3, #66	; 0x42
 800201e:	2200      	movs	r2, #0
 8002020:	701a      	strb	r2, [r3, #0]
      break;
 8002022:	e016      	b.n	8002052 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002024:	78fb      	ldrb	r3, [r7, #3]
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	212c      	movs	r1, #44	; 0x2c
 800202a:	fb01 f303 	mul.w	r3, r1, r3
 800202e:	4413      	add	r3, r2
 8002030:	3342      	adds	r3, #66	; 0x42
 8002032:	2202      	movs	r2, #2
 8002034:	701a      	strb	r2, [r3, #0]
      break;
 8002036:	e00c      	b.n	8002052 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002038:	78fb      	ldrb	r3, [r7, #3]
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	212c      	movs	r1, #44	; 0x2c
 800203e:	fb01 f303 	mul.w	r3, r1, r3
 8002042:	4413      	add	r3, r2
 8002044:	3342      	adds	r3, #66	; 0x42
 8002046:	2200      	movs	r2, #0
 8002048:	701a      	strb	r2, [r3, #0]
      break;
 800204a:	e002      	b.n	8002052 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800204c:	bf00      	nop
 800204e:	e000      	b.n	8002052 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002050:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002052:	78fb      	ldrb	r3, [r7, #3]
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	212c      	movs	r1, #44	; 0x2c
 8002058:	fb01 f303 	mul.w	r3, r1, r3
 800205c:	4413      	add	r3, r2
 800205e:	3344      	adds	r3, #68	; 0x44
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002064:	78fb      	ldrb	r3, [r7, #3]
 8002066:	8b3a      	ldrh	r2, [r7, #24]
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	202c      	movs	r0, #44	; 0x2c
 800206c:	fb00 f303 	mul.w	r3, r0, r3
 8002070:	440b      	add	r3, r1
 8002072:	334c      	adds	r3, #76	; 0x4c
 8002074:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002076:	78fb      	ldrb	r3, [r7, #3]
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	212c      	movs	r1, #44	; 0x2c
 800207c:	fb01 f303 	mul.w	r3, r1, r3
 8002080:	4413      	add	r3, r2
 8002082:	3360      	adds	r3, #96	; 0x60
 8002084:	2200      	movs	r2, #0
 8002086:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002088:	78fb      	ldrb	r3, [r7, #3]
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	212c      	movs	r1, #44	; 0x2c
 800208e:	fb01 f303 	mul.w	r3, r1, r3
 8002092:	4413      	add	r3, r2
 8002094:	3350      	adds	r3, #80	; 0x50
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800209a:	78fb      	ldrb	r3, [r7, #3]
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	212c      	movs	r1, #44	; 0x2c
 80020a0:	fb01 f303 	mul.w	r3, r1, r3
 80020a4:	4413      	add	r3, r2
 80020a6:	3339      	adds	r3, #57	; 0x39
 80020a8:	78fa      	ldrb	r2, [r7, #3]
 80020aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80020ac:	78fb      	ldrb	r3, [r7, #3]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	212c      	movs	r1, #44	; 0x2c
 80020b2:	fb01 f303 	mul.w	r3, r1, r3
 80020b6:	4413      	add	r3, r2
 80020b8:	3361      	adds	r3, #97	; 0x61
 80020ba:	2200      	movs	r2, #0
 80020bc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6818      	ldr	r0, [r3, #0]
 80020c2:	78fb      	ldrb	r3, [r7, #3]
 80020c4:	222c      	movs	r2, #44	; 0x2c
 80020c6:	fb02 f303 	mul.w	r3, r2, r3
 80020ca:	3338      	adds	r3, #56	; 0x38
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	18d1      	adds	r1, r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	461a      	mov	r2, r3
 80020d8:	f003 ff78 	bl	8005fcc <USB_HC_StartXfer>
 80020dc:	4603      	mov	r3, r0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop

080020e8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f003 fca3 	bl	8005a4a <USB_GetMode>
 8002104:	4603      	mov	r3, r0
 8002106:	2b01      	cmp	r3, #1
 8002108:	f040 80f6 	bne.w	80022f8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f003 fc87 	bl	8005a24 <USB_ReadInterrupts>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 80ec 	beq.w	80022f6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f003 fc7e 	bl	8005a24 <USB_ReadInterrupts>
 8002128:	4603      	mov	r3, r0
 800212a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800212e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002132:	d104      	bne.n	800213e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800213c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f003 fc6e 	bl	8005a24 <USB_ReadInterrupts>
 8002148:	4603      	mov	r3, r0
 800214a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800214e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002152:	d104      	bne.n	800215e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800215c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f003 fc5e 	bl	8005a24 <USB_ReadInterrupts>
 8002168:	4603      	mov	r3, r0
 800216a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800216e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002172:	d104      	bne.n	800217e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800217c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f003 fc4e 	bl	8005a24 <USB_ReadInterrupts>
 8002188:	4603      	mov	r3, r0
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b02      	cmp	r3, #2
 8002190:	d103      	bne.n	800219a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2202      	movs	r2, #2
 8002198:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f003 fc40 	bl	8005a24 <USB_ReadInterrupts>
 80021a4:	4603      	mov	r3, r0
 80021a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021ae:	d11c      	bne.n	80021ea <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80021b8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10f      	bne.n	80021ea <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80021ca:	2110      	movs	r1, #16
 80021cc:	6938      	ldr	r0, [r7, #16]
 80021ce:	f003 fb2f 	bl	8005830 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80021d2:	6938      	ldr	r0, [r7, #16]
 80021d4:	f003 fb60 	bl	8005898 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2101      	movs	r1, #1
 80021de:	4618      	mov	r0, r3
 80021e0:	f003 fd36 	bl	8005c50 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f005 fb3f 	bl	8007868 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f003 fc18 	bl	8005a24 <USB_ReadInterrupts>
 80021f4:	4603      	mov	r3, r0
 80021f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021fe:	d102      	bne.n	8002206 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f001 f882 	bl	800330a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f003 fc0a 	bl	8005a24 <USB_ReadInterrupts>
 8002210:	4603      	mov	r3, r0
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	2b08      	cmp	r3, #8
 8002218:	d106      	bne.n	8002228 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f005 fb08 	bl	8007830 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2208      	movs	r2, #8
 8002226:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f003 fbf9 	bl	8005a24 <USB_ReadInterrupts>
 8002232:	4603      	mov	r3, r0
 8002234:	f003 0310 	and.w	r3, r3, #16
 8002238:	2b10      	cmp	r3, #16
 800223a:	d101      	bne.n	8002240 <HAL_HCD_IRQHandler+0x158>
 800223c:	2301      	movs	r3, #1
 800223e:	e000      	b.n	8002242 <HAL_HCD_IRQHandler+0x15a>
 8002240:	2300      	movs	r3, #0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d012      	beq.n	800226c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	699a      	ldr	r2, [r3, #24]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 0210 	bic.w	r2, r2, #16
 8002254:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 ff85 	bl	8003166 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	699a      	ldr	r2, [r3, #24]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f042 0210 	orr.w	r2, r2, #16
 800226a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f003 fbd7 	bl	8005a24 <USB_ReadInterrupts>
 8002276:	4603      	mov	r3, r0
 8002278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002280:	d13a      	bne.n	80022f8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f003 ffe2 	bl	8006250 <USB_HC_ReadInterrupt>
 800228c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]
 8002292:	e025      	b.n	80022e0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	fa22 f303 	lsr.w	r3, r2, r3
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d018      	beq.n	80022da <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	015a      	lsls	r2, r3, #5
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4413      	add	r3, r2
 80022b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022be:	d106      	bne.n	80022ce <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	4619      	mov	r1, r3
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 f88f 	bl	80023ea <HCD_HC_IN_IRQHandler>
 80022cc:	e005      	b.n	80022da <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	4619      	mov	r1, r3
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 fbdd 	bl	8002a94 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	3301      	adds	r3, #1
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d3d4      	bcc.n	8002294 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022f2:	615a      	str	r2, [r3, #20]
 80022f4:	e000      	b.n	80022f8 <HAL_HCD_IRQHandler+0x210>
      return;
 80022f6:	bf00      	nop
    }
  }
}
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b082      	sub	sp, #8
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800230c:	2b01      	cmp	r3, #1
 800230e:	d101      	bne.n	8002314 <HAL_HCD_Start+0x16>
 8002310:	2302      	movs	r3, #2
 8002312:	e013      	b.n	800233c <HAL_HCD_Start+0x3e>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2101      	movs	r1, #1
 8002322:	4618      	mov	r0, r3
 8002324:	f003 fcce 	bl	8005cc4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f003 fa10 	bl	8005752 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002352:	2b01      	cmp	r3, #1
 8002354:	d101      	bne.n	800235a <HAL_HCD_Stop+0x16>
 8002356:	2302      	movs	r3, #2
 8002358:	e00d      	b.n	8002376 <HAL_HCD_Stop+0x32>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f004 f8bc 	bl	80064e4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	460b      	mov	r3, r1
 8002388:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800238a:	78fb      	ldrb	r3, [r7, #3]
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	212c      	movs	r1, #44	; 0x2c
 8002390:	fb01 f303 	mul.w	r3, r1, r3
 8002394:	4413      	add	r3, r2
 8002396:	3360      	adds	r3, #96	; 0x60
 8002398:	781b      	ldrb	r3, [r3, #0]
}
 800239a:	4618      	mov	r0, r3
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
 80023ae:	460b      	mov	r3, r1
 80023b0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80023b2:	78fb      	ldrb	r3, [r7, #3]
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	212c      	movs	r1, #44	; 0x2c
 80023b8:	fb01 f303 	mul.w	r3, r1, r3
 80023bc:	4413      	add	r3, r2
 80023be:	3350      	adds	r3, #80	; 0x50
 80023c0:	681b      	ldr	r3, [r3, #0]
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b082      	sub	sp, #8
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f003 fcc2 	bl	8005d64 <USB_GetCurrentFrame>
 80023e0:	4603      	mov	r3, r0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b086      	sub	sp, #24
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	460b      	mov	r3, r1
 80023f4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002400:	78fb      	ldrb	r3, [r7, #3]
 8002402:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	015a      	lsls	r2, r3, #5
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	4413      	add	r3, r2
 800240c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 0304 	and.w	r3, r3, #4
 8002416:	2b04      	cmp	r3, #4
 8002418:	d11a      	bne.n	8002450 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	015a      	lsls	r2, r3, #5
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	4413      	add	r3, r2
 8002422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002426:	461a      	mov	r2, r3
 8002428:	2304      	movs	r3, #4
 800242a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	212c      	movs	r1, #44	; 0x2c
 8002432:	fb01 f303 	mul.w	r3, r1, r3
 8002436:	4413      	add	r3, r2
 8002438:	3361      	adds	r3, #97	; 0x61
 800243a:	2206      	movs	r2, #6
 800243c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	4611      	mov	r1, r2
 8002448:	4618      	mov	r0, r3
 800244a:	f003 ff12 	bl	8006272 <USB_HC_Halt>
 800244e:	e0af      	b.n	80025b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	015a      	lsls	r2, r3, #5
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	4413      	add	r3, r2
 8002458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002466:	d11b      	bne.n	80024a0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	015a      	lsls	r2, r3, #5
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4413      	add	r3, r2
 8002470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002474:	461a      	mov	r2, r3
 8002476:	f44f 7380 	mov.w	r3, #256	; 0x100
 800247a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	212c      	movs	r1, #44	; 0x2c
 8002482:	fb01 f303 	mul.w	r3, r1, r3
 8002486:	4413      	add	r3, r2
 8002488:	3361      	adds	r3, #97	; 0x61
 800248a:	2207      	movs	r2, #7
 800248c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	4611      	mov	r1, r2
 8002498:	4618      	mov	r0, r3
 800249a:	f003 feea 	bl	8006272 <USB_HC_Halt>
 800249e:	e087      	b.n	80025b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	015a      	lsls	r2, r3, #5
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4413      	add	r3, r2
 80024a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 0320 	and.w	r3, r3, #32
 80024b2:	2b20      	cmp	r3, #32
 80024b4:	d109      	bne.n	80024ca <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	015a      	lsls	r2, r3, #5
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4413      	add	r3, r2
 80024be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c2:	461a      	mov	r2, r3
 80024c4:	2320      	movs	r3, #32
 80024c6:	6093      	str	r3, [r2, #8]
 80024c8:	e072      	b.n	80025b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	015a      	lsls	r2, r3, #5
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	4413      	add	r3, r2
 80024d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 0308 	and.w	r3, r3, #8
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d11a      	bne.n	8002516 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	015a      	lsls	r2, r3, #5
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	4413      	add	r3, r2
 80024e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ec:	461a      	mov	r2, r3
 80024ee:	2308      	movs	r3, #8
 80024f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	212c      	movs	r1, #44	; 0x2c
 80024f8:	fb01 f303 	mul.w	r3, r1, r3
 80024fc:	4413      	add	r3, r2
 80024fe:	3361      	adds	r3, #97	; 0x61
 8002500:	2205      	movs	r2, #5
 8002502:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	4611      	mov	r1, r2
 800250e:	4618      	mov	r0, r3
 8002510:	f003 feaf 	bl	8006272 <USB_HC_Halt>
 8002514:	e04c      	b.n	80025b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	015a      	lsls	r2, r3, #5
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	4413      	add	r3, r2
 800251e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800252c:	d11b      	bne.n	8002566 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	015a      	lsls	r2, r3, #5
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	4413      	add	r3, r2
 8002536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253a:	461a      	mov	r2, r3
 800253c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002540:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	212c      	movs	r1, #44	; 0x2c
 8002548:	fb01 f303 	mul.w	r3, r1, r3
 800254c:	4413      	add	r3, r2
 800254e:	3361      	adds	r3, #97	; 0x61
 8002550:	2208      	movs	r2, #8
 8002552:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	4611      	mov	r1, r2
 800255e:	4618      	mov	r0, r3
 8002560:	f003 fe87 	bl	8006272 <USB_HC_Halt>
 8002564:	e024      	b.n	80025b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	015a      	lsls	r2, r3, #5
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	4413      	add	r3, r2
 800256e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002578:	2b80      	cmp	r3, #128	; 0x80
 800257a:	d119      	bne.n	80025b0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	015a      	lsls	r2, r3, #5
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	4413      	add	r3, r2
 8002584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002588:	461a      	mov	r2, r3
 800258a:	2380      	movs	r3, #128	; 0x80
 800258c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	212c      	movs	r1, #44	; 0x2c
 8002594:	fb01 f303 	mul.w	r3, r1, r3
 8002598:	4413      	add	r3, r2
 800259a:	3361      	adds	r3, #97	; 0x61
 800259c:	2206      	movs	r2, #6
 800259e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	4611      	mov	r1, r2
 80025aa:	4618      	mov	r0, r3
 80025ac:	f003 fe61 	bl	8006272 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	015a      	lsls	r2, r3, #5
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	4413      	add	r3, r2
 80025b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025c6:	d112      	bne.n	80025ee <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	4611      	mov	r1, r2
 80025d2:	4618      	mov	r0, r3
 80025d4:	f003 fe4d 	bl	8006272 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	015a      	lsls	r2, r3, #5
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	4413      	add	r3, r2
 80025e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e4:	461a      	mov	r2, r3
 80025e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025ea:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80025ec:	e24e      	b.n	8002a8c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	015a      	lsls	r2, r3, #5
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	4413      	add	r3, r2
 80025f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b01      	cmp	r3, #1
 8002602:	f040 80df 	bne.w	80027c4 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d019      	beq.n	8002642 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	212c      	movs	r1, #44	; 0x2c
 8002614:	fb01 f303 	mul.w	r3, r1, r3
 8002618:	4413      	add	r3, r2
 800261a:	3348      	adds	r3, #72	; 0x48
 800261c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	0159      	lsls	r1, r3, #5
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	440b      	add	r3, r1
 8002626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002630:	1ad2      	subs	r2, r2, r3
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	202c      	movs	r0, #44	; 0x2c
 8002638:	fb00 f303 	mul.w	r3, r0, r3
 800263c:	440b      	add	r3, r1
 800263e:	3350      	adds	r3, #80	; 0x50
 8002640:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	212c      	movs	r1, #44	; 0x2c
 8002648:	fb01 f303 	mul.w	r3, r1, r3
 800264c:	4413      	add	r3, r2
 800264e:	3361      	adds	r3, #97	; 0x61
 8002650:	2201      	movs	r2, #1
 8002652:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	212c      	movs	r1, #44	; 0x2c
 800265a:	fb01 f303 	mul.w	r3, r1, r3
 800265e:	4413      	add	r3, r2
 8002660:	335c      	adds	r3, #92	; 0x5c
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	015a      	lsls	r2, r3, #5
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	4413      	add	r3, r2
 800266e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002672:	461a      	mov	r2, r3
 8002674:	2301      	movs	r3, #1
 8002676:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	212c      	movs	r1, #44	; 0x2c
 800267e:	fb01 f303 	mul.w	r3, r1, r3
 8002682:	4413      	add	r3, r2
 8002684:	333f      	adds	r3, #63	; 0x3f
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d009      	beq.n	80026a0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	212c      	movs	r1, #44	; 0x2c
 8002692:	fb01 f303 	mul.w	r3, r1, r3
 8002696:	4413      	add	r3, r2
 8002698:	333f      	adds	r3, #63	; 0x3f
 800269a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800269c:	2b02      	cmp	r3, #2
 800269e:	d111      	bne.n	80026c4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	4611      	mov	r1, r2
 80026aa:	4618      	mov	r0, r3
 80026ac:	f003 fde1 	bl	8006272 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	015a      	lsls	r2, r3, #5
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026bc:	461a      	mov	r2, r3
 80026be:	2310      	movs	r3, #16
 80026c0:	6093      	str	r3, [r2, #8]
 80026c2:	e03a      	b.n	800273a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	212c      	movs	r1, #44	; 0x2c
 80026ca:	fb01 f303 	mul.w	r3, r1, r3
 80026ce:	4413      	add	r3, r2
 80026d0:	333f      	adds	r3, #63	; 0x3f
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b03      	cmp	r3, #3
 80026d6:	d009      	beq.n	80026ec <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	212c      	movs	r1, #44	; 0x2c
 80026de:	fb01 f303 	mul.w	r3, r1, r3
 80026e2:	4413      	add	r3, r2
 80026e4:	333f      	adds	r3, #63	; 0x3f
 80026e6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d126      	bne.n	800273a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	0151      	lsls	r1, r2, #5
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	440a      	add	r2, r1
 8002702:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002706:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800270a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	212c      	movs	r1, #44	; 0x2c
 8002712:	fb01 f303 	mul.w	r3, r1, r3
 8002716:	4413      	add	r3, r2
 8002718:	3360      	adds	r3, #96	; 0x60
 800271a:	2201      	movs	r2, #1
 800271c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	b2d9      	uxtb	r1, r3
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	202c      	movs	r0, #44	; 0x2c
 8002728:	fb00 f303 	mul.w	r3, r0, r3
 800272c:	4413      	add	r3, r2
 800272e:	3360      	adds	r3, #96	; 0x60
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	461a      	mov	r2, r3
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f005 f8a5 	bl	8007884 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d12b      	bne.n	800279a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	212c      	movs	r1, #44	; 0x2c
 8002748:	fb01 f303 	mul.w	r3, r1, r3
 800274c:	4413      	add	r3, r2
 800274e:	3348      	adds	r3, #72	; 0x48
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	202c      	movs	r0, #44	; 0x2c
 8002758:	fb00 f202 	mul.w	r2, r0, r2
 800275c:	440a      	add	r2, r1
 800275e:	3240      	adds	r2, #64	; 0x40
 8002760:	8812      	ldrh	r2, [r2, #0]
 8002762:	fbb3 f3f2 	udiv	r3, r3, r2
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	f000 818e 	beq.w	8002a8c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	212c      	movs	r1, #44	; 0x2c
 8002776:	fb01 f303 	mul.w	r3, r1, r3
 800277a:	4413      	add	r3, r2
 800277c:	3354      	adds	r3, #84	; 0x54
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	f083 0301 	eor.w	r3, r3, #1
 8002784:	b2d8      	uxtb	r0, r3
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	212c      	movs	r1, #44	; 0x2c
 800278c:	fb01 f303 	mul.w	r3, r1, r3
 8002790:	4413      	add	r3, r2
 8002792:	3354      	adds	r3, #84	; 0x54
 8002794:	4602      	mov	r2, r0
 8002796:	701a      	strb	r2, [r3, #0]
}
 8002798:	e178      	b.n	8002a8c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	212c      	movs	r1, #44	; 0x2c
 80027a0:	fb01 f303 	mul.w	r3, r1, r3
 80027a4:	4413      	add	r3, r2
 80027a6:	3354      	adds	r3, #84	; 0x54
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	f083 0301 	eor.w	r3, r3, #1
 80027ae:	b2d8      	uxtb	r0, r3
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	212c      	movs	r1, #44	; 0x2c
 80027b6:	fb01 f303 	mul.w	r3, r1, r3
 80027ba:	4413      	add	r3, r2
 80027bc:	3354      	adds	r3, #84	; 0x54
 80027be:	4602      	mov	r2, r0
 80027c0:	701a      	strb	r2, [r3, #0]
}
 80027c2:	e163      	b.n	8002a8c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	015a      	lsls	r2, r3, #5
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	4413      	add	r3, r2
 80027cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	f040 80f6 	bne.w	80029c8 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	212c      	movs	r1, #44	; 0x2c
 80027e2:	fb01 f303 	mul.w	r3, r1, r3
 80027e6:	4413      	add	r3, r2
 80027e8:	3361      	adds	r3, #97	; 0x61
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d109      	bne.n	8002804 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	212c      	movs	r1, #44	; 0x2c
 80027f6:	fb01 f303 	mul.w	r3, r1, r3
 80027fa:	4413      	add	r3, r2
 80027fc:	3360      	adds	r3, #96	; 0x60
 80027fe:	2201      	movs	r2, #1
 8002800:	701a      	strb	r2, [r3, #0]
 8002802:	e0c9      	b.n	8002998 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	212c      	movs	r1, #44	; 0x2c
 800280a:	fb01 f303 	mul.w	r3, r1, r3
 800280e:	4413      	add	r3, r2
 8002810:	3361      	adds	r3, #97	; 0x61
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b05      	cmp	r3, #5
 8002816:	d109      	bne.n	800282c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	212c      	movs	r1, #44	; 0x2c
 800281e:	fb01 f303 	mul.w	r3, r1, r3
 8002822:	4413      	add	r3, r2
 8002824:	3360      	adds	r3, #96	; 0x60
 8002826:	2205      	movs	r2, #5
 8002828:	701a      	strb	r2, [r3, #0]
 800282a:	e0b5      	b.n	8002998 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	212c      	movs	r1, #44	; 0x2c
 8002832:	fb01 f303 	mul.w	r3, r1, r3
 8002836:	4413      	add	r3, r2
 8002838:	3361      	adds	r3, #97	; 0x61
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b06      	cmp	r3, #6
 800283e:	d009      	beq.n	8002854 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	212c      	movs	r1, #44	; 0x2c
 8002846:	fb01 f303 	mul.w	r3, r1, r3
 800284a:	4413      	add	r3, r2
 800284c:	3361      	adds	r3, #97	; 0x61
 800284e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002850:	2b08      	cmp	r3, #8
 8002852:	d150      	bne.n	80028f6 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	212c      	movs	r1, #44	; 0x2c
 800285a:	fb01 f303 	mul.w	r3, r1, r3
 800285e:	4413      	add	r3, r2
 8002860:	335c      	adds	r3, #92	; 0x5c
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	202c      	movs	r0, #44	; 0x2c
 800286c:	fb00 f303 	mul.w	r3, r0, r3
 8002870:	440b      	add	r3, r1
 8002872:	335c      	adds	r3, #92	; 0x5c
 8002874:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	212c      	movs	r1, #44	; 0x2c
 800287c:	fb01 f303 	mul.w	r3, r1, r3
 8002880:	4413      	add	r3, r2
 8002882:	335c      	adds	r3, #92	; 0x5c
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d912      	bls.n	80028b0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	212c      	movs	r1, #44	; 0x2c
 8002890:	fb01 f303 	mul.w	r3, r1, r3
 8002894:	4413      	add	r3, r2
 8002896:	335c      	adds	r3, #92	; 0x5c
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	212c      	movs	r1, #44	; 0x2c
 80028a2:	fb01 f303 	mul.w	r3, r1, r3
 80028a6:	4413      	add	r3, r2
 80028a8:	3360      	adds	r3, #96	; 0x60
 80028aa:	2204      	movs	r2, #4
 80028ac:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80028ae:	e073      	b.n	8002998 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	212c      	movs	r1, #44	; 0x2c
 80028b6:	fb01 f303 	mul.w	r3, r1, r3
 80028ba:	4413      	add	r3, r2
 80028bc:	3360      	adds	r3, #96	; 0x60
 80028be:	2202      	movs	r2, #2
 80028c0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	015a      	lsls	r2, r3, #5
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	4413      	add	r3, r2
 80028ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80028d8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028e0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	015a      	lsls	r2, r3, #5
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	4413      	add	r3, r2
 80028ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ee:	461a      	mov	r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80028f4:	e050      	b.n	8002998 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	212c      	movs	r1, #44	; 0x2c
 80028fc:	fb01 f303 	mul.w	r3, r1, r3
 8002900:	4413      	add	r3, r2
 8002902:	3361      	adds	r3, #97	; 0x61
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	2b03      	cmp	r3, #3
 8002908:	d122      	bne.n	8002950 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	212c      	movs	r1, #44	; 0x2c
 8002910:	fb01 f303 	mul.w	r3, r1, r3
 8002914:	4413      	add	r3, r2
 8002916:	3360      	adds	r3, #96	; 0x60
 8002918:	2202      	movs	r2, #2
 800291a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	015a      	lsls	r2, r3, #5
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	4413      	add	r3, r2
 8002924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002932:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800293a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	015a      	lsls	r2, r3, #5
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	4413      	add	r3, r2
 8002944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002948:	461a      	mov	r2, r3
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	e023      	b.n	8002998 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	212c      	movs	r1, #44	; 0x2c
 8002956:	fb01 f303 	mul.w	r3, r1, r3
 800295a:	4413      	add	r3, r2
 800295c:	3361      	adds	r3, #97	; 0x61
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b07      	cmp	r3, #7
 8002962:	d119      	bne.n	8002998 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	212c      	movs	r1, #44	; 0x2c
 800296a:	fb01 f303 	mul.w	r3, r1, r3
 800296e:	4413      	add	r3, r2
 8002970:	335c      	adds	r3, #92	; 0x5c
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	1c5a      	adds	r2, r3, #1
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	202c      	movs	r0, #44	; 0x2c
 800297c:	fb00 f303 	mul.w	r3, r0, r3
 8002980:	440b      	add	r3, r1
 8002982:	335c      	adds	r3, #92	; 0x5c
 8002984:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	212c      	movs	r1, #44	; 0x2c
 800298c:	fb01 f303 	mul.w	r3, r1, r3
 8002990:	4413      	add	r3, r2
 8002992:	3360      	adds	r3, #96	; 0x60
 8002994:	2204      	movs	r2, #4
 8002996:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	015a      	lsls	r2, r3, #5
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4413      	add	r3, r2
 80029a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a4:	461a      	mov	r2, r3
 80029a6:	2302      	movs	r3, #2
 80029a8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	b2d9      	uxtb	r1, r3
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	202c      	movs	r0, #44	; 0x2c
 80029b4:	fb00 f303 	mul.w	r3, r0, r3
 80029b8:	4413      	add	r3, r2
 80029ba:	3360      	adds	r3, #96	; 0x60
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	461a      	mov	r2, r3
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f004 ff5f 	bl	8007884 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80029c6:	e061      	b.n	8002a8c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	015a      	lsls	r2, r3, #5
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	4413      	add	r3, r2
 80029d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 0310 	and.w	r3, r3, #16
 80029da:	2b10      	cmp	r3, #16
 80029dc:	d156      	bne.n	8002a8c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	212c      	movs	r1, #44	; 0x2c
 80029e4:	fb01 f303 	mul.w	r3, r1, r3
 80029e8:	4413      	add	r3, r2
 80029ea:	333f      	adds	r3, #63	; 0x3f
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b03      	cmp	r3, #3
 80029f0:	d111      	bne.n	8002a16 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	212c      	movs	r1, #44	; 0x2c
 80029f8:	fb01 f303 	mul.w	r3, r1, r3
 80029fc:	4413      	add	r3, r2
 80029fe:	335c      	adds	r3, #92	; 0x5c
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	4611      	mov	r1, r2
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f003 fc2f 	bl	8006272 <USB_HC_Halt>
 8002a14:	e031      	b.n	8002a7a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	212c      	movs	r1, #44	; 0x2c
 8002a1c:	fb01 f303 	mul.w	r3, r1, r3
 8002a20:	4413      	add	r3, r2
 8002a22:	333f      	adds	r3, #63	; 0x3f
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d009      	beq.n	8002a3e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	212c      	movs	r1, #44	; 0x2c
 8002a30:	fb01 f303 	mul.w	r3, r1, r3
 8002a34:	4413      	add	r3, r2
 8002a36:	333f      	adds	r3, #63	; 0x3f
 8002a38:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d11d      	bne.n	8002a7a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	212c      	movs	r1, #44	; 0x2c
 8002a44:	fb01 f303 	mul.w	r3, r1, r3
 8002a48:	4413      	add	r3, r2
 8002a4a:	335c      	adds	r3, #92	; 0x5c
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d110      	bne.n	8002a7a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	212c      	movs	r1, #44	; 0x2c
 8002a5e:	fb01 f303 	mul.w	r3, r1, r3
 8002a62:	4413      	add	r3, r2
 8002a64:	3361      	adds	r3, #97	; 0x61
 8002a66:	2203      	movs	r2, #3
 8002a68:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	b2d2      	uxtb	r2, r2
 8002a72:	4611      	mov	r1, r2
 8002a74:	4618      	mov	r0, r3
 8002a76:	f003 fbfc 	bl	8006272 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	015a      	lsls	r2, r3, #5
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4413      	add	r3, r2
 8002a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a86:	461a      	mov	r2, r3
 8002a88:	2310      	movs	r3, #16
 8002a8a:	6093      	str	r3, [r2, #8]
}
 8002a8c:	bf00      	nop
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b088      	sub	sp, #32
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002aaa:	78fb      	ldrb	r3, [r7, #3]
 8002aac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	015a      	lsls	r2, r3, #5
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b04      	cmp	r3, #4
 8002ac2:	d11a      	bne.n	8002afa <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	015a      	lsls	r2, r3, #5
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	2304      	movs	r3, #4
 8002ad4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	212c      	movs	r1, #44	; 0x2c
 8002adc:	fb01 f303 	mul.w	r3, r1, r3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	3361      	adds	r3, #97	; 0x61
 8002ae4:	2206      	movs	r2, #6
 8002ae6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	4611      	mov	r1, r2
 8002af2:	4618      	mov	r0, r3
 8002af4:	f003 fbbd 	bl	8006272 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002af8:	e331      	b.n	800315e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	015a      	lsls	r2, r3, #5
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	4413      	add	r3, r2
 8002b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f003 0320 	and.w	r3, r3, #32
 8002b0c:	2b20      	cmp	r3, #32
 8002b0e:	d12e      	bne.n	8002b6e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	015a      	lsls	r2, r3, #5
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	4413      	add	r3, r2
 8002b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	2320      	movs	r3, #32
 8002b20:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	212c      	movs	r1, #44	; 0x2c
 8002b28:	fb01 f303 	mul.w	r3, r1, r3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	333d      	adds	r3, #61	; 0x3d
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	f040 8313 	bne.w	800315e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	212c      	movs	r1, #44	; 0x2c
 8002b3e:	fb01 f303 	mul.w	r3, r1, r3
 8002b42:	4413      	add	r3, r2
 8002b44:	333d      	adds	r3, #61	; 0x3d
 8002b46:	2200      	movs	r2, #0
 8002b48:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	212c      	movs	r1, #44	; 0x2c
 8002b50:	fb01 f303 	mul.w	r3, r1, r3
 8002b54:	4413      	add	r3, r2
 8002b56:	3360      	adds	r3, #96	; 0x60
 8002b58:	2202      	movs	r2, #2
 8002b5a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	4611      	mov	r1, r2
 8002b66:	4618      	mov	r0, r3
 8002b68:	f003 fb83 	bl	8006272 <USB_HC_Halt>
}
 8002b6c:	e2f7      	b.n	800315e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	015a      	lsls	r2, r3, #5
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	4413      	add	r3, r2
 8002b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b84:	d112      	bne.n	8002bac <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	015a      	lsls	r2, r3, #5
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b92:	461a      	mov	r2, r3
 8002b94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b98:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	4611      	mov	r1, r2
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f003 fb64 	bl	8006272 <USB_HC_Halt>
}
 8002baa:	e2d8      	b.n	800315e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	015a      	lsls	r2, r3, #5
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d140      	bne.n	8002c44 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	212c      	movs	r1, #44	; 0x2c
 8002bc8:	fb01 f303 	mul.w	r3, r1, r3
 8002bcc:	4413      	add	r3, r2
 8002bce:	335c      	adds	r3, #92	; 0x5c
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	015a      	lsls	r2, r3, #5
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	4413      	add	r3, r2
 8002bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be6:	2b40      	cmp	r3, #64	; 0x40
 8002be8:	d111      	bne.n	8002c0e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	212c      	movs	r1, #44	; 0x2c
 8002bf0:	fb01 f303 	mul.w	r3, r1, r3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	333d      	adds	r3, #61	; 0x3d
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	015a      	lsls	r2, r3, #5
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	4413      	add	r3, r2
 8002c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c08:	461a      	mov	r2, r3
 8002c0a:	2340      	movs	r3, #64	; 0x40
 8002c0c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	015a      	lsls	r2, r3, #5
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	4413      	add	r3, r2
 8002c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	212c      	movs	r1, #44	; 0x2c
 8002c26:	fb01 f303 	mul.w	r3, r1, r3
 8002c2a:	4413      	add	r3, r2
 8002c2c:	3361      	adds	r3, #97	; 0x61
 8002c2e:	2201      	movs	r2, #1
 8002c30:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f003 fb18 	bl	8006272 <USB_HC_Halt>
}
 8002c42:	e28c      	b.n	800315e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	015a      	lsls	r2, r3, #5
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c56:	2b40      	cmp	r3, #64	; 0x40
 8002c58:	d12c      	bne.n	8002cb4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	212c      	movs	r1, #44	; 0x2c
 8002c60:	fb01 f303 	mul.w	r3, r1, r3
 8002c64:	4413      	add	r3, r2
 8002c66:	3361      	adds	r3, #97	; 0x61
 8002c68:	2204      	movs	r2, #4
 8002c6a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	212c      	movs	r1, #44	; 0x2c
 8002c72:	fb01 f303 	mul.w	r3, r1, r3
 8002c76:	4413      	add	r3, r2
 8002c78:	333d      	adds	r3, #61	; 0x3d
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	212c      	movs	r1, #44	; 0x2c
 8002c84:	fb01 f303 	mul.w	r3, r1, r3
 8002c88:	4413      	add	r3, r2
 8002c8a:	335c      	adds	r3, #92	; 0x5c
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	4611      	mov	r1, r2
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f003 fae9 	bl	8006272 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	015a      	lsls	r2, r3, #5
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cac:	461a      	mov	r2, r3
 8002cae:	2340      	movs	r3, #64	; 0x40
 8002cb0:	6093      	str	r3, [r2, #8]
}
 8002cb2:	e254      	b.n	800315e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	015a      	lsls	r2, r3, #5
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	4413      	add	r3, r2
 8002cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	2b08      	cmp	r3, #8
 8002cc8:	d11a      	bne.n	8002d00 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	015a      	lsls	r2, r3, #5
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	2308      	movs	r3, #8
 8002cda:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	212c      	movs	r1, #44	; 0x2c
 8002ce2:	fb01 f303 	mul.w	r3, r1, r3
 8002ce6:	4413      	add	r3, r2
 8002ce8:	3361      	adds	r3, #97	; 0x61
 8002cea:	2205      	movs	r2, #5
 8002cec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	4611      	mov	r1, r2
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f003 faba 	bl	8006272 <USB_HC_Halt>
}
 8002cfe:	e22e      	b.n	800315e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	015a      	lsls	r2, r3, #5
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	4413      	add	r3, r2
 8002d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 0310 	and.w	r3, r3, #16
 8002d12:	2b10      	cmp	r3, #16
 8002d14:	d140      	bne.n	8002d98 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	212c      	movs	r1, #44	; 0x2c
 8002d1c:	fb01 f303 	mul.w	r3, r1, r3
 8002d20:	4413      	add	r3, r2
 8002d22:	335c      	adds	r3, #92	; 0x5c
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	212c      	movs	r1, #44	; 0x2c
 8002d2e:	fb01 f303 	mul.w	r3, r1, r3
 8002d32:	4413      	add	r3, r2
 8002d34:	3361      	adds	r3, #97	; 0x61
 8002d36:	2203      	movs	r2, #3
 8002d38:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	212c      	movs	r1, #44	; 0x2c
 8002d40:	fb01 f303 	mul.w	r3, r1, r3
 8002d44:	4413      	add	r3, r2
 8002d46:	333d      	adds	r3, #61	; 0x3d
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d112      	bne.n	8002d74 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	212c      	movs	r1, #44	; 0x2c
 8002d54:	fb01 f303 	mul.w	r3, r1, r3
 8002d58:	4413      	add	r3, r2
 8002d5a:	333c      	adds	r3, #60	; 0x3c
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d108      	bne.n	8002d74 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	212c      	movs	r1, #44	; 0x2c
 8002d68:	fb01 f303 	mul.w	r3, r1, r3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	333d      	adds	r3, #61	; 0x3d
 8002d70:	2201      	movs	r2, #1
 8002d72:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	4611      	mov	r1, r2
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f003 fa77 	bl	8006272 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	015a      	lsls	r2, r3, #5
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d90:	461a      	mov	r2, r3
 8002d92:	2310      	movs	r3, #16
 8002d94:	6093      	str	r3, [r2, #8]
}
 8002d96:	e1e2      	b.n	800315e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	015a      	lsls	r2, r3, #5
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	4413      	add	r3, r2
 8002da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002daa:	2b80      	cmp	r3, #128	; 0x80
 8002dac:	d164      	bne.n	8002e78 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d111      	bne.n	8002dda <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	212c      	movs	r1, #44	; 0x2c
 8002dbc:	fb01 f303 	mul.w	r3, r1, r3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	3361      	adds	r3, #97	; 0x61
 8002dc4:	2206      	movs	r2, #6
 8002dc6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	4611      	mov	r1, r2
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f003 fa4d 	bl	8006272 <USB_HC_Halt>
 8002dd8:	e044      	b.n	8002e64 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	212c      	movs	r1, #44	; 0x2c
 8002de0:	fb01 f303 	mul.w	r3, r1, r3
 8002de4:	4413      	add	r3, r2
 8002de6:	335c      	adds	r3, #92	; 0x5c
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	1c5a      	adds	r2, r3, #1
 8002dec:	6879      	ldr	r1, [r7, #4]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	202c      	movs	r0, #44	; 0x2c
 8002df2:	fb00 f303 	mul.w	r3, r0, r3
 8002df6:	440b      	add	r3, r1
 8002df8:	335c      	adds	r3, #92	; 0x5c
 8002dfa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	212c      	movs	r1, #44	; 0x2c
 8002e02:	fb01 f303 	mul.w	r3, r1, r3
 8002e06:	4413      	add	r3, r2
 8002e08:	335c      	adds	r3, #92	; 0x5c
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d920      	bls.n	8002e52 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	212c      	movs	r1, #44	; 0x2c
 8002e16:	fb01 f303 	mul.w	r3, r1, r3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	335c      	adds	r3, #92	; 0x5c
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	212c      	movs	r1, #44	; 0x2c
 8002e28:	fb01 f303 	mul.w	r3, r1, r3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	3360      	adds	r3, #96	; 0x60
 8002e30:	2204      	movs	r2, #4
 8002e32:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	b2d9      	uxtb	r1, r3
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	202c      	movs	r0, #44	; 0x2c
 8002e3e:	fb00 f303 	mul.w	r3, r0, r3
 8002e42:	4413      	add	r3, r2
 8002e44:	3360      	adds	r3, #96	; 0x60
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f004 fd1a 	bl	8007884 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002e50:	e008      	b.n	8002e64 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	212c      	movs	r1, #44	; 0x2c
 8002e58:	fb01 f303 	mul.w	r3, r1, r3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	3360      	adds	r3, #96	; 0x60
 8002e60:	2202      	movs	r2, #2
 8002e62:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	015a      	lsls	r2, r3, #5
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e70:	461a      	mov	r2, r3
 8002e72:	2380      	movs	r3, #128	; 0x80
 8002e74:	6093      	str	r3, [r2, #8]
}
 8002e76:	e172      	b.n	800315e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	015a      	lsls	r2, r3, #5
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	4413      	add	r3, r2
 8002e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e8e:	d11b      	bne.n	8002ec8 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	212c      	movs	r1, #44	; 0x2c
 8002e96:	fb01 f303 	mul.w	r3, r1, r3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	3361      	adds	r3, #97	; 0x61
 8002e9e:	2208      	movs	r2, #8
 8002ea0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	4611      	mov	r1, r2
 8002eac:	4618      	mov	r0, r3
 8002eae:	f003 f9e0 	bl	8006272 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	015a      	lsls	r2, r3, #5
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	4413      	add	r3, r2
 8002eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ec4:	6093      	str	r3, [r2, #8]
}
 8002ec6:	e14a      	b.n	800315e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	015a      	lsls	r2, r3, #5
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	4413      	add	r3, r2
 8002ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	f040 813f 	bne.w	800315e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	212c      	movs	r1, #44	; 0x2c
 8002ee6:	fb01 f303 	mul.w	r3, r1, r3
 8002eea:	4413      	add	r3, r2
 8002eec:	3361      	adds	r3, #97	; 0x61
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d17d      	bne.n	8002ff0 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	212c      	movs	r1, #44	; 0x2c
 8002efa:	fb01 f303 	mul.w	r3, r1, r3
 8002efe:	4413      	add	r3, r2
 8002f00:	3360      	adds	r3, #96	; 0x60
 8002f02:	2201      	movs	r2, #1
 8002f04:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	212c      	movs	r1, #44	; 0x2c
 8002f0c:	fb01 f303 	mul.w	r3, r1, r3
 8002f10:	4413      	add	r3, r2
 8002f12:	333f      	adds	r3, #63	; 0x3f
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d00a      	beq.n	8002f30 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	212c      	movs	r1, #44	; 0x2c
 8002f20:	fb01 f303 	mul.w	r3, r1, r3
 8002f24:	4413      	add	r3, r2
 8002f26:	333f      	adds	r3, #63	; 0x3f
 8002f28:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002f2a:	2b03      	cmp	r3, #3
 8002f2c:	f040 8100 	bne.w	8003130 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d113      	bne.n	8002f60 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	212c      	movs	r1, #44	; 0x2c
 8002f3e:	fb01 f303 	mul.w	r3, r1, r3
 8002f42:	4413      	add	r3, r2
 8002f44:	3355      	adds	r3, #85	; 0x55
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	f083 0301 	eor.w	r3, r3, #1
 8002f4c:	b2d8      	uxtb	r0, r3
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	212c      	movs	r1, #44	; 0x2c
 8002f54:	fb01 f303 	mul.w	r3, r1, r3
 8002f58:	4413      	add	r3, r2
 8002f5a:	3355      	adds	r3, #85	; 0x55
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	f040 80e3 	bne.w	8003130 <HCD_HC_OUT_IRQHandler+0x69c>
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	212c      	movs	r1, #44	; 0x2c
 8002f70:	fb01 f303 	mul.w	r3, r1, r3
 8002f74:	4413      	add	r3, r2
 8002f76:	334c      	adds	r3, #76	; 0x4c
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 80d8 	beq.w	8003130 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	212c      	movs	r1, #44	; 0x2c
 8002f86:	fb01 f303 	mul.w	r3, r1, r3
 8002f8a:	4413      	add	r3, r2
 8002f8c:	334c      	adds	r3, #76	; 0x4c
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	202c      	movs	r0, #44	; 0x2c
 8002f96:	fb00 f202 	mul.w	r2, r0, r2
 8002f9a:	440a      	add	r2, r1
 8002f9c:	3240      	adds	r2, #64	; 0x40
 8002f9e:	8812      	ldrh	r2, [r2, #0]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	202c      	movs	r0, #44	; 0x2c
 8002faa:	fb00 f202 	mul.w	r2, r0, r2
 8002fae:	440a      	add	r2, r1
 8002fb0:	3240      	adds	r2, #64	; 0x40
 8002fb2:	8812      	ldrh	r2, [r2, #0]
 8002fb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 80b5 	beq.w	8003130 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	212c      	movs	r1, #44	; 0x2c
 8002fcc:	fb01 f303 	mul.w	r3, r1, r3
 8002fd0:	4413      	add	r3, r2
 8002fd2:	3355      	adds	r3, #85	; 0x55
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	f083 0301 	eor.w	r3, r3, #1
 8002fda:	b2d8      	uxtb	r0, r3
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	212c      	movs	r1, #44	; 0x2c
 8002fe2:	fb01 f303 	mul.w	r3, r1, r3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	3355      	adds	r3, #85	; 0x55
 8002fea:	4602      	mov	r2, r0
 8002fec:	701a      	strb	r2, [r3, #0]
 8002fee:	e09f      	b.n	8003130 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	212c      	movs	r1, #44	; 0x2c
 8002ff6:	fb01 f303 	mul.w	r3, r1, r3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	3361      	adds	r3, #97	; 0x61
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b03      	cmp	r3, #3
 8003002:	d109      	bne.n	8003018 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	212c      	movs	r1, #44	; 0x2c
 800300a:	fb01 f303 	mul.w	r3, r1, r3
 800300e:	4413      	add	r3, r2
 8003010:	3360      	adds	r3, #96	; 0x60
 8003012:	2202      	movs	r2, #2
 8003014:	701a      	strb	r2, [r3, #0]
 8003016:	e08b      	b.n	8003130 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	212c      	movs	r1, #44	; 0x2c
 800301e:	fb01 f303 	mul.w	r3, r1, r3
 8003022:	4413      	add	r3, r2
 8003024:	3361      	adds	r3, #97	; 0x61
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b04      	cmp	r3, #4
 800302a:	d109      	bne.n	8003040 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	212c      	movs	r1, #44	; 0x2c
 8003032:	fb01 f303 	mul.w	r3, r1, r3
 8003036:	4413      	add	r3, r2
 8003038:	3360      	adds	r3, #96	; 0x60
 800303a:	2202      	movs	r2, #2
 800303c:	701a      	strb	r2, [r3, #0]
 800303e:	e077      	b.n	8003130 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	212c      	movs	r1, #44	; 0x2c
 8003046:	fb01 f303 	mul.w	r3, r1, r3
 800304a:	4413      	add	r3, r2
 800304c:	3361      	adds	r3, #97	; 0x61
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b05      	cmp	r3, #5
 8003052:	d109      	bne.n	8003068 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	212c      	movs	r1, #44	; 0x2c
 800305a:	fb01 f303 	mul.w	r3, r1, r3
 800305e:	4413      	add	r3, r2
 8003060:	3360      	adds	r3, #96	; 0x60
 8003062:	2205      	movs	r2, #5
 8003064:	701a      	strb	r2, [r3, #0]
 8003066:	e063      	b.n	8003130 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	212c      	movs	r1, #44	; 0x2c
 800306e:	fb01 f303 	mul.w	r3, r1, r3
 8003072:	4413      	add	r3, r2
 8003074:	3361      	adds	r3, #97	; 0x61
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b06      	cmp	r3, #6
 800307a:	d009      	beq.n	8003090 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	212c      	movs	r1, #44	; 0x2c
 8003082:	fb01 f303 	mul.w	r3, r1, r3
 8003086:	4413      	add	r3, r2
 8003088:	3361      	adds	r3, #97	; 0x61
 800308a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800308c:	2b08      	cmp	r3, #8
 800308e:	d14f      	bne.n	8003130 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	212c      	movs	r1, #44	; 0x2c
 8003096:	fb01 f303 	mul.w	r3, r1, r3
 800309a:	4413      	add	r3, r2
 800309c:	335c      	adds	r3, #92	; 0x5c
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	1c5a      	adds	r2, r3, #1
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	202c      	movs	r0, #44	; 0x2c
 80030a8:	fb00 f303 	mul.w	r3, r0, r3
 80030ac:	440b      	add	r3, r1
 80030ae:	335c      	adds	r3, #92	; 0x5c
 80030b0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	212c      	movs	r1, #44	; 0x2c
 80030b8:	fb01 f303 	mul.w	r3, r1, r3
 80030bc:	4413      	add	r3, r2
 80030be:	335c      	adds	r3, #92	; 0x5c
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d912      	bls.n	80030ec <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	212c      	movs	r1, #44	; 0x2c
 80030cc:	fb01 f303 	mul.w	r3, r1, r3
 80030d0:	4413      	add	r3, r2
 80030d2:	335c      	adds	r3, #92	; 0x5c
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	212c      	movs	r1, #44	; 0x2c
 80030de:	fb01 f303 	mul.w	r3, r1, r3
 80030e2:	4413      	add	r3, r2
 80030e4:	3360      	adds	r3, #96	; 0x60
 80030e6:	2204      	movs	r2, #4
 80030e8:	701a      	strb	r2, [r3, #0]
 80030ea:	e021      	b.n	8003130 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	212c      	movs	r1, #44	; 0x2c
 80030f2:	fb01 f303 	mul.w	r3, r1, r3
 80030f6:	4413      	add	r3, r2
 80030f8:	3360      	adds	r3, #96	; 0x60
 80030fa:	2202      	movs	r2, #2
 80030fc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	015a      	lsls	r2, r3, #5
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	4413      	add	r3, r2
 8003106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003114:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800311c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	015a      	lsls	r2, r3, #5
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	4413      	add	r3, r2
 8003126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800312a:	461a      	mov	r2, r3
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	015a      	lsls	r2, r3, #5
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	4413      	add	r3, r2
 8003138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800313c:	461a      	mov	r2, r3
 800313e:	2302      	movs	r3, #2
 8003140:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	b2d9      	uxtb	r1, r3
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	202c      	movs	r0, #44	; 0x2c
 800314c:	fb00 f303 	mul.w	r3, r0, r3
 8003150:	4413      	add	r3, r2
 8003152:	3360      	adds	r3, #96	; 0x60
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	461a      	mov	r2, r3
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f004 fb93 	bl	8007884 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800315e:	bf00      	nop
 8003160:	3720      	adds	r7, #32
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b08a      	sub	sp, #40	; 0x28
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	0c5b      	lsrs	r3, r3, #17
 800318c:	f003 030f 	and.w	r3, r3, #15
 8003190:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	091b      	lsrs	r3, r3, #4
 8003196:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800319a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d004      	beq.n	80031ac <HCD_RXQLVL_IRQHandler+0x46>
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	2b05      	cmp	r3, #5
 80031a6:	f000 80a9 	beq.w	80032fc <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80031aa:	e0aa      	b.n	8003302 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 80a6 	beq.w	8003300 <HCD_RXQLVL_IRQHandler+0x19a>
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	212c      	movs	r1, #44	; 0x2c
 80031ba:	fb01 f303 	mul.w	r3, r1, r3
 80031be:	4413      	add	r3, r2
 80031c0:	3344      	adds	r3, #68	; 0x44
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 809b 	beq.w	8003300 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	212c      	movs	r1, #44	; 0x2c
 80031d0:	fb01 f303 	mul.w	r3, r1, r3
 80031d4:	4413      	add	r3, r2
 80031d6:	3350      	adds	r3, #80	; 0x50
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	441a      	add	r2, r3
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	202c      	movs	r0, #44	; 0x2c
 80031e4:	fb00 f303 	mul.w	r3, r0, r3
 80031e8:	440b      	add	r3, r1
 80031ea:	334c      	adds	r3, #76	; 0x4c
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d87a      	bhi.n	80032e8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6818      	ldr	r0, [r3, #0]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	212c      	movs	r1, #44	; 0x2c
 80031fc:	fb01 f303 	mul.w	r3, r1, r3
 8003200:	4413      	add	r3, r2
 8003202:	3344      	adds	r3, #68	; 0x44
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	b292      	uxth	r2, r2
 800320a:	4619      	mov	r1, r3
 800320c:	f002 fbb2 	bl	8005974 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	212c      	movs	r1, #44	; 0x2c
 8003216:	fb01 f303 	mul.w	r3, r1, r3
 800321a:	4413      	add	r3, r2
 800321c:	3344      	adds	r3, #68	; 0x44
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	441a      	add	r2, r3
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	202c      	movs	r0, #44	; 0x2c
 800322a:	fb00 f303 	mul.w	r3, r0, r3
 800322e:	440b      	add	r3, r1
 8003230:	3344      	adds	r3, #68	; 0x44
 8003232:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	212c      	movs	r1, #44	; 0x2c
 800323a:	fb01 f303 	mul.w	r3, r1, r3
 800323e:	4413      	add	r3, r2
 8003240:	3350      	adds	r3, #80	; 0x50
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	441a      	add	r2, r3
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	202c      	movs	r0, #44	; 0x2c
 800324e:	fb00 f303 	mul.w	r3, r0, r3
 8003252:	440b      	add	r3, r1
 8003254:	3350      	adds	r3, #80	; 0x50
 8003256:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	015a      	lsls	r2, r3, #5
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	4413      	add	r3, r2
 8003260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	0cdb      	lsrs	r3, r3, #19
 8003268:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800326c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	212c      	movs	r1, #44	; 0x2c
 8003274:	fb01 f303 	mul.w	r3, r1, r3
 8003278:	4413      	add	r3, r2
 800327a:	3340      	adds	r3, #64	; 0x40
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	461a      	mov	r2, r3
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	4293      	cmp	r3, r2
 8003284:	d13c      	bne.n	8003300 <HCD_RXQLVL_IRQHandler+0x19a>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d039      	beq.n	8003300 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	015a      	lsls	r2, r3, #5
 8003290:	6a3b      	ldr	r3, [r7, #32]
 8003292:	4413      	add	r3, r2
 8003294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80032a2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032aa:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	015a      	lsls	r2, r3, #5
 80032b0:	6a3b      	ldr	r3, [r7, #32]
 80032b2:	4413      	add	r3, r2
 80032b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b8:	461a      	mov	r2, r3
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	212c      	movs	r1, #44	; 0x2c
 80032c4:	fb01 f303 	mul.w	r3, r1, r3
 80032c8:	4413      	add	r3, r2
 80032ca:	3354      	adds	r3, #84	; 0x54
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	f083 0301 	eor.w	r3, r3, #1
 80032d2:	b2d8      	uxtb	r0, r3
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	212c      	movs	r1, #44	; 0x2c
 80032da:	fb01 f303 	mul.w	r3, r1, r3
 80032de:	4413      	add	r3, r2
 80032e0:	3354      	adds	r3, #84	; 0x54
 80032e2:	4602      	mov	r2, r0
 80032e4:	701a      	strb	r2, [r3, #0]
      break;
 80032e6:	e00b      	b.n	8003300 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	212c      	movs	r1, #44	; 0x2c
 80032ee:	fb01 f303 	mul.w	r3, r1, r3
 80032f2:	4413      	add	r3, r2
 80032f4:	3360      	adds	r3, #96	; 0x60
 80032f6:	2204      	movs	r2, #4
 80032f8:	701a      	strb	r2, [r3, #0]
      break;
 80032fa:	e001      	b.n	8003300 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80032fc:	bf00      	nop
 80032fe:	e000      	b.n	8003302 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003300:	bf00      	nop
  }
}
 8003302:	bf00      	nop
 8003304:	3728      	adds	r7, #40	; 0x28
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b086      	sub	sp, #24
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003336:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b02      	cmp	r3, #2
 8003340:	d10b      	bne.n	800335a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b01      	cmp	r3, #1
 800334a:	d102      	bne.n	8003352 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f004 fa7d 	bl	800784c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	f043 0302 	orr.w	r3, r3, #2
 8003358:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f003 0308 	and.w	r3, r3, #8
 8003360:	2b08      	cmp	r3, #8
 8003362:	d132      	bne.n	80033ca <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	f043 0308 	orr.w	r3, r3, #8
 800336a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f003 0304 	and.w	r3, r3, #4
 8003372:	2b04      	cmp	r3, #4
 8003374:	d126      	bne.n	80033c4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	2b02      	cmp	r3, #2
 800337c:	d113      	bne.n	80033a6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003384:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003388:	d106      	bne.n	8003398 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2102      	movs	r1, #2
 8003390:	4618      	mov	r0, r3
 8003392:	f002 fc5d 	bl	8005c50 <USB_InitFSLSPClkSel>
 8003396:	e011      	b.n	80033bc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2101      	movs	r1, #1
 800339e:	4618      	mov	r0, r3
 80033a0:	f002 fc56 	bl	8005c50 <USB_InitFSLSPClkSel>
 80033a4:	e00a      	b.n	80033bc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d106      	bne.n	80033bc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033b4:	461a      	mov	r2, r3
 80033b6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80033ba:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f004 fa6f 	bl	80078a0 <HAL_HCD_PortEnabled_Callback>
 80033c2:	e002      	b.n	80033ca <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f004 fa79 	bl	80078bc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f003 0320 	and.w	r3, r3, #32
 80033d0:	2b20      	cmp	r3, #32
 80033d2:	d103      	bne.n	80033dc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	f043 0320 	orr.w	r3, r3, #32
 80033da:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80033e2:	461a      	mov	r2, r3
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	6013      	str	r3, [r2, #0]
}
 80033e8:	bf00      	nop
 80033ea:	3718      	adds	r7, #24
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e12b      	b.n	800365a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d106      	bne.n	800341c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7fd fb0e 	bl	8000a38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2224      	movs	r2, #36	; 0x24
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0201 	bic.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003442:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003452:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003454:	f001 fa20 	bl	8004898 <HAL_RCC_GetPCLK1Freq>
 8003458:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	4a81      	ldr	r2, [pc, #516]	; (8003664 <HAL_I2C_Init+0x274>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d807      	bhi.n	8003474 <HAL_I2C_Init+0x84>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4a80      	ldr	r2, [pc, #512]	; (8003668 <HAL_I2C_Init+0x278>)
 8003468:	4293      	cmp	r3, r2
 800346a:	bf94      	ite	ls
 800346c:	2301      	movls	r3, #1
 800346e:	2300      	movhi	r3, #0
 8003470:	b2db      	uxtb	r3, r3
 8003472:	e006      	b.n	8003482 <HAL_I2C_Init+0x92>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	4a7d      	ldr	r2, [pc, #500]	; (800366c <HAL_I2C_Init+0x27c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	bf94      	ite	ls
 800347c:	2301      	movls	r3, #1
 800347e:	2300      	movhi	r3, #0
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e0e7      	b.n	800365a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	4a78      	ldr	r2, [pc, #480]	; (8003670 <HAL_I2C_Init+0x280>)
 800348e:	fba2 2303 	umull	r2, r3, r2, r3
 8003492:	0c9b      	lsrs	r3, r3, #18
 8003494:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	4a6a      	ldr	r2, [pc, #424]	; (8003664 <HAL_I2C_Init+0x274>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d802      	bhi.n	80034c4 <HAL_I2C_Init+0xd4>
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	3301      	adds	r3, #1
 80034c2:	e009      	b.n	80034d8 <HAL_I2C_Init+0xe8>
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034ca:	fb02 f303 	mul.w	r3, r2, r3
 80034ce:	4a69      	ldr	r2, [pc, #420]	; (8003674 <HAL_I2C_Init+0x284>)
 80034d0:	fba2 2303 	umull	r2, r3, r2, r3
 80034d4:	099b      	lsrs	r3, r3, #6
 80034d6:	3301      	adds	r3, #1
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6812      	ldr	r2, [r2, #0]
 80034dc:	430b      	orrs	r3, r1
 80034de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80034ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	495c      	ldr	r1, [pc, #368]	; (8003664 <HAL_I2C_Init+0x274>)
 80034f4:	428b      	cmp	r3, r1
 80034f6:	d819      	bhi.n	800352c <HAL_I2C_Init+0x13c>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	1e59      	subs	r1, r3, #1
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	fbb1 f3f3 	udiv	r3, r1, r3
 8003506:	1c59      	adds	r1, r3, #1
 8003508:	f640 73fc 	movw	r3, #4092	; 0xffc
 800350c:	400b      	ands	r3, r1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00a      	beq.n	8003528 <HAL_I2C_Init+0x138>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	1e59      	subs	r1, r3, #1
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003520:	3301      	adds	r3, #1
 8003522:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003526:	e051      	b.n	80035cc <HAL_I2C_Init+0x1dc>
 8003528:	2304      	movs	r3, #4
 800352a:	e04f      	b.n	80035cc <HAL_I2C_Init+0x1dc>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d111      	bne.n	8003558 <HAL_I2C_Init+0x168>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	1e58      	subs	r0, r3, #1
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6859      	ldr	r1, [r3, #4]
 800353c:	460b      	mov	r3, r1
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	440b      	add	r3, r1
 8003542:	fbb0 f3f3 	udiv	r3, r0, r3
 8003546:	3301      	adds	r3, #1
 8003548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800354c:	2b00      	cmp	r3, #0
 800354e:	bf0c      	ite	eq
 8003550:	2301      	moveq	r3, #1
 8003552:	2300      	movne	r3, #0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	e012      	b.n	800357e <HAL_I2C_Init+0x18e>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	1e58      	subs	r0, r3, #1
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6859      	ldr	r1, [r3, #4]
 8003560:	460b      	mov	r3, r1
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	0099      	lsls	r1, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	fbb0 f3f3 	udiv	r3, r0, r3
 800356e:	3301      	adds	r3, #1
 8003570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003574:	2b00      	cmp	r3, #0
 8003576:	bf0c      	ite	eq
 8003578:	2301      	moveq	r3, #1
 800357a:	2300      	movne	r3, #0
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <HAL_I2C_Init+0x196>
 8003582:	2301      	movs	r3, #1
 8003584:	e022      	b.n	80035cc <HAL_I2C_Init+0x1dc>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10e      	bne.n	80035ac <HAL_I2C_Init+0x1bc>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	1e58      	subs	r0, r3, #1
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6859      	ldr	r1, [r3, #4]
 8003596:	460b      	mov	r3, r1
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	440b      	add	r3, r1
 800359c:	fbb0 f3f3 	udiv	r3, r0, r3
 80035a0:	3301      	adds	r3, #1
 80035a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035aa:	e00f      	b.n	80035cc <HAL_I2C_Init+0x1dc>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	1e58      	subs	r0, r3, #1
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6859      	ldr	r1, [r3, #4]
 80035b4:	460b      	mov	r3, r1
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	440b      	add	r3, r1
 80035ba:	0099      	lsls	r1, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	fbb0 f3f3 	udiv	r3, r0, r3
 80035c2:	3301      	adds	r3, #1
 80035c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	6809      	ldr	r1, [r1, #0]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	69da      	ldr	r2, [r3, #28]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	431a      	orrs	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80035fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6911      	ldr	r1, [r2, #16]
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	68d2      	ldr	r2, [r2, #12]
 8003606:	4311      	orrs	r1, r2
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6812      	ldr	r2, [r2, #0]
 800360c:	430b      	orrs	r3, r1
 800360e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	695a      	ldr	r2, [r3, #20]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	431a      	orrs	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 0201 	orr.w	r2, r2, #1
 800363a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2220      	movs	r2, #32
 8003646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	000186a0 	.word	0x000186a0
 8003668:	001e847f 	.word	0x001e847f
 800366c:	003d08ff 	.word	0x003d08ff
 8003670:	431bde83 	.word	0x431bde83
 8003674:	10624dd3 	.word	0x10624dd3

08003678 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b088      	sub	sp, #32
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e128      	b.n	80038dc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d109      	bne.n	80036aa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a90      	ldr	r2, [pc, #576]	; (80038e4 <HAL_I2S_Init+0x26c>)
 80036a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f7fd fa3d 	bl	8000b24 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2202      	movs	r2, #2
 80036ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	69db      	ldr	r3, [r3, #28]
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	6812      	ldr	r2, [r2, #0]
 80036bc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80036c0:	f023 030f 	bic.w	r3, r3, #15
 80036c4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2202      	movs	r2, #2
 80036cc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d060      	beq.n	8003798 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d102      	bne.n	80036e4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80036de:	2310      	movs	r3, #16
 80036e0:	617b      	str	r3, [r7, #20]
 80036e2:	e001      	b.n	80036e8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80036e4:	2320      	movs	r3, #32
 80036e6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	2b20      	cmp	r3, #32
 80036ee:	d802      	bhi.n	80036f6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80036f6:	2001      	movs	r0, #1
 80036f8:	f001 f9c4 	bl	8004a84 <HAL_RCCEx_GetPeriphCLKFreq>
 80036fc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003706:	d125      	bne.n	8003754 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d010      	beq.n	8003732 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	fbb2 f2f3 	udiv	r2, r2, r3
 800371a:	4613      	mov	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4413      	add	r3, r2
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	461a      	mov	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	fbb2 f3f3 	udiv	r3, r2, r3
 800372c:	3305      	adds	r3, #5
 800372e:	613b      	str	r3, [r7, #16]
 8003730:	e01f      	b.n	8003772 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	fbb2 f2f3 	udiv	r2, r2, r3
 800373c:	4613      	mov	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	461a      	mov	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	fbb2 f3f3 	udiv	r3, r2, r3
 800374e:	3305      	adds	r3, #5
 8003750:	613b      	str	r3, [r7, #16]
 8003752:	e00e      	b.n	8003772 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	fbb2 f2f3 	udiv	r2, r2, r3
 800375c:	4613      	mov	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	461a      	mov	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	fbb2 f3f3 	udiv	r3, r2, r3
 800376e:	3305      	adds	r3, #5
 8003770:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	4a5c      	ldr	r2, [pc, #368]	; (80038e8 <HAL_I2S_Init+0x270>)
 8003776:	fba2 2303 	umull	r2, r3, r2, r3
 800377a:	08db      	lsrs	r3, r3, #3
 800377c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	085b      	lsrs	r3, r3, #1
 800378e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	021b      	lsls	r3, r3, #8
 8003794:	61bb      	str	r3, [r7, #24]
 8003796:	e003      	b.n	80037a0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003798:	2302      	movs	r3, #2
 800379a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d902      	bls.n	80037ac <HAL_I2S_Init+0x134>
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	2bff      	cmp	r3, #255	; 0xff
 80037aa:	d907      	bls.n	80037bc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b0:	f043 0210 	orr.w	r2, r3, #16
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e08f      	b.n	80038dc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	691a      	ldr	r2, [r3, #16]
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	ea42 0103 	orr.w	r1, r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	69fa      	ldr	r2, [r7, #28]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80037da:	f023 030f 	bic.w	r3, r3, #15
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	6851      	ldr	r1, [r2, #4]
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	6892      	ldr	r2, [r2, #8]
 80037e6:	4311      	orrs	r1, r2
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	68d2      	ldr	r2, [r2, #12]
 80037ec:	4311      	orrs	r1, r2
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	6992      	ldr	r2, [r2, #24]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	431a      	orrs	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037fe:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d161      	bne.n	80038cc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a38      	ldr	r2, [pc, #224]	; (80038ec <HAL_I2S_Init+0x274>)
 800380c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a37      	ldr	r2, [pc, #220]	; (80038f0 <HAL_I2S_Init+0x278>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d101      	bne.n	800381c <HAL_I2S_Init+0x1a4>
 8003818:	4b36      	ldr	r3, [pc, #216]	; (80038f4 <HAL_I2S_Init+0x27c>)
 800381a:	e001      	b.n	8003820 <HAL_I2S_Init+0x1a8>
 800381c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6812      	ldr	r2, [r2, #0]
 8003826:	4932      	ldr	r1, [pc, #200]	; (80038f0 <HAL_I2S_Init+0x278>)
 8003828:	428a      	cmp	r2, r1
 800382a:	d101      	bne.n	8003830 <HAL_I2S_Init+0x1b8>
 800382c:	4a31      	ldr	r2, [pc, #196]	; (80038f4 <HAL_I2S_Init+0x27c>)
 800382e:	e001      	b.n	8003834 <HAL_I2S_Init+0x1bc>
 8003830:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003834:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003838:	f023 030f 	bic.w	r3, r3, #15
 800383c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a2b      	ldr	r2, [pc, #172]	; (80038f0 <HAL_I2S_Init+0x278>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d101      	bne.n	800384c <HAL_I2S_Init+0x1d4>
 8003848:	4b2a      	ldr	r3, [pc, #168]	; (80038f4 <HAL_I2S_Init+0x27c>)
 800384a:	e001      	b.n	8003850 <HAL_I2S_Init+0x1d8>
 800384c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003850:	2202      	movs	r2, #2
 8003852:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a25      	ldr	r2, [pc, #148]	; (80038f0 <HAL_I2S_Init+0x278>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d101      	bne.n	8003862 <HAL_I2S_Init+0x1ea>
 800385e:	4b25      	ldr	r3, [pc, #148]	; (80038f4 <HAL_I2S_Init+0x27c>)
 8003860:	e001      	b.n	8003866 <HAL_I2S_Init+0x1ee>
 8003862:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003872:	d003      	beq.n	800387c <HAL_I2S_Init+0x204>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d103      	bne.n	8003884 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800387c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003880:	613b      	str	r3, [r7, #16]
 8003882:	e001      	b.n	8003888 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003884:	2300      	movs	r3, #0
 8003886:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003892:	4313      	orrs	r3, r2
 8003894:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800389c:	4313      	orrs	r3, r2
 800389e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80038a6:	4313      	orrs	r3, r2
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	897b      	ldrh	r3, [r7, #10]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038b4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a0d      	ldr	r2, [pc, #52]	; (80038f0 <HAL_I2S_Init+0x278>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d101      	bne.n	80038c4 <HAL_I2S_Init+0x24c>
 80038c0:	4b0c      	ldr	r3, [pc, #48]	; (80038f4 <HAL_I2S_Init+0x27c>)
 80038c2:	e001      	b.n	80038c8 <HAL_I2S_Init+0x250>
 80038c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038c8:	897a      	ldrh	r2, [r7, #10]
 80038ca:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3720      	adds	r7, #32
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	080039ef 	.word	0x080039ef
 80038e8:	cccccccd 	.word	0xcccccccd
 80038ec:	08003b05 	.word	0x08003b05
 80038f0:	40003800 	.word	0x40003800
 80038f4:	40003400 	.word	0x40003400

080038f8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	881a      	ldrh	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	1c9a      	adds	r2, r3, #2
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003956:	b29b      	uxth	r3, r3
 8003958:	3b01      	subs	r3, #1
 800395a:	b29a      	uxth	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003964:	b29b      	uxth	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10e      	bne.n	8003988 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003978:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7ff ffb8 	bl	80038f8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003988:	bf00      	nop
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68da      	ldr	r2, [r3, #12]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a2:	b292      	uxth	r2, r2
 80039a4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039aa:	1c9a      	adds	r2, r3, #2
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	3b01      	subs	r3, #1
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10e      	bne.n	80039e6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039d6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f7ff ff93 	bl	800390c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80039e6:	bf00      	nop
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b086      	sub	sp, #24
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	d13a      	bne.n	8003a80 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d109      	bne.n	8003a28 <I2S_IRQHandler+0x3a>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1e:	2b40      	cmp	r3, #64	; 0x40
 8003a20:	d102      	bne.n	8003a28 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7ff ffb4 	bl	8003990 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a2e:	2b40      	cmp	r3, #64	; 0x40
 8003a30:	d126      	bne.n	8003a80 <I2S_IRQHandler+0x92>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f003 0320 	and.w	r3, r3, #32
 8003a3c:	2b20      	cmp	r3, #32
 8003a3e:	d11f      	bne.n	8003a80 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a4e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003a50:	2300      	movs	r3, #0
 8003a52:	613b      	str	r3, [r7, #16]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	613b      	str	r3, [r7, #16]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	613b      	str	r3, [r7, #16]
 8003a64:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a72:	f043 0202 	orr.w	r2, r3, #2
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7ff ff50 	bl	8003920 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b03      	cmp	r3, #3
 8003a8a:	d136      	bne.n	8003afa <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d109      	bne.n	8003aaa <I2S_IRQHandler+0xbc>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa0:	2b80      	cmp	r3, #128	; 0x80
 8003aa2:	d102      	bne.n	8003aaa <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f7ff ff45 	bl	8003934 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f003 0308 	and.w	r3, r3, #8
 8003ab0:	2b08      	cmp	r3, #8
 8003ab2:	d122      	bne.n	8003afa <I2S_IRQHandler+0x10c>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f003 0320 	and.w	r3, r3, #32
 8003abe:	2b20      	cmp	r3, #32
 8003ac0:	d11b      	bne.n	8003afa <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ad0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aec:	f043 0204 	orr.w	r2, r3, #4
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f7ff ff13 	bl	8003920 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003afa:	bf00      	nop
 8003afc:	3718      	adds	r7, #24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
	...

08003b04 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b088      	sub	sp, #32
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a92      	ldr	r2, [pc, #584]	; (8003d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d101      	bne.n	8003b22 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003b1e:	4b92      	ldr	r3, [pc, #584]	; (8003d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b20:	e001      	b.n	8003b26 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003b22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a8b      	ldr	r2, [pc, #556]	; (8003d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d101      	bne.n	8003b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003b3c:	4b8a      	ldr	r3, [pc, #552]	; (8003d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b3e:	e001      	b.n	8003b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003b40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b50:	d004      	beq.n	8003b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f040 8099 	bne.w	8003c8e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d107      	bne.n	8003b76 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d002      	beq.n	8003b76 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 f925 	bl	8003dc0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d107      	bne.n	8003b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d002      	beq.n	8003b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f9c8 	bl	8003f20 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b96:	2b40      	cmp	r3, #64	; 0x40
 8003b98:	d13a      	bne.n	8003c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	f003 0320 	and.w	r3, r3, #32
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d035      	beq.n	8003c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a6e      	ldr	r2, [pc, #440]	; (8003d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d101      	bne.n	8003bb2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003bae:	4b6e      	ldr	r3, [pc, #440]	; (8003d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bb0:	e001      	b.n	8003bb6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003bb2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4969      	ldr	r1, [pc, #420]	; (8003d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bbe:	428b      	cmp	r3, r1
 8003bc0:	d101      	bne.n	8003bc6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003bc2:	4b69      	ldr	r3, [pc, #420]	; (8003d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bc4:	e001      	b.n	8003bca <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003bc6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bce:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bde:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003be0:	2300      	movs	r3, #0
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	60fb      	str	r3, [r7, #12]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	60fb      	str	r3, [r7, #12]
 8003bf4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c02:	f043 0202 	orr.w	r2, r3, #2
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7ff fe88 	bl	8003920 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	f003 0308 	and.w	r3, r3, #8
 8003c16:	2b08      	cmp	r3, #8
 8003c18:	f040 80c3 	bne.w	8003da2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	f003 0320 	and.w	r3, r3, #32
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 80bd 	beq.w	8003da2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c36:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a49      	ldr	r2, [pc, #292]	; (8003d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d101      	bne.n	8003c46 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003c42:	4b49      	ldr	r3, [pc, #292]	; (8003d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c44:	e001      	b.n	8003c4a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003c46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4944      	ldr	r1, [pc, #272]	; (8003d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c52:	428b      	cmp	r3, r1
 8003c54:	d101      	bne.n	8003c5a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003c56:	4b44      	ldr	r3, [pc, #272]	; (8003d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c58:	e001      	b.n	8003c5e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003c5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c62:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003c64:	2300      	movs	r3, #0
 8003c66:	60bb      	str	r3, [r7, #8]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	60bb      	str	r3, [r7, #8]
 8003c70:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7e:	f043 0204 	orr.w	r2, r3, #4
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7ff fe4a 	bl	8003920 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c8c:	e089      	b.n	8003da2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d107      	bne.n	8003ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d002      	beq.n	8003ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f8be 	bl	8003e24 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d107      	bne.n	8003cc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d002      	beq.n	8003cc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 f8fd 	bl	8003ebc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc8:	2b40      	cmp	r3, #64	; 0x40
 8003cca:	d12f      	bne.n	8003d2c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f003 0320 	and.w	r3, r3, #32
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d02a      	beq.n	8003d2c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	685a      	ldr	r2, [r3, #4]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ce4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a1e      	ldr	r2, [pc, #120]	; (8003d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d101      	bne.n	8003cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003cf0:	4b1d      	ldr	r3, [pc, #116]	; (8003d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003cf2:	e001      	b.n	8003cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003cf4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4919      	ldr	r1, [pc, #100]	; (8003d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d00:	428b      	cmp	r3, r1
 8003d02:	d101      	bne.n	8003d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003d04:	4b18      	ldr	r3, [pc, #96]	; (8003d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d06:	e001      	b.n	8003d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003d08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d10:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1e:	f043 0202 	orr.w	r2, r3, #2
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7ff fdfa 	bl	8003920 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	f003 0308 	and.w	r3, r3, #8
 8003d32:	2b08      	cmp	r3, #8
 8003d34:	d136      	bne.n	8003da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	f003 0320 	and.w	r3, r3, #32
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d031      	beq.n	8003da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a07      	ldr	r2, [pc, #28]	; (8003d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d101      	bne.n	8003d4e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003d4a:	4b07      	ldr	r3, [pc, #28]	; (8003d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d4c:	e001      	b.n	8003d52 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003d4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4902      	ldr	r1, [pc, #8]	; (8003d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d5a:	428b      	cmp	r3, r1
 8003d5c:	d106      	bne.n	8003d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003d5e:	4b02      	ldr	r3, [pc, #8]	; (8003d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d60:	e006      	b.n	8003d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003d62:	bf00      	nop
 8003d64:	40003800 	.word	0x40003800
 8003d68:	40003400 	.word	0x40003400
 8003d6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d74:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d84:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d92:	f043 0204 	orr.w	r2, r3, #4
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7ff fdc0 	bl	8003920 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003da0:	e000      	b.n	8003da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003da2:	bf00      	nop
}
 8003da4:	bf00      	nop
 8003da6:	3720      	adds	r7, #32
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	1c99      	adds	r1, r3, #2
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	6251      	str	r1, [r2, #36]	; 0x24
 8003dd2:	881a      	ldrh	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	3b01      	subs	r3, #1
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d113      	bne.n	8003e1a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e00:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d106      	bne.n	8003e1a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f7ff ffc9 	bl	8003dac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e1a:	bf00      	nop
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
	...

08003e24 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	1c99      	adds	r1, r3, #2
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	6251      	str	r1, [r2, #36]	; 0x24
 8003e36:	8819      	ldrh	r1, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a1d      	ldr	r2, [pc, #116]	; (8003eb4 <I2SEx_TxISR_I2SExt+0x90>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d101      	bne.n	8003e46 <I2SEx_TxISR_I2SExt+0x22>
 8003e42:	4b1d      	ldr	r3, [pc, #116]	; (8003eb8 <I2SEx_TxISR_I2SExt+0x94>)
 8003e44:	e001      	b.n	8003e4a <I2SEx_TxISR_I2SExt+0x26>
 8003e46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e4a:	460a      	mov	r2, r1
 8003e4c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d121      	bne.n	8003eaa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a12      	ldr	r2, [pc, #72]	; (8003eb4 <I2SEx_TxISR_I2SExt+0x90>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d101      	bne.n	8003e74 <I2SEx_TxISR_I2SExt+0x50>
 8003e70:	4b11      	ldr	r3, [pc, #68]	; (8003eb8 <I2SEx_TxISR_I2SExt+0x94>)
 8003e72:	e001      	b.n	8003e78 <I2SEx_TxISR_I2SExt+0x54>
 8003e74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	490d      	ldr	r1, [pc, #52]	; (8003eb4 <I2SEx_TxISR_I2SExt+0x90>)
 8003e80:	428b      	cmp	r3, r1
 8003e82:	d101      	bne.n	8003e88 <I2SEx_TxISR_I2SExt+0x64>
 8003e84:	4b0c      	ldr	r3, [pc, #48]	; (8003eb8 <I2SEx_TxISR_I2SExt+0x94>)
 8003e86:	e001      	b.n	8003e8c <I2SEx_TxISR_I2SExt+0x68>
 8003e88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e8c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e90:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d106      	bne.n	8003eaa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f7ff ff81 	bl	8003dac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003eaa:	bf00      	nop
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	40003800 	.word	0x40003800
 8003eb8:	40003400 	.word	0x40003400

08003ebc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68d8      	ldr	r0, [r3, #12]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ece:	1c99      	adds	r1, r3, #2
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003ed4:	b282      	uxth	r2, r0
 8003ed6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d113      	bne.n	8003f18 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003efe:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d106      	bne.n	8003f18 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7ff ff4a 	bl	8003dac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f18:	bf00      	nop
 8003f1a:	3708      	adds	r7, #8
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a20      	ldr	r2, [pc, #128]	; (8003fb0 <I2SEx_RxISR_I2SExt+0x90>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d101      	bne.n	8003f36 <I2SEx_RxISR_I2SExt+0x16>
 8003f32:	4b20      	ldr	r3, [pc, #128]	; (8003fb4 <I2SEx_RxISR_I2SExt+0x94>)
 8003f34:	e001      	b.n	8003f3a <I2SEx_RxISR_I2SExt+0x1a>
 8003f36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f3a:	68d8      	ldr	r0, [r3, #12]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f40:	1c99      	adds	r1, r3, #2
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003f46:	b282      	uxth	r2, r0
 8003f48:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	3b01      	subs	r3, #1
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d121      	bne.n	8003fa6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a12      	ldr	r2, [pc, #72]	; (8003fb0 <I2SEx_RxISR_I2SExt+0x90>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d101      	bne.n	8003f70 <I2SEx_RxISR_I2SExt+0x50>
 8003f6c:	4b11      	ldr	r3, [pc, #68]	; (8003fb4 <I2SEx_RxISR_I2SExt+0x94>)
 8003f6e:	e001      	b.n	8003f74 <I2SEx_RxISR_I2SExt+0x54>
 8003f70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	490d      	ldr	r1, [pc, #52]	; (8003fb0 <I2SEx_RxISR_I2SExt+0x90>)
 8003f7c:	428b      	cmp	r3, r1
 8003f7e:	d101      	bne.n	8003f84 <I2SEx_RxISR_I2SExt+0x64>
 8003f80:	4b0c      	ldr	r3, [pc, #48]	; (8003fb4 <I2SEx_RxISR_I2SExt+0x94>)
 8003f82:	e001      	b.n	8003f88 <I2SEx_RxISR_I2SExt+0x68>
 8003f84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f88:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f8c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d106      	bne.n	8003fa6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f7ff ff03 	bl	8003dac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fa6:	bf00      	nop
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	40003800 	.word	0x40003800
 8003fb4:	40003400 	.word	0x40003400

08003fb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e267      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d075      	beq.n	80040c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fd6:	4b88      	ldr	r3, [pc, #544]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f003 030c 	and.w	r3, r3, #12
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	d00c      	beq.n	8003ffc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fe2:	4b85      	ldr	r3, [pc, #532]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fea:	2b08      	cmp	r3, #8
 8003fec:	d112      	bne.n	8004014 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fee:	4b82      	ldr	r3, [pc, #520]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ff6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ffa:	d10b      	bne.n	8004014 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ffc:	4b7e      	ldr	r3, [pc, #504]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d05b      	beq.n	80040c0 <HAL_RCC_OscConfig+0x108>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d157      	bne.n	80040c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e242      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800401c:	d106      	bne.n	800402c <HAL_RCC_OscConfig+0x74>
 800401e:	4b76      	ldr	r3, [pc, #472]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a75      	ldr	r2, [pc, #468]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 8004024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004028:	6013      	str	r3, [r2, #0]
 800402a:	e01d      	b.n	8004068 <HAL_RCC_OscConfig+0xb0>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004034:	d10c      	bne.n	8004050 <HAL_RCC_OscConfig+0x98>
 8004036:	4b70      	ldr	r3, [pc, #448]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a6f      	ldr	r2, [pc, #444]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 800403c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004040:	6013      	str	r3, [r2, #0]
 8004042:	4b6d      	ldr	r3, [pc, #436]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a6c      	ldr	r2, [pc, #432]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 8004048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800404c:	6013      	str	r3, [r2, #0]
 800404e:	e00b      	b.n	8004068 <HAL_RCC_OscConfig+0xb0>
 8004050:	4b69      	ldr	r3, [pc, #420]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a68      	ldr	r2, [pc, #416]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 8004056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800405a:	6013      	str	r3, [r2, #0]
 800405c:	4b66      	ldr	r3, [pc, #408]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a65      	ldr	r2, [pc, #404]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 8004062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004066:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d013      	beq.n	8004098 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004070:	f7fd f95e 	bl	8001330 <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004078:	f7fd f95a 	bl	8001330 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b64      	cmp	r3, #100	; 0x64
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e207      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800408a:	4b5b      	ldr	r3, [pc, #364]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d0f0      	beq.n	8004078 <HAL_RCC_OscConfig+0xc0>
 8004096:	e014      	b.n	80040c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004098:	f7fd f94a 	bl	8001330 <HAL_GetTick>
 800409c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800409e:	e008      	b.n	80040b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040a0:	f7fd f946 	bl	8001330 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b64      	cmp	r3, #100	; 0x64
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e1f3      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040b2:	4b51      	ldr	r3, [pc, #324]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1f0      	bne.n	80040a0 <HAL_RCC_OscConfig+0xe8>
 80040be:	e000      	b.n	80040c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d063      	beq.n	8004196 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040ce:	4b4a      	ldr	r3, [pc, #296]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 030c 	and.w	r3, r3, #12
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00b      	beq.n	80040f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040da:	4b47      	ldr	r3, [pc, #284]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040e2:	2b08      	cmp	r3, #8
 80040e4:	d11c      	bne.n	8004120 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040e6:	4b44      	ldr	r3, [pc, #272]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d116      	bne.n	8004120 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040f2:	4b41      	ldr	r3, [pc, #260]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d005      	beq.n	800410a <HAL_RCC_OscConfig+0x152>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d001      	beq.n	800410a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e1c7      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800410a:	4b3b      	ldr	r3, [pc, #236]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	4937      	ldr	r1, [pc, #220]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 800411a:	4313      	orrs	r3, r2
 800411c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800411e:	e03a      	b.n	8004196 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d020      	beq.n	800416a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004128:	4b34      	ldr	r3, [pc, #208]	; (80041fc <HAL_RCC_OscConfig+0x244>)
 800412a:	2201      	movs	r2, #1
 800412c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800412e:	f7fd f8ff 	bl	8001330 <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004134:	e008      	b.n	8004148 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004136:	f7fd f8fb 	bl	8001330 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d901      	bls.n	8004148 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e1a8      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004148:	4b2b      	ldr	r3, [pc, #172]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0f0      	beq.n	8004136 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004154:	4b28      	ldr	r3, [pc, #160]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	4925      	ldr	r1, [pc, #148]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 8004164:	4313      	orrs	r3, r2
 8004166:	600b      	str	r3, [r1, #0]
 8004168:	e015      	b.n	8004196 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800416a:	4b24      	ldr	r3, [pc, #144]	; (80041fc <HAL_RCC_OscConfig+0x244>)
 800416c:	2200      	movs	r2, #0
 800416e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004170:	f7fd f8de 	bl	8001330 <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004178:	f7fd f8da 	bl	8001330 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e187      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800418a:	4b1b      	ldr	r3, [pc, #108]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1f0      	bne.n	8004178 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0308 	and.w	r3, r3, #8
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d036      	beq.n	8004210 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d016      	beq.n	80041d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041aa:	4b15      	ldr	r3, [pc, #84]	; (8004200 <HAL_RCC_OscConfig+0x248>)
 80041ac:	2201      	movs	r2, #1
 80041ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b0:	f7fd f8be 	bl	8001330 <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041b8:	f7fd f8ba 	bl	8001330 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e167      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ca:	4b0b      	ldr	r3, [pc, #44]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 80041cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d0f0      	beq.n	80041b8 <HAL_RCC_OscConfig+0x200>
 80041d6:	e01b      	b.n	8004210 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041d8:	4b09      	ldr	r3, [pc, #36]	; (8004200 <HAL_RCC_OscConfig+0x248>)
 80041da:	2200      	movs	r2, #0
 80041dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041de:	f7fd f8a7 	bl	8001330 <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041e4:	e00e      	b.n	8004204 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041e6:	f7fd f8a3 	bl	8001330 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d907      	bls.n	8004204 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e150      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
 80041f8:	40023800 	.word	0x40023800
 80041fc:	42470000 	.word	0x42470000
 8004200:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004204:	4b88      	ldr	r3, [pc, #544]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 8004206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1ea      	bne.n	80041e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0304 	and.w	r3, r3, #4
 8004218:	2b00      	cmp	r3, #0
 800421a:	f000 8097 	beq.w	800434c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800421e:	2300      	movs	r3, #0
 8004220:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004222:	4b81      	ldr	r3, [pc, #516]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10f      	bne.n	800424e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800422e:	2300      	movs	r3, #0
 8004230:	60bb      	str	r3, [r7, #8]
 8004232:	4b7d      	ldr	r3, [pc, #500]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	4a7c      	ldr	r2, [pc, #496]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 8004238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800423c:	6413      	str	r3, [r2, #64]	; 0x40
 800423e:	4b7a      	ldr	r3, [pc, #488]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004246:	60bb      	str	r3, [r7, #8]
 8004248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800424a:	2301      	movs	r3, #1
 800424c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800424e:	4b77      	ldr	r3, [pc, #476]	; (800442c <HAL_RCC_OscConfig+0x474>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004256:	2b00      	cmp	r3, #0
 8004258:	d118      	bne.n	800428c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800425a:	4b74      	ldr	r3, [pc, #464]	; (800442c <HAL_RCC_OscConfig+0x474>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a73      	ldr	r2, [pc, #460]	; (800442c <HAL_RCC_OscConfig+0x474>)
 8004260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004264:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004266:	f7fd f863 	bl	8001330 <HAL_GetTick>
 800426a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800426c:	e008      	b.n	8004280 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800426e:	f7fd f85f 	bl	8001330 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d901      	bls.n	8004280 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e10c      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004280:	4b6a      	ldr	r3, [pc, #424]	; (800442c <HAL_RCC_OscConfig+0x474>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0f0      	beq.n	800426e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d106      	bne.n	80042a2 <HAL_RCC_OscConfig+0x2ea>
 8004294:	4b64      	ldr	r3, [pc, #400]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 8004296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004298:	4a63      	ldr	r2, [pc, #396]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 800429a:	f043 0301 	orr.w	r3, r3, #1
 800429e:	6713      	str	r3, [r2, #112]	; 0x70
 80042a0:	e01c      	b.n	80042dc <HAL_RCC_OscConfig+0x324>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	2b05      	cmp	r3, #5
 80042a8:	d10c      	bne.n	80042c4 <HAL_RCC_OscConfig+0x30c>
 80042aa:	4b5f      	ldr	r3, [pc, #380]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 80042ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ae:	4a5e      	ldr	r2, [pc, #376]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 80042b0:	f043 0304 	orr.w	r3, r3, #4
 80042b4:	6713      	str	r3, [r2, #112]	; 0x70
 80042b6:	4b5c      	ldr	r3, [pc, #368]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 80042b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ba:	4a5b      	ldr	r2, [pc, #364]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 80042bc:	f043 0301 	orr.w	r3, r3, #1
 80042c0:	6713      	str	r3, [r2, #112]	; 0x70
 80042c2:	e00b      	b.n	80042dc <HAL_RCC_OscConfig+0x324>
 80042c4:	4b58      	ldr	r3, [pc, #352]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 80042c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c8:	4a57      	ldr	r2, [pc, #348]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 80042ca:	f023 0301 	bic.w	r3, r3, #1
 80042ce:	6713      	str	r3, [r2, #112]	; 0x70
 80042d0:	4b55      	ldr	r3, [pc, #340]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 80042d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d4:	4a54      	ldr	r2, [pc, #336]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 80042d6:	f023 0304 	bic.w	r3, r3, #4
 80042da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d015      	beq.n	8004310 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e4:	f7fd f824 	bl	8001330 <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ea:	e00a      	b.n	8004302 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ec:	f7fd f820 	bl	8001330 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e0cb      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004302:	4b49      	ldr	r3, [pc, #292]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 8004304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0ee      	beq.n	80042ec <HAL_RCC_OscConfig+0x334>
 800430e:	e014      	b.n	800433a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004310:	f7fd f80e 	bl	8001330 <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004316:	e00a      	b.n	800432e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004318:	f7fd f80a 	bl	8001330 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	f241 3288 	movw	r2, #5000	; 0x1388
 8004326:	4293      	cmp	r3, r2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e0b5      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800432e:	4b3e      	ldr	r3, [pc, #248]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 8004330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1ee      	bne.n	8004318 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800433a:	7dfb      	ldrb	r3, [r7, #23]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d105      	bne.n	800434c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004340:	4b39      	ldr	r3, [pc, #228]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 8004342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004344:	4a38      	ldr	r2, [pc, #224]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 8004346:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800434a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 80a1 	beq.w	8004498 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004356:	4b34      	ldr	r3, [pc, #208]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f003 030c 	and.w	r3, r3, #12
 800435e:	2b08      	cmp	r3, #8
 8004360:	d05c      	beq.n	800441c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	2b02      	cmp	r3, #2
 8004368:	d141      	bne.n	80043ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800436a:	4b31      	ldr	r3, [pc, #196]	; (8004430 <HAL_RCC_OscConfig+0x478>)
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004370:	f7fc ffde 	bl	8001330 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004378:	f7fc ffda 	bl	8001330 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e087      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800438a:	4b27      	ldr	r3, [pc, #156]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1f0      	bne.n	8004378 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	69da      	ldr	r2, [r3, #28]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	431a      	orrs	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a4:	019b      	lsls	r3, r3, #6
 80043a6:	431a      	orrs	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ac:	085b      	lsrs	r3, r3, #1
 80043ae:	3b01      	subs	r3, #1
 80043b0:	041b      	lsls	r3, r3, #16
 80043b2:	431a      	orrs	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b8:	061b      	lsls	r3, r3, #24
 80043ba:	491b      	ldr	r1, [pc, #108]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043c0:	4b1b      	ldr	r3, [pc, #108]	; (8004430 <HAL_RCC_OscConfig+0x478>)
 80043c2:	2201      	movs	r2, #1
 80043c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c6:	f7fc ffb3 	bl	8001330 <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043cc:	e008      	b.n	80043e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043ce:	f7fc ffaf 	bl	8001330 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e05c      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043e0:	4b11      	ldr	r3, [pc, #68]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0f0      	beq.n	80043ce <HAL_RCC_OscConfig+0x416>
 80043ec:	e054      	b.n	8004498 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ee:	4b10      	ldr	r3, [pc, #64]	; (8004430 <HAL_RCC_OscConfig+0x478>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f4:	f7fc ff9c 	bl	8001330 <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043fc:	f7fc ff98 	bl	8001330 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e045      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800440e:	4b06      	ldr	r3, [pc, #24]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1f0      	bne.n	80043fc <HAL_RCC_OscConfig+0x444>
 800441a:	e03d      	b.n	8004498 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d107      	bne.n	8004434 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e038      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
 8004428:	40023800 	.word	0x40023800
 800442c:	40007000 	.word	0x40007000
 8004430:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004434:	4b1b      	ldr	r3, [pc, #108]	; (80044a4 <HAL_RCC_OscConfig+0x4ec>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d028      	beq.n	8004494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800444c:	429a      	cmp	r2, r3
 800444e:	d121      	bne.n	8004494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800445a:	429a      	cmp	r2, r3
 800445c:	d11a      	bne.n	8004494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004464:	4013      	ands	r3, r2
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800446a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800446c:	4293      	cmp	r3, r2
 800446e:	d111      	bne.n	8004494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447a:	085b      	lsrs	r3, r3, #1
 800447c:	3b01      	subs	r3, #1
 800447e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004480:	429a      	cmp	r2, r3
 8004482:	d107      	bne.n	8004494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004490:	429a      	cmp	r2, r3
 8004492:	d001      	beq.n	8004498 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e000      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3718      	adds	r7, #24
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	40023800 	.word	0x40023800

080044a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d101      	bne.n	80044bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e0cc      	b.n	8004656 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044bc:	4b68      	ldr	r3, [pc, #416]	; (8004660 <HAL_RCC_ClockConfig+0x1b8>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d90c      	bls.n	80044e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ca:	4b65      	ldr	r3, [pc, #404]	; (8004660 <HAL_RCC_ClockConfig+0x1b8>)
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	b2d2      	uxtb	r2, r2
 80044d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044d2:	4b63      	ldr	r3, [pc, #396]	; (8004660 <HAL_RCC_ClockConfig+0x1b8>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0307 	and.w	r3, r3, #7
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d001      	beq.n	80044e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e0b8      	b.n	8004656 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d020      	beq.n	8004532 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0304 	and.w	r3, r3, #4
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d005      	beq.n	8004508 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044fc:	4b59      	ldr	r3, [pc, #356]	; (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	4a58      	ldr	r2, [pc, #352]	; (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 8004502:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004506:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0308 	and.w	r3, r3, #8
 8004510:	2b00      	cmp	r3, #0
 8004512:	d005      	beq.n	8004520 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004514:	4b53      	ldr	r3, [pc, #332]	; (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	4a52      	ldr	r2, [pc, #328]	; (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 800451a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800451e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004520:	4b50      	ldr	r3, [pc, #320]	; (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	494d      	ldr	r1, [pc, #308]	; (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 800452e:	4313      	orrs	r3, r2
 8004530:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d044      	beq.n	80045c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d107      	bne.n	8004556 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004546:	4b47      	ldr	r3, [pc, #284]	; (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d119      	bne.n	8004586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e07f      	b.n	8004656 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2b02      	cmp	r3, #2
 800455c:	d003      	beq.n	8004566 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004562:	2b03      	cmp	r3, #3
 8004564:	d107      	bne.n	8004576 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004566:	4b3f      	ldr	r3, [pc, #252]	; (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d109      	bne.n	8004586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e06f      	b.n	8004656 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004576:	4b3b      	ldr	r3, [pc, #236]	; (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e067      	b.n	8004656 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004586:	4b37      	ldr	r3, [pc, #220]	; (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f023 0203 	bic.w	r2, r3, #3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	4934      	ldr	r1, [pc, #208]	; (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 8004594:	4313      	orrs	r3, r2
 8004596:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004598:	f7fc feca 	bl	8001330 <HAL_GetTick>
 800459c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800459e:	e00a      	b.n	80045b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045a0:	f7fc fec6 	bl	8001330 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e04f      	b.n	8004656 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045b6:	4b2b      	ldr	r3, [pc, #172]	; (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 020c 	and.w	r2, r3, #12
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d1eb      	bne.n	80045a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045c8:	4b25      	ldr	r3, [pc, #148]	; (8004660 <HAL_RCC_ClockConfig+0x1b8>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0307 	and.w	r3, r3, #7
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d20c      	bcs.n	80045f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045d6:	4b22      	ldr	r3, [pc, #136]	; (8004660 <HAL_RCC_ClockConfig+0x1b8>)
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	b2d2      	uxtb	r2, r2
 80045dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045de:	4b20      	ldr	r3, [pc, #128]	; (8004660 <HAL_RCC_ClockConfig+0x1b8>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0307 	and.w	r3, r3, #7
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d001      	beq.n	80045f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e032      	b.n	8004656 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0304 	and.w	r3, r3, #4
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d008      	beq.n	800460e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045fc:	4b19      	ldr	r3, [pc, #100]	; (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	4916      	ldr	r1, [pc, #88]	; (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 800460a:	4313      	orrs	r3, r2
 800460c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0308 	and.w	r3, r3, #8
 8004616:	2b00      	cmp	r3, #0
 8004618:	d009      	beq.n	800462e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800461a:	4b12      	ldr	r3, [pc, #72]	; (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	490e      	ldr	r1, [pc, #56]	; (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 800462a:	4313      	orrs	r3, r2
 800462c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800462e:	f000 f821 	bl	8004674 <HAL_RCC_GetSysClockFreq>
 8004632:	4602      	mov	r2, r0
 8004634:	4b0b      	ldr	r3, [pc, #44]	; (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	091b      	lsrs	r3, r3, #4
 800463a:	f003 030f 	and.w	r3, r3, #15
 800463e:	490a      	ldr	r1, [pc, #40]	; (8004668 <HAL_RCC_ClockConfig+0x1c0>)
 8004640:	5ccb      	ldrb	r3, [r1, r3]
 8004642:	fa22 f303 	lsr.w	r3, r2, r3
 8004646:	4a09      	ldr	r2, [pc, #36]	; (800466c <HAL_RCC_ClockConfig+0x1c4>)
 8004648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800464a:	4b09      	ldr	r3, [pc, #36]	; (8004670 <HAL_RCC_ClockConfig+0x1c8>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4618      	mov	r0, r3
 8004650:	f7fc fe2a 	bl	80012a8 <HAL_InitTick>

  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	40023c00 	.word	0x40023c00
 8004664:	40023800 	.word	0x40023800
 8004668:	08007edc 	.word	0x08007edc
 800466c:	20000004 	.word	0x20000004
 8004670:	20000008 	.word	0x20000008

08004674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004678:	b094      	sub	sp, #80	; 0x50
 800467a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800467c:	2300      	movs	r3, #0
 800467e:	647b      	str	r3, [r7, #68]	; 0x44
 8004680:	2300      	movs	r3, #0
 8004682:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004684:	2300      	movs	r3, #0
 8004686:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800468c:	4b79      	ldr	r3, [pc, #484]	; (8004874 <HAL_RCC_GetSysClockFreq+0x200>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f003 030c 	and.w	r3, r3, #12
 8004694:	2b08      	cmp	r3, #8
 8004696:	d00d      	beq.n	80046b4 <HAL_RCC_GetSysClockFreq+0x40>
 8004698:	2b08      	cmp	r3, #8
 800469a:	f200 80e1 	bhi.w	8004860 <HAL_RCC_GetSysClockFreq+0x1ec>
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d002      	beq.n	80046a8 <HAL_RCC_GetSysClockFreq+0x34>
 80046a2:	2b04      	cmp	r3, #4
 80046a4:	d003      	beq.n	80046ae <HAL_RCC_GetSysClockFreq+0x3a>
 80046a6:	e0db      	b.n	8004860 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046a8:	4b73      	ldr	r3, [pc, #460]	; (8004878 <HAL_RCC_GetSysClockFreq+0x204>)
 80046aa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80046ac:	e0db      	b.n	8004866 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046ae:	4b73      	ldr	r3, [pc, #460]	; (800487c <HAL_RCC_GetSysClockFreq+0x208>)
 80046b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046b2:	e0d8      	b.n	8004866 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046b4:	4b6f      	ldr	r3, [pc, #444]	; (8004874 <HAL_RCC_GetSysClockFreq+0x200>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046bc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046be:	4b6d      	ldr	r3, [pc, #436]	; (8004874 <HAL_RCC_GetSysClockFreq+0x200>)
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d063      	beq.n	8004792 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046ca:	4b6a      	ldr	r3, [pc, #424]	; (8004874 <HAL_RCC_GetSysClockFreq+0x200>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	099b      	lsrs	r3, r3, #6
 80046d0:	2200      	movs	r2, #0
 80046d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80046d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80046d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046dc:	633b      	str	r3, [r7, #48]	; 0x30
 80046de:	2300      	movs	r3, #0
 80046e0:	637b      	str	r3, [r7, #52]	; 0x34
 80046e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80046e6:	4622      	mov	r2, r4
 80046e8:	462b      	mov	r3, r5
 80046ea:	f04f 0000 	mov.w	r0, #0
 80046ee:	f04f 0100 	mov.w	r1, #0
 80046f2:	0159      	lsls	r1, r3, #5
 80046f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046f8:	0150      	lsls	r0, r2, #5
 80046fa:	4602      	mov	r2, r0
 80046fc:	460b      	mov	r3, r1
 80046fe:	4621      	mov	r1, r4
 8004700:	1a51      	subs	r1, r2, r1
 8004702:	6139      	str	r1, [r7, #16]
 8004704:	4629      	mov	r1, r5
 8004706:	eb63 0301 	sbc.w	r3, r3, r1
 800470a:	617b      	str	r3, [r7, #20]
 800470c:	f04f 0200 	mov.w	r2, #0
 8004710:	f04f 0300 	mov.w	r3, #0
 8004714:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004718:	4659      	mov	r1, fp
 800471a:	018b      	lsls	r3, r1, #6
 800471c:	4651      	mov	r1, sl
 800471e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004722:	4651      	mov	r1, sl
 8004724:	018a      	lsls	r2, r1, #6
 8004726:	4651      	mov	r1, sl
 8004728:	ebb2 0801 	subs.w	r8, r2, r1
 800472c:	4659      	mov	r1, fp
 800472e:	eb63 0901 	sbc.w	r9, r3, r1
 8004732:	f04f 0200 	mov.w	r2, #0
 8004736:	f04f 0300 	mov.w	r3, #0
 800473a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800473e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004742:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004746:	4690      	mov	r8, r2
 8004748:	4699      	mov	r9, r3
 800474a:	4623      	mov	r3, r4
 800474c:	eb18 0303 	adds.w	r3, r8, r3
 8004750:	60bb      	str	r3, [r7, #8]
 8004752:	462b      	mov	r3, r5
 8004754:	eb49 0303 	adc.w	r3, r9, r3
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	f04f 0200 	mov.w	r2, #0
 800475e:	f04f 0300 	mov.w	r3, #0
 8004762:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004766:	4629      	mov	r1, r5
 8004768:	024b      	lsls	r3, r1, #9
 800476a:	4621      	mov	r1, r4
 800476c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004770:	4621      	mov	r1, r4
 8004772:	024a      	lsls	r2, r1, #9
 8004774:	4610      	mov	r0, r2
 8004776:	4619      	mov	r1, r3
 8004778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800477a:	2200      	movs	r2, #0
 800477c:	62bb      	str	r3, [r7, #40]	; 0x28
 800477e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004780:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004784:	f7fb fd20 	bl	80001c8 <__aeabi_uldivmod>
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	4613      	mov	r3, r2
 800478e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004790:	e058      	b.n	8004844 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004792:	4b38      	ldr	r3, [pc, #224]	; (8004874 <HAL_RCC_GetSysClockFreq+0x200>)
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	099b      	lsrs	r3, r3, #6
 8004798:	2200      	movs	r2, #0
 800479a:	4618      	mov	r0, r3
 800479c:	4611      	mov	r1, r2
 800479e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80047a2:	623b      	str	r3, [r7, #32]
 80047a4:	2300      	movs	r3, #0
 80047a6:	627b      	str	r3, [r7, #36]	; 0x24
 80047a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80047ac:	4642      	mov	r2, r8
 80047ae:	464b      	mov	r3, r9
 80047b0:	f04f 0000 	mov.w	r0, #0
 80047b4:	f04f 0100 	mov.w	r1, #0
 80047b8:	0159      	lsls	r1, r3, #5
 80047ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047be:	0150      	lsls	r0, r2, #5
 80047c0:	4602      	mov	r2, r0
 80047c2:	460b      	mov	r3, r1
 80047c4:	4641      	mov	r1, r8
 80047c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80047ca:	4649      	mov	r1, r9
 80047cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80047d0:	f04f 0200 	mov.w	r2, #0
 80047d4:	f04f 0300 	mov.w	r3, #0
 80047d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80047dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80047e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80047e4:	ebb2 040a 	subs.w	r4, r2, sl
 80047e8:	eb63 050b 	sbc.w	r5, r3, fp
 80047ec:	f04f 0200 	mov.w	r2, #0
 80047f0:	f04f 0300 	mov.w	r3, #0
 80047f4:	00eb      	lsls	r3, r5, #3
 80047f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047fa:	00e2      	lsls	r2, r4, #3
 80047fc:	4614      	mov	r4, r2
 80047fe:	461d      	mov	r5, r3
 8004800:	4643      	mov	r3, r8
 8004802:	18e3      	adds	r3, r4, r3
 8004804:	603b      	str	r3, [r7, #0]
 8004806:	464b      	mov	r3, r9
 8004808:	eb45 0303 	adc.w	r3, r5, r3
 800480c:	607b      	str	r3, [r7, #4]
 800480e:	f04f 0200 	mov.w	r2, #0
 8004812:	f04f 0300 	mov.w	r3, #0
 8004816:	e9d7 4500 	ldrd	r4, r5, [r7]
 800481a:	4629      	mov	r1, r5
 800481c:	028b      	lsls	r3, r1, #10
 800481e:	4621      	mov	r1, r4
 8004820:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004824:	4621      	mov	r1, r4
 8004826:	028a      	lsls	r2, r1, #10
 8004828:	4610      	mov	r0, r2
 800482a:	4619      	mov	r1, r3
 800482c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800482e:	2200      	movs	r2, #0
 8004830:	61bb      	str	r3, [r7, #24]
 8004832:	61fa      	str	r2, [r7, #28]
 8004834:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004838:	f7fb fcc6 	bl	80001c8 <__aeabi_uldivmod>
 800483c:	4602      	mov	r2, r0
 800483e:	460b      	mov	r3, r1
 8004840:	4613      	mov	r3, r2
 8004842:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004844:	4b0b      	ldr	r3, [pc, #44]	; (8004874 <HAL_RCC_GetSysClockFreq+0x200>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	0c1b      	lsrs	r3, r3, #16
 800484a:	f003 0303 	and.w	r3, r3, #3
 800484e:	3301      	adds	r3, #1
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004854:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004858:	fbb2 f3f3 	udiv	r3, r2, r3
 800485c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800485e:	e002      	b.n	8004866 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004860:	4b05      	ldr	r3, [pc, #20]	; (8004878 <HAL_RCC_GetSysClockFreq+0x204>)
 8004862:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004864:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004868:	4618      	mov	r0, r3
 800486a:	3750      	adds	r7, #80	; 0x50
 800486c:	46bd      	mov	sp, r7
 800486e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004872:	bf00      	nop
 8004874:	40023800 	.word	0x40023800
 8004878:	00f42400 	.word	0x00f42400
 800487c:	007a1200 	.word	0x007a1200

08004880 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004884:	4b03      	ldr	r3, [pc, #12]	; (8004894 <HAL_RCC_GetHCLKFreq+0x14>)
 8004886:	681b      	ldr	r3, [r3, #0]
}
 8004888:	4618      	mov	r0, r3
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	20000004 	.word	0x20000004

08004898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800489c:	f7ff fff0 	bl	8004880 <HAL_RCC_GetHCLKFreq>
 80048a0:	4602      	mov	r2, r0
 80048a2:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	0a9b      	lsrs	r3, r3, #10
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	4903      	ldr	r1, [pc, #12]	; (80048bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80048ae:	5ccb      	ldrb	r3, [r1, r3]
 80048b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	40023800 	.word	0x40023800
 80048bc:	08007eec 	.word	0x08007eec

080048c0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048c8:	2300      	movs	r3, #0
 80048ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d105      	bne.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d035      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80048e8:	4b62      	ldr	r3, [pc, #392]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048ee:	f7fc fd1f 	bl	8001330 <HAL_GetTick>
 80048f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048f4:	e008      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80048f6:	f7fc fd1b 	bl	8001330 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b02      	cmp	r3, #2
 8004902:	d901      	bls.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e0b0      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004908:	4b5b      	ldr	r3, [pc, #364]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1f0      	bne.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	019a      	lsls	r2, r3, #6
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	071b      	lsls	r3, r3, #28
 8004920:	4955      	ldr	r1, [pc, #340]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004922:	4313      	orrs	r3, r2
 8004924:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004928:	4b52      	ldr	r3, [pc, #328]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800492a:	2201      	movs	r2, #1
 800492c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800492e:	f7fc fcff 	bl	8001330 <HAL_GetTick>
 8004932:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004934:	e008      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004936:	f7fc fcfb 	bl	8001330 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d901      	bls.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e090      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004948:	4b4b      	ldr	r3, [pc, #300]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d0f0      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0302 	and.w	r3, r3, #2
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 8083 	beq.w	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004962:	2300      	movs	r3, #0
 8004964:	60fb      	str	r3, [r7, #12]
 8004966:	4b44      	ldr	r3, [pc, #272]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	4a43      	ldr	r2, [pc, #268]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800496c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004970:	6413      	str	r3, [r2, #64]	; 0x40
 8004972:	4b41      	ldr	r3, [pc, #260]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800497e:	4b3f      	ldr	r3, [pc, #252]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a3e      	ldr	r2, [pc, #248]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004988:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800498a:	f7fc fcd1 	bl	8001330 <HAL_GetTick>
 800498e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004990:	e008      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004992:	f7fc fccd 	bl	8001330 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b02      	cmp	r3, #2
 800499e:	d901      	bls.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e062      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80049a4:	4b35      	ldr	r3, [pc, #212]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d0f0      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049b0:	4b31      	ldr	r3, [pc, #196]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049b8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d02f      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d028      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049ce:	4b2a      	ldr	r3, [pc, #168]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049d6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049d8:	4b29      	ldr	r3, [pc, #164]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80049da:	2201      	movs	r2, #1
 80049dc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049de:	4b28      	ldr	r3, [pc, #160]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80049e4:	4a24      	ldr	r2, [pc, #144]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80049ea:	4b23      	ldr	r3, [pc, #140]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d114      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80049f6:	f7fc fc9b 	bl	8001330 <HAL_GetTick>
 80049fa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049fc:	e00a      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049fe:	f7fc fc97 	bl	8001330 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e02a      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a14:	4b18      	ldr	r3, [pc, #96]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d0ee      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a2c:	d10d      	bne.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004a2e:	4b12      	ldr	r3, [pc, #72]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a42:	490d      	ldr	r1, [pc, #52]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	608b      	str	r3, [r1, #8]
 8004a48:	e005      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004a4a:	4b0b      	ldr	r3, [pc, #44]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	4a0a      	ldr	r2, [pc, #40]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a50:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004a54:	6093      	str	r3, [r2, #8]
 8004a56:	4b08      	ldr	r3, [pc, #32]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a62:	4905      	ldr	r1, [pc, #20]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3718      	adds	r7, #24
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	42470068 	.word	0x42470068
 8004a78:	40023800 	.word	0x40023800
 8004a7c:	40007000 	.word	0x40007000
 8004a80:	42470e40 	.word	0x42470e40

08004a84 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b087      	sub	sp, #28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004a90:	2300      	movs	r3, #0
 8004a92:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004a94:	2300      	movs	r3, #0
 8004a96:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d13e      	bne.n	8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004aa2:	4b23      	ldr	r3, [pc, #140]	; (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004aaa:	60fb      	str	r3, [r7, #12]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d005      	beq.n	8004abe <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d12f      	bne.n	8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004ab8:	4b1e      	ldr	r3, [pc, #120]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004aba:	617b      	str	r3, [r7, #20]
          break;
 8004abc:	e02f      	b.n	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004abe:	4b1c      	ldr	r3, [pc, #112]	; (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ac6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004aca:	d108      	bne.n	8004ade <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004acc:	4b18      	ldr	r3, [pc, #96]	; (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ad4:	4a18      	ldr	r2, [pc, #96]	; (8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ada:	613b      	str	r3, [r7, #16]
 8004adc:	e007      	b.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004ade:	4b14      	ldr	r3, [pc, #80]	; (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ae6:	4a15      	ldr	r2, [pc, #84]	; (8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aec:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004aee:	4b10      	ldr	r3, [pc, #64]	; (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004af4:	099b      	lsrs	r3, r3, #6
 8004af6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	fb02 f303 	mul.w	r3, r2, r3
 8004b00:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004b02:	4b0b      	ldr	r3, [pc, #44]	; (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b08:	0f1b      	lsrs	r3, r3, #28
 8004b0a:	f003 0307 	and.w	r3, r3, #7
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b14:	617b      	str	r3, [r7, #20]
          break;
 8004b16:	e002      	b.n	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	617b      	str	r3, [r7, #20]
          break;
 8004b1c:	bf00      	nop
        }
      }
      break;
 8004b1e:	bf00      	nop
    }
  }
  return frequency;
 8004b20:	697b      	ldr	r3, [r7, #20]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	371c      	adds	r7, #28
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	40023800 	.word	0x40023800
 8004b34:	00bb8000 	.word	0x00bb8000
 8004b38:	007a1200 	.word	0x007a1200
 8004b3c:	00f42400 	.word	0x00f42400

08004b40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e07b      	b.n	8004c4a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d108      	bne.n	8004b6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b62:	d009      	beq.n	8004b78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	61da      	str	r2, [r3, #28]
 8004b6a:	e005      	b.n	8004b78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d106      	bne.n	8004b98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7fc fa50 	bl	8001038 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	f003 0302 	and.w	r3, r3, #2
 8004bd4:	431a      	orrs	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	431a      	orrs	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004be8:	431a      	orrs	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	69db      	ldr	r3, [r3, #28]
 8004bee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bf2:	431a      	orrs	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a1b      	ldr	r3, [r3, #32]
 8004bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bfc:	ea42 0103 	orr.w	r1, r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c04:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	0c1b      	lsrs	r3, r3, #16
 8004c16:	f003 0104 	and.w	r1, r3, #4
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1e:	f003 0210 	and.w	r2, r3, #16
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	69da      	ldr	r2, [r3, #28]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b088      	sub	sp, #32
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	60f8      	str	r0, [r7, #12]
 8004c5a:	60b9      	str	r1, [r7, #8]
 8004c5c:	603b      	str	r3, [r7, #0]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c62:	2300      	movs	r3, #0
 8004c64:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d101      	bne.n	8004c74 <HAL_SPI_Transmit+0x22>
 8004c70:	2302      	movs	r3, #2
 8004c72:	e126      	b.n	8004ec2 <HAL_SPI_Transmit+0x270>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c7c:	f7fc fb58 	bl	8001330 <HAL_GetTick>
 8004c80:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c82:	88fb      	ldrh	r3, [r7, #6]
 8004c84:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d002      	beq.n	8004c98 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c92:	2302      	movs	r3, #2
 8004c94:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c96:	e10b      	b.n	8004eb0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d002      	beq.n	8004ca4 <HAL_SPI_Transmit+0x52>
 8004c9e:	88fb      	ldrh	r3, [r7, #6]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d102      	bne.n	8004caa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ca8:	e102      	b.n	8004eb0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2203      	movs	r2, #3
 8004cae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	88fa      	ldrh	r2, [r7, #6]
 8004cc2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	88fa      	ldrh	r2, [r7, #6]
 8004cc8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cf0:	d10f      	bne.n	8004d12 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d00:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d10:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1c:	2b40      	cmp	r3, #64	; 0x40
 8004d1e:	d007      	beq.n	8004d30 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d38:	d14b      	bne.n	8004dd2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <HAL_SPI_Transmit+0xf6>
 8004d42:	8afb      	ldrh	r3, [r7, #22]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d13e      	bne.n	8004dc6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4c:	881a      	ldrh	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d58:	1c9a      	adds	r2, r3, #2
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	3b01      	subs	r3, #1
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d6c:	e02b      	b.n	8004dc6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d112      	bne.n	8004da2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d80:	881a      	ldrh	r2, [r3, #0]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8c:	1c9a      	adds	r2, r3, #2
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004da0:	e011      	b.n	8004dc6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004da2:	f7fc fac5 	bl	8001330 <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d803      	bhi.n	8004dba <HAL_SPI_Transmit+0x168>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db8:	d102      	bne.n	8004dc0 <HAL_SPI_Transmit+0x16e>
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d102      	bne.n	8004dc6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004dc4:	e074      	b.n	8004eb0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1ce      	bne.n	8004d6e <HAL_SPI_Transmit+0x11c>
 8004dd0:	e04c      	b.n	8004e6c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d002      	beq.n	8004de0 <HAL_SPI_Transmit+0x18e>
 8004dda:	8afb      	ldrh	r3, [r7, #22]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d140      	bne.n	8004e62 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	330c      	adds	r3, #12
 8004dea:	7812      	ldrb	r2, [r2, #0]
 8004dec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df2:	1c5a      	adds	r2, r3, #1
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004e06:	e02c      	b.n	8004e62 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d113      	bne.n	8004e3e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	330c      	adds	r3, #12
 8004e20:	7812      	ldrb	r2, [r2, #0]
 8004e22:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e28:	1c5a      	adds	r2, r3, #1
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	3b01      	subs	r3, #1
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e3c:	e011      	b.n	8004e62 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e3e:	f7fc fa77 	bl	8001330 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d803      	bhi.n	8004e56 <HAL_SPI_Transmit+0x204>
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e54:	d102      	bne.n	8004e5c <HAL_SPI_Transmit+0x20a>
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d102      	bne.n	8004e62 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e60:	e026      	b.n	8004eb0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1cd      	bne.n	8004e08 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	6839      	ldr	r1, [r7, #0]
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f000 fbcb 	bl	800560c <SPI_EndRxTxTransaction>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d002      	beq.n	8004e82 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d10a      	bne.n	8004ea0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	613b      	str	r3, [r7, #16]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	613b      	str	r3, [r7, #16]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	613b      	str	r3, [r7, #16]
 8004e9e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d002      	beq.n	8004eae <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	77fb      	strb	r3, [r7, #31]
 8004eac:	e000      	b.n	8004eb0 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004eae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ec0:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3720      	adds	r7, #32
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b088      	sub	sp, #32
 8004ece:	af02      	add	r7, sp, #8
 8004ed0:	60f8      	str	r0, [r7, #12]
 8004ed2:	60b9      	str	r1, [r7, #8]
 8004ed4:	603b      	str	r3, [r7, #0]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004eda:	2300      	movs	r3, #0
 8004edc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ee6:	d112      	bne.n	8004f0e <HAL_SPI_Receive+0x44>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10e      	bne.n	8004f0e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2204      	movs	r2, #4
 8004ef4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004ef8:	88fa      	ldrh	r2, [r7, #6]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	4613      	mov	r3, r2
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	68b9      	ldr	r1, [r7, #8]
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f000 f8f1 	bl	80050ec <HAL_SPI_TransmitReceive>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	e0ea      	b.n	80050e4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d101      	bne.n	8004f1c <HAL_SPI_Receive+0x52>
 8004f18:	2302      	movs	r3, #2
 8004f1a:	e0e3      	b.n	80050e4 <HAL_SPI_Receive+0x21a>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f24:	f7fc fa04 	bl	8001330 <HAL_GetTick>
 8004f28:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d002      	beq.n	8004f3c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004f36:	2302      	movs	r3, #2
 8004f38:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f3a:	e0ca      	b.n	80050d2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d002      	beq.n	8004f48 <HAL_SPI_Receive+0x7e>
 8004f42:	88fb      	ldrh	r3, [r7, #6]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d102      	bne.n	8004f4e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f4c:	e0c1      	b.n	80050d2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2204      	movs	r2, #4
 8004f52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	88fa      	ldrh	r2, [r7, #6]
 8004f66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	88fa      	ldrh	r2, [r7, #6]
 8004f6c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f94:	d10f      	bne.n	8004fb6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fa4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004fb4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc0:	2b40      	cmp	r3, #64	; 0x40
 8004fc2:	d007      	beq.n	8004fd4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fd2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d162      	bne.n	80050a2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004fdc:	e02e      	b.n	800503c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f003 0301 	and.w	r3, r3, #1
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d115      	bne.n	8005018 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f103 020c 	add.w	r2, r3, #12
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff8:	7812      	ldrb	r2, [r2, #0]
 8004ffa:	b2d2      	uxtb	r2, r2
 8004ffc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005002:	1c5a      	adds	r2, r3, #1
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800500c:	b29b      	uxth	r3, r3
 800500e:	3b01      	subs	r3, #1
 8005010:	b29a      	uxth	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005016:	e011      	b.n	800503c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005018:	f7fc f98a 	bl	8001330 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	429a      	cmp	r2, r3
 8005026:	d803      	bhi.n	8005030 <HAL_SPI_Receive+0x166>
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502e:	d102      	bne.n	8005036 <HAL_SPI_Receive+0x16c>
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d102      	bne.n	800503c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	75fb      	strb	r3, [r7, #23]
          goto error;
 800503a:	e04a      	b.n	80050d2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005040:	b29b      	uxth	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1cb      	bne.n	8004fde <HAL_SPI_Receive+0x114>
 8005046:	e031      	b.n	80050ac <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b01      	cmp	r3, #1
 8005054:	d113      	bne.n	800507e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68da      	ldr	r2, [r3, #12]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005060:	b292      	uxth	r2, r2
 8005062:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005068:	1c9a      	adds	r2, r3, #2
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005072:	b29b      	uxth	r3, r3
 8005074:	3b01      	subs	r3, #1
 8005076:	b29a      	uxth	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800507c:	e011      	b.n	80050a2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800507e:	f7fc f957 	bl	8001330 <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	683a      	ldr	r2, [r7, #0]
 800508a:	429a      	cmp	r2, r3
 800508c:	d803      	bhi.n	8005096 <HAL_SPI_Receive+0x1cc>
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005094:	d102      	bne.n	800509c <HAL_SPI_Receive+0x1d2>
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d102      	bne.n	80050a2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	75fb      	strb	r3, [r7, #23]
          goto error;
 80050a0:	e017      	b.n	80050d2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1cd      	bne.n	8005048 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	6839      	ldr	r1, [r7, #0]
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f000 fa45 	bl	8005540 <SPI_EndRxTransaction>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d002      	beq.n	80050c2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2220      	movs	r2, #32
 80050c0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d002      	beq.n	80050d0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	75fb      	strb	r3, [r7, #23]
 80050ce:	e000      	b.n	80050d2 <HAL_SPI_Receive+0x208>
  }

error :
 80050d0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80050e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3718      	adds	r7, #24
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b08c      	sub	sp, #48	; 0x30
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
 80050f8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80050fa:	2301      	movs	r3, #1
 80050fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800510a:	2b01      	cmp	r3, #1
 800510c:	d101      	bne.n	8005112 <HAL_SPI_TransmitReceive+0x26>
 800510e:	2302      	movs	r3, #2
 8005110:	e18a      	b.n	8005428 <HAL_SPI_TransmitReceive+0x33c>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800511a:	f7fc f909 	bl	8001330 <HAL_GetTick>
 800511e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005130:	887b      	ldrh	r3, [r7, #2]
 8005132:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005134:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005138:	2b01      	cmp	r3, #1
 800513a:	d00f      	beq.n	800515c <HAL_SPI_TransmitReceive+0x70>
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005142:	d107      	bne.n	8005154 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d103      	bne.n	8005154 <HAL_SPI_TransmitReceive+0x68>
 800514c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005150:	2b04      	cmp	r3, #4
 8005152:	d003      	beq.n	800515c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005154:	2302      	movs	r3, #2
 8005156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800515a:	e15b      	b.n	8005414 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d005      	beq.n	800516e <HAL_SPI_TransmitReceive+0x82>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d002      	beq.n	800516e <HAL_SPI_TransmitReceive+0x82>
 8005168:	887b      	ldrh	r3, [r7, #2]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d103      	bne.n	8005176 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005174:	e14e      	b.n	8005414 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b04      	cmp	r3, #4
 8005180:	d003      	beq.n	800518a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2205      	movs	r2, #5
 8005186:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	887a      	ldrh	r2, [r7, #2]
 800519a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	887a      	ldrh	r2, [r7, #2]
 80051a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	887a      	ldrh	r2, [r7, #2]
 80051ac:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	887a      	ldrh	r2, [r7, #2]
 80051b2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ca:	2b40      	cmp	r3, #64	; 0x40
 80051cc:	d007      	beq.n	80051de <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051e6:	d178      	bne.n	80052da <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d002      	beq.n	80051f6 <HAL_SPI_TransmitReceive+0x10a>
 80051f0:	8b7b      	ldrh	r3, [r7, #26]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d166      	bne.n	80052c4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fa:	881a      	ldrh	r2, [r3, #0]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005206:	1c9a      	adds	r2, r3, #2
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005210:	b29b      	uxth	r3, r3
 8005212:	3b01      	subs	r3, #1
 8005214:	b29a      	uxth	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800521a:	e053      	b.n	80052c4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b02      	cmp	r3, #2
 8005228:	d11b      	bne.n	8005262 <HAL_SPI_TransmitReceive+0x176>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800522e:	b29b      	uxth	r3, r3
 8005230:	2b00      	cmp	r3, #0
 8005232:	d016      	beq.n	8005262 <HAL_SPI_TransmitReceive+0x176>
 8005234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005236:	2b01      	cmp	r3, #1
 8005238:	d113      	bne.n	8005262 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523e:	881a      	ldrh	r2, [r3, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524a:	1c9a      	adds	r2, r3, #2
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005254:	b29b      	uxth	r3, r3
 8005256:	3b01      	subs	r3, #1
 8005258:	b29a      	uxth	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800525e:	2300      	movs	r3, #0
 8005260:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	2b01      	cmp	r3, #1
 800526e:	d119      	bne.n	80052a4 <HAL_SPI_TransmitReceive+0x1b8>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005274:	b29b      	uxth	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d014      	beq.n	80052a4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68da      	ldr	r2, [r3, #12]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005284:	b292      	uxth	r2, r2
 8005286:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528c:	1c9a      	adds	r2, r3, #2
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005296:	b29b      	uxth	r3, r3
 8005298:	3b01      	subs	r3, #1
 800529a:	b29a      	uxth	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052a0:	2301      	movs	r3, #1
 80052a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80052a4:	f7fc f844 	bl	8001330 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d807      	bhi.n	80052c4 <HAL_SPI_TransmitReceive+0x1d8>
 80052b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ba:	d003      	beq.n	80052c4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80052c2:	e0a7      	b.n	8005414 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1a6      	bne.n	800521c <HAL_SPI_TransmitReceive+0x130>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1a1      	bne.n	800521c <HAL_SPI_TransmitReceive+0x130>
 80052d8:	e07c      	b.n	80053d4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d002      	beq.n	80052e8 <HAL_SPI_TransmitReceive+0x1fc>
 80052e2:	8b7b      	ldrh	r3, [r7, #26]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d16b      	bne.n	80053c0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	330c      	adds	r3, #12
 80052f2:	7812      	ldrb	r2, [r2, #0]
 80052f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fa:	1c5a      	adds	r2, r3, #1
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005304:	b29b      	uxth	r3, r3
 8005306:	3b01      	subs	r3, #1
 8005308:	b29a      	uxth	r2, r3
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800530e:	e057      	b.n	80053c0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f003 0302 	and.w	r3, r3, #2
 800531a:	2b02      	cmp	r3, #2
 800531c:	d11c      	bne.n	8005358 <HAL_SPI_TransmitReceive+0x26c>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005322:	b29b      	uxth	r3, r3
 8005324:	2b00      	cmp	r3, #0
 8005326:	d017      	beq.n	8005358 <HAL_SPI_TransmitReceive+0x26c>
 8005328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532a:	2b01      	cmp	r3, #1
 800532c:	d114      	bne.n	8005358 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	330c      	adds	r3, #12
 8005338:	7812      	ldrb	r2, [r2, #0]
 800533a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005340:	1c5a      	adds	r2, r3, #1
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800534a:	b29b      	uxth	r3, r3
 800534c:	3b01      	subs	r3, #1
 800534e:	b29a      	uxth	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005354:	2300      	movs	r3, #0
 8005356:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b01      	cmp	r3, #1
 8005364:	d119      	bne.n	800539a <HAL_SPI_TransmitReceive+0x2ae>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800536a:	b29b      	uxth	r3, r3
 800536c:	2b00      	cmp	r3, #0
 800536e:	d014      	beq.n	800539a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68da      	ldr	r2, [r3, #12]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537a:	b2d2      	uxtb	r2, r2
 800537c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005382:	1c5a      	adds	r2, r3, #1
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800538c:	b29b      	uxth	r3, r3
 800538e:	3b01      	subs	r3, #1
 8005390:	b29a      	uxth	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005396:	2301      	movs	r3, #1
 8005398:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800539a:	f7fb ffc9 	bl	8001330 <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d803      	bhi.n	80053b2 <HAL_SPI_TransmitReceive+0x2c6>
 80053aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b0:	d102      	bne.n	80053b8 <HAL_SPI_TransmitReceive+0x2cc>
 80053b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d103      	bne.n	80053c0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80053be:	e029      	b.n	8005414 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1a2      	bne.n	8005310 <HAL_SPI_TransmitReceive+0x224>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d19d      	bne.n	8005310 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f000 f917 	bl	800560c <SPI_EndRxTxTransaction>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d006      	beq.n	80053f2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2220      	movs	r2, #32
 80053ee:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80053f0:	e010      	b.n	8005414 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10b      	bne.n	8005412 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053fa:	2300      	movs	r3, #0
 80053fc:	617b      	str	r3, [r7, #20]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	617b      	str	r3, [r7, #20]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	617b      	str	r3, [r7, #20]
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	e000      	b.n	8005414 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005412:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005424:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005428:	4618      	mov	r0, r3
 800542a:	3730      	adds	r7, #48	; 0x30
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b088      	sub	sp, #32
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	603b      	str	r3, [r7, #0]
 800543c:	4613      	mov	r3, r2
 800543e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005440:	f7fb ff76 	bl	8001330 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005448:	1a9b      	subs	r3, r3, r2
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	4413      	add	r3, r2
 800544e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005450:	f7fb ff6e 	bl	8001330 <HAL_GetTick>
 8005454:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005456:	4b39      	ldr	r3, [pc, #228]	; (800553c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	015b      	lsls	r3, r3, #5
 800545c:	0d1b      	lsrs	r3, r3, #20
 800545e:	69fa      	ldr	r2, [r7, #28]
 8005460:	fb02 f303 	mul.w	r3, r2, r3
 8005464:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005466:	e054      	b.n	8005512 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546e:	d050      	beq.n	8005512 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005470:	f7fb ff5e 	bl	8001330 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	69fa      	ldr	r2, [r7, #28]
 800547c:	429a      	cmp	r2, r3
 800547e:	d902      	bls.n	8005486 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d13d      	bne.n	8005502 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	685a      	ldr	r2, [r3, #4]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005494:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800549e:	d111      	bne.n	80054c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054a8:	d004      	beq.n	80054b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054b2:	d107      	bne.n	80054c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054cc:	d10f      	bne.n	80054ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e017      	b.n	8005532 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d101      	bne.n	800550c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005508:	2300      	movs	r3, #0
 800550a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	3b01      	subs	r3, #1
 8005510:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	689a      	ldr	r2, [r3, #8]
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	4013      	ands	r3, r2
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	429a      	cmp	r2, r3
 8005520:	bf0c      	ite	eq
 8005522:	2301      	moveq	r3, #1
 8005524:	2300      	movne	r3, #0
 8005526:	b2db      	uxtb	r3, r3
 8005528:	461a      	mov	r2, r3
 800552a:	79fb      	ldrb	r3, [r7, #7]
 800552c:	429a      	cmp	r2, r3
 800552e:	d19b      	bne.n	8005468 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3720      	adds	r7, #32
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	20000004 	.word	0x20000004

08005540 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af02      	add	r7, sp, #8
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005554:	d111      	bne.n	800557a <SPI_EndRxTransaction+0x3a>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800555e:	d004      	beq.n	800556a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005568:	d107      	bne.n	800557a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005578:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005582:	d12a      	bne.n	80055da <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800558c:	d012      	beq.n	80055b4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	2200      	movs	r2, #0
 8005596:	2180      	movs	r1, #128	; 0x80
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f7ff ff49 	bl	8005430 <SPI_WaitFlagStateUntilTimeout>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d02d      	beq.n	8005600 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a8:	f043 0220 	orr.w	r2, r3, #32
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e026      	b.n	8005602 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	9300      	str	r3, [sp, #0]
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2200      	movs	r2, #0
 80055bc:	2101      	movs	r1, #1
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f7ff ff36 	bl	8005430 <SPI_WaitFlagStateUntilTimeout>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d01a      	beq.n	8005600 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ce:	f043 0220 	orr.w	r2, r3, #32
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e013      	b.n	8005602 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	2200      	movs	r2, #0
 80055e2:	2101      	movs	r1, #1
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f7ff ff23 	bl	8005430 <SPI_WaitFlagStateUntilTimeout>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d007      	beq.n	8005600 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f4:	f043 0220 	orr.w	r2, r3, #32
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e000      	b.n	8005602 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
	...

0800560c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b088      	sub	sp, #32
 8005610:	af02      	add	r7, sp, #8
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005618:	4b1b      	ldr	r3, [pc, #108]	; (8005688 <SPI_EndRxTxTransaction+0x7c>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a1b      	ldr	r2, [pc, #108]	; (800568c <SPI_EndRxTxTransaction+0x80>)
 800561e:	fba2 2303 	umull	r2, r3, r2, r3
 8005622:	0d5b      	lsrs	r3, r3, #21
 8005624:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005628:	fb02 f303 	mul.w	r3, r2, r3
 800562c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005636:	d112      	bne.n	800565e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	9300      	str	r3, [sp, #0]
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	2200      	movs	r2, #0
 8005640:	2180      	movs	r1, #128	; 0x80
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f7ff fef4 	bl	8005430 <SPI_WaitFlagStateUntilTimeout>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d016      	beq.n	800567c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005652:	f043 0220 	orr.w	r2, r3, #32
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e00f      	b.n	800567e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00a      	beq.n	800567a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	3b01      	subs	r3, #1
 8005668:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005674:	2b80      	cmp	r3, #128	; 0x80
 8005676:	d0f2      	beq.n	800565e <SPI_EndRxTxTransaction+0x52>
 8005678:	e000      	b.n	800567c <SPI_EndRxTxTransaction+0x70>
        break;
 800567a:	bf00      	nop
  }

  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3718      	adds	r7, #24
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	20000004 	.word	0x20000004
 800568c:	165e9f81 	.word	0x165e9f81

08005690 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005690:	b084      	sub	sp, #16
 8005692:	b580      	push	{r7, lr}
 8005694:	b084      	sub	sp, #16
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
 800569a:	f107 001c 	add.w	r0, r7, #28
 800569e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d122      	bne.n	80056ee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80056bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80056d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d105      	bne.n	80056e2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f9c0 	bl	8005a68 <USB_CoreReset>
 80056e8:	4603      	mov	r3, r0
 80056ea:	73fb      	strb	r3, [r7, #15]
 80056ec:	e01a      	b.n	8005724 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f9b4 	bl	8005a68 <USB_CoreReset>
 8005700:	4603      	mov	r3, r0
 8005702:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005706:	2b00      	cmp	r3, #0
 8005708:	d106      	bne.n	8005718 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	639a      	str	r2, [r3, #56]	; 0x38
 8005716:	e005      	b.n	8005724 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005726:	2b01      	cmp	r3, #1
 8005728:	d10b      	bne.n	8005742 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f043 0206 	orr.w	r2, r3, #6
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f043 0220 	orr.w	r2, r3, #32
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005742:	7bfb      	ldrb	r3, [r7, #15]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800574e:	b004      	add	sp, #16
 8005750:	4770      	bx	lr

08005752 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005752:	b480      	push	{r7}
 8005754:	b083      	sub	sp, #12
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f043 0201 	orr.w	r2, r3, #1
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f023 0201 	bic.w	r2, r3, #1
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr

08005796 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b084      	sub	sp, #16
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
 800579e:	460b      	mov	r3, r1
 80057a0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80057a2:	2300      	movs	r3, #0
 80057a4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80057b2:	78fb      	ldrb	r3, [r7, #3]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d115      	bne.n	80057e4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80057c4:	2001      	movs	r0, #1
 80057c6:	f7fb fdbf 	bl	8001348 <HAL_Delay>
      ms++;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	3301      	adds	r3, #1
 80057ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 f93a 	bl	8005a4a <USB_GetMode>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d01e      	beq.n	800581a <USB_SetCurrentMode+0x84>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2b31      	cmp	r3, #49	; 0x31
 80057e0:	d9f0      	bls.n	80057c4 <USB_SetCurrentMode+0x2e>
 80057e2:	e01a      	b.n	800581a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80057e4:	78fb      	ldrb	r3, [r7, #3]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d115      	bne.n	8005816 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80057f6:	2001      	movs	r0, #1
 80057f8:	f7fb fda6 	bl	8001348 <HAL_Delay>
      ms++;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	3301      	adds	r3, #1
 8005800:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f921 	bl	8005a4a <USB_GetMode>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d005      	beq.n	800581a <USB_SetCurrentMode+0x84>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2b31      	cmp	r3, #49	; 0x31
 8005812:	d9f0      	bls.n	80057f6 <USB_SetCurrentMode+0x60>
 8005814:	e001      	b.n	800581a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e005      	b.n	8005826 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2b32      	cmp	r3, #50	; 0x32
 800581e:	d101      	bne.n	8005824 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e000      	b.n	8005826 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
	...

08005830 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800583a:	2300      	movs	r3, #0
 800583c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	3301      	adds	r3, #1
 8005842:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	4a13      	ldr	r2, [pc, #76]	; (8005894 <USB_FlushTxFifo+0x64>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d901      	bls.n	8005850 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e01b      	b.n	8005888 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	2b00      	cmp	r3, #0
 8005856:	daf2      	bge.n	800583e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005858:	2300      	movs	r3, #0
 800585a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	019b      	lsls	r3, r3, #6
 8005860:	f043 0220 	orr.w	r2, r3, #32
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	3301      	adds	r3, #1
 800586c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	4a08      	ldr	r2, [pc, #32]	; (8005894 <USB_FlushTxFifo+0x64>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d901      	bls.n	800587a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e006      	b.n	8005888 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	f003 0320 	and.w	r3, r3, #32
 8005882:	2b20      	cmp	r3, #32
 8005884:	d0f0      	beq.n	8005868 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3714      	adds	r7, #20
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr
 8005894:	00030d40 	.word	0x00030d40

08005898 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058a0:	2300      	movs	r3, #0
 80058a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	3301      	adds	r3, #1
 80058a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	4a11      	ldr	r2, [pc, #68]	; (80058f4 <USB_FlushRxFifo+0x5c>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d901      	bls.n	80058b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e018      	b.n	80058e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	daf2      	bge.n	80058a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80058be:	2300      	movs	r3, #0
 80058c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2210      	movs	r2, #16
 80058c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	3301      	adds	r3, #1
 80058cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	4a08      	ldr	r2, [pc, #32]	; (80058f4 <USB_FlushRxFifo+0x5c>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d901      	bls.n	80058da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e006      	b.n	80058e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	f003 0310 	and.w	r3, r3, #16
 80058e2:	2b10      	cmp	r3, #16
 80058e4:	d0f0      	beq.n	80058c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3714      	adds	r7, #20
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	00030d40 	.word	0x00030d40

080058f8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b089      	sub	sp, #36	; 0x24
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	4611      	mov	r1, r2
 8005904:	461a      	mov	r2, r3
 8005906:	460b      	mov	r3, r1
 8005908:	71fb      	strb	r3, [r7, #7]
 800590a:	4613      	mov	r3, r2
 800590c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005916:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800591a:	2b00      	cmp	r3, #0
 800591c:	d123      	bne.n	8005966 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800591e:	88bb      	ldrh	r3, [r7, #4]
 8005920:	3303      	adds	r3, #3
 8005922:	089b      	lsrs	r3, r3, #2
 8005924:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005926:	2300      	movs	r3, #0
 8005928:	61bb      	str	r3, [r7, #24]
 800592a:	e018      	b.n	800595e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800592c:	79fb      	ldrb	r3, [r7, #7]
 800592e:	031a      	lsls	r2, r3, #12
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	4413      	add	r3, r2
 8005934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005938:	461a      	mov	r2, r3
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	3301      	adds	r3, #1
 8005944:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	3301      	adds	r3, #1
 800594a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	3301      	adds	r3, #1
 8005950:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	3301      	adds	r3, #1
 8005956:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	3301      	adds	r3, #1
 800595c:	61bb      	str	r3, [r7, #24]
 800595e:	69ba      	ldr	r2, [r7, #24]
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	429a      	cmp	r2, r3
 8005964:	d3e2      	bcc.n	800592c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3724      	adds	r7, #36	; 0x24
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005974:	b480      	push	{r7}
 8005976:	b08b      	sub	sp, #44	; 0x2c
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	4613      	mov	r3, r2
 8005980:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800598a:	88fb      	ldrh	r3, [r7, #6]
 800598c:	089b      	lsrs	r3, r3, #2
 800598e:	b29b      	uxth	r3, r3
 8005990:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005992:	88fb      	ldrh	r3, [r7, #6]
 8005994:	f003 0303 	and.w	r3, r3, #3
 8005998:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800599a:	2300      	movs	r3, #0
 800599c:	623b      	str	r3, [r7, #32]
 800599e:	e014      	b.n	80059ca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059aa:	601a      	str	r2, [r3, #0]
    pDest++;
 80059ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ae:	3301      	adds	r3, #1
 80059b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80059b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b4:	3301      	adds	r3, #1
 80059b6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80059b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ba:	3301      	adds	r3, #1
 80059bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80059be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c0:	3301      	adds	r3, #1
 80059c2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80059c4:	6a3b      	ldr	r3, [r7, #32]
 80059c6:	3301      	adds	r3, #1
 80059c8:	623b      	str	r3, [r7, #32]
 80059ca:	6a3a      	ldr	r2, [r7, #32]
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d3e6      	bcc.n	80059a0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80059d2:	8bfb      	ldrh	r3, [r7, #30]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d01e      	beq.n	8005a16 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80059d8:	2300      	movs	r3, #0
 80059da:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059e2:	461a      	mov	r2, r3
 80059e4:	f107 0310 	add.w	r3, r7, #16
 80059e8:	6812      	ldr	r2, [r2, #0]
 80059ea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	6a3b      	ldr	r3, [r7, #32]
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	00db      	lsls	r3, r3, #3
 80059f4:	fa22 f303 	lsr.w	r3, r2, r3
 80059f8:	b2da      	uxtb	r2, r3
 80059fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fc:	701a      	strb	r2, [r3, #0]
      i++;
 80059fe:	6a3b      	ldr	r3, [r7, #32]
 8005a00:	3301      	adds	r3, #1
 8005a02:	623b      	str	r3, [r7, #32]
      pDest++;
 8005a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a06:	3301      	adds	r3, #1
 8005a08:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005a0a:	8bfb      	ldrh	r3, [r7, #30]
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005a10:	8bfb      	ldrh	r3, [r7, #30]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1ea      	bne.n	80059ec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	372c      	adds	r7, #44	; 0x2c
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	695b      	ldr	r3, [r3, #20]
 8005a30:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	4013      	ands	r3, r2
 8005a3a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b083      	sub	sp, #12
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	f003 0301 	and.w	r3, r3, #1
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
	...

08005a68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a70:	2300      	movs	r3, #0
 8005a72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	3301      	adds	r3, #1
 8005a78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	4a13      	ldr	r2, [pc, #76]	; (8005acc <USB_CoreReset+0x64>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d901      	bls.n	8005a86 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e01b      	b.n	8005abe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	daf2      	bge.n	8005a74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	f043 0201 	orr.w	r2, r3, #1
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4a09      	ldr	r2, [pc, #36]	; (8005acc <USB_CoreReset+0x64>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d901      	bls.n	8005ab0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e006      	b.n	8005abe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d0f0      	beq.n	8005a9e <USB_CoreReset+0x36>

  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3714      	adds	r7, #20
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	00030d40 	.word	0x00030d40

08005ad0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ad0:	b084      	sub	sp, #16
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b086      	sub	sp, #24
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
 8005ada:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005ade:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005af0:	461a      	mov	r2, r3
 8005af2:	2300      	movs	r3, #0
 8005af4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b06:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b12:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d018      	beq.n	8005b58 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d10a      	bne.n	8005b42 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b3a:	f043 0304 	orr.w	r3, r3, #4
 8005b3e:	6013      	str	r3, [r2, #0]
 8005b40:	e014      	b.n	8005b6c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b50:	f023 0304 	bic.w	r3, r3, #4
 8005b54:	6013      	str	r3, [r2, #0]
 8005b56:	e009      	b.n	8005b6c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b66:	f023 0304 	bic.w	r3, r3, #4
 8005b6a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b6c:	2110      	movs	r1, #16
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f7ff fe5e 	bl	8005830 <USB_FlushTxFifo>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f7ff fe8a 	bl	8005898 <USB_FlushRxFifo>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d001      	beq.n	8005b8e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005b8e:	2300      	movs	r3, #0
 8005b90:	613b      	str	r3, [r7, #16]
 8005b92:	e015      	b.n	8005bc0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ba6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	015a      	lsls	r2, r3, #5
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	613b      	str	r3, [r7, #16]
 8005bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d3e5      	bcc.n	8005b94 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8005bd4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00b      	beq.n	8005bfa <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005be8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a13      	ldr	r2, [pc, #76]	; (8005c3c <USB_HostInit+0x16c>)
 8005bee:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a13      	ldr	r2, [pc, #76]	; (8005c40 <USB_HostInit+0x170>)
 8005bf4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005bf8:	e009      	b.n	8005c0e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2280      	movs	r2, #128	; 0x80
 8005bfe:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a10      	ldr	r2, [pc, #64]	; (8005c44 <USB_HostInit+0x174>)
 8005c04:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a0f      	ldr	r2, [pc, #60]	; (8005c48 <USB_HostInit+0x178>)
 8005c0a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d105      	bne.n	8005c20 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	f043 0210 	orr.w	r2, r3, #16
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	699a      	ldr	r2, [r3, #24]
 8005c24:	4b09      	ldr	r3, [pc, #36]	; (8005c4c <USB_HostInit+0x17c>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3718      	adds	r7, #24
 8005c32:	46bd      	mov	sp, r7
 8005c34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c38:	b004      	add	sp, #16
 8005c3a:	4770      	bx	lr
 8005c3c:	01000200 	.word	0x01000200
 8005c40:	00e00300 	.word	0x00e00300
 8005c44:	00600080 	.word	0x00600080
 8005c48:	004000e0 	.word	0x004000e0
 8005c4c:	a3200008 	.word	0xa3200008

08005c50 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	460b      	mov	r3, r1
 8005c5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c6e:	f023 0303 	bic.w	r3, r3, #3
 8005c72:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	78fb      	ldrb	r3, [r7, #3]
 8005c7e:	f003 0303 	and.w	r3, r3, #3
 8005c82:	68f9      	ldr	r1, [r7, #12]
 8005c84:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005c8c:	78fb      	ldrb	r3, [r7, #3]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d107      	bne.n	8005ca2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c98:	461a      	mov	r2, r3
 8005c9a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005c9e:	6053      	str	r3, [r2, #4]
 8005ca0:	e009      	b.n	8005cb6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005ca2:	78fb      	ldrb	r3, [r7, #3]
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d106      	bne.n	8005cb6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cae:	461a      	mov	r2, r3
 8005cb0:	f241 7370 	movw	r3, #6000	; 0x1770
 8005cb4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3714      	adds	r7, #20
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	460b      	mov	r3, r1
 8005cce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005ce8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d109      	bne.n	8005d08 <USB_DriveVbus+0x44>
 8005cf4:	78fb      	ldrb	r3, [r7, #3]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d106      	bne.n	8005d08 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005d02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d06:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d12:	d109      	bne.n	8005d28 <USB_DriveVbus+0x64>
 8005d14:	78fb      	ldrb	r3, [r7, #3]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d106      	bne.n	8005d28 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005d22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d26:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3714      	adds	r7, #20
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005d36:	b480      	push	{r7}
 8005d38:	b085      	sub	sp, #20
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005d42:	2300      	movs	r3, #0
 8005d44:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	0c5b      	lsrs	r3, r3, #17
 8005d54:	f003 0303 	and.w	r3, r3, #3
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3714      	adds	r7, #20
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	b29b      	uxth	r3, r3
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3714      	adds	r7, #20
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
	...

08005d88 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b088      	sub	sp, #32
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	4608      	mov	r0, r1
 8005d92:	4611      	mov	r1, r2
 8005d94:	461a      	mov	r2, r3
 8005d96:	4603      	mov	r3, r0
 8005d98:	70fb      	strb	r3, [r7, #3]
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	70bb      	strb	r3, [r7, #2]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005da2:	2300      	movs	r3, #0
 8005da4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005daa:	78fb      	ldrb	r3, [r7, #3]
 8005dac:	015a      	lsls	r2, r3, #5
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	4413      	add	r3, r2
 8005db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db6:	461a      	mov	r2, r3
 8005db8:	f04f 33ff 	mov.w	r3, #4294967295
 8005dbc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005dbe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005dc2:	2b03      	cmp	r3, #3
 8005dc4:	d87e      	bhi.n	8005ec4 <USB_HC_Init+0x13c>
 8005dc6:	a201      	add	r2, pc, #4	; (adr r2, 8005dcc <USB_HC_Init+0x44>)
 8005dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dcc:	08005ddd 	.word	0x08005ddd
 8005dd0:	08005e87 	.word	0x08005e87
 8005dd4:	08005ddd 	.word	0x08005ddd
 8005dd8:	08005e49 	.word	0x08005e49
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ddc:	78fb      	ldrb	r3, [r7, #3]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de8:	461a      	mov	r2, r3
 8005dea:	f240 439d 	movw	r3, #1181	; 0x49d
 8005dee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005df0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	da10      	bge.n	8005e1a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005df8:	78fb      	ldrb	r3, [r7, #3]
 8005dfa:	015a      	lsls	r2, r3, #5
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	78fa      	ldrb	r2, [r7, #3]
 8005e08:	0151      	lsls	r1, r2, #5
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	440a      	add	r2, r1
 8005e0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e16:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005e18:	e057      	b.n	8005eca <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d051      	beq.n	8005eca <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005e26:	78fb      	ldrb	r3, [r7, #3]
 8005e28:	015a      	lsls	r2, r3, #5
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	78fa      	ldrb	r2, [r7, #3]
 8005e36:	0151      	lsls	r1, r2, #5
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	440a      	add	r2, r1
 8005e3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e40:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005e44:	60d3      	str	r3, [r2, #12]
      break;
 8005e46:	e040      	b.n	8005eca <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e48:	78fb      	ldrb	r3, [r7, #3]
 8005e4a:	015a      	lsls	r2, r3, #5
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	4413      	add	r3, r2
 8005e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e54:	461a      	mov	r2, r3
 8005e56:	f240 639d 	movw	r3, #1693	; 0x69d
 8005e5a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005e5c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	da34      	bge.n	8005ece <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005e64:	78fb      	ldrb	r3, [r7, #3]
 8005e66:	015a      	lsls	r2, r3, #5
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	78fa      	ldrb	r2, [r7, #3]
 8005e74:	0151      	lsls	r1, r2, #5
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	440a      	add	r2, r1
 8005e7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e82:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005e84:	e023      	b.n	8005ece <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e86:	78fb      	ldrb	r3, [r7, #3]
 8005e88:	015a      	lsls	r2, r3, #5
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e92:	461a      	mov	r2, r3
 8005e94:	f240 2325 	movw	r3, #549	; 0x225
 8005e98:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005e9a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	da17      	bge.n	8005ed2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005ea2:	78fb      	ldrb	r3, [r7, #3]
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	78fa      	ldrb	r2, [r7, #3]
 8005eb2:	0151      	lsls	r1, r2, #5
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	440a      	add	r2, r1
 8005eb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ebc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005ec0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005ec2:	e006      	b.n	8005ed2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	77fb      	strb	r3, [r7, #31]
      break;
 8005ec8:	e004      	b.n	8005ed4 <USB_HC_Init+0x14c>
      break;
 8005eca:	bf00      	nop
 8005ecc:	e002      	b.n	8005ed4 <USB_HC_Init+0x14c>
      break;
 8005ece:	bf00      	nop
 8005ed0:	e000      	b.n	8005ed4 <USB_HC_Init+0x14c>
      break;
 8005ed2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005ed4:	78fb      	ldrb	r3, [r7, #3]
 8005ed6:	015a      	lsls	r2, r3, #5
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	4413      	add	r3, r2
 8005edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	78fa      	ldrb	r2, [r7, #3]
 8005ee4:	0151      	lsls	r1, r2, #5
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	440a      	add	r2, r1
 8005eea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005eee:	f043 0302 	orr.w	r3, r3, #2
 8005ef2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005efa:	699a      	ldr	r2, [r3, #24]
 8005efc:	78fb      	ldrb	r3, [r7, #3]
 8005efe:	f003 030f 	and.w	r3, r3, #15
 8005f02:	2101      	movs	r1, #1
 8005f04:	fa01 f303 	lsl.w	r3, r1, r3
 8005f08:	6939      	ldr	r1, [r7, #16]
 8005f0a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005f1e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	da03      	bge.n	8005f2e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005f26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f2a:	61bb      	str	r3, [r7, #24]
 8005f2c:	e001      	b.n	8005f32 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7ff feff 	bl	8005d36 <USB_GetHostSpeed>
 8005f38:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005f3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d106      	bne.n	8005f50 <USB_HC_Init+0x1c8>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d003      	beq.n	8005f50 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005f48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f4c:	617b      	str	r3, [r7, #20]
 8005f4e:	e001      	b.n	8005f54 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005f50:	2300      	movs	r3, #0
 8005f52:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f54:	787b      	ldrb	r3, [r7, #1]
 8005f56:	059b      	lsls	r3, r3, #22
 8005f58:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005f5c:	78bb      	ldrb	r3, [r7, #2]
 8005f5e:	02db      	lsls	r3, r3, #11
 8005f60:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f64:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005f66:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f6a:	049b      	lsls	r3, r3, #18
 8005f6c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005f70:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f72:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005f74:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005f78:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f7e:	78fb      	ldrb	r3, [r7, #3]
 8005f80:	0159      	lsls	r1, r3, #5
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	440b      	add	r3, r1
 8005f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f8a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f90:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005f92:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f96:	2b03      	cmp	r3, #3
 8005f98:	d003      	beq.n	8005fa2 <USB_HC_Init+0x21a>
 8005f9a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d10f      	bne.n	8005fc2 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005fa2:	78fb      	ldrb	r3, [r7, #3]
 8005fa4:	015a      	lsls	r2, r3, #5
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	78fa      	ldrb	r2, [r7, #3]
 8005fb2:	0151      	lsls	r1, r2, #5
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	440a      	add	r2, r1
 8005fb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fbc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005fc0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005fc2:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3720      	adds	r7, #32
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b08c      	sub	sp, #48	; 0x30
 8005fd0:	af02      	add	r7, sp, #8
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	785b      	ldrb	r3, [r3, #1]
 8005fe2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005fe4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005fe8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d02d      	beq.n	8006052 <USB_HC_StartXfer+0x86>
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	791b      	ldrb	r3, [r3, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d129      	bne.n	8006052 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005ffe:	79fb      	ldrb	r3, [r7, #7]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d117      	bne.n	8006034 <USB_HC_StartXfer+0x68>
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	79db      	ldrb	r3, [r3, #7]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d003      	beq.n	8006014 <USB_HC_StartXfer+0x48>
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	79db      	ldrb	r3, [r3, #7]
 8006010:	2b02      	cmp	r3, #2
 8006012:	d10f      	bne.n	8006034 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	015a      	lsls	r2, r3, #5
 8006018:	6a3b      	ldr	r3, [r7, #32]
 800601a:	4413      	add	r3, r2
 800601c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	69fa      	ldr	r2, [r7, #28]
 8006024:	0151      	lsls	r1, r2, #5
 8006026:	6a3a      	ldr	r2, [r7, #32]
 8006028:	440a      	add	r2, r1
 800602a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800602e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006032:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006034:	79fb      	ldrb	r3, [r7, #7]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10b      	bne.n	8006052 <USB_HC_StartXfer+0x86>
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	795b      	ldrb	r3, [r3, #5]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d107      	bne.n	8006052 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	785b      	ldrb	r3, [r3, #1]
 8006046:	4619      	mov	r1, r3
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f000 fa0f 	bl	800646c <USB_DoPing>
      return HAL_OK;
 800604e:	2300      	movs	r3, #0
 8006050:	e0f8      	b.n	8006244 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	695b      	ldr	r3, [r3, #20]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d018      	beq.n	800608c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	8912      	ldrh	r2, [r2, #8]
 8006062:	4413      	add	r3, r2
 8006064:	3b01      	subs	r3, #1
 8006066:	68ba      	ldr	r2, [r7, #8]
 8006068:	8912      	ldrh	r2, [r2, #8]
 800606a:	fbb3 f3f2 	udiv	r3, r3, r2
 800606e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006070:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006072:	8b7b      	ldrh	r3, [r7, #26]
 8006074:	429a      	cmp	r2, r3
 8006076:	d90b      	bls.n	8006090 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006078:	8b7b      	ldrh	r3, [r7, #26]
 800607a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800607c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	8912      	ldrh	r2, [r2, #8]
 8006082:	fb03 f202 	mul.w	r2, r3, r2
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	611a      	str	r2, [r3, #16]
 800608a:	e001      	b.n	8006090 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800608c:	2301      	movs	r3, #1
 800608e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	78db      	ldrb	r3, [r3, #3]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d007      	beq.n	80060a8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006098:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	8912      	ldrh	r2, [r2, #8]
 800609e:	fb03 f202 	mul.w	r2, r3, r2
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	611a      	str	r2, [r3, #16]
 80060a6:	e003      	b.n	80060b0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	695a      	ldr	r2, [r3, #20]
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80060b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80060ba:	04d9      	lsls	r1, r3, #19
 80060bc:	4b63      	ldr	r3, [pc, #396]	; (800624c <USB_HC_StartXfer+0x280>)
 80060be:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80060c0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	7a9b      	ldrb	r3, [r3, #10]
 80060c6:	075b      	lsls	r3, r3, #29
 80060c8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80060cc:	69f9      	ldr	r1, [r7, #28]
 80060ce:	0148      	lsls	r0, r1, #5
 80060d0:	6a39      	ldr	r1, [r7, #32]
 80060d2:	4401      	add	r1, r0
 80060d4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80060d8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80060da:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80060dc:	79fb      	ldrb	r3, [r7, #7]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d009      	beq.n	80060f6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	68d9      	ldr	r1, [r3, #12]
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	015a      	lsls	r2, r3, #5
 80060ea:	6a3b      	ldr	r3, [r7, #32]
 80060ec:	4413      	add	r3, r2
 80060ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060f2:	460a      	mov	r2, r1
 80060f4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80060f6:	6a3b      	ldr	r3, [r7, #32]
 80060f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	2b00      	cmp	r3, #0
 8006104:	bf0c      	ite	eq
 8006106:	2301      	moveq	r3, #1
 8006108:	2300      	movne	r3, #0
 800610a:	b2db      	uxtb	r3, r3
 800610c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	6a3b      	ldr	r3, [r7, #32]
 8006114:	4413      	add	r3, r2
 8006116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	69fa      	ldr	r2, [r7, #28]
 800611e:	0151      	lsls	r1, r2, #5
 8006120:	6a3a      	ldr	r2, [r7, #32]
 8006122:	440a      	add	r2, r1
 8006124:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006128:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800612c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	015a      	lsls	r2, r3, #5
 8006132:	6a3b      	ldr	r3, [r7, #32]
 8006134:	4413      	add	r3, r2
 8006136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	7e7b      	ldrb	r3, [r7, #25]
 800613e:	075b      	lsls	r3, r3, #29
 8006140:	69f9      	ldr	r1, [r7, #28]
 8006142:	0148      	lsls	r0, r1, #5
 8006144:	6a39      	ldr	r1, [r7, #32]
 8006146:	4401      	add	r1, r0
 8006148:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800614c:	4313      	orrs	r3, r2
 800614e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	6a3b      	ldr	r3, [r7, #32]
 8006156:	4413      	add	r3, r2
 8006158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006166:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	78db      	ldrb	r3, [r3, #3]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d004      	beq.n	800617a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006176:	613b      	str	r3, [r7, #16]
 8006178:	e003      	b.n	8006182 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006180:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006188:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	015a      	lsls	r2, r3, #5
 800618e:	6a3b      	ldr	r3, [r7, #32]
 8006190:	4413      	add	r3, r2
 8006192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006196:	461a      	mov	r2, r3
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800619c:	79fb      	ldrb	r3, [r7, #7]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d001      	beq.n	80061a6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80061a2:	2300      	movs	r3, #0
 80061a4:	e04e      	b.n	8006244 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	78db      	ldrb	r3, [r3, #3]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d149      	bne.n	8006242 <USB_HC_StartXfer+0x276>
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d045      	beq.n	8006242 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	79db      	ldrb	r3, [r3, #7]
 80061ba:	2b03      	cmp	r3, #3
 80061bc:	d830      	bhi.n	8006220 <USB_HC_StartXfer+0x254>
 80061be:	a201      	add	r2, pc, #4	; (adr r2, 80061c4 <USB_HC_StartXfer+0x1f8>)
 80061c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c4:	080061d5 	.word	0x080061d5
 80061c8:	080061f9 	.word	0x080061f9
 80061cc:	080061d5 	.word	0x080061d5
 80061d0:	080061f9 	.word	0x080061f9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	695b      	ldr	r3, [r3, #20]
 80061d8:	3303      	adds	r3, #3
 80061da:	089b      	lsrs	r3, r3, #2
 80061dc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80061de:	8afa      	ldrh	r2, [r7, #22]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d91c      	bls.n	8006224 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	f043 0220 	orr.w	r2, r3, #32
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	619a      	str	r2, [r3, #24]
        }
        break;
 80061f6:	e015      	b.n	8006224 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	695b      	ldr	r3, [r3, #20]
 80061fc:	3303      	adds	r3, #3
 80061fe:	089b      	lsrs	r3, r3, #2
 8006200:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006202:	8afa      	ldrh	r2, [r7, #22]
 8006204:	6a3b      	ldr	r3, [r7, #32]
 8006206:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	b29b      	uxth	r3, r3
 800620e:	429a      	cmp	r2, r3
 8006210:	d90a      	bls.n	8006228 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	619a      	str	r2, [r3, #24]
        }
        break;
 800621e:	e003      	b.n	8006228 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006220:	bf00      	nop
 8006222:	e002      	b.n	800622a <USB_HC_StartXfer+0x25e>
        break;
 8006224:	bf00      	nop
 8006226:	e000      	b.n	800622a <USB_HC_StartXfer+0x25e>
        break;
 8006228:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	68d9      	ldr	r1, [r3, #12]
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	785a      	ldrb	r2, [r3, #1]
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	b29b      	uxth	r3, r3
 8006238:	2000      	movs	r0, #0
 800623a:	9000      	str	r0, [sp, #0]
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f7ff fb5b 	bl	80058f8 <USB_WritePacket>
  }

  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3728      	adds	r7, #40	; 0x28
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	1ff80000 	.word	0x1ff80000

08006250 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006262:	695b      	ldr	r3, [r3, #20]
 8006264:	b29b      	uxth	r3, r3
}
 8006266:	4618      	mov	r0, r3
 8006268:	3714      	adds	r7, #20
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006272:	b480      	push	{r7}
 8006274:	b089      	sub	sp, #36	; 0x24
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
 800627a:	460b      	mov	r3, r1
 800627c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006282:	78fb      	ldrb	r3, [r7, #3]
 8006284:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006286:	2300      	movs	r3, #0
 8006288:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	015a      	lsls	r2, r3, #5
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	4413      	add	r3, r2
 8006292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	0c9b      	lsrs	r3, r3, #18
 800629a:	f003 0303 	and.w	r3, r3, #3
 800629e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	015a      	lsls	r2, r3, #5
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	4413      	add	r3, r2
 80062a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	0fdb      	lsrs	r3, r3, #31
 80062b0:	f003 0301 	and.w	r3, r3, #1
 80062b4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f003 0320 	and.w	r3, r3, #32
 80062be:	2b20      	cmp	r3, #32
 80062c0:	d104      	bne.n	80062cc <USB_HC_Halt+0x5a>
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d101      	bne.n	80062cc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80062c8:	2300      	movs	r3, #0
 80062ca:	e0c8      	b.n	800645e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d002      	beq.n	80062d8 <USB_HC_Halt+0x66>
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	d163      	bne.n	80063a0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	015a      	lsls	r2, r3, #5
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	4413      	add	r3, r2
 80062e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	69ba      	ldr	r2, [r7, #24]
 80062e8:	0151      	lsls	r1, r2, #5
 80062ea:	69fa      	ldr	r2, [r7, #28]
 80062ec:	440a      	add	r2, r1
 80062ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062f6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f003 0320 	and.w	r3, r3, #32
 8006300:	2b00      	cmp	r3, #0
 8006302:	f040 80ab 	bne.w	800645c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d133      	bne.n	800637a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	4413      	add	r3, r2
 800631a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	69ba      	ldr	r2, [r7, #24]
 8006322:	0151      	lsls	r1, r2, #5
 8006324:	69fa      	ldr	r2, [r7, #28]
 8006326:	440a      	add	r2, r1
 8006328:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800632c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006330:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	015a      	lsls	r2, r3, #5
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	4413      	add	r3, r2
 800633a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	69ba      	ldr	r2, [r7, #24]
 8006342:	0151      	lsls	r1, r2, #5
 8006344:	69fa      	ldr	r2, [r7, #28]
 8006346:	440a      	add	r2, r1
 8006348:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800634c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006350:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	3301      	adds	r3, #1
 8006356:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800635e:	d81d      	bhi.n	800639c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	015a      	lsls	r2, r3, #5
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	4413      	add	r3, r2
 8006368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006372:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006376:	d0ec      	beq.n	8006352 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006378:	e070      	b.n	800645c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	4413      	add	r3, r2
 8006382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	0151      	lsls	r1, r2, #5
 800638c:	69fa      	ldr	r2, [r7, #28]
 800638e:	440a      	add	r2, r1
 8006390:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006394:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006398:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800639a:	e05f      	b.n	800645c <USB_HC_Halt+0x1ea>
            break;
 800639c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800639e:	e05d      	b.n	800645c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	015a      	lsls	r2, r3, #5
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	4413      	add	r3, r2
 80063a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	69ba      	ldr	r2, [r7, #24]
 80063b0:	0151      	lsls	r1, r2, #5
 80063b2:	69fa      	ldr	r2, [r7, #28]
 80063b4:	440a      	add	r2, r1
 80063b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063be:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d133      	bne.n	8006438 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	015a      	lsls	r2, r3, #5
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	69ba      	ldr	r2, [r7, #24]
 80063e0:	0151      	lsls	r1, r2, #5
 80063e2:	69fa      	ldr	r2, [r7, #28]
 80063e4:	440a      	add	r2, r1
 80063e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063ee:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	69ba      	ldr	r2, [r7, #24]
 8006400:	0151      	lsls	r1, r2, #5
 8006402:	69fa      	ldr	r2, [r7, #28]
 8006404:	440a      	add	r2, r1
 8006406:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800640a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800640e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	3301      	adds	r3, #1
 8006414:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800641c:	d81d      	bhi.n	800645a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	015a      	lsls	r2, r3, #5
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	4413      	add	r3, r2
 8006426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006430:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006434:	d0ec      	beq.n	8006410 <USB_HC_Halt+0x19e>
 8006436:	e011      	b.n	800645c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	015a      	lsls	r2, r3, #5
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	4413      	add	r3, r2
 8006440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	69ba      	ldr	r2, [r7, #24]
 8006448:	0151      	lsls	r1, r2, #5
 800644a:	69fa      	ldr	r2, [r7, #28]
 800644c:	440a      	add	r2, r1
 800644e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006452:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006456:	6013      	str	r3, [r2, #0]
 8006458:	e000      	b.n	800645c <USB_HC_Halt+0x1ea>
          break;
 800645a:	bf00      	nop
    }
  }

  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3724      	adds	r7, #36	; 0x24
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
	...

0800646c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800646c:	b480      	push	{r7}
 800646e:	b087      	sub	sp, #28
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	460b      	mov	r3, r1
 8006476:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800647c:	78fb      	ldrb	r3, [r7, #3]
 800647e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006480:	2301      	movs	r3, #1
 8006482:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	04da      	lsls	r2, r3, #19
 8006488:	4b15      	ldr	r3, [pc, #84]	; (80064e0 <USB_DoPing+0x74>)
 800648a:	4013      	ands	r3, r2
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	0151      	lsls	r1, r2, #5
 8006490:	697a      	ldr	r2, [r7, #20]
 8006492:	440a      	add	r2, r1
 8006494:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006498:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800649c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	015a      	lsls	r2, r3, #5
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	4413      	add	r3, r2
 80064a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80064b4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064bc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	015a      	lsls	r2, r3, #5
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	4413      	add	r3, r2
 80064c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ca:	461a      	mov	r2, r3
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	371c      	adds	r7, #28
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	1ff80000 	.word	0x1ff80000

080064e4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b088      	sub	sp, #32
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80064ec:	2300      	movs	r3, #0
 80064ee:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80064f4:	2300      	movs	r3, #0
 80064f6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f7ff f93b 	bl	8005774 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064fe:	2110      	movs	r1, #16
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f7ff f995 	bl	8005830 <USB_FlushTxFifo>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d001      	beq.n	8006510 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f7ff f9c1 	bl	8005898 <USB_FlushRxFifo>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d001      	beq.n	8006520 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006520:	2300      	movs	r3, #0
 8006522:	61bb      	str	r3, [r7, #24]
 8006524:	e01f      	b.n	8006566 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	015a      	lsls	r2, r3, #5
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	4413      	add	r3, r2
 800652e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800653c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006544:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800654c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	015a      	lsls	r2, r3, #5
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	4413      	add	r3, r2
 8006556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800655a:	461a      	mov	r2, r3
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	3301      	adds	r3, #1
 8006564:	61bb      	str	r3, [r7, #24]
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	2b0f      	cmp	r3, #15
 800656a:	d9dc      	bls.n	8006526 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800656c:	2300      	movs	r3, #0
 800656e:	61bb      	str	r3, [r7, #24]
 8006570:	e034      	b.n	80065dc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	015a      	lsls	r2, r3, #5
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	4413      	add	r3, r2
 800657a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006588:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006590:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006598:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	015a      	lsls	r2, r3, #5
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	4413      	add	r3, r2
 80065a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065a6:	461a      	mov	r2, r3
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	3301      	adds	r3, #1
 80065b0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065b8:	d80c      	bhi.n	80065d4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	015a      	lsls	r2, r3, #5
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	4413      	add	r3, r2
 80065c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065d0:	d0ec      	beq.n	80065ac <USB_StopHost+0xc8>
 80065d2:	e000      	b.n	80065d6 <USB_StopHost+0xf2>
        break;
 80065d4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	3301      	adds	r3, #1
 80065da:	61bb      	str	r3, [r7, #24]
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	2b0f      	cmp	r3, #15
 80065e0:	d9c7      	bls.n	8006572 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065e8:	461a      	mov	r2, r3
 80065ea:	f04f 33ff 	mov.w	r3, #4294967295
 80065ee:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f04f 32ff 	mov.w	r2, #4294967295
 80065f6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f7ff f8aa 	bl	8005752 <USB_EnableGlobalInt>

  return ret;
 80065fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8006600:	4618      	mov	r0, r3
 8006602:	3720      	adds	r7, #32
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006608:	b590      	push	{r4, r7, lr}
 800660a:	b089      	sub	sp, #36	; 0x24
 800660c:	af04      	add	r7, sp, #16
 800660e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006610:	2301      	movs	r3, #1
 8006612:	2202      	movs	r2, #2
 8006614:	2102      	movs	r1, #2
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fc66 	bl	8006ee8 <USBH_FindInterface>
 800661c:	4603      	mov	r3, r0
 800661e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006620:	7bfb      	ldrb	r3, [r7, #15]
 8006622:	2bff      	cmp	r3, #255	; 0xff
 8006624:	d002      	beq.n	800662c <USBH_CDC_InterfaceInit+0x24>
 8006626:	7bfb      	ldrb	r3, [r7, #15]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d901      	bls.n	8006630 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800662c:	2302      	movs	r3, #2
 800662e:	e13d      	b.n	80068ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006630:	7bfb      	ldrb	r3, [r7, #15]
 8006632:	4619      	mov	r1, r3
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 fc3b 	bl	8006eb0 <USBH_SelectInterface>
 800663a:	4603      	mov	r3, r0
 800663c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800663e:	7bbb      	ldrb	r3, [r7, #14]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d001      	beq.n	8006648 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006644:	2302      	movs	r3, #2
 8006646:	e131      	b.n	80068ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800664e:	2050      	movs	r0, #80	; 0x50
 8006650:	f001 fb12 	bl	8007c78 <malloc>
 8006654:	4603      	mov	r3, r0
 8006656:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800665e:	69db      	ldr	r3, [r3, #28]
 8006660:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d101      	bne.n	800666c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006668:	2302      	movs	r3, #2
 800666a:	e11f      	b.n	80068ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800666c:	2250      	movs	r2, #80	; 0x50
 800666e:	2100      	movs	r1, #0
 8006670:	68b8      	ldr	r0, [r7, #8]
 8006672:	f001 fb1f 	bl	8007cb4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006676:	7bfb      	ldrb	r3, [r7, #15]
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	211a      	movs	r1, #26
 800667c:	fb01 f303 	mul.w	r3, r1, r3
 8006680:	4413      	add	r3, r2
 8006682:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	b25b      	sxtb	r3, r3
 800668a:	2b00      	cmp	r3, #0
 800668c:	da15      	bge.n	80066ba <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800668e:	7bfb      	ldrb	r3, [r7, #15]
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	211a      	movs	r1, #26
 8006694:	fb01 f303 	mul.w	r3, r1, r3
 8006698:	4413      	add	r3, r2
 800669a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800669e:	781a      	ldrb	r2, [r3, #0]
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80066a4:	7bfb      	ldrb	r3, [r7, #15]
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	211a      	movs	r1, #26
 80066aa:	fb01 f303 	mul.w	r3, r1, r3
 80066ae:	4413      	add	r3, r2
 80066b0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80066b4:	881a      	ldrh	r2, [r3, #0]
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	785b      	ldrb	r3, [r3, #1]
 80066be:	4619      	mov	r1, r3
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 ff9c 	bl	80075fe <USBH_AllocPipe>
 80066c6:	4603      	mov	r3, r0
 80066c8:	461a      	mov	r2, r3
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	7819      	ldrb	r1, [r3, #0]
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	7858      	ldrb	r0, [r3, #1]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	8952      	ldrh	r2, [r2, #10]
 80066e6:	9202      	str	r2, [sp, #8]
 80066e8:	2203      	movs	r2, #3
 80066ea:	9201      	str	r2, [sp, #4]
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	4623      	mov	r3, r4
 80066f0:	4602      	mov	r2, r0
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 ff54 	bl	80075a0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	2200      	movs	r2, #0
 80066fe:	4619      	mov	r1, r3
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f001 fa17 	bl	8007b34 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006706:	2300      	movs	r3, #0
 8006708:	2200      	movs	r2, #0
 800670a:	210a      	movs	r1, #10
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 fbeb 	bl	8006ee8 <USBH_FindInterface>
 8006712:	4603      	mov	r3, r0
 8006714:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006716:	7bfb      	ldrb	r3, [r7, #15]
 8006718:	2bff      	cmp	r3, #255	; 0xff
 800671a:	d002      	beq.n	8006722 <USBH_CDC_InterfaceInit+0x11a>
 800671c:	7bfb      	ldrb	r3, [r7, #15]
 800671e:	2b01      	cmp	r3, #1
 8006720:	d901      	bls.n	8006726 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006722:	2302      	movs	r3, #2
 8006724:	e0c2      	b.n	80068ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006726:	7bfb      	ldrb	r3, [r7, #15]
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	211a      	movs	r1, #26
 800672c:	fb01 f303 	mul.w	r3, r1, r3
 8006730:	4413      	add	r3, r2
 8006732:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	b25b      	sxtb	r3, r3
 800673a:	2b00      	cmp	r3, #0
 800673c:	da16      	bge.n	800676c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800673e:	7bfb      	ldrb	r3, [r7, #15]
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	211a      	movs	r1, #26
 8006744:	fb01 f303 	mul.w	r3, r1, r3
 8006748:	4413      	add	r3, r2
 800674a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800674e:	781a      	ldrb	r2, [r3, #0]
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006754:	7bfb      	ldrb	r3, [r7, #15]
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	211a      	movs	r1, #26
 800675a:	fb01 f303 	mul.w	r3, r1, r3
 800675e:	4413      	add	r3, r2
 8006760:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006764:	881a      	ldrh	r2, [r3, #0]
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	835a      	strh	r2, [r3, #26]
 800676a:	e015      	b.n	8006798 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800676c:	7bfb      	ldrb	r3, [r7, #15]
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	211a      	movs	r1, #26
 8006772:	fb01 f303 	mul.w	r3, r1, r3
 8006776:	4413      	add	r3, r2
 8006778:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800677c:	781a      	ldrb	r2, [r3, #0]
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006782:	7bfb      	ldrb	r3, [r7, #15]
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	211a      	movs	r1, #26
 8006788:	fb01 f303 	mul.w	r3, r1, r3
 800678c:	4413      	add	r3, r2
 800678e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006792:	881a      	ldrh	r2, [r3, #0]
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006798:	7bfb      	ldrb	r3, [r7, #15]
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	211a      	movs	r1, #26
 800679e:	fb01 f303 	mul.w	r3, r1, r3
 80067a2:	4413      	add	r3, r2
 80067a4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	b25b      	sxtb	r3, r3
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	da16      	bge.n	80067de <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80067b0:	7bfb      	ldrb	r3, [r7, #15]
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	211a      	movs	r1, #26
 80067b6:	fb01 f303 	mul.w	r3, r1, r3
 80067ba:	4413      	add	r3, r2
 80067bc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80067c0:	781a      	ldrb	r2, [r3, #0]
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80067c6:	7bfb      	ldrb	r3, [r7, #15]
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	211a      	movs	r1, #26
 80067cc:	fb01 f303 	mul.w	r3, r1, r3
 80067d0:	4413      	add	r3, r2
 80067d2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80067d6:	881a      	ldrh	r2, [r3, #0]
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	835a      	strh	r2, [r3, #26]
 80067dc:	e015      	b.n	800680a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80067de:	7bfb      	ldrb	r3, [r7, #15]
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	211a      	movs	r1, #26
 80067e4:	fb01 f303 	mul.w	r3, r1, r3
 80067e8:	4413      	add	r3, r2
 80067ea:	f203 3356 	addw	r3, r3, #854	; 0x356
 80067ee:	781a      	ldrb	r2, [r3, #0]
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80067f4:	7bfb      	ldrb	r3, [r7, #15]
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	211a      	movs	r1, #26
 80067fa:	fb01 f303 	mul.w	r3, r1, r3
 80067fe:	4413      	add	r3, r2
 8006800:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006804:	881a      	ldrh	r2, [r3, #0]
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	7b9b      	ldrb	r3, [r3, #14]
 800680e:	4619      	mov	r1, r3
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 fef4 	bl	80075fe <USBH_AllocPipe>
 8006816:	4603      	mov	r3, r0
 8006818:	461a      	mov	r2, r3
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	7bdb      	ldrb	r3, [r3, #15]
 8006822:	4619      	mov	r1, r3
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 feea 	bl	80075fe <USBH_AllocPipe>
 800682a:	4603      	mov	r3, r0
 800682c:	461a      	mov	r2, r3
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	7b59      	ldrb	r1, [r3, #13]
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	7b98      	ldrb	r0, [r3, #14]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	8b12      	ldrh	r2, [r2, #24]
 800684a:	9202      	str	r2, [sp, #8]
 800684c:	2202      	movs	r2, #2
 800684e:	9201      	str	r2, [sp, #4]
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	4623      	mov	r3, r4
 8006854:	4602      	mov	r2, r0
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 fea2 	bl	80075a0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	7b19      	ldrb	r1, [r3, #12]
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	7bd8      	ldrb	r0, [r3, #15]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	8b52      	ldrh	r2, [r2, #26]
 8006874:	9202      	str	r2, [sp, #8]
 8006876:	2202      	movs	r2, #2
 8006878:	9201      	str	r2, [sp, #4]
 800687a:	9300      	str	r3, [sp, #0]
 800687c:	4623      	mov	r3, r4
 800687e:	4602      	mov	r2, r0
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 fe8d 	bl	80075a0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	7b5b      	ldrb	r3, [r3, #13]
 8006892:	2200      	movs	r2, #0
 8006894:	4619      	mov	r1, r3
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f001 f94c 	bl	8007b34 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	7b1b      	ldrb	r3, [r3, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	4619      	mov	r1, r3
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f001 f945 	bl	8007b34 <USBH_LL_SetToggle>

  return USBH_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3714      	adds	r7, #20
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd90      	pop	{r4, r7, pc}

080068b4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068c2:	69db      	ldr	r3, [r3, #28]
 80068c4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00e      	beq.n	80068ec <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	4619      	mov	r1, r3
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 fe82 	bl	80075de <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	4619      	mov	r1, r3
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 fead 	bl	8007640 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	7b1b      	ldrb	r3, [r3, #12]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00e      	beq.n	8006912 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	7b1b      	ldrb	r3, [r3, #12]
 80068f8:	4619      	mov	r1, r3
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 fe6f 	bl	80075de <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	7b1b      	ldrb	r3, [r3, #12]
 8006904:	4619      	mov	r1, r3
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 fe9a 	bl	8007640 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	7b5b      	ldrb	r3, [r3, #13]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00e      	beq.n	8006938 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	7b5b      	ldrb	r3, [r3, #13]
 800691e:	4619      	mov	r1, r3
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 fe5c 	bl	80075de <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	7b5b      	ldrb	r3, [r3, #13]
 800692a:	4619      	mov	r1, r3
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 fe87 	bl	8007640 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800693e:	69db      	ldr	r3, [r3, #28]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00b      	beq.n	800695c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800694a:	69db      	ldr	r3, [r3, #28]
 800694c:	4618      	mov	r0, r3
 800694e:	f001 f99b 	bl	8007c88 <free>
    phost->pActiveClass->pData = 0U;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006958:	2200      	movs	r2, #0
 800695a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b084      	sub	sp, #16
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006974:	69db      	ldr	r3, [r3, #28]
 8006976:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	3340      	adds	r3, #64	; 0x40
 800697c:	4619      	mov	r1, r3
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 f8b1 	bl	8006ae6 <GetLineCoding>
 8006984:	4603      	mov	r3, r0
 8006986:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006988:	7afb      	ldrb	r3, [r7, #11]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d105      	bne.n	800699a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006994:	2102      	movs	r1, #2
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800699a:	7afb      	ldrb	r3, [r7, #11]
}
 800699c:	4618      	mov	r0, r3
 800699e:	3710      	adds	r7, #16
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80069ac:	2301      	movs	r3, #1
 80069ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80069b0:	2300      	movs	r3, #0
 80069b2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069ba:	69db      	ldr	r3, [r3, #28]
 80069bc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80069c4:	2b04      	cmp	r3, #4
 80069c6:	d877      	bhi.n	8006ab8 <USBH_CDC_Process+0x114>
 80069c8:	a201      	add	r2, pc, #4	; (adr r2, 80069d0 <USBH_CDC_Process+0x2c>)
 80069ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ce:	bf00      	nop
 80069d0:	080069e5 	.word	0x080069e5
 80069d4:	080069eb 	.word	0x080069eb
 80069d8:	08006a1b 	.word	0x08006a1b
 80069dc:	08006a8f 	.word	0x08006a8f
 80069e0:	08006a9d 	.word	0x08006a9d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80069e4:	2300      	movs	r3, #0
 80069e6:	73fb      	strb	r3, [r7, #15]
      break;
 80069e8:	e06d      	b.n	8006ac6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069ee:	4619      	mov	r1, r3
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 f897 	bl	8006b24 <SetLineCoding>
 80069f6:	4603      	mov	r3, r0
 80069f8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80069fa:	7bbb      	ldrb	r3, [r7, #14]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d104      	bne.n	8006a0a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	2202      	movs	r2, #2
 8006a04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006a08:	e058      	b.n	8006abc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006a0a:	7bbb      	ldrb	r3, [r7, #14]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d055      	beq.n	8006abc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	2204      	movs	r2, #4
 8006a14:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006a18:	e050      	b.n	8006abc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	3340      	adds	r3, #64	; 0x40
 8006a1e:	4619      	mov	r1, r3
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 f860 	bl	8006ae6 <GetLineCoding>
 8006a26:	4603      	mov	r3, r0
 8006a28:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006a2a:	7bbb      	ldrb	r3, [r7, #14]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d126      	bne.n	8006a7e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a42:	791b      	ldrb	r3, [r3, #4]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d13b      	bne.n	8006ac0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a52:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d133      	bne.n	8006ac0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a62:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d12b      	bne.n	8006ac0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a70:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d124      	bne.n	8006ac0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f958 	bl	8006d2c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006a7c:	e020      	b.n	8006ac0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006a7e:	7bbb      	ldrb	r3, [r7, #14]
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d01d      	beq.n	8006ac0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	2204      	movs	r2, #4
 8006a88:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006a8c:	e018      	b.n	8006ac0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 f867 	bl	8006b62 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 f8da 	bl	8006c4e <CDC_ProcessReception>
      break;
 8006a9a:	e014      	b.n	8006ac6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006a9c:	2100      	movs	r1, #0
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 fb08 	bl	80070b4 <USBH_ClrFeature>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006aa8:	7bbb      	ldrb	r3, [r7, #14]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10a      	bne.n	8006ac4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006ab6:	e005      	b.n	8006ac4 <USBH_CDC_Process+0x120>

    default:
      break;
 8006ab8:	bf00      	nop
 8006aba:	e004      	b.n	8006ac6 <USBH_CDC_Process+0x122>
      break;
 8006abc:	bf00      	nop
 8006abe:	e002      	b.n	8006ac6 <USBH_CDC_Process+0x122>
      break;
 8006ac0:	bf00      	nop
 8006ac2:	e000      	b.n	8006ac6 <USBH_CDC_Process+0x122>
      break;
 8006ac4:	bf00      	nop

  }

  return status;
 8006ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	370c      	adds	r7, #12
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr

08006ae6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b082      	sub	sp, #8
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
 8006aee:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	22a1      	movs	r2, #161	; 0xa1
 8006af4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2221      	movs	r2, #33	; 0x21
 8006afa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2207      	movs	r2, #7
 8006b0c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	2207      	movs	r2, #7
 8006b12:	4619      	mov	r1, r3
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 faf1 	bl	80070fc <USBH_CtlReq>
 8006b1a:	4603      	mov	r3, r0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3708      	adds	r7, #8
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2221      	movs	r2, #33	; 0x21
 8006b32:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2220      	movs	r2, #32
 8006b38:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2207      	movs	r2, #7
 8006b4a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	2207      	movs	r2, #7
 8006b50:	4619      	mov	r1, r3
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 fad2 	bl	80070fc <USBH_CtlReq>
 8006b58:	4603      	mov	r3, r0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3708      	adds	r7, #8
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b086      	sub	sp, #24
 8006b66:	af02      	add	r7, sp, #8
 8006b68:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b70:	69db      	ldr	r3, [r3, #28]
 8006b72:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006b74:	2300      	movs	r3, #0
 8006b76:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d002      	beq.n	8006b88 <CDC_ProcessTransmission+0x26>
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d023      	beq.n	8006bce <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006b86:	e05e      	b.n	8006c46 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	8b12      	ldrh	r2, [r2, #24]
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d90b      	bls.n	8006bac <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	69d9      	ldr	r1, [r3, #28]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	8b1a      	ldrh	r2, [r3, #24]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	7b5b      	ldrb	r3, [r3, #13]
 8006ba0:	2001      	movs	r0, #1
 8006ba2:	9000      	str	r0, [sp, #0]
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 fcb8 	bl	800751a <USBH_BulkSendData>
 8006baa:	e00b      	b.n	8006bc4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	7b5b      	ldrb	r3, [r3, #13]
 8006bba:	2001      	movs	r0, #1
 8006bbc:	9000      	str	r0, [sp, #0]
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 fcab 	bl	800751a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006bcc:	e03b      	b.n	8006c46 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	7b5b      	ldrb	r3, [r3, #13]
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 ff83 	bl	8007ae0 <USBH_LL_GetURBState>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006bde:	7afb      	ldrb	r3, [r7, #11]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d128      	bne.n	8006c36 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	8b12      	ldrh	r2, [r2, #24]
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d90e      	bls.n	8006c0e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	8b12      	ldrh	r2, [r2, #24]
 8006bf8:	1a9a      	subs	r2, r3, r2
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	69db      	ldr	r3, [r3, #28]
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	8b12      	ldrh	r2, [r2, #24]
 8006c06:	441a      	add	r2, r3
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	61da      	str	r2, [r3, #28]
 8006c0c:	e002      	b.n	8006c14 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d004      	beq.n	8006c26 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006c24:	e00e      	b.n	8006c44 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 f868 	bl	8006d04 <USBH_CDC_TransmitCallback>
      break;
 8006c34:	e006      	b.n	8006c44 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006c36:	7afb      	ldrb	r3, [r7, #11]
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d103      	bne.n	8006c44 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006c44:	bf00      	nop
  }
}
 8006c46:	bf00      	nop
 8006c48:	3710      	adds	r7, #16
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b086      	sub	sp, #24
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006c60:	2300      	movs	r3, #0
 8006c62:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006c6a:	2b03      	cmp	r3, #3
 8006c6c:	d002      	beq.n	8006c74 <CDC_ProcessReception+0x26>
 8006c6e:	2b04      	cmp	r3, #4
 8006c70:	d00e      	beq.n	8006c90 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006c72:	e043      	b.n	8006cfc <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	6a19      	ldr	r1, [r3, #32]
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	8b5a      	ldrh	r2, [r3, #26]
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	7b1b      	ldrb	r3, [r3, #12]
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 fc6f 	bl	8007564 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	2204      	movs	r2, #4
 8006c8a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006c8e:	e035      	b.n	8006cfc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	7b1b      	ldrb	r3, [r3, #12]
 8006c94:	4619      	mov	r1, r3
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 ff22 	bl	8007ae0 <USBH_LL_GetURBState>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006ca0:	7cfb      	ldrb	r3, [r7, #19]
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d129      	bne.n	8006cfa <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	7b1b      	ldrb	r3, [r3, #12]
 8006caa:	4619      	mov	r1, r3
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 fe85 	bl	80079bc <USBH_LL_GetLastXferSize>
 8006cb2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d016      	beq.n	8006cec <CDC_ProcessReception+0x9e>
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	8b5b      	ldrh	r3, [r3, #26]
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d910      	bls.n	8006cec <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	1ad2      	subs	r2, r2, r3
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	6a1a      	ldr	r2, [r3, #32]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	441a      	add	r2, r3
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	2203      	movs	r2, #3
 8006ce6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006cea:	e006      	b.n	8006cfa <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 f80f 	bl	8006d18 <USBH_CDC_ReceiveCallback>
      break;
 8006cfa:	bf00      	nop
  }
}
 8006cfc:	bf00      	nop
 8006cfe:	3718      	adds	r7, #24
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006d0c:	bf00      	nop
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006d20:	bf00      	nop
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006d34:	bf00      	nop
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d101      	bne.n	8006d58 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006d54:	2302      	movs	r3, #2
 8006d56:	e029      	b.n	8006dac <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	79fa      	ldrb	r2, [r7, #7]
 8006d5c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f000 f81f 	bl	8006db4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d003      	beq.n	8006da4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	68ba      	ldr	r2, [r7, #8]
 8006da0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f000 fd97 	bl	80078d8 <USBH_LL_Init>

  return USBH_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3710      	adds	r7, #16
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b085      	sub	sp, #20
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	60fb      	str	r3, [r7, #12]
 8006dc4:	e009      	b.n	8006dda <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	33e0      	adds	r3, #224	; 0xe0
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	4413      	add	r3, r2
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	60fb      	str	r3, [r7, #12]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2b0f      	cmp	r3, #15
 8006dde:	d9f2      	bls.n	8006dc6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006de0:	2300      	movs	r3, #0
 8006de2:	60fb      	str	r3, [r7, #12]
 8006de4:	e009      	b.n	8006dfa <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	4413      	add	r3, r2
 8006dec:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006df0:	2200      	movs	r2, #0
 8006df2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	3301      	adds	r3, #1
 8006df8:	60fb      	str	r3, [r7, #12]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e00:	d3f1      	bcc.n	8006de6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2201      	movs	r2, #1
 8006e12:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2240      	movs	r2, #64	; 0x40
 8006e26:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3714      	adds	r7, #20
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006e66:	2300      	movs	r3, #0
 8006e68:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d016      	beq.n	8006e9e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d10e      	bne.n	8006e98 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e80:	1c59      	adds	r1, r3, #1
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	33de      	adds	r3, #222	; 0xde
 8006e8c:	6839      	ldr	r1, [r7, #0]
 8006e8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006e92:	2300      	movs	r3, #0
 8006e94:	73fb      	strb	r3, [r7, #15]
 8006e96:	e004      	b.n	8006ea2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006e98:	2302      	movs	r3, #2
 8006e9a:	73fb      	strb	r3, [r7, #15]
 8006e9c:	e001      	b.n	8006ea2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006e9e:	2302      	movs	r3, #2
 8006ea0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3714      	adds	r7, #20
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	460b      	mov	r3, r1
 8006eba:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006ec6:	78fa      	ldrb	r2, [r7, #3]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d204      	bcs.n	8006ed6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	78fa      	ldrb	r2, [r7, #3]
 8006ed0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006ed4:	e001      	b.n	8006eda <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006ed6:	2302      	movs	r3, #2
 8006ed8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3714      	adds	r7, #20
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b087      	sub	sp, #28
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	4608      	mov	r0, r1
 8006ef2:	4611      	mov	r1, r2
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	70fb      	strb	r3, [r7, #3]
 8006efa:	460b      	mov	r3, r1
 8006efc:	70bb      	strb	r3, [r7, #2]
 8006efe:	4613      	mov	r3, r2
 8006f00:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006f02:	2300      	movs	r3, #0
 8006f04:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006f06:	2300      	movs	r3, #0
 8006f08:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006f10:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006f12:	e025      	b.n	8006f60 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006f14:	7dfb      	ldrb	r3, [r7, #23]
 8006f16:	221a      	movs	r2, #26
 8006f18:	fb02 f303 	mul.w	r3, r2, r3
 8006f1c:	3308      	adds	r3, #8
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	4413      	add	r3, r2
 8006f22:	3302      	adds	r3, #2
 8006f24:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	795b      	ldrb	r3, [r3, #5]
 8006f2a:	78fa      	ldrb	r2, [r7, #3]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d002      	beq.n	8006f36 <USBH_FindInterface+0x4e>
 8006f30:	78fb      	ldrb	r3, [r7, #3]
 8006f32:	2bff      	cmp	r3, #255	; 0xff
 8006f34:	d111      	bne.n	8006f5a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006f3a:	78ba      	ldrb	r2, [r7, #2]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d002      	beq.n	8006f46 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f40:	78bb      	ldrb	r3, [r7, #2]
 8006f42:	2bff      	cmp	r3, #255	; 0xff
 8006f44:	d109      	bne.n	8006f5a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f4a:	787a      	ldrb	r2, [r7, #1]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d002      	beq.n	8006f56 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006f50:	787b      	ldrb	r3, [r7, #1]
 8006f52:	2bff      	cmp	r3, #255	; 0xff
 8006f54:	d101      	bne.n	8006f5a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006f56:	7dfb      	ldrb	r3, [r7, #23]
 8006f58:	e006      	b.n	8006f68 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006f5a:	7dfb      	ldrb	r3, [r7, #23]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006f60:	7dfb      	ldrb	r3, [r7, #23]
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d9d6      	bls.n	8006f14 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006f66:	23ff      	movs	r3, #255	; 0xff
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	371c      	adds	r7, #28
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 fce7 	bl	8007950 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006f82:	2101      	movs	r1, #1
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 fdbe 	bl	8007b06 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3708      	adds	r7, #8
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	683a      	ldr	r2, [r7, #0]
 8006fa2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006fa6:	bf00      	nop
 8006fa8:	370c      	adds	r7, #12
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr

08006fb2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b082      	sub	sp, #8
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006fc0:	1c5a      	adds	r2, r3, #1
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 f804 	bl	8006fd6 <USBH_HandleSof>
}
 8006fce:	bf00      	nop
 8006fd0:	3708      	adds	r7, #8
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b082      	sub	sp, #8
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	2b0b      	cmp	r3, #11
 8006fe6:	d10a      	bne.n	8006ffe <USBH_HandleSof+0x28>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d005      	beq.n	8006ffe <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	4798      	blx	r3
  }
}
 8006ffe:	bf00      	nop
 8007000:	3708      	adds	r7, #8
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007006:	b480      	push	{r7}
 8007008:	b083      	sub	sp, #12
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2201      	movs	r2, #1
 8007012:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007016:	bf00      	nop
}
 8007018:	370c      	adds	r7, #12
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr

08007022 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007022:	b480      	push	{r7}
 8007024:	b083      	sub	sp, #12
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007032:	bf00      	nop
}
 8007034:	370c      	adds	r7, #12
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr

0800703e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800703e:	b480      	push	{r7}
 8007040:	b083      	sub	sp, #12
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2201      	movs	r2, #1
 800704a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 fc7a 	bl	8007986 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	791b      	ldrb	r3, [r3, #4]
 8007096:	4619      	mov	r1, r3
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 fad1 	bl	8007640 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	795b      	ldrb	r3, [r3, #5]
 80070a2:	4619      	mov	r1, r3
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 facb 	bl	8007640 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	460b      	mov	r3, r1
 80070be:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	789b      	ldrb	r3, [r3, #2]
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d10f      	bne.n	80070e8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2202      	movs	r2, #2
 80070cc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2201      	movs	r2, #1
 80070d2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80070da:	78fb      	ldrb	r3, [r7, #3]
 80070dc:	b29a      	uxth	r2, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80070e8:	2200      	movs	r2, #0
 80070ea:	2100      	movs	r1, #0
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 f805 	bl	80070fc <USBH_CtlReq>
 80070f2:	4603      	mov	r3, r0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3708      	adds	r7, #8
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b086      	sub	sp, #24
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	4613      	mov	r3, r2
 8007108:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800710a:	2301      	movs	r3, #1
 800710c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	789b      	ldrb	r3, [r3, #2]
 8007112:	2b01      	cmp	r3, #1
 8007114:	d002      	beq.n	800711c <USBH_CtlReq+0x20>
 8007116:	2b02      	cmp	r3, #2
 8007118:	d00f      	beq.n	800713a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800711a:	e027      	b.n	800716c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	68ba      	ldr	r2, [r7, #8]
 8007120:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	88fa      	ldrh	r2, [r7, #6]
 8007126:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2201      	movs	r2, #1
 800712c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2202      	movs	r2, #2
 8007132:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007134:	2301      	movs	r3, #1
 8007136:	75fb      	strb	r3, [r7, #23]
      break;
 8007138:	e018      	b.n	800716c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800713a:	68f8      	ldr	r0, [r7, #12]
 800713c:	f000 f81c 	bl	8007178 <USBH_HandleControl>
 8007140:	4603      	mov	r3, r0
 8007142:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007144:	7dfb      	ldrb	r3, [r7, #23]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d002      	beq.n	8007150 <USBH_CtlReq+0x54>
 800714a:	7dfb      	ldrb	r3, [r7, #23]
 800714c:	2b03      	cmp	r3, #3
 800714e:	d106      	bne.n	800715e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2201      	movs	r2, #1
 8007154:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	761a      	strb	r2, [r3, #24]
      break;
 800715c:	e005      	b.n	800716a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800715e:	7dfb      	ldrb	r3, [r7, #23]
 8007160:	2b02      	cmp	r3, #2
 8007162:	d102      	bne.n	800716a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2201      	movs	r2, #1
 8007168:	709a      	strb	r2, [r3, #2]
      break;
 800716a:	bf00      	nop
  }
  return status;
 800716c:	7dfb      	ldrb	r3, [r7, #23]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3718      	adds	r7, #24
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
	...

08007178 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b086      	sub	sp, #24
 800717c:	af02      	add	r7, sp, #8
 800717e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007180:	2301      	movs	r3, #1
 8007182:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007184:	2300      	movs	r3, #0
 8007186:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	7e1b      	ldrb	r3, [r3, #24]
 800718c:	3b01      	subs	r3, #1
 800718e:	2b0a      	cmp	r3, #10
 8007190:	f200 8156 	bhi.w	8007440 <USBH_HandleControl+0x2c8>
 8007194:	a201      	add	r2, pc, #4	; (adr r2, 800719c <USBH_HandleControl+0x24>)
 8007196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719a:	bf00      	nop
 800719c:	080071c9 	.word	0x080071c9
 80071a0:	080071e3 	.word	0x080071e3
 80071a4:	0800724d 	.word	0x0800724d
 80071a8:	08007273 	.word	0x08007273
 80071ac:	080072ab 	.word	0x080072ab
 80071b0:	080072d5 	.word	0x080072d5
 80071b4:	08007327 	.word	0x08007327
 80071b8:	08007349 	.word	0x08007349
 80071bc:	08007385 	.word	0x08007385
 80071c0:	080073ab 	.word	0x080073ab
 80071c4:	080073e9 	.word	0x080073e9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f103 0110 	add.w	r1, r3, #16
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	795b      	ldrb	r3, [r3, #5]
 80071d2:	461a      	mov	r2, r3
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 f943 	bl	8007460 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2202      	movs	r2, #2
 80071de:	761a      	strb	r2, [r3, #24]
      break;
 80071e0:	e139      	b.n	8007456 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	795b      	ldrb	r3, [r3, #5]
 80071e6:	4619      	mov	r1, r3
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 fc79 	bl	8007ae0 <USBH_LL_GetURBState>
 80071ee:	4603      	mov	r3, r0
 80071f0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80071f2:	7bbb      	ldrb	r3, [r7, #14]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d11e      	bne.n	8007236 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	7c1b      	ldrb	r3, [r3, #16]
 80071fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007200:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	8adb      	ldrh	r3, [r3, #22]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00a      	beq.n	8007220 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800720a:	7b7b      	ldrb	r3, [r7, #13]
 800720c:	2b80      	cmp	r3, #128	; 0x80
 800720e:	d103      	bne.n	8007218 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2203      	movs	r2, #3
 8007214:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007216:	e115      	b.n	8007444 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2205      	movs	r2, #5
 800721c:	761a      	strb	r2, [r3, #24]
      break;
 800721e:	e111      	b.n	8007444 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007220:	7b7b      	ldrb	r3, [r7, #13]
 8007222:	2b80      	cmp	r3, #128	; 0x80
 8007224:	d103      	bne.n	800722e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2209      	movs	r2, #9
 800722a:	761a      	strb	r2, [r3, #24]
      break;
 800722c:	e10a      	b.n	8007444 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2207      	movs	r2, #7
 8007232:	761a      	strb	r2, [r3, #24]
      break;
 8007234:	e106      	b.n	8007444 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007236:	7bbb      	ldrb	r3, [r7, #14]
 8007238:	2b04      	cmp	r3, #4
 800723a:	d003      	beq.n	8007244 <USBH_HandleControl+0xcc>
 800723c:	7bbb      	ldrb	r3, [r7, #14]
 800723e:	2b02      	cmp	r3, #2
 8007240:	f040 8100 	bne.w	8007444 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	220b      	movs	r2, #11
 8007248:	761a      	strb	r2, [r3, #24]
      break;
 800724a:	e0fb      	b.n	8007444 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007252:	b29a      	uxth	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6899      	ldr	r1, [r3, #8]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	899a      	ldrh	r2, [r3, #12]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	791b      	ldrb	r3, [r3, #4]
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 f93a 	bl	80074de <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2204      	movs	r2, #4
 800726e:	761a      	strb	r2, [r3, #24]
      break;
 8007270:	e0f1      	b.n	8007456 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	791b      	ldrb	r3, [r3, #4]
 8007276:	4619      	mov	r1, r3
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 fc31 	bl	8007ae0 <USBH_LL_GetURBState>
 800727e:	4603      	mov	r3, r0
 8007280:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007282:	7bbb      	ldrb	r3, [r7, #14]
 8007284:	2b01      	cmp	r3, #1
 8007286:	d102      	bne.n	800728e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2209      	movs	r2, #9
 800728c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800728e:	7bbb      	ldrb	r3, [r7, #14]
 8007290:	2b05      	cmp	r3, #5
 8007292:	d102      	bne.n	800729a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007294:	2303      	movs	r3, #3
 8007296:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007298:	e0d6      	b.n	8007448 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800729a:	7bbb      	ldrb	r3, [r7, #14]
 800729c:	2b04      	cmp	r3, #4
 800729e:	f040 80d3 	bne.w	8007448 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	220b      	movs	r2, #11
 80072a6:	761a      	strb	r2, [r3, #24]
      break;
 80072a8:	e0ce      	b.n	8007448 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6899      	ldr	r1, [r3, #8]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	899a      	ldrh	r2, [r3, #12]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	795b      	ldrb	r3, [r3, #5]
 80072b6:	2001      	movs	r0, #1
 80072b8:	9000      	str	r0, [sp, #0]
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 f8ea 	bl	8007494 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80072c6:	b29a      	uxth	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2206      	movs	r2, #6
 80072d0:	761a      	strb	r2, [r3, #24]
      break;
 80072d2:	e0c0      	b.n	8007456 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	795b      	ldrb	r3, [r3, #5]
 80072d8:	4619      	mov	r1, r3
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fc00 	bl	8007ae0 <USBH_LL_GetURBState>
 80072e0:	4603      	mov	r3, r0
 80072e2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80072e4:	7bbb      	ldrb	r3, [r7, #14]
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d103      	bne.n	80072f2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2207      	movs	r2, #7
 80072ee:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80072f0:	e0ac      	b.n	800744c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80072f2:	7bbb      	ldrb	r3, [r7, #14]
 80072f4:	2b05      	cmp	r3, #5
 80072f6:	d105      	bne.n	8007304 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	220c      	movs	r2, #12
 80072fc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80072fe:	2303      	movs	r3, #3
 8007300:	73fb      	strb	r3, [r7, #15]
      break;
 8007302:	e0a3      	b.n	800744c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007304:	7bbb      	ldrb	r3, [r7, #14]
 8007306:	2b02      	cmp	r3, #2
 8007308:	d103      	bne.n	8007312 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2205      	movs	r2, #5
 800730e:	761a      	strb	r2, [r3, #24]
      break;
 8007310:	e09c      	b.n	800744c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007312:	7bbb      	ldrb	r3, [r7, #14]
 8007314:	2b04      	cmp	r3, #4
 8007316:	f040 8099 	bne.w	800744c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	220b      	movs	r2, #11
 800731e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007320:	2302      	movs	r3, #2
 8007322:	73fb      	strb	r3, [r7, #15]
      break;
 8007324:	e092      	b.n	800744c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	791b      	ldrb	r3, [r3, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	2100      	movs	r1, #0
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 f8d5 	bl	80074de <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800733a:	b29a      	uxth	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2208      	movs	r2, #8
 8007344:	761a      	strb	r2, [r3, #24]

      break;
 8007346:	e086      	b.n	8007456 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	791b      	ldrb	r3, [r3, #4]
 800734c:	4619      	mov	r1, r3
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 fbc6 	bl	8007ae0 <USBH_LL_GetURBState>
 8007354:	4603      	mov	r3, r0
 8007356:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007358:	7bbb      	ldrb	r3, [r7, #14]
 800735a:	2b01      	cmp	r3, #1
 800735c:	d105      	bne.n	800736a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	220d      	movs	r2, #13
 8007362:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007364:	2300      	movs	r3, #0
 8007366:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007368:	e072      	b.n	8007450 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800736a:	7bbb      	ldrb	r3, [r7, #14]
 800736c:	2b04      	cmp	r3, #4
 800736e:	d103      	bne.n	8007378 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	220b      	movs	r2, #11
 8007374:	761a      	strb	r2, [r3, #24]
      break;
 8007376:	e06b      	b.n	8007450 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007378:	7bbb      	ldrb	r3, [r7, #14]
 800737a:	2b05      	cmp	r3, #5
 800737c:	d168      	bne.n	8007450 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800737e:	2303      	movs	r3, #3
 8007380:	73fb      	strb	r3, [r7, #15]
      break;
 8007382:	e065      	b.n	8007450 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	795b      	ldrb	r3, [r3, #5]
 8007388:	2201      	movs	r2, #1
 800738a:	9200      	str	r2, [sp, #0]
 800738c:	2200      	movs	r2, #0
 800738e:	2100      	movs	r1, #0
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 f87f 	bl	8007494 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800739c:	b29a      	uxth	r2, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	220a      	movs	r2, #10
 80073a6:	761a      	strb	r2, [r3, #24]
      break;
 80073a8:	e055      	b.n	8007456 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	795b      	ldrb	r3, [r3, #5]
 80073ae:	4619      	mov	r1, r3
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 fb95 	bl	8007ae0 <USBH_LL_GetURBState>
 80073b6:	4603      	mov	r3, r0
 80073b8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80073ba:	7bbb      	ldrb	r3, [r7, #14]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d105      	bne.n	80073cc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80073c0:	2300      	movs	r3, #0
 80073c2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	220d      	movs	r2, #13
 80073c8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80073ca:	e043      	b.n	8007454 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80073cc:	7bbb      	ldrb	r3, [r7, #14]
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d103      	bne.n	80073da <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2209      	movs	r2, #9
 80073d6:	761a      	strb	r2, [r3, #24]
      break;
 80073d8:	e03c      	b.n	8007454 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80073da:	7bbb      	ldrb	r3, [r7, #14]
 80073dc:	2b04      	cmp	r3, #4
 80073de:	d139      	bne.n	8007454 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	220b      	movs	r2, #11
 80073e4:	761a      	strb	r2, [r3, #24]
      break;
 80073e6:	e035      	b.n	8007454 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	7e5b      	ldrb	r3, [r3, #25]
 80073ec:	3301      	adds	r3, #1
 80073ee:	b2da      	uxtb	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	765a      	strb	r2, [r3, #25]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	7e5b      	ldrb	r3, [r3, #25]
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d806      	bhi.n	800740a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2201      	movs	r2, #1
 8007406:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007408:	e025      	b.n	8007456 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007410:	2106      	movs	r1, #6
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	795b      	ldrb	r3, [r3, #5]
 8007420:	4619      	mov	r1, r3
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f90c 	bl	8007640 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	791b      	ldrb	r3, [r3, #4]
 800742c:	4619      	mov	r1, r3
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f906 	bl	8007640 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800743a:	2302      	movs	r3, #2
 800743c:	73fb      	strb	r3, [r7, #15]
      break;
 800743e:	e00a      	b.n	8007456 <USBH_HandleControl+0x2de>

    default:
      break;
 8007440:	bf00      	nop
 8007442:	e008      	b.n	8007456 <USBH_HandleControl+0x2de>
      break;
 8007444:	bf00      	nop
 8007446:	e006      	b.n	8007456 <USBH_HandleControl+0x2de>
      break;
 8007448:	bf00      	nop
 800744a:	e004      	b.n	8007456 <USBH_HandleControl+0x2de>
      break;
 800744c:	bf00      	nop
 800744e:	e002      	b.n	8007456 <USBH_HandleControl+0x2de>
      break;
 8007450:	bf00      	nop
 8007452:	e000      	b.n	8007456 <USBH_HandleControl+0x2de>
      break;
 8007454:	bf00      	nop
  }

  return status;
 8007456:	7bfb      	ldrb	r3, [r7, #15]
}
 8007458:	4618      	mov	r0, r3
 800745a:	3710      	adds	r7, #16
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b088      	sub	sp, #32
 8007464:	af04      	add	r7, sp, #16
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	4613      	mov	r3, r2
 800746c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800746e:	79f9      	ldrb	r1, [r7, #7]
 8007470:	2300      	movs	r3, #0
 8007472:	9303      	str	r3, [sp, #12]
 8007474:	2308      	movs	r3, #8
 8007476:	9302      	str	r3, [sp, #8]
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	9301      	str	r3, [sp, #4]
 800747c:	2300      	movs	r3, #0
 800747e:	9300      	str	r3, [sp, #0]
 8007480:	2300      	movs	r3, #0
 8007482:	2200      	movs	r2, #0
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f000 fafa 	bl	8007a7e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	3710      	adds	r7, #16
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b088      	sub	sp, #32
 8007498:	af04      	add	r7, sp, #16
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	4611      	mov	r1, r2
 80074a0:	461a      	mov	r2, r3
 80074a2:	460b      	mov	r3, r1
 80074a4:	80fb      	strh	r3, [r7, #6]
 80074a6:	4613      	mov	r3, r2
 80074a8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d001      	beq.n	80074b8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80074b4:	2300      	movs	r3, #0
 80074b6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80074b8:	7979      	ldrb	r1, [r7, #5]
 80074ba:	7e3b      	ldrb	r3, [r7, #24]
 80074bc:	9303      	str	r3, [sp, #12]
 80074be:	88fb      	ldrh	r3, [r7, #6]
 80074c0:	9302      	str	r3, [sp, #8]
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	9301      	str	r3, [sp, #4]
 80074c6:	2301      	movs	r3, #1
 80074c8:	9300      	str	r3, [sp, #0]
 80074ca:	2300      	movs	r3, #0
 80074cc:	2200      	movs	r2, #0
 80074ce:	68f8      	ldr	r0, [r7, #12]
 80074d0:	f000 fad5 	bl	8007a7e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b088      	sub	sp, #32
 80074e2:	af04      	add	r7, sp, #16
 80074e4:	60f8      	str	r0, [r7, #12]
 80074e6:	60b9      	str	r1, [r7, #8]
 80074e8:	4611      	mov	r1, r2
 80074ea:	461a      	mov	r2, r3
 80074ec:	460b      	mov	r3, r1
 80074ee:	80fb      	strh	r3, [r7, #6]
 80074f0:	4613      	mov	r3, r2
 80074f2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80074f4:	7979      	ldrb	r1, [r7, #5]
 80074f6:	2300      	movs	r3, #0
 80074f8:	9303      	str	r3, [sp, #12]
 80074fa:	88fb      	ldrh	r3, [r7, #6]
 80074fc:	9302      	str	r3, [sp, #8]
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	9301      	str	r3, [sp, #4]
 8007502:	2301      	movs	r3, #1
 8007504:	9300      	str	r3, [sp, #0]
 8007506:	2300      	movs	r3, #0
 8007508:	2201      	movs	r2, #1
 800750a:	68f8      	ldr	r0, [r7, #12]
 800750c:	f000 fab7 	bl	8007a7e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007510:	2300      	movs	r3, #0

}
 8007512:	4618      	mov	r0, r3
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800751a:	b580      	push	{r7, lr}
 800751c:	b088      	sub	sp, #32
 800751e:	af04      	add	r7, sp, #16
 8007520:	60f8      	str	r0, [r7, #12]
 8007522:	60b9      	str	r1, [r7, #8]
 8007524:	4611      	mov	r1, r2
 8007526:	461a      	mov	r2, r3
 8007528:	460b      	mov	r3, r1
 800752a:	80fb      	strh	r3, [r7, #6]
 800752c:	4613      	mov	r3, r2
 800752e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007536:	2b00      	cmp	r3, #0
 8007538:	d001      	beq.n	800753e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800753a:	2300      	movs	r3, #0
 800753c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800753e:	7979      	ldrb	r1, [r7, #5]
 8007540:	7e3b      	ldrb	r3, [r7, #24]
 8007542:	9303      	str	r3, [sp, #12]
 8007544:	88fb      	ldrh	r3, [r7, #6]
 8007546:	9302      	str	r3, [sp, #8]
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	9301      	str	r3, [sp, #4]
 800754c:	2301      	movs	r3, #1
 800754e:	9300      	str	r3, [sp, #0]
 8007550:	2302      	movs	r3, #2
 8007552:	2200      	movs	r2, #0
 8007554:	68f8      	ldr	r0, [r7, #12]
 8007556:	f000 fa92 	bl	8007a7e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	3710      	adds	r7, #16
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b088      	sub	sp, #32
 8007568:	af04      	add	r7, sp, #16
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	4611      	mov	r1, r2
 8007570:	461a      	mov	r2, r3
 8007572:	460b      	mov	r3, r1
 8007574:	80fb      	strh	r3, [r7, #6]
 8007576:	4613      	mov	r3, r2
 8007578:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800757a:	7979      	ldrb	r1, [r7, #5]
 800757c:	2300      	movs	r3, #0
 800757e:	9303      	str	r3, [sp, #12]
 8007580:	88fb      	ldrh	r3, [r7, #6]
 8007582:	9302      	str	r3, [sp, #8]
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	9301      	str	r3, [sp, #4]
 8007588:	2301      	movs	r3, #1
 800758a:	9300      	str	r3, [sp, #0]
 800758c:	2302      	movs	r3, #2
 800758e:	2201      	movs	r2, #1
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	f000 fa74 	bl	8007a7e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b086      	sub	sp, #24
 80075a4:	af04      	add	r7, sp, #16
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	4608      	mov	r0, r1
 80075aa:	4611      	mov	r1, r2
 80075ac:	461a      	mov	r2, r3
 80075ae:	4603      	mov	r3, r0
 80075b0:	70fb      	strb	r3, [r7, #3]
 80075b2:	460b      	mov	r3, r1
 80075b4:	70bb      	strb	r3, [r7, #2]
 80075b6:	4613      	mov	r3, r2
 80075b8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80075ba:	7878      	ldrb	r0, [r7, #1]
 80075bc:	78ba      	ldrb	r2, [r7, #2]
 80075be:	78f9      	ldrb	r1, [r7, #3]
 80075c0:	8b3b      	ldrh	r3, [r7, #24]
 80075c2:	9302      	str	r3, [sp, #8]
 80075c4:	7d3b      	ldrb	r3, [r7, #20]
 80075c6:	9301      	str	r3, [sp, #4]
 80075c8:	7c3b      	ldrb	r3, [r7, #16]
 80075ca:	9300      	str	r3, [sp, #0]
 80075cc:	4603      	mov	r3, r0
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 fa07 	bl	80079e2 <USBH_LL_OpenPipe>

  return USBH_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3708      	adds	r7, #8
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b082      	sub	sp, #8
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
 80075e6:	460b      	mov	r3, r1
 80075e8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80075ea:	78fb      	ldrb	r3, [r7, #3]
 80075ec:	4619      	mov	r1, r3
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 fa26 	bl	8007a40 <USBH_LL_ClosePipe>

  return USBH_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3708      	adds	r7, #8
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b084      	sub	sp, #16
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
 8007606:	460b      	mov	r3, r1
 8007608:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 f836 	bl	800767c <USBH_GetFreePipe>
 8007610:	4603      	mov	r3, r0
 8007612:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007614:	89fb      	ldrh	r3, [r7, #14]
 8007616:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800761a:	4293      	cmp	r3, r2
 800761c:	d00a      	beq.n	8007634 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800761e:	78fa      	ldrb	r2, [r7, #3]
 8007620:	89fb      	ldrh	r3, [r7, #14]
 8007622:	f003 030f 	and.w	r3, r3, #15
 8007626:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800762a:	6879      	ldr	r1, [r7, #4]
 800762c:	33e0      	adds	r3, #224	; 0xe0
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	440b      	add	r3, r1
 8007632:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007634:	89fb      	ldrh	r3, [r7, #14]
 8007636:	b2db      	uxtb	r3, r3
}
 8007638:	4618      	mov	r0, r3
 800763a:	3710      	adds	r7, #16
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	460b      	mov	r3, r1
 800764a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800764c:	78fb      	ldrb	r3, [r7, #3]
 800764e:	2b0f      	cmp	r3, #15
 8007650:	d80d      	bhi.n	800766e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007652:	78fb      	ldrb	r3, [r7, #3]
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	33e0      	adds	r3, #224	; 0xe0
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	4413      	add	r3, r2
 800765c:	685a      	ldr	r2, [r3, #4]
 800765e:	78fb      	ldrb	r3, [r7, #3]
 8007660:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007664:	6879      	ldr	r1, [r7, #4]
 8007666:	33e0      	adds	r3, #224	; 0xe0
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	440b      	add	r3, r1
 800766c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	370c      	adds	r7, #12
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800767c:	b480      	push	{r7}
 800767e:	b085      	sub	sp, #20
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007684:	2300      	movs	r3, #0
 8007686:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007688:	2300      	movs	r3, #0
 800768a:	73fb      	strb	r3, [r7, #15]
 800768c:	e00f      	b.n	80076ae <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800768e:	7bfb      	ldrb	r3, [r7, #15]
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	33e0      	adds	r3, #224	; 0xe0
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	4413      	add	r3, r2
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d102      	bne.n	80076a8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80076a2:	7bfb      	ldrb	r3, [r7, #15]
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	e007      	b.n	80076b8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80076a8:	7bfb      	ldrb	r3, [r7, #15]
 80076aa:	3301      	adds	r3, #1
 80076ac:	73fb      	strb	r3, [r7, #15]
 80076ae:	7bfb      	ldrb	r3, [r7, #15]
 80076b0:	2b0f      	cmp	r3, #15
 80076b2:	d9ec      	bls.n	800768e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80076b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3714      	adds	r7, #20
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80076c8:	2201      	movs	r2, #1
 80076ca:	490e      	ldr	r1, [pc, #56]	; (8007704 <MX_USB_HOST_Init+0x40>)
 80076cc:	480e      	ldr	r0, [pc, #56]	; (8007708 <MX_USB_HOST_Init+0x44>)
 80076ce:	f7ff fb37 	bl	8006d40 <USBH_Init>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d001      	beq.n	80076dc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80076d8:	f7f9 fc72 	bl	8000fc0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80076dc:	490b      	ldr	r1, [pc, #44]	; (800770c <MX_USB_HOST_Init+0x48>)
 80076de:	480a      	ldr	r0, [pc, #40]	; (8007708 <MX_USB_HOST_Init+0x44>)
 80076e0:	f7ff fbbc 	bl	8006e5c <USBH_RegisterClass>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d001      	beq.n	80076ee <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80076ea:	f7f9 fc69 	bl	8000fc0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80076ee:	4806      	ldr	r0, [pc, #24]	; (8007708 <MX_USB_HOST_Init+0x44>)
 80076f0:	f7ff fc40 	bl	8006f74 <USBH_Start>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d001      	beq.n	80076fe <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80076fa:	f7f9 fc61 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80076fe:	bf00      	nop
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	08007711 	.word	0x08007711
 8007708:	20000280 	.word	0x20000280
 800770c:	20000010 	.word	0x20000010

08007710 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007710:	b480      	push	{r7}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	460b      	mov	r3, r1
 800771a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800771c:	78fb      	ldrb	r3, [r7, #3]
 800771e:	3b01      	subs	r3, #1
 8007720:	2b04      	cmp	r3, #4
 8007722:	d819      	bhi.n	8007758 <USBH_UserProcess+0x48>
 8007724:	a201      	add	r2, pc, #4	; (adr r2, 800772c <USBH_UserProcess+0x1c>)
 8007726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800772a:	bf00      	nop
 800772c:	08007759 	.word	0x08007759
 8007730:	08007749 	.word	0x08007749
 8007734:	08007759 	.word	0x08007759
 8007738:	08007751 	.word	0x08007751
 800773c:	08007741 	.word	0x08007741
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007740:	4b09      	ldr	r3, [pc, #36]	; (8007768 <USBH_UserProcess+0x58>)
 8007742:	2203      	movs	r2, #3
 8007744:	701a      	strb	r2, [r3, #0]
  break;
 8007746:	e008      	b.n	800775a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007748:	4b07      	ldr	r3, [pc, #28]	; (8007768 <USBH_UserProcess+0x58>)
 800774a:	2202      	movs	r2, #2
 800774c:	701a      	strb	r2, [r3, #0]
  break;
 800774e:	e004      	b.n	800775a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007750:	4b05      	ldr	r3, [pc, #20]	; (8007768 <USBH_UserProcess+0x58>)
 8007752:	2201      	movs	r2, #1
 8007754:	701a      	strb	r2, [r3, #0]
  break;
 8007756:	e000      	b.n	800775a <USBH_UserProcess+0x4a>

  default:
  break;
 8007758:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800775a:	bf00      	nop
 800775c:	370c      	adds	r7, #12
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	20000658 	.word	0x20000658

0800776c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b08a      	sub	sp, #40	; 0x28
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007774:	f107 0314 	add.w	r3, r7, #20
 8007778:	2200      	movs	r2, #0
 800777a:	601a      	str	r2, [r3, #0]
 800777c:	605a      	str	r2, [r3, #4]
 800777e:	609a      	str	r2, [r3, #8]
 8007780:	60da      	str	r2, [r3, #12]
 8007782:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800778c:	d147      	bne.n	800781e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800778e:	2300      	movs	r3, #0
 8007790:	613b      	str	r3, [r7, #16]
 8007792:	4b25      	ldr	r3, [pc, #148]	; (8007828 <HAL_HCD_MspInit+0xbc>)
 8007794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007796:	4a24      	ldr	r2, [pc, #144]	; (8007828 <HAL_HCD_MspInit+0xbc>)
 8007798:	f043 0301 	orr.w	r3, r3, #1
 800779c:	6313      	str	r3, [r2, #48]	; 0x30
 800779e:	4b22      	ldr	r3, [pc, #136]	; (8007828 <HAL_HCD_MspInit+0xbc>)
 80077a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a2:	f003 0301 	and.w	r3, r3, #1
 80077a6:	613b      	str	r3, [r7, #16]
 80077a8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80077aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80077b0:	2300      	movs	r3, #0
 80077b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077b4:	2300      	movs	r3, #0
 80077b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80077b8:	f107 0314 	add.w	r3, r7, #20
 80077bc:	4619      	mov	r1, r3
 80077be:	481b      	ldr	r0, [pc, #108]	; (800782c <HAL_HCD_MspInit+0xc0>)
 80077c0:	f7fa f858 	bl	8001874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80077c4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80077c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077ca:	2302      	movs	r3, #2
 80077cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077ce:	2300      	movs	r3, #0
 80077d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077d2:	2300      	movs	r3, #0
 80077d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80077d6:	230a      	movs	r3, #10
 80077d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077da:	f107 0314 	add.w	r3, r7, #20
 80077de:	4619      	mov	r1, r3
 80077e0:	4812      	ldr	r0, [pc, #72]	; (800782c <HAL_HCD_MspInit+0xc0>)
 80077e2:	f7fa f847 	bl	8001874 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80077e6:	4b10      	ldr	r3, [pc, #64]	; (8007828 <HAL_HCD_MspInit+0xbc>)
 80077e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ea:	4a0f      	ldr	r2, [pc, #60]	; (8007828 <HAL_HCD_MspInit+0xbc>)
 80077ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077f0:	6353      	str	r3, [r2, #52]	; 0x34
 80077f2:	2300      	movs	r3, #0
 80077f4:	60fb      	str	r3, [r7, #12]
 80077f6:	4b0c      	ldr	r3, [pc, #48]	; (8007828 <HAL_HCD_MspInit+0xbc>)
 80077f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077fa:	4a0b      	ldr	r2, [pc, #44]	; (8007828 <HAL_HCD_MspInit+0xbc>)
 80077fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007800:	6453      	str	r3, [r2, #68]	; 0x44
 8007802:	4b09      	ldr	r3, [pc, #36]	; (8007828 <HAL_HCD_MspInit+0xbc>)
 8007804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800780a:	60fb      	str	r3, [r7, #12]
 800780c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800780e:	2200      	movs	r2, #0
 8007810:	2100      	movs	r1, #0
 8007812:	2043      	movs	r0, #67	; 0x43
 8007814:	f7f9 fe97 	bl	8001546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007818:	2043      	movs	r0, #67	; 0x43
 800781a:	f7f9 feb0 	bl	800157e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800781e:	bf00      	nop
 8007820:	3728      	adds	r7, #40	; 0x28
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	40023800 	.word	0x40023800
 800782c:	40020000 	.word	0x40020000

08007830 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800783e:	4618      	mov	r0, r3
 8007840:	f7ff fbb7 	bl	8006fb2 <USBH_LL_IncTimer>
}
 8007844:	bf00      	nop
 8007846:	3708      	adds	r7, #8
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800785a:	4618      	mov	r0, r3
 800785c:	f7ff fbef 	bl	800703e <USBH_LL_Connect>
}
 8007860:	bf00      	nop
 8007862:	3708      	adds	r7, #8
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007876:	4618      	mov	r0, r3
 8007878:	f7ff fbf8 	bl	800706c <USBH_LL_Disconnect>
}
 800787c:	bf00      	nop
 800787e:	3708      	adds	r7, #8
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	460b      	mov	r3, r1
 800788e:	70fb      	strb	r3, [r7, #3]
 8007890:	4613      	mov	r3, r2
 8007892:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007894:	bf00      	nop
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b082      	sub	sp, #8
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80078ae:	4618      	mov	r0, r3
 80078b0:	f7ff fba9 	bl	8007006 <USBH_LL_PortEnabled>
}
 80078b4:	bf00      	nop
 80078b6:	3708      	adds	r7, #8
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7ff fba9 	bl	8007022 <USBH_LL_PortDisabled>
}
 80078d0:	bf00      	nop
 80078d2:	3708      	adds	r7, #8
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d12a      	bne.n	8007940 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80078ea:	4a18      	ldr	r2, [pc, #96]	; (800794c <USBH_LL_Init+0x74>)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a15      	ldr	r2, [pc, #84]	; (800794c <USBH_LL_Init+0x74>)
 80078f6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80078fa:	4b14      	ldr	r3, [pc, #80]	; (800794c <USBH_LL_Init+0x74>)
 80078fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007900:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007902:	4b12      	ldr	r3, [pc, #72]	; (800794c <USBH_LL_Init+0x74>)
 8007904:	2208      	movs	r2, #8
 8007906:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007908:	4b10      	ldr	r3, [pc, #64]	; (800794c <USBH_LL_Init+0x74>)
 800790a:	2201      	movs	r2, #1
 800790c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800790e:	4b0f      	ldr	r3, [pc, #60]	; (800794c <USBH_LL_Init+0x74>)
 8007910:	2200      	movs	r2, #0
 8007912:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007914:	4b0d      	ldr	r3, [pc, #52]	; (800794c <USBH_LL_Init+0x74>)
 8007916:	2202      	movs	r2, #2
 8007918:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800791a:	4b0c      	ldr	r3, [pc, #48]	; (800794c <USBH_LL_Init+0x74>)
 800791c:	2200      	movs	r2, #0
 800791e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007920:	480a      	ldr	r0, [pc, #40]	; (800794c <USBH_LL_Init+0x74>)
 8007922:	f7fa f976 	bl	8001c12 <HAL_HCD_Init>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d001      	beq.n	8007930 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800792c:	f7f9 fb48 	bl	8000fc0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007930:	4806      	ldr	r0, [pc, #24]	; (800794c <USBH_LL_Init+0x74>)
 8007932:	f7fa fd4c 	bl	80023ce <HAL_HCD_GetCurrentFrame>
 8007936:	4603      	mov	r3, r0
 8007938:	4619      	mov	r1, r3
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f7ff fb2a 	bl	8006f94 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3708      	adds	r7, #8
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	2000065c 	.word	0x2000065c

08007950 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007958:	2300      	movs	r3, #0
 800795a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800795c:	2300      	movs	r3, #0
 800795e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007966:	4618      	mov	r0, r3
 8007968:	f7fa fcc9 	bl	80022fe <HAL_HCD_Start>
 800796c:	4603      	mov	r3, r0
 800796e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007970:	7bfb      	ldrb	r3, [r7, #15]
 8007972:	4618      	mov	r0, r3
 8007974:	f000 f90e 	bl	8007b94 <USBH_Get_USB_Status>
 8007978:	4603      	mov	r3, r0
 800797a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800797c:	7bbb      	ldrb	r3, [r7, #14]
}
 800797e:	4618      	mov	r0, r3
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b084      	sub	sp, #16
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800798e:	2300      	movs	r3, #0
 8007990:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007992:	2300      	movs	r3, #0
 8007994:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800799c:	4618      	mov	r0, r3
 800799e:	f7fa fcd1 	bl	8002344 <HAL_HCD_Stop>
 80079a2:	4603      	mov	r3, r0
 80079a4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80079a6:	7bfb      	ldrb	r3, [r7, #15]
 80079a8:	4618      	mov	r0, r3
 80079aa:	f000 f8f3 	bl	8007b94 <USBH_Get_USB_Status>
 80079ae:	4603      	mov	r3, r0
 80079b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3710      	adds	r7, #16
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	460b      	mov	r3, r1
 80079c6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80079ce:	78fa      	ldrb	r2, [r7, #3]
 80079d0:	4611      	mov	r1, r2
 80079d2:	4618      	mov	r0, r3
 80079d4:	f7fa fce7 	bl	80023a6 <HAL_HCD_HC_GetXferCount>
 80079d8:	4603      	mov	r3, r0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3708      	adds	r7, #8
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80079e2:	b590      	push	{r4, r7, lr}
 80079e4:	b089      	sub	sp, #36	; 0x24
 80079e6:	af04      	add	r7, sp, #16
 80079e8:	6078      	str	r0, [r7, #4]
 80079ea:	4608      	mov	r0, r1
 80079ec:	4611      	mov	r1, r2
 80079ee:	461a      	mov	r2, r3
 80079f0:	4603      	mov	r3, r0
 80079f2:	70fb      	strb	r3, [r7, #3]
 80079f4:	460b      	mov	r3, r1
 80079f6:	70bb      	strb	r3, [r7, #2]
 80079f8:	4613      	mov	r3, r2
 80079fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079fc:	2300      	movs	r3, #0
 80079fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a00:	2300      	movs	r3, #0
 8007a02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007a0a:	787c      	ldrb	r4, [r7, #1]
 8007a0c:	78ba      	ldrb	r2, [r7, #2]
 8007a0e:	78f9      	ldrb	r1, [r7, #3]
 8007a10:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007a12:	9302      	str	r3, [sp, #8]
 8007a14:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007a18:	9301      	str	r3, [sp, #4]
 8007a1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007a1e:	9300      	str	r3, [sp, #0]
 8007a20:	4623      	mov	r3, r4
 8007a22:	f7fa f958 	bl	8001cd6 <HAL_HCD_HC_Init>
 8007a26:	4603      	mov	r3, r0
 8007a28:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007a2a:	7bfb      	ldrb	r3, [r7, #15]
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f000 f8b1 	bl	8007b94 <USBH_Get_USB_Status>
 8007a32:	4603      	mov	r3, r0
 8007a34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a36:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3714      	adds	r7, #20
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd90      	pop	{r4, r7, pc}

08007a40 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	460b      	mov	r3, r1
 8007a4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a50:	2300      	movs	r3, #0
 8007a52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007a5a:	78fa      	ldrb	r2, [r7, #3]
 8007a5c:	4611      	mov	r1, r2
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7fa f9c8 	bl	8001df4 <HAL_HCD_HC_Halt>
 8007a64:	4603      	mov	r3, r0
 8007a66:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007a68:	7bfb      	ldrb	r3, [r7, #15]
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f000 f892 	bl	8007b94 <USBH_Get_USB_Status>
 8007a70:	4603      	mov	r3, r0
 8007a72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a74:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007a7e:	b590      	push	{r4, r7, lr}
 8007a80:	b089      	sub	sp, #36	; 0x24
 8007a82:	af04      	add	r7, sp, #16
 8007a84:	6078      	str	r0, [r7, #4]
 8007a86:	4608      	mov	r0, r1
 8007a88:	4611      	mov	r1, r2
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	70fb      	strb	r3, [r7, #3]
 8007a90:	460b      	mov	r3, r1
 8007a92:	70bb      	strb	r3, [r7, #2]
 8007a94:	4613      	mov	r3, r2
 8007a96:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007aa6:	787c      	ldrb	r4, [r7, #1]
 8007aa8:	78ba      	ldrb	r2, [r7, #2]
 8007aaa:	78f9      	ldrb	r1, [r7, #3]
 8007aac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007ab0:	9303      	str	r3, [sp, #12]
 8007ab2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007ab4:	9302      	str	r3, [sp, #8]
 8007ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab8:	9301      	str	r3, [sp, #4]
 8007aba:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007abe:	9300      	str	r3, [sp, #0]
 8007ac0:	4623      	mov	r3, r4
 8007ac2:	f7fa f9bb 	bl	8001e3c <HAL_HCD_HC_SubmitRequest>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007aca:	7bfb      	ldrb	r3, [r7, #15]
 8007acc:	4618      	mov	r0, r3
 8007ace:	f000 f861 	bl	8007b94 <USBH_Get_USB_Status>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ad6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3714      	adds	r7, #20
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd90      	pop	{r4, r7, pc}

08007ae0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	460b      	mov	r3, r1
 8007aea:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007af2:	78fa      	ldrb	r2, [r7, #3]
 8007af4:	4611      	mov	r1, r2
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7fa fc41 	bl	800237e <HAL_HCD_HC_GetURBState>
 8007afc:	4603      	mov	r3, r0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3708      	adds	r7, #8
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b082      	sub	sp, #8
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
 8007b0e:	460b      	mov	r3, r1
 8007b10:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d103      	bne.n	8007b24 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007b1c:	78fb      	ldrb	r3, [r7, #3]
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f000 f864 	bl	8007bec <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007b24:	20c8      	movs	r0, #200	; 0xc8
 8007b26:	f7f9 fc0f 	bl	8001348 <HAL_Delay>
  return USBH_OK;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3708      	adds	r7, #8
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b085      	sub	sp, #20
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	70fb      	strb	r3, [r7, #3]
 8007b40:	4613      	mov	r3, r2
 8007b42:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007b4a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007b4c:	78fb      	ldrb	r3, [r7, #3]
 8007b4e:	68fa      	ldr	r2, [r7, #12]
 8007b50:	212c      	movs	r1, #44	; 0x2c
 8007b52:	fb01 f303 	mul.w	r3, r1, r3
 8007b56:	4413      	add	r3, r2
 8007b58:	333b      	adds	r3, #59	; 0x3b
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d009      	beq.n	8007b74 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007b60:	78fb      	ldrb	r3, [r7, #3]
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	212c      	movs	r1, #44	; 0x2c
 8007b66:	fb01 f303 	mul.w	r3, r1, r3
 8007b6a:	4413      	add	r3, r2
 8007b6c:	3354      	adds	r3, #84	; 0x54
 8007b6e:	78ba      	ldrb	r2, [r7, #2]
 8007b70:	701a      	strb	r2, [r3, #0]
 8007b72:	e008      	b.n	8007b86 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007b74:	78fb      	ldrb	r3, [r7, #3]
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	212c      	movs	r1, #44	; 0x2c
 8007b7a:	fb01 f303 	mul.w	r3, r1, r3
 8007b7e:	4413      	add	r3, r2
 8007b80:	3355      	adds	r3, #85	; 0x55
 8007b82:	78ba      	ldrb	r2, [r7, #2]
 8007b84:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3714      	adds	r7, #20
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b085      	sub	sp, #20
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007ba2:	79fb      	ldrb	r3, [r7, #7]
 8007ba4:	2b03      	cmp	r3, #3
 8007ba6:	d817      	bhi.n	8007bd8 <USBH_Get_USB_Status+0x44>
 8007ba8:	a201      	add	r2, pc, #4	; (adr r2, 8007bb0 <USBH_Get_USB_Status+0x1c>)
 8007baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bae:	bf00      	nop
 8007bb0:	08007bc1 	.word	0x08007bc1
 8007bb4:	08007bc7 	.word	0x08007bc7
 8007bb8:	08007bcd 	.word	0x08007bcd
 8007bbc:	08007bd3 	.word	0x08007bd3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	73fb      	strb	r3, [r7, #15]
    break;
 8007bc4:	e00b      	b.n	8007bde <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007bc6:	2302      	movs	r3, #2
 8007bc8:	73fb      	strb	r3, [r7, #15]
    break;
 8007bca:	e008      	b.n	8007bde <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	73fb      	strb	r3, [r7, #15]
    break;
 8007bd0:	e005      	b.n	8007bde <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007bd2:	2302      	movs	r3, #2
 8007bd4:	73fb      	strb	r3, [r7, #15]
    break;
 8007bd6:	e002      	b.n	8007bde <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007bd8:	2302      	movs	r3, #2
 8007bda:	73fb      	strb	r3, [r7, #15]
    break;
 8007bdc:	bf00      	nop
  }
  return usb_status;
 8007bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3714      	adds	r7, #20
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007bf6:	79fb      	ldrb	r3, [r7, #7]
 8007bf8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007bfa:	79fb      	ldrb	r3, [r7, #7]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d102      	bne.n	8007c06 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007c00:	2300      	movs	r3, #0
 8007c02:	73fb      	strb	r3, [r7, #15]
 8007c04:	e001      	b.n	8007c0a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8007c06:	2301      	movs	r3, #1
 8007c08:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007c0a:	7bfb      	ldrb	r3, [r7, #15]
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	2101      	movs	r1, #1
 8007c10:	4803      	ldr	r0, [pc, #12]	; (8007c20 <MX_DriverVbusFS+0x34>)
 8007c12:	f7f9 ffcb 	bl	8001bac <HAL_GPIO_WritePin>
}
 8007c16:	bf00      	nop
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	40020800 	.word	0x40020800

08007c24 <__errno>:
 8007c24:	4b01      	ldr	r3, [pc, #4]	; (8007c2c <__errno+0x8>)
 8007c26:	6818      	ldr	r0, [r3, #0]
 8007c28:	4770      	bx	lr
 8007c2a:	bf00      	nop
 8007c2c:	20000030 	.word	0x20000030

08007c30 <__libc_init_array>:
 8007c30:	b570      	push	{r4, r5, r6, lr}
 8007c32:	4d0d      	ldr	r5, [pc, #52]	; (8007c68 <__libc_init_array+0x38>)
 8007c34:	4c0d      	ldr	r4, [pc, #52]	; (8007c6c <__libc_init_array+0x3c>)
 8007c36:	1b64      	subs	r4, r4, r5
 8007c38:	10a4      	asrs	r4, r4, #2
 8007c3a:	2600      	movs	r6, #0
 8007c3c:	42a6      	cmp	r6, r4
 8007c3e:	d109      	bne.n	8007c54 <__libc_init_array+0x24>
 8007c40:	4d0b      	ldr	r5, [pc, #44]	; (8007c70 <__libc_init_array+0x40>)
 8007c42:	4c0c      	ldr	r4, [pc, #48]	; (8007c74 <__libc_init_array+0x44>)
 8007c44:	f000 f93c 	bl	8007ec0 <_init>
 8007c48:	1b64      	subs	r4, r4, r5
 8007c4a:	10a4      	asrs	r4, r4, #2
 8007c4c:	2600      	movs	r6, #0
 8007c4e:	42a6      	cmp	r6, r4
 8007c50:	d105      	bne.n	8007c5e <__libc_init_array+0x2e>
 8007c52:	bd70      	pop	{r4, r5, r6, pc}
 8007c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c58:	4798      	blx	r3
 8007c5a:	3601      	adds	r6, #1
 8007c5c:	e7ee      	b.n	8007c3c <__libc_init_array+0xc>
 8007c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c62:	4798      	blx	r3
 8007c64:	3601      	adds	r6, #1
 8007c66:	e7f2      	b.n	8007c4e <__libc_init_array+0x1e>
 8007c68:	08007f04 	.word	0x08007f04
 8007c6c:	08007f04 	.word	0x08007f04
 8007c70:	08007f04 	.word	0x08007f04
 8007c74:	08007f08 	.word	0x08007f08

08007c78 <malloc>:
 8007c78:	4b02      	ldr	r3, [pc, #8]	; (8007c84 <malloc+0xc>)
 8007c7a:	4601      	mov	r1, r0
 8007c7c:	6818      	ldr	r0, [r3, #0]
 8007c7e:	f000 b88d 	b.w	8007d9c <_malloc_r>
 8007c82:	bf00      	nop
 8007c84:	20000030 	.word	0x20000030

08007c88 <free>:
 8007c88:	4b02      	ldr	r3, [pc, #8]	; (8007c94 <free+0xc>)
 8007c8a:	4601      	mov	r1, r0
 8007c8c:	6818      	ldr	r0, [r3, #0]
 8007c8e:	f000 b819 	b.w	8007cc4 <_free_r>
 8007c92:	bf00      	nop
 8007c94:	20000030 	.word	0x20000030

08007c98 <memcpy>:
 8007c98:	440a      	add	r2, r1
 8007c9a:	4291      	cmp	r1, r2
 8007c9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ca0:	d100      	bne.n	8007ca4 <memcpy+0xc>
 8007ca2:	4770      	bx	lr
 8007ca4:	b510      	push	{r4, lr}
 8007ca6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007caa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cae:	4291      	cmp	r1, r2
 8007cb0:	d1f9      	bne.n	8007ca6 <memcpy+0xe>
 8007cb2:	bd10      	pop	{r4, pc}

08007cb4 <memset>:
 8007cb4:	4402      	add	r2, r0
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d100      	bne.n	8007cbe <memset+0xa>
 8007cbc:	4770      	bx	lr
 8007cbe:	f803 1b01 	strb.w	r1, [r3], #1
 8007cc2:	e7f9      	b.n	8007cb8 <memset+0x4>

08007cc4 <_free_r>:
 8007cc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cc6:	2900      	cmp	r1, #0
 8007cc8:	d044      	beq.n	8007d54 <_free_r+0x90>
 8007cca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cce:	9001      	str	r0, [sp, #4]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	f1a1 0404 	sub.w	r4, r1, #4
 8007cd6:	bfb8      	it	lt
 8007cd8:	18e4      	addlt	r4, r4, r3
 8007cda:	f000 f8e3 	bl	8007ea4 <__malloc_lock>
 8007cde:	4a1e      	ldr	r2, [pc, #120]	; (8007d58 <_free_r+0x94>)
 8007ce0:	9801      	ldr	r0, [sp, #4]
 8007ce2:	6813      	ldr	r3, [r2, #0]
 8007ce4:	b933      	cbnz	r3, 8007cf4 <_free_r+0x30>
 8007ce6:	6063      	str	r3, [r4, #4]
 8007ce8:	6014      	str	r4, [r2, #0]
 8007cea:	b003      	add	sp, #12
 8007cec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007cf0:	f000 b8de 	b.w	8007eb0 <__malloc_unlock>
 8007cf4:	42a3      	cmp	r3, r4
 8007cf6:	d908      	bls.n	8007d0a <_free_r+0x46>
 8007cf8:	6825      	ldr	r5, [r4, #0]
 8007cfa:	1961      	adds	r1, r4, r5
 8007cfc:	428b      	cmp	r3, r1
 8007cfe:	bf01      	itttt	eq
 8007d00:	6819      	ldreq	r1, [r3, #0]
 8007d02:	685b      	ldreq	r3, [r3, #4]
 8007d04:	1949      	addeq	r1, r1, r5
 8007d06:	6021      	streq	r1, [r4, #0]
 8007d08:	e7ed      	b.n	8007ce6 <_free_r+0x22>
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	b10b      	cbz	r3, 8007d14 <_free_r+0x50>
 8007d10:	42a3      	cmp	r3, r4
 8007d12:	d9fa      	bls.n	8007d0a <_free_r+0x46>
 8007d14:	6811      	ldr	r1, [r2, #0]
 8007d16:	1855      	adds	r5, r2, r1
 8007d18:	42a5      	cmp	r5, r4
 8007d1a:	d10b      	bne.n	8007d34 <_free_r+0x70>
 8007d1c:	6824      	ldr	r4, [r4, #0]
 8007d1e:	4421      	add	r1, r4
 8007d20:	1854      	adds	r4, r2, r1
 8007d22:	42a3      	cmp	r3, r4
 8007d24:	6011      	str	r1, [r2, #0]
 8007d26:	d1e0      	bne.n	8007cea <_free_r+0x26>
 8007d28:	681c      	ldr	r4, [r3, #0]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	6053      	str	r3, [r2, #4]
 8007d2e:	4421      	add	r1, r4
 8007d30:	6011      	str	r1, [r2, #0]
 8007d32:	e7da      	b.n	8007cea <_free_r+0x26>
 8007d34:	d902      	bls.n	8007d3c <_free_r+0x78>
 8007d36:	230c      	movs	r3, #12
 8007d38:	6003      	str	r3, [r0, #0]
 8007d3a:	e7d6      	b.n	8007cea <_free_r+0x26>
 8007d3c:	6825      	ldr	r5, [r4, #0]
 8007d3e:	1961      	adds	r1, r4, r5
 8007d40:	428b      	cmp	r3, r1
 8007d42:	bf04      	itt	eq
 8007d44:	6819      	ldreq	r1, [r3, #0]
 8007d46:	685b      	ldreq	r3, [r3, #4]
 8007d48:	6063      	str	r3, [r4, #4]
 8007d4a:	bf04      	itt	eq
 8007d4c:	1949      	addeq	r1, r1, r5
 8007d4e:	6021      	streq	r1, [r4, #0]
 8007d50:	6054      	str	r4, [r2, #4]
 8007d52:	e7ca      	b.n	8007cea <_free_r+0x26>
 8007d54:	b003      	add	sp, #12
 8007d56:	bd30      	pop	{r4, r5, pc}
 8007d58:	20000960 	.word	0x20000960

08007d5c <sbrk_aligned>:
 8007d5c:	b570      	push	{r4, r5, r6, lr}
 8007d5e:	4e0e      	ldr	r6, [pc, #56]	; (8007d98 <sbrk_aligned+0x3c>)
 8007d60:	460c      	mov	r4, r1
 8007d62:	6831      	ldr	r1, [r6, #0]
 8007d64:	4605      	mov	r5, r0
 8007d66:	b911      	cbnz	r1, 8007d6e <sbrk_aligned+0x12>
 8007d68:	f000 f88c 	bl	8007e84 <_sbrk_r>
 8007d6c:	6030      	str	r0, [r6, #0]
 8007d6e:	4621      	mov	r1, r4
 8007d70:	4628      	mov	r0, r5
 8007d72:	f000 f887 	bl	8007e84 <_sbrk_r>
 8007d76:	1c43      	adds	r3, r0, #1
 8007d78:	d00a      	beq.n	8007d90 <sbrk_aligned+0x34>
 8007d7a:	1cc4      	adds	r4, r0, #3
 8007d7c:	f024 0403 	bic.w	r4, r4, #3
 8007d80:	42a0      	cmp	r0, r4
 8007d82:	d007      	beq.n	8007d94 <sbrk_aligned+0x38>
 8007d84:	1a21      	subs	r1, r4, r0
 8007d86:	4628      	mov	r0, r5
 8007d88:	f000 f87c 	bl	8007e84 <_sbrk_r>
 8007d8c:	3001      	adds	r0, #1
 8007d8e:	d101      	bne.n	8007d94 <sbrk_aligned+0x38>
 8007d90:	f04f 34ff 	mov.w	r4, #4294967295
 8007d94:	4620      	mov	r0, r4
 8007d96:	bd70      	pop	{r4, r5, r6, pc}
 8007d98:	20000964 	.word	0x20000964

08007d9c <_malloc_r>:
 8007d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007da0:	1ccd      	adds	r5, r1, #3
 8007da2:	f025 0503 	bic.w	r5, r5, #3
 8007da6:	3508      	adds	r5, #8
 8007da8:	2d0c      	cmp	r5, #12
 8007daa:	bf38      	it	cc
 8007dac:	250c      	movcc	r5, #12
 8007dae:	2d00      	cmp	r5, #0
 8007db0:	4607      	mov	r7, r0
 8007db2:	db01      	blt.n	8007db8 <_malloc_r+0x1c>
 8007db4:	42a9      	cmp	r1, r5
 8007db6:	d905      	bls.n	8007dc4 <_malloc_r+0x28>
 8007db8:	230c      	movs	r3, #12
 8007dba:	603b      	str	r3, [r7, #0]
 8007dbc:	2600      	movs	r6, #0
 8007dbe:	4630      	mov	r0, r6
 8007dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dc4:	4e2e      	ldr	r6, [pc, #184]	; (8007e80 <_malloc_r+0xe4>)
 8007dc6:	f000 f86d 	bl	8007ea4 <__malloc_lock>
 8007dca:	6833      	ldr	r3, [r6, #0]
 8007dcc:	461c      	mov	r4, r3
 8007dce:	bb34      	cbnz	r4, 8007e1e <_malloc_r+0x82>
 8007dd0:	4629      	mov	r1, r5
 8007dd2:	4638      	mov	r0, r7
 8007dd4:	f7ff ffc2 	bl	8007d5c <sbrk_aligned>
 8007dd8:	1c43      	adds	r3, r0, #1
 8007dda:	4604      	mov	r4, r0
 8007ddc:	d14d      	bne.n	8007e7a <_malloc_r+0xde>
 8007dde:	6834      	ldr	r4, [r6, #0]
 8007de0:	4626      	mov	r6, r4
 8007de2:	2e00      	cmp	r6, #0
 8007de4:	d140      	bne.n	8007e68 <_malloc_r+0xcc>
 8007de6:	6823      	ldr	r3, [r4, #0]
 8007de8:	4631      	mov	r1, r6
 8007dea:	4638      	mov	r0, r7
 8007dec:	eb04 0803 	add.w	r8, r4, r3
 8007df0:	f000 f848 	bl	8007e84 <_sbrk_r>
 8007df4:	4580      	cmp	r8, r0
 8007df6:	d13a      	bne.n	8007e6e <_malloc_r+0xd2>
 8007df8:	6821      	ldr	r1, [r4, #0]
 8007dfa:	3503      	adds	r5, #3
 8007dfc:	1a6d      	subs	r5, r5, r1
 8007dfe:	f025 0503 	bic.w	r5, r5, #3
 8007e02:	3508      	adds	r5, #8
 8007e04:	2d0c      	cmp	r5, #12
 8007e06:	bf38      	it	cc
 8007e08:	250c      	movcc	r5, #12
 8007e0a:	4629      	mov	r1, r5
 8007e0c:	4638      	mov	r0, r7
 8007e0e:	f7ff ffa5 	bl	8007d5c <sbrk_aligned>
 8007e12:	3001      	adds	r0, #1
 8007e14:	d02b      	beq.n	8007e6e <_malloc_r+0xd2>
 8007e16:	6823      	ldr	r3, [r4, #0]
 8007e18:	442b      	add	r3, r5
 8007e1a:	6023      	str	r3, [r4, #0]
 8007e1c:	e00e      	b.n	8007e3c <_malloc_r+0xa0>
 8007e1e:	6822      	ldr	r2, [r4, #0]
 8007e20:	1b52      	subs	r2, r2, r5
 8007e22:	d41e      	bmi.n	8007e62 <_malloc_r+0xc6>
 8007e24:	2a0b      	cmp	r2, #11
 8007e26:	d916      	bls.n	8007e56 <_malloc_r+0xba>
 8007e28:	1961      	adds	r1, r4, r5
 8007e2a:	42a3      	cmp	r3, r4
 8007e2c:	6025      	str	r5, [r4, #0]
 8007e2e:	bf18      	it	ne
 8007e30:	6059      	strne	r1, [r3, #4]
 8007e32:	6863      	ldr	r3, [r4, #4]
 8007e34:	bf08      	it	eq
 8007e36:	6031      	streq	r1, [r6, #0]
 8007e38:	5162      	str	r2, [r4, r5]
 8007e3a:	604b      	str	r3, [r1, #4]
 8007e3c:	4638      	mov	r0, r7
 8007e3e:	f104 060b 	add.w	r6, r4, #11
 8007e42:	f000 f835 	bl	8007eb0 <__malloc_unlock>
 8007e46:	f026 0607 	bic.w	r6, r6, #7
 8007e4a:	1d23      	adds	r3, r4, #4
 8007e4c:	1af2      	subs	r2, r6, r3
 8007e4e:	d0b6      	beq.n	8007dbe <_malloc_r+0x22>
 8007e50:	1b9b      	subs	r3, r3, r6
 8007e52:	50a3      	str	r3, [r4, r2]
 8007e54:	e7b3      	b.n	8007dbe <_malloc_r+0x22>
 8007e56:	6862      	ldr	r2, [r4, #4]
 8007e58:	42a3      	cmp	r3, r4
 8007e5a:	bf0c      	ite	eq
 8007e5c:	6032      	streq	r2, [r6, #0]
 8007e5e:	605a      	strne	r2, [r3, #4]
 8007e60:	e7ec      	b.n	8007e3c <_malloc_r+0xa0>
 8007e62:	4623      	mov	r3, r4
 8007e64:	6864      	ldr	r4, [r4, #4]
 8007e66:	e7b2      	b.n	8007dce <_malloc_r+0x32>
 8007e68:	4634      	mov	r4, r6
 8007e6a:	6876      	ldr	r6, [r6, #4]
 8007e6c:	e7b9      	b.n	8007de2 <_malloc_r+0x46>
 8007e6e:	230c      	movs	r3, #12
 8007e70:	603b      	str	r3, [r7, #0]
 8007e72:	4638      	mov	r0, r7
 8007e74:	f000 f81c 	bl	8007eb0 <__malloc_unlock>
 8007e78:	e7a1      	b.n	8007dbe <_malloc_r+0x22>
 8007e7a:	6025      	str	r5, [r4, #0]
 8007e7c:	e7de      	b.n	8007e3c <_malloc_r+0xa0>
 8007e7e:	bf00      	nop
 8007e80:	20000960 	.word	0x20000960

08007e84 <_sbrk_r>:
 8007e84:	b538      	push	{r3, r4, r5, lr}
 8007e86:	4d06      	ldr	r5, [pc, #24]	; (8007ea0 <_sbrk_r+0x1c>)
 8007e88:	2300      	movs	r3, #0
 8007e8a:	4604      	mov	r4, r0
 8007e8c:	4608      	mov	r0, r1
 8007e8e:	602b      	str	r3, [r5, #0]
 8007e90:	f7f9 f976 	bl	8001180 <_sbrk>
 8007e94:	1c43      	adds	r3, r0, #1
 8007e96:	d102      	bne.n	8007e9e <_sbrk_r+0x1a>
 8007e98:	682b      	ldr	r3, [r5, #0]
 8007e9a:	b103      	cbz	r3, 8007e9e <_sbrk_r+0x1a>
 8007e9c:	6023      	str	r3, [r4, #0]
 8007e9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ea0:	20000968 	.word	0x20000968

08007ea4 <__malloc_lock>:
 8007ea4:	4801      	ldr	r0, [pc, #4]	; (8007eac <__malloc_lock+0x8>)
 8007ea6:	f000 b809 	b.w	8007ebc <__retarget_lock_acquire_recursive>
 8007eaa:	bf00      	nop
 8007eac:	2000096c 	.word	0x2000096c

08007eb0 <__malloc_unlock>:
 8007eb0:	4801      	ldr	r0, [pc, #4]	; (8007eb8 <__malloc_unlock+0x8>)
 8007eb2:	f000 b804 	b.w	8007ebe <__retarget_lock_release_recursive>
 8007eb6:	bf00      	nop
 8007eb8:	2000096c 	.word	0x2000096c

08007ebc <__retarget_lock_acquire_recursive>:
 8007ebc:	4770      	bx	lr

08007ebe <__retarget_lock_release_recursive>:
 8007ebe:	4770      	bx	lr

08007ec0 <_init>:
 8007ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ec2:	bf00      	nop
 8007ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ec6:	bc08      	pop	{r3}
 8007ec8:	469e      	mov	lr, r3
 8007eca:	4770      	bx	lr

08007ecc <_fini>:
 8007ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ece:	bf00      	nop
 8007ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ed2:	bc08      	pop	{r3}
 8007ed4:	469e      	mov	lr, r3
 8007ed6:	4770      	bx	lr
