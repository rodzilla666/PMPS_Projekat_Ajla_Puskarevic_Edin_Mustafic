
PMPS_Projekat_AjlaPuskarevic_EdinMustafic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a524  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800a6ac  0800a6ac  0001a6ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6e4  0800a6e4  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6e4  0800a6e4  0001a6e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6ec  0800a6ec  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6ec  0800a6ec  0001a6ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6f0  0800a6f0  0001a6f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800a6f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          000008f0  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000984  20000984  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c516  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004dcb  00000000  00000000  0003c5da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a0  00000000  00000000  000413a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001170  00000000  00000000  00042748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000070f0  00000000  00000000  000438b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f284  00000000  00000000  0004a9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cccfa  00000000  00000000  00069c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00136926  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000504c  00000000  00000000  00136978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000094 	.word	0x20000094
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a694 	.word	0x0800a694

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000098 	.word	0x20000098
 80001c4:	0800a694 	.word	0x0800a694

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <LIS3DSH_WriteIO>:
static float __X_Scale = 1.0f;
static float __Y_Scale = 1.0f;
static float __Z_Scale = 1.0f;

void LIS3DSH_WriteIO(uint8_t reg, uint8_t *dataW, uint8_t size)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	6039      	str	r1, [r7, #0]
 80004d6:	71fb      	strb	r3, [r7, #7]
 80004d8:	4613      	mov	r3, r2
 80004da:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = reg;
 80004dc:	79fb      	ldrb	r3, [r7, #7]
 80004de:	73fb      	strb	r3, [r7, #15]
	_LIS3DHS_CS_ENBALE;
 80004e0:	2200      	movs	r2, #0
 80004e2:	2108      	movs	r1, #8
 80004e4:	480c      	ldr	r0, [pc, #48]	; (8000518 <LIS3DSH_WriteIO+0x4c>)
 80004e6:	f001 fd33 	bl	8001f50 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&accSPI_Handle, &spiReg, 1, 10);
 80004ea:	f107 010f 	add.w	r1, r7, #15
 80004ee:	230a      	movs	r3, #10
 80004f0:	2201      	movs	r2, #1
 80004f2:	480a      	ldr	r0, [pc, #40]	; (800051c <LIS3DSH_WriteIO+0x50>)
 80004f4:	f004 fdbf 	bl	8005076 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&accSPI_Handle, dataW, size, 10);
 80004f8:	79bb      	ldrb	r3, [r7, #6]
 80004fa:	b29a      	uxth	r2, r3
 80004fc:	230a      	movs	r3, #10
 80004fe:	6839      	ldr	r1, [r7, #0]
 8000500:	4806      	ldr	r0, [pc, #24]	; (800051c <LIS3DSH_WriteIO+0x50>)
 8000502:	f004 fdb8 	bl	8005076 <HAL_SPI_Transmit>
	_LIS3DHS_CS_DISABLE;
 8000506:	2201      	movs	r2, #1
 8000508:	2108      	movs	r1, #8
 800050a:	4803      	ldr	r0, [pc, #12]	; (8000518 <LIS3DSH_WriteIO+0x4c>)
 800050c:	f001 fd20 	bl	8001f50 <HAL_GPIO_WritePin>
}
 8000510:	bf00      	nop
 8000512:	3710      	adds	r7, #16
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40021000 	.word	0x40021000
 800051c:	200000b0 	.word	0x200000b0

08000520 <LIS3DSH_ReadIO>:

void LIS3DSH_ReadIO(uint8_t reg, uint8_t *dataR, uint8_t size)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	6039      	str	r1, [r7, #0]
 800052a:	71fb      	strb	r3, [r7, #7]
 800052c:	4613      	mov	r3, r2
 800052e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[4];
	spiBuf[0] = reg | 0x80;
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000536:	b2db      	uxtb	r3, r3
 8000538:	723b      	strb	r3, [r7, #8]
	_LIS3DHS_CS_ENBALE;
 800053a:	2200      	movs	r2, #0
 800053c:	2108      	movs	r1, #8
 800053e:	4818      	ldr	r0, [pc, #96]	; (80005a0 <LIS3DSH_ReadIO+0x80>)
 8000540:	f001 fd06 	bl	8001f50 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&accSPI_Handle, spiBuf, 1, 10);
 8000544:	f107 0108 	add.w	r1, r7, #8
 8000548:	230a      	movs	r3, #10
 800054a:	2201      	movs	r2, #1
 800054c:	4815      	ldr	r0, [pc, #84]	; (80005a4 <LIS3DSH_ReadIO+0x84>)
 800054e:	f004 fd92 	bl	8005076 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&accSPI_Handle, spiBuf, size, 10);
 8000552:	79bb      	ldrb	r3, [r7, #6]
 8000554:	b29a      	uxth	r2, r3
 8000556:	f107 0108 	add.w	r1, r7, #8
 800055a:	230a      	movs	r3, #10
 800055c:	4811      	ldr	r0, [pc, #68]	; (80005a4 <LIS3DSH_ReadIO+0x84>)
 800055e:	f004 fec6 	bl	80052ee <HAL_SPI_Receive>
	_LIS3DHS_CS_DISABLE;
 8000562:	2201      	movs	r2, #1
 8000564:	2108      	movs	r1, #8
 8000566:	480e      	ldr	r0, [pc, #56]	; (80005a0 <LIS3DSH_ReadIO+0x80>)
 8000568:	f001 fcf2 	bl	8001f50 <HAL_GPIO_WritePin>

	for(uint8_t i=0; i<(size&0x3); i++)
 800056c:	2300      	movs	r3, #0
 800056e:	73fb      	strb	r3, [r7, #15]
 8000570:	e00b      	b.n	800058a <LIS3DSH_ReadIO+0x6a>
	{
		dataR[i] = spiBuf[i];
 8000572:	7bfa      	ldrb	r2, [r7, #15]
 8000574:	7bfb      	ldrb	r3, [r7, #15]
 8000576:	6839      	ldr	r1, [r7, #0]
 8000578:	440b      	add	r3, r1
 800057a:	3210      	adds	r2, #16
 800057c:	443a      	add	r2, r7
 800057e:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000582:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<(size&0x3); i++)
 8000584:	7bfb      	ldrb	r3, [r7, #15]
 8000586:	3301      	adds	r3, #1
 8000588:	73fb      	strb	r3, [r7, #15]
 800058a:	7bfa      	ldrb	r2, [r7, #15]
 800058c:	79bb      	ldrb	r3, [r7, #6]
 800058e:	f003 0303 	and.w	r3, r3, #3
 8000592:	429a      	cmp	r2, r3
 8000594:	dbed      	blt.n	8000572 <LIS3DSH_ReadIO+0x52>
	}
}
 8000596:	bf00      	nop
 8000598:	bf00      	nop
 800059a:	3710      	adds	r7, #16
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40021000 	.word	0x40021000
 80005a4:	200000b0 	.word	0x200000b0

080005a8 <LIS3DSH_Init>:


void LIS3DSH_Init(SPI_HandleTypeDef *accSPI, LIS3DSH_InitTypeDef *accInitDef)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	6039      	str	r1, [r7, #0]
	uint8_t spiData = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	73fb      	strb	r3, [r7, #15]

	memcpy(&accSPI_Handle, accSPI, sizeof(*accSPI));
 80005b6:	2258      	movs	r2, #88	; 0x58
 80005b8:	6879      	ldr	r1, [r7, #4]
 80005ba:	485b      	ldr	r0, [pc, #364]	; (8000728 <LIS3DSH_Init+0x180>)
 80005bc:	f009 ff56 	bl	800a46c <memcpy>
	spiData |= (accInitDef->enableAxes & 0x07);
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	78db      	ldrb	r3, [r3, #3]
 80005c4:	b25b      	sxtb	r3, r3
 80005c6:	f003 0307 	and.w	r3, r3, #7
 80005ca:	b25a      	sxtb	r2, r3
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
 80005ce:	b25b      	sxtb	r3, r3
 80005d0:	4313      	orrs	r3, r2
 80005d2:	b25b      	sxtb	r3, r3
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->dataRate & 0xF0);
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	b25b      	sxtb	r3, r3
 80005de:	f023 030f 	bic.w	r3, r3, #15
 80005e2:	b25a      	sxtb	r2, r3
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	b25b      	sxtb	r3, r3
 80005e8:	4313      	orrs	r3, r2
 80005ea:	b25b      	sxtb	r3, r3
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	73fb      	strb	r3, [r7, #15]
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG4_ADDR, &spiData, 1);
 80005f0:	f107 030f 	add.w	r3, r7, #15
 80005f4:	2201      	movs	r2, #1
 80005f6:	4619      	mov	r1, r3
 80005f8:	2020      	movs	r0, #32
 80005fa:	f7ff ff67 	bl	80004cc <LIS3DSH_WriteIO>

	spiData = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->antiAliasingBW & 0xC0);
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	789b      	ldrb	r3, [r3, #2]
 8000606:	b25b      	sxtb	r3, r3
 8000608:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800060c:	b25a      	sxtb	r2, r3
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	b25b      	sxtb	r3, r3
 8000612:	4313      	orrs	r3, r2
 8000614:	b25b      	sxtb	r3, r3
 8000616:	b2db      	uxtb	r3, r3
 8000618:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->fullScale & 0x38);
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	785b      	ldrb	r3, [r3, #1]
 800061e:	b25b      	sxtb	r3, r3
 8000620:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000624:	b25a      	sxtb	r2, r3
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	b25b      	sxtb	r3, r3
 800062a:	4313      	orrs	r3, r2
 800062c:	b25b      	sxtb	r3, r3
 800062e:	b2db      	uxtb	r3, r3
 8000630:	73fb      	strb	r3, [r7, #15]
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG5_ADDR, &spiData, 1);
 8000632:	f107 030f 	add.w	r3, r7, #15
 8000636:	2201      	movs	r2, #1
 8000638:	4619      	mov	r1, r3
 800063a:	2024      	movs	r0, #36	; 0x24
 800063c:	f7ff ff46 	bl	80004cc <LIS3DSH_WriteIO>

	if(accInitDef->interruptEnable)
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	791b      	ldrb	r3, [r3, #4]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d008      	beq.n	800065a <LIS3DSH_Init+0xb2>
	{
		spiData = 0x88;
 8000648:	2388      	movs	r3, #136	; 0x88
 800064a:	73fb      	strb	r3, [r7, #15]
		LIS3DSH_WriteIO(LIS3DSH_CTRL_REG3_ADDR, &spiData, 1);
 800064c:	f107 030f 	add.w	r3, r7, #15
 8000650:	2201      	movs	r2, #1
 8000652:	4619      	mov	r1, r3
 8000654:	2023      	movs	r0, #35	; 0x23
 8000656:	f7ff ff39 	bl	80004cc <LIS3DSH_WriteIO>
	}

	switch(accInitDef->fullScale)
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	785b      	ldrb	r3, [r3, #1]
 800065e:	2b20      	cmp	r3, #32
 8000660:	d858      	bhi.n	8000714 <LIS3DSH_Init+0x16c>
 8000662:	a201      	add	r2, pc, #4	; (adr r2, 8000668 <LIS3DSH_Init+0xc0>)
 8000664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000668:	080006ed 	.word	0x080006ed
 800066c:	08000715 	.word	0x08000715
 8000670:	08000715 	.word	0x08000715
 8000674:	08000715 	.word	0x08000715
 8000678:	08000715 	.word	0x08000715
 800067c:	08000715 	.word	0x08000715
 8000680:	08000715 	.word	0x08000715
 8000684:	08000715 	.word	0x08000715
 8000688:	080006f5 	.word	0x080006f5
 800068c:	08000715 	.word	0x08000715
 8000690:	08000715 	.word	0x08000715
 8000694:	08000715 	.word	0x08000715
 8000698:	08000715 	.word	0x08000715
 800069c:	08000715 	.word	0x08000715
 80006a0:	08000715 	.word	0x08000715
 80006a4:	08000715 	.word	0x08000715
 80006a8:	080006fd 	.word	0x080006fd
 80006ac:	08000715 	.word	0x08000715
 80006b0:	08000715 	.word	0x08000715
 80006b4:	08000715 	.word	0x08000715
 80006b8:	08000715 	.word	0x08000715
 80006bc:	08000715 	.word	0x08000715
 80006c0:	08000715 	.word	0x08000715
 80006c4:	08000715 	.word	0x08000715
 80006c8:	08000705 	.word	0x08000705
 80006cc:	08000715 	.word	0x08000715
 80006d0:	08000715 	.word	0x08000715
 80006d4:	08000715 	.word	0x08000715
 80006d8:	08000715 	.word	0x08000715
 80006dc:	08000715 	.word	0x08000715
 80006e0:	08000715 	.word	0x08000715
 80006e4:	08000715 	.word	0x08000715
 80006e8:	0800070d 	.word	0x0800070d
	{
		case LIS3DSH_FULLSCALE_2:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <LIS3DSH_Init+0x184>)
 80006ee:	4a10      	ldr	r2, [pc, #64]	; (8000730 <LIS3DSH_Init+0x188>)
 80006f0:	601a      	str	r2, [r3, #0]
			break;
 80006f2:	e00f      	b.n	8000714 <LIS3DSH_Init+0x16c>

		case LIS3DSH_FULLSCALE_4:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 80006f4:	4b0d      	ldr	r3, [pc, #52]	; (800072c <LIS3DSH_Init+0x184>)
 80006f6:	4a0f      	ldr	r2, [pc, #60]	; (8000734 <LIS3DSH_Init+0x18c>)
 80006f8:	601a      	str	r2, [r3, #0]
			break;
 80006fa:	e00b      	b.n	8000714 <LIS3DSH_Init+0x16c>

		case LIS3DSH_FULLSCALE_6:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 80006fc:	4b0b      	ldr	r3, [pc, #44]	; (800072c <LIS3DSH_Init+0x184>)
 80006fe:	4a0e      	ldr	r2, [pc, #56]	; (8000738 <LIS3DSH_Init+0x190>)
 8000700:	601a      	str	r2, [r3, #0]
			break;
 8000702:	e007      	b.n	8000714 <LIS3DSH_Init+0x16c>

		case LIS3DSH_FULLSCALE_8:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <LIS3DSH_Init+0x184>)
 8000706:	4a0d      	ldr	r2, [pc, #52]	; (800073c <LIS3DSH_Init+0x194>)
 8000708:	601a      	str	r2, [r3, #0]
			break;
 800070a:	e003      	b.n	8000714 <LIS3DSH_Init+0x16c>

		case LIS3DSH_FULLSCALE_16:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <LIS3DSH_Init+0x184>)
 800070e:	4a0c      	ldr	r2, [pc, #48]	; (8000740 <LIS3DSH_Init+0x198>)
 8000710:	601a      	str	r2, [r3, #0]
			break;
 8000712:	bf00      	nop
	}
	_LIS3DHS_CS_DISABLE;
 8000714:	2201      	movs	r2, #1
 8000716:	2108      	movs	r1, #8
 8000718:	480a      	ldr	r0, [pc, #40]	; (8000744 <LIS3DSH_Init+0x19c>)
 800071a:	f001 fc19 	bl	8001f50 <HAL_GPIO_WritePin>
}
 800071e:	bf00      	nop
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200000b0 	.word	0x200000b0
 800072c:	20000000 	.word	0x20000000
 8000730:	3d75c28f 	.word	0x3d75c28f
 8000734:	3df5c28f 	.word	0x3df5c28f
 8000738:	3e3851ec 	.word	0x3e3851ec
 800073c:	3e75c28f 	.word	0x3e75c28f
 8000740:	3f3ae148 	.word	0x3f3ae148
 8000744:	40021000 	.word	0x40021000

08000748 <LIS3DSH_GetDataRaw>:

LIS3DSH_DataRaw LIS3DSH_GetDataRaw(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	uint8_t spiBuf[2];
	LIS3DSH_DataRaw tempDataRaw;
	LIS3DSH_ReadIO(LIS3DSH_OUT_X_L_ADDR, spiBuf, 2);
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	2202      	movs	r2, #2
 8000756:	4619      	mov	r1, r3
 8000758:	2028      	movs	r0, #40	; 0x28
 800075a:	f7ff fee1 	bl	8000520 <LIS3DSH_ReadIO>
	tempDataRaw.x = ((spiBuf[1] << 8) + spiBuf[0]);
 800075e:	7d7b      	ldrb	r3, [r7, #21]
 8000760:	b29b      	uxth	r3, r3
 8000762:	021b      	lsls	r3, r3, #8
 8000764:	b29a      	uxth	r2, r3
 8000766:	7d3b      	ldrb	r3, [r7, #20]
 8000768:	b29b      	uxth	r3, r3
 800076a:	4413      	add	r3, r2
 800076c:	b29b      	uxth	r3, r3
 800076e:	b21b      	sxth	r3, r3
 8000770:	81bb      	strh	r3, [r7, #12]

	LIS3DSH_ReadIO(LIS3DSH_OUT_Y_L_ADDR, spiBuf, 2);
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	2202      	movs	r2, #2
 8000778:	4619      	mov	r1, r3
 800077a:	202a      	movs	r0, #42	; 0x2a
 800077c:	f7ff fed0 	bl	8000520 <LIS3DSH_ReadIO>
	tempDataRaw.y = ((spiBuf[1] << 8) + spiBuf[0]);
 8000780:	7d7b      	ldrb	r3, [r7, #21]
 8000782:	b29b      	uxth	r3, r3
 8000784:	021b      	lsls	r3, r3, #8
 8000786:	b29a      	uxth	r2, r3
 8000788:	7d3b      	ldrb	r3, [r7, #20]
 800078a:	b29b      	uxth	r3, r3
 800078c:	4413      	add	r3, r2
 800078e:	b29b      	uxth	r3, r3
 8000790:	b21b      	sxth	r3, r3
 8000792:	81fb      	strh	r3, [r7, #14]

	LIS3DSH_ReadIO(LIS3DSH_OUT_Z_L_ADDR, spiBuf, 2);
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	2202      	movs	r2, #2
 800079a:	4619      	mov	r1, r3
 800079c:	202c      	movs	r0, #44	; 0x2c
 800079e:	f7ff febf 	bl	8000520 <LIS3DSH_ReadIO>
	tempDataRaw.z = ((spiBuf[1] << 8) + spiBuf[0]);
 80007a2:	7d7b      	ldrb	r3, [r7, #21]
 80007a4:	b29b      	uxth	r3, r3
 80007a6:	021b      	lsls	r3, r3, #8
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	7d3b      	ldrb	r3, [r7, #20]
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	4413      	add	r3, r2
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	b21b      	sxth	r3, r3
 80007b4:	823b      	strh	r3, [r7, #16]

	return tempDataRaw;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	461a      	mov	r2, r3
 80007ba:	f107 030c 	add.w	r3, r7, #12
 80007be:	6818      	ldr	r0, [r3, #0]
 80007c0:	6010      	str	r0, [r2, #0]
 80007c2:	889b      	ldrh	r3, [r3, #4]
 80007c4:	8093      	strh	r3, [r2, #4]

}
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	3718      	adds	r7, #24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_DMA_Init+0x3c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a0b      	ldr	r2, [pc, #44]	; (800080c <MX_DMA_Init+0x3c>)
 80007e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_DMA_Init+0x3c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2100      	movs	r1, #0
 80007f6:	2010      	movs	r0, #16
 80007f8:	f000 feed 	bl	80015d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80007fc:	2010      	movs	r0, #16
 80007fe:	f000 ff06 	bl	800160e <HAL_NVIC_EnableIRQ>

}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800

08000810 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08c      	sub	sp, #48	; 0x30
 8000814:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]
 800082a:	4b7c      	ldr	r3, [pc, #496]	; (8000a1c <MX_GPIO_Init+0x20c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a7b      	ldr	r2, [pc, #492]	; (8000a1c <MX_GPIO_Init+0x20c>)
 8000830:	f043 0310 	orr.w	r3, r3, #16
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b79      	ldr	r3, [pc, #484]	; (8000a1c <MX_GPIO_Init+0x20c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0310 	and.w	r3, r3, #16
 800083e:	61bb      	str	r3, [r7, #24]
 8000840:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
 8000846:	4b75      	ldr	r3, [pc, #468]	; (8000a1c <MX_GPIO_Init+0x20c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a74      	ldr	r2, [pc, #464]	; (8000a1c <MX_GPIO_Init+0x20c>)
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b72      	ldr	r3, [pc, #456]	; (8000a1c <MX_GPIO_Init+0x20c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0304 	and.w	r3, r3, #4
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	4b6e      	ldr	r3, [pc, #440]	; (8000a1c <MX_GPIO_Init+0x20c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a6d      	ldr	r2, [pc, #436]	; (8000a1c <MX_GPIO_Init+0x20c>)
 8000868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b6b      	ldr	r3, [pc, #428]	; (8000a1c <MX_GPIO_Init+0x20c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	4b67      	ldr	r3, [pc, #412]	; (8000a1c <MX_GPIO_Init+0x20c>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a66      	ldr	r2, [pc, #408]	; (8000a1c <MX_GPIO_Init+0x20c>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b64      	ldr	r3, [pc, #400]	; (8000a1c <MX_GPIO_Init+0x20c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	4b60      	ldr	r3, [pc, #384]	; (8000a1c <MX_GPIO_Init+0x20c>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a5f      	ldr	r2, [pc, #380]	; (8000a1c <MX_GPIO_Init+0x20c>)
 80008a0:	f043 0302 	orr.w	r3, r3, #2
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b5d      	ldr	r3, [pc, #372]	; (8000a1c <MX_GPIO_Init+0x20c>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0302 	and.w	r3, r3, #2
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	4b59      	ldr	r3, [pc, #356]	; (8000a1c <MX_GPIO_Init+0x20c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a58      	ldr	r2, [pc, #352]	; (8000a1c <MX_GPIO_Init+0x20c>)
 80008bc:	f043 0308 	orr.w	r3, r3, #8
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b56      	ldr	r3, [pc, #344]	; (8000a1c <MX_GPIO_Init+0x20c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0308 	and.w	r3, r3, #8
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MEMS_CS_GPIO_Port, MEMS_CS_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2108      	movs	r1, #8
 80008d2:	4853      	ldr	r0, [pc, #332]	; (8000a20 <MX_GPIO_Init+0x210>)
 80008d4:	f001 fb3c 	bl	8001f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008d8:	2200      	movs	r2, #0
 80008da:	2101      	movs	r1, #1
 80008dc:	4851      	ldr	r0, [pc, #324]	; (8000a24 <MX_GPIO_Init+0x214>)
 80008de:	f001 fb37 	bl	8001f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008e2:	2200      	movs	r2, #0
 80008e4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008e8:	484f      	ldr	r0, [pc, #316]	; (8000a28 <MX_GPIO_Init+0x218>)
 80008ea:	f001 fb31 	bl	8001f50 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_CS_Pin;
 80008ee:	2308      	movs	r3, #8
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(MEMS_CS_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	4846      	ldr	r0, [pc, #280]	; (8000a20 <MX_GPIO_Init+0x210>)
 8000906:	f001 f987 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800090a:	2301      	movs	r3, #1
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	4840      	ldr	r0, [pc, #256]	; (8000a24 <MX_GPIO_Init+0x214>)
 8000922:	f001 f979 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000926:	2308      	movs	r3, #8
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	2302      	movs	r3, #2
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000936:	2305      	movs	r3, #5
 8000938:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	4838      	ldr	r0, [pc, #224]	; (8000a24 <MX_GPIO_Init+0x214>)
 8000942:	f001 f969 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000946:	2301      	movs	r3, #1
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800094a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800094e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000950:	2302      	movs	r3, #2
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	4834      	ldr	r0, [pc, #208]	; (8000a2c <MX_GPIO_Init+0x21c>)
 800095c:	f001 f95c 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000960:	2304      	movs	r3, #4
 8000962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000964:	2300      	movs	r3, #0
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	482f      	ldr	r0, [pc, #188]	; (8000a30 <MX_GPIO_Init+0x220>)
 8000974:	f001 f950 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000978:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800098a:	2305      	movs	r3, #5
 800098c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	4826      	ldr	r0, [pc, #152]	; (8000a30 <MX_GPIO_Init+0x220>)
 8000996:	f001 f93f 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800099a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009a0:	2303      	movs	r3, #3
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	4820      	ldr	r0, [pc, #128]	; (8000a30 <MX_GPIO_Init+0x220>)
 80009b0:	f001 f932 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009b4:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009b8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4816      	ldr	r0, [pc, #88]	; (8000a28 <MX_GPIO_Init+0x218>)
 80009ce:	f001 f923 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009d2:	2320      	movs	r3, #32
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d6:	2300      	movs	r3, #0
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	4810      	ldr	r0, [pc, #64]	; (8000a28 <MX_GPIO_Init+0x218>)
 80009e6:	f001 f917 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009ea:	2302      	movs	r3, #2
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ee:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	4808      	ldr	r0, [pc, #32]	; (8000a20 <MX_GPIO_Init+0x210>)
 8000a00:	f001 f90a 	bl	8001c18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2100      	movs	r1, #0
 8000a08:	2006      	movs	r0, #6
 8000a0a:	f000 fde4 	bl	80015d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a0e:	2006      	movs	r0, #6
 8000a10:	f000 fdfd 	bl	800160e <HAL_NVIC_EnableIRQ>

}
 8000a14:	bf00      	nop
 8000a16:	3730      	adds	r7, #48	; 0x30
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40021000 	.word	0x40021000
 8000a24:	40020800 	.word	0x40020800
 8000a28:	40020c00 	.word	0x40020c00
 8000a2c:	40020000 	.word	0x40020000
 8000a30:	40020400 	.word	0x40020400

08000a34 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <MX_I2C1_Init+0x50>)
 8000a3a:	4a13      	ldr	r2, [pc, #76]	; (8000a88 <MX_I2C1_Init+0x54>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a3e:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <MX_I2C1_Init+0x50>)
 8000a40:	4a12      	ldr	r2, [pc, #72]	; (8000a8c <MX_I2C1_Init+0x58>)
 8000a42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <MX_I2C1_Init+0x50>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <MX_I2C1_Init+0x50>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <MX_I2C1_Init+0x50>)
 8000a52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a58:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <MX_I2C1_Init+0x50>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <MX_I2C1_Init+0x50>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a64:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <MX_I2C1_Init+0x50>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <MX_I2C1_Init+0x50>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a70:	4804      	ldr	r0, [pc, #16]	; (8000a84 <MX_I2C1_Init+0x50>)
 8000a72:	f002 fecf 	bl	8003814 <HAL_I2C_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a7c:	f000 fad6 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000108 	.word	0x20000108
 8000a88:	40005400 	.word	0x40005400
 8000a8c:	000186a0 	.word	0x000186a0

08000a90 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	; 0x28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a19      	ldr	r2, [pc, #100]	; (8000b14 <HAL_I2C_MspInit+0x84>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d12c      	bne.n	8000b0c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <HAL_I2C_MspInit+0x88>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a17      	ldr	r2, [pc, #92]	; (8000b18 <HAL_I2C_MspInit+0x88>)
 8000abc:	f043 0302 	orr.w	r3, r3, #2
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <HAL_I2C_MspInit+0x88>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ace:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ad4:	2312      	movs	r3, #18
 8000ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	4619      	mov	r1, r3
 8000aea:	480c      	ldr	r0, [pc, #48]	; (8000b1c <HAL_I2C_MspInit+0x8c>)
 8000aec:	f001 f894 	bl	8001c18 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <HAL_I2C_MspInit+0x88>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af8:	4a07      	ldr	r2, [pc, #28]	; (8000b18 <HAL_I2C_MspInit+0x88>)
 8000afa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000afe:	6413      	str	r3, [r2, #64]	; 0x40
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <HAL_I2C_MspInit+0x88>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	3728      	adds	r7, #40	; 0x28
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40005400 	.word	0x40005400
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40020400 	.word	0x40020400

08000b20 <MX_I2S3_Init>:
I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000b24:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <MX_I2S3_Init+0x54>)
 8000b26:	4a14      	ldr	r2, [pc, #80]	; (8000b78 <MX_I2S3_Init+0x58>)
 8000b28:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000b2a:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <MX_I2S3_Init+0x54>)
 8000b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b30:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <MX_I2S3_Init+0x54>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b38:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <MX_I2S3_Init+0x54>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b3e:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <MX_I2S3_Init+0x54>)
 8000b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b44:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <MX_I2S3_Init+0x54>)
 8000b48:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000b4c:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000b4e:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <MX_I2S3_Init+0x54>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000b54:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <MX_I2S3_Init+0x54>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <MX_I2S3_Init+0x54>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000b60:	4804      	ldr	r0, [pc, #16]	; (8000b74 <MX_I2S3_Init+0x54>)
 8000b62:	f002 ff9b 	bl	8003a9c <HAL_I2S_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000b6c:	f000 fa5e 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	2000015c 	.word	0x2000015c
 8000b78:	40003c00 	.word	0x40003c00

08000b7c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08e      	sub	sp, #56	; 0x38
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a4e      	ldr	r2, [pc, #312]	; (8000ce0 <HAL_I2S_MspInit+0x164>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	f040 8094 	bne.w	8000cd6 <HAL_I2S_MspInit+0x15a>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 160;
 8000bb2:	23a0      	movs	r3, #160	; 0xa0
 8000bb4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f004 f890 	bl	8004ce4 <HAL_RCCEx_PeriphCLKConfig>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000bca:	f000 fa2f 	bl	800102c <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	4b44      	ldr	r3, [pc, #272]	; (8000ce4 <HAL_I2S_MspInit+0x168>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	4a43      	ldr	r2, [pc, #268]	; (8000ce4 <HAL_I2S_MspInit+0x168>)
 8000bd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bde:	4b41      	ldr	r3, [pc, #260]	; (8000ce4 <HAL_I2S_MspInit+0x168>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	4b3d      	ldr	r3, [pc, #244]	; (8000ce4 <HAL_I2S_MspInit+0x168>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a3c      	ldr	r2, [pc, #240]	; (8000ce4 <HAL_I2S_MspInit+0x168>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b3a      	ldr	r3, [pc, #232]	; (8000ce4 <HAL_I2S_MspInit+0x168>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	4b36      	ldr	r3, [pc, #216]	; (8000ce4 <HAL_I2S_MspInit+0x168>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a35      	ldr	r2, [pc, #212]	; (8000ce4 <HAL_I2S_MspInit+0x168>)
 8000c10:	f043 0304 	orr.w	r3, r3, #4
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b33      	ldr	r3, [pc, #204]	; (8000ce4 <HAL_I2S_MspInit+0x168>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0304 	and.w	r3, r3, #4
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c22:	2310      	movs	r3, #16
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c32:	2306      	movs	r3, #6
 8000c34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	482a      	ldr	r0, [pc, #168]	; (8000ce8 <HAL_I2S_MspInit+0x16c>)
 8000c3e:	f000 ffeb 	bl	8001c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c42:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c54:	2306      	movs	r3, #6
 8000c56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4823      	ldr	r0, [pc, #140]	; (8000cec <HAL_I2S_MspInit+0x170>)
 8000c60:	f000 ffda 	bl	8001c18 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8000c64:	4b22      	ldr	r3, [pc, #136]	; (8000cf0 <HAL_I2S_MspInit+0x174>)
 8000c66:	4a23      	ldr	r2, [pc, #140]	; (8000cf4 <HAL_I2S_MspInit+0x178>)
 8000c68:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000c6a:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <HAL_I2S_MspInit+0x174>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c70:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <HAL_I2S_MspInit+0x174>)
 8000c72:	2240      	movs	r2, #64	; 0x40
 8000c74:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c76:	4b1e      	ldr	r3, [pc, #120]	; (8000cf0 <HAL_I2S_MspInit+0x174>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c7c:	4b1c      	ldr	r3, [pc, #112]	; (8000cf0 <HAL_I2S_MspInit+0x174>)
 8000c7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c82:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c84:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <HAL_I2S_MspInit+0x174>)
 8000c86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c8a:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c8c:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <HAL_I2S_MspInit+0x174>)
 8000c8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c92:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8000c94:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <HAL_I2S_MspInit+0x174>)
 8000c96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c9a:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c9c:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <HAL_I2S_MspInit+0x174>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000ca2:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <HAL_I2S_MspInit+0x174>)
 8000ca4:	2204      	movs	r2, #4
 8000ca6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000ca8:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <HAL_I2S_MspInit+0x174>)
 8000caa:	2203      	movs	r2, #3
 8000cac:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000cae:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <HAL_I2S_MspInit+0x174>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000cb4:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <HAL_I2S_MspInit+0x174>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000cba:	480d      	ldr	r0, [pc, #52]	; (8000cf0 <HAL_I2S_MspInit+0x174>)
 8000cbc:	f000 fcc2 	bl	8001644 <HAL_DMA_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <HAL_I2S_MspInit+0x14e>
    {
      Error_Handler();
 8000cc6:	f000 f9b1 	bl	800102c <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a08      	ldr	r2, [pc, #32]	; (8000cf0 <HAL_I2S_MspInit+0x174>)
 8000cce:	639a      	str	r2, [r3, #56]	; 0x38
 8000cd0:	4a07      	ldr	r2, [pc, #28]	; (8000cf0 <HAL_I2S_MspInit+0x174>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000cd6:	bf00      	nop
 8000cd8:	3738      	adds	r7, #56	; 0x38
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40003c00 	.word	0x40003c00
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020000 	.word	0x40020000
 8000cec:	40020800 	.word	0x40020800
 8000cf0:	200001a4 	.word	0x200001a4
 8000cf4:	40026088 	.word	0x40026088

08000cf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cfe:	f000 faf9 	bl	80012f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d02:	f000 f929 	bl	8000f58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d06:	f7ff fd83 	bl	8000810 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d0a:	f7ff fe93 	bl	8000a34 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000d0e:	f7ff ff07 	bl	8000b20 <MX_I2S3_Init>
  MX_DMA_Init();
 8000d12:	f7ff fd5d 	bl	80007d0 <MX_DMA_Init>
  MX_USB_HOST_Init();
 8000d16:	f009 f827 	bl	8009d68 <MX_USB_HOST_Init>
  MX_FATFS_Init();
 8000d1a:	f005 feb1 	bl	8006a80 <MX_FATFS_Init>
  MX_SPI1_Init();
 8000d1e:	f000 f98b 	bl	8001038 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  MX_DriverVbusFS(0);
 8000d22:	2000      	movs	r0, #0
 8000d24:	f009 fb4c 	bl	800a3c0 <MX_DriverVbusFS>

  myAccConfigDef.dataRate = LIS3DSH_DATARATE_12_5;
 8000d28:	2330      	movs	r3, #48	; 0x30
 8000d2a:	703b      	strb	r3, [r7, #0]
   myAccConfigDef.fullScale = LIS3DSH_FULLSCALE_4;
 8000d2c:	2308      	movs	r3, #8
 8000d2e:	707b      	strb	r3, [r7, #1]
   myAccConfigDef.antiAliasingBW = LIS3DSH_FILTER_BW_50;
 8000d30:	23c0      	movs	r3, #192	; 0xc0
 8000d32:	70bb      	strb	r3, [r7, #2]
   myAccConfigDef.enableAxes = LIS3DSH_XYZ_ENABLE;
 8000d34:	2307      	movs	r3, #7
 8000d36:	70fb      	strb	r3, [r7, #3]
   myAccConfigDef.interruptEnable = false;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	713b      	strb	r3, [r7, #4]

   LIS3DSH_Init(&hspi1, &myAccConfigDef);
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4806      	ldr	r0, [pc, #24]	; (8000d5c <main+0x64>)
 8000d42:	f7ff fc31 	bl	80005a8 <LIS3DSH_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000d46:	f009 f835 	bl	8009db4 <MX_USB_HOST_Process>

    while(!isFinished)
 8000d4a:	e001      	b.n	8000d50 <main+0x58>
   	  {
   		  HandleTilt();
 8000d4c:	f000 f80a 	bl	8000d64 <HandleTilt>
    while(!isFinished)
 8000d50:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <main+0x68>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d0f9      	beq.n	8000d4c <main+0x54>
    MX_USB_HOST_Process();
 8000d58:	e7f5      	b.n	8000d46 <main+0x4e>
 8000d5a:	bf00      	nop
 8000d5c:	20000220 	.word	0x20000220
 8000d60:	2000021c 	.word	0x2000021c

08000d64 <HandleTilt>:
  * @brief System Clock Configuration
  * @retval None
  */

void HandleTilt()
{
 8000d64:	b590      	push	{r4, r7, lr}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
	myData = LIS3DSH_GetDataRaw();
 8000d6a:	4c73      	ldr	r4, [pc, #460]	; (8000f38 <HandleTilt+0x1d4>)
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fcea 	bl	8000748 <LIS3DSH_GetDataRaw>
 8000d74:	4622      	mov	r2, r4
 8000d76:	463b      	mov	r3, r7
 8000d78:	6818      	ldr	r0, [r3, #0]
 8000d7a:	6010      	str	r0, [r2, #0]
 8000d7c:	889b      	ldrh	r3, [r3, #4]
 8000d7e:	8093      	strh	r3, [r2, #4]
	if(tiltedForward == 0 && tiltedBack == 0)
 8000d80:	4b6e      	ldr	r3, [pc, #440]	; (8000f3c <HandleTilt+0x1d8>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d166      	bne.n	8000e56 <HandleTilt+0xf2>
 8000d88:	4b6d      	ldr	r3, [pc, #436]	; (8000f40 <HandleTilt+0x1dc>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d162      	bne.n	8000e56 <HandleTilt+0xf2>
	{
		if(myData.x > 5000 && tiltedRight == 0)
 8000d90:	4b69      	ldr	r3, [pc, #420]	; (8000f38 <HandleTilt+0x1d4>)
 8000d92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	dd18      	ble.n	8000dd0 <HandleTilt+0x6c>
 8000d9e:	4b69      	ldr	r3, [pc, #420]	; (8000f44 <HandleTilt+0x1e0>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d114      	bne.n	8000dd0 <HandleTilt+0x6c>
		{
			// TITED RIGHT
			tiltedRight = 1;
 8000da6:	4b67      	ldr	r3, [pc, #412]	; (8000f44 <HandleTilt+0x1e0>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	601a      	str	r2, [r3, #0]
			if(tiltedLeft == 1)
 8000dac:	4b66      	ldr	r3, [pc, #408]	; (8000f48 <HandleTilt+0x1e4>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d107      	bne.n	8000dc4 <HandleTilt+0x60>
			{
				HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000db4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000db8:	4864      	ldr	r0, [pc, #400]	; (8000f4c <HandleTilt+0x1e8>)
 8000dba:	f001 f8e2 	bl	8001f82 <HAL_GPIO_TogglePin>
				tiltedLeft = 0;
 8000dbe:	4b62      	ldr	r3, [pc, #392]	; (8000f48 <HandleTilt+0x1e4>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
			}
			HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 8000dc4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dc8:	4860      	ldr	r0, [pc, #384]	; (8000f4c <HandleTilt+0x1e8>)
 8000dca:	f001 f8da 	bl	8001f82 <HAL_GPIO_TogglePin>
 8000dce:	e042      	b.n	8000e56 <HandleTilt+0xf2>
		}
		else if(myData.x < -5000 && tiltedLeft == 0)
 8000dd0:	4b59      	ldr	r3, [pc, #356]	; (8000f38 <HandleTilt+0x1d4>)
 8000dd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dd6:	4a5e      	ldr	r2, [pc, #376]	; (8000f50 <HandleTilt+0x1ec>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	da18      	bge.n	8000e0e <HandleTilt+0xaa>
 8000ddc:	4b5a      	ldr	r3, [pc, #360]	; (8000f48 <HandleTilt+0x1e4>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d114      	bne.n	8000e0e <HandleTilt+0xaa>
		{
			// TILTED LEFT
			tiltedLeft = 1;
 8000de4:	4b58      	ldr	r3, [pc, #352]	; (8000f48 <HandleTilt+0x1e4>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	601a      	str	r2, [r3, #0]
			if(tiltedRight == 1)
 8000dea:	4b56      	ldr	r3, [pc, #344]	; (8000f44 <HandleTilt+0x1e0>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d107      	bne.n	8000e02 <HandleTilt+0x9e>
			{
				HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 8000df2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000df6:	4855      	ldr	r0, [pc, #340]	; (8000f4c <HandleTilt+0x1e8>)
 8000df8:	f001 f8c3 	bl	8001f82 <HAL_GPIO_TogglePin>
				tiltedRight = 0;
 8000dfc:	4b51      	ldr	r3, [pc, #324]	; (8000f44 <HandleTilt+0x1e0>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
			}
			HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000e02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e06:	4851      	ldr	r0, [pc, #324]	; (8000f4c <HandleTilt+0x1e8>)
 8000e08:	f001 f8bb 	bl	8001f82 <HAL_GPIO_TogglePin>
 8000e0c:	e023      	b.n	8000e56 <HandleTilt+0xf2>
		}
		else if(myData.x > -500 && myData.x < 500)
 8000e0e:	4b4a      	ldr	r3, [pc, #296]	; (8000f38 <HandleTilt+0x1d4>)
 8000e10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e14:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8000e18:	dd1d      	ble.n	8000e56 <HandleTilt+0xf2>
 8000e1a:	4b47      	ldr	r3, [pc, #284]	; (8000f38 <HandleTilt+0x1d4>)
 8000e1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e20:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e24:	da17      	bge.n	8000e56 <HandleTilt+0xf2>
		{
			// NOT TILTED ON X
			if(tiltedRight == 1)
 8000e26:	4b47      	ldr	r3, [pc, #284]	; (8000f44 <HandleTilt+0x1e0>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d104      	bne.n	8000e38 <HandleTilt+0xd4>
			{
				HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 8000e2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e32:	4846      	ldr	r0, [pc, #280]	; (8000f4c <HandleTilt+0x1e8>)
 8000e34:	f001 f8a5 	bl	8001f82 <HAL_GPIO_TogglePin>
			}
			if(tiltedLeft == 1)
 8000e38:	4b43      	ldr	r3, [pc, #268]	; (8000f48 <HandleTilt+0x1e4>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d104      	bne.n	8000e4a <HandleTilt+0xe6>
			{
				HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000e40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e44:	4841      	ldr	r0, [pc, #260]	; (8000f4c <HandleTilt+0x1e8>)
 8000e46:	f001 f89c 	bl	8001f82 <HAL_GPIO_TogglePin>
			}
			tiltedRight = 0;
 8000e4a:	4b3e      	ldr	r3, [pc, #248]	; (8000f44 <HandleTilt+0x1e0>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
			tiltedLeft = 0;
 8000e50:	4b3d      	ldr	r3, [pc, #244]	; (8000f48 <HandleTilt+0x1e4>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
		}
	}
	if(tiltedRight == 0 && tiltedLeft == 0)
 8000e56:	4b3b      	ldr	r3, [pc, #236]	; (8000f44 <HandleTilt+0x1e0>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d167      	bne.n	8000f2e <HandleTilt+0x1ca>
 8000e5e:	4b3a      	ldr	r3, [pc, #232]	; (8000f48 <HandleTilt+0x1e4>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d163      	bne.n	8000f2e <HandleTilt+0x1ca>
	{
		if(myData.y > 4500 && tiltedForward == 0)
 8000e66:	4b34      	ldr	r3, [pc, #208]	; (8000f38 <HandleTilt+0x1d4>)
 8000e68:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e6c:	f241 1294 	movw	r2, #4500	; 0x1194
 8000e70:	4293      	cmp	r3, r2
 8000e72:	dd18      	ble.n	8000ea6 <HandleTilt+0x142>
 8000e74:	4b31      	ldr	r3, [pc, #196]	; (8000f3c <HandleTilt+0x1d8>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d114      	bne.n	8000ea6 <HandleTilt+0x142>
		{
			// TILTED FORWARD
			tiltedForward = 1;
 8000e7c:	4b2f      	ldr	r3, [pc, #188]	; (8000f3c <HandleTilt+0x1d8>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	601a      	str	r2, [r3, #0]
			if(tiltedBack == 1)
 8000e82:	4b2f      	ldr	r3, [pc, #188]	; (8000f40 <HandleTilt+0x1dc>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d107      	bne.n	8000e9a <HandleTilt+0x136>
			{
				HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 8000e8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e8e:	482f      	ldr	r0, [pc, #188]	; (8000f4c <HandleTilt+0x1e8>)
 8000e90:	f001 f877 	bl	8001f82 <HAL_GPIO_TogglePin>
				tiltedBack = 0;
 8000e94:	4b2a      	ldr	r3, [pc, #168]	; (8000f40 <HandleTilt+0x1dc>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
			}
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000e9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e9e:	482b      	ldr	r0, [pc, #172]	; (8000f4c <HandleTilt+0x1e8>)
 8000ea0:	f001 f86f 	bl	8001f82 <HAL_GPIO_TogglePin>
 8000ea4:	e043      	b.n	8000f2e <HandleTilt+0x1ca>
		}
		else if(myData.y < -4500 && tiltedBack == 0)
 8000ea6:	4b24      	ldr	r3, [pc, #144]	; (8000f38 <HandleTilt+0x1d4>)
 8000ea8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000eac:	4a29      	ldr	r2, [pc, #164]	; (8000f54 <HandleTilt+0x1f0>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	da18      	bge.n	8000ee4 <HandleTilt+0x180>
 8000eb2:	4b23      	ldr	r3, [pc, #140]	; (8000f40 <HandleTilt+0x1dc>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d114      	bne.n	8000ee4 <HandleTilt+0x180>
		{
			// TILTED BACK
			tiltedBack = 1;
 8000eba:	4b21      	ldr	r3, [pc, #132]	; (8000f40 <HandleTilt+0x1dc>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	601a      	str	r2, [r3, #0]
			if(tiltedForward == 1)
 8000ec0:	4b1e      	ldr	r3, [pc, #120]	; (8000f3c <HandleTilt+0x1d8>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d107      	bne.n	8000ed8 <HandleTilt+0x174>
			{
				HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000ec8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ecc:	481f      	ldr	r0, [pc, #124]	; (8000f4c <HandleTilt+0x1e8>)
 8000ece:	f001 f858 	bl	8001f82 <HAL_GPIO_TogglePin>
				tiltedForward = 0;
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <HandleTilt+0x1d8>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
			}
			HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 8000ed8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000edc:	481b      	ldr	r0, [pc, #108]	; (8000f4c <HandleTilt+0x1e8>)
 8000ede:	f001 f850 	bl	8001f82 <HAL_GPIO_TogglePin>
 8000ee2:	e024      	b.n	8000f2e <HandleTilt+0x1ca>
		}
		else if(myData.y > -500 && myData.y < 500)
 8000ee4:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <HandleTilt+0x1d4>)
 8000ee6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000eea:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8000eee:	dd1e      	ble.n	8000f2e <HandleTilt+0x1ca>
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <HandleTilt+0x1d4>)
 8000ef2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ef6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000efa:	da18      	bge.n	8000f2e <HandleTilt+0x1ca>
		{
			// NOT TILTED ON Y
			if(tiltedForward == 1)
 8000efc:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <HandleTilt+0x1d8>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d104      	bne.n	8000f0e <HandleTilt+0x1aa>
			{
				HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000f04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f08:	4810      	ldr	r0, [pc, #64]	; (8000f4c <HandleTilt+0x1e8>)
 8000f0a:	f001 f83a 	bl	8001f82 <HAL_GPIO_TogglePin>
			}
			if(tiltedBack == 1)
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <HandleTilt+0x1dc>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d104      	bne.n	8000f20 <HandleTilt+0x1bc>
			{
				HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 8000f16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f1a:	480c      	ldr	r0, [pc, #48]	; (8000f4c <HandleTilt+0x1e8>)
 8000f1c:	f001 f831 	bl	8001f82 <HAL_GPIO_TogglePin>
			}
			tiltedForward = 0;
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HandleTilt+0x1d8>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
			tiltedBack = 0;
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HandleTilt+0x1dc>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000f2c:	e7ff      	b.n	8000f2e <HandleTilt+0x1ca>
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd90      	pop	{r4, r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000204 	.word	0x20000204
 8000f3c:	20000214 	.word	0x20000214
 8000f40:	20000218 	.word	0x20000218
 8000f44:	20000210 	.word	0x20000210
 8000f48:	2000020c 	.word	0x2000020c
 8000f4c:	40020c00 	.word	0x40020c00
 8000f50:	ffffec78 	.word	0xffffec78
 8000f54:	ffffee6c 	.word	0xffffee6c

08000f58 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b094      	sub	sp, #80	; 0x50
 8000f5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5e:	f107 0320 	add.w	r3, r7, #32
 8000f62:	2230      	movs	r2, #48	; 0x30
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f009 fa8e 	bl	800a488 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	4b28      	ldr	r3, [pc, #160]	; (8001024 <SystemClock_Config+0xcc>)
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	4a27      	ldr	r2, [pc, #156]	; (8001024 <SystemClock_Config+0xcc>)
 8000f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8c:	4b25      	ldr	r3, [pc, #148]	; (8001024 <SystemClock_Config+0xcc>)
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f98:	2300      	movs	r3, #0
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	4b22      	ldr	r3, [pc, #136]	; (8001028 <SystemClock_Config+0xd0>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a21      	ldr	r2, [pc, #132]	; (8001028 <SystemClock_Config+0xd0>)
 8000fa2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	4b1f      	ldr	r3, [pc, #124]	; (8001028 <SystemClock_Config+0xd0>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fc2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fc8:	2304      	movs	r3, #4
 8000fca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000fcc:	23c0      	movs	r3, #192	; 0xc0
 8000fce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000fd4:	2308      	movs	r3, #8
 8000fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd8:	f107 0320 	add.w	r3, r7, #32
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f003 f9fd 	bl	80043dc <HAL_RCC_OscConfig>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fe8:	f000 f820 	bl	800102c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fec:	230f      	movs	r3, #15
 8000fee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ff8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ffc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001002:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	2103      	movs	r1, #3
 800100a:	4618      	mov	r0, r3
 800100c:	f003 fc5e 	bl	80048cc <HAL_RCC_ClockConfig>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001016:	f000 f809 	bl	800102c <Error_Handler>
  }
}
 800101a:	bf00      	nop
 800101c:	3750      	adds	r7, #80	; 0x50
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40023800 	.word	0x40023800
 8001028:	40007000 	.word	0x40007000

0800102c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001030:	b672      	cpsid	i
}
 8001032:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001034:	e7fe      	b.n	8001034 <Error_Handler+0x8>
	...

08001038 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800103c:	4b17      	ldr	r3, [pc, #92]	; (800109c <MX_SPI1_Init+0x64>)
 800103e:	4a18      	ldr	r2, [pc, #96]	; (80010a0 <MX_SPI1_Init+0x68>)
 8001040:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001042:	4b16      	ldr	r3, [pc, #88]	; (800109c <MX_SPI1_Init+0x64>)
 8001044:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001048:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800104a:	4b14      	ldr	r3, [pc, #80]	; (800109c <MX_SPI1_Init+0x64>)
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001050:	4b12      	ldr	r3, [pc, #72]	; (800109c <MX_SPI1_Init+0x64>)
 8001052:	2200      	movs	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001056:	4b11      	ldr	r3, [pc, #68]	; (800109c <MX_SPI1_Init+0x64>)
 8001058:	2200      	movs	r2, #0
 800105a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <MX_SPI1_Init+0x64>)
 800105e:	2200      	movs	r2, #0
 8001060:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <MX_SPI1_Init+0x64>)
 8001064:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001068:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <MX_SPI1_Init+0x64>)
 800106c:	2230      	movs	r2, #48	; 0x30
 800106e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001070:	4b0a      	ldr	r3, [pc, #40]	; (800109c <MX_SPI1_Init+0x64>)
 8001072:	2200      	movs	r2, #0
 8001074:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <MX_SPI1_Init+0x64>)
 8001078:	2200      	movs	r2, #0
 800107a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800107c:	4b07      	ldr	r3, [pc, #28]	; (800109c <MX_SPI1_Init+0x64>)
 800107e:	2200      	movs	r2, #0
 8001080:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <MX_SPI1_Init+0x64>)
 8001084:	220a      	movs	r2, #10
 8001086:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001088:	4804      	ldr	r0, [pc, #16]	; (800109c <MX_SPI1_Init+0x64>)
 800108a:	f003 ff6b 	bl	8004f64 <HAL_SPI_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001094:	f7ff ffca 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000220 	.word	0x20000220
 80010a0:	40013000 	.word	0x40013000

080010a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	; 0x28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a19      	ldr	r2, [pc, #100]	; (8001128 <HAL_SPI_MspInit+0x84>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d12b      	bne.n	800111e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	4b18      	ldr	r3, [pc, #96]	; (800112c <HAL_SPI_MspInit+0x88>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	4a17      	ldr	r2, [pc, #92]	; (800112c <HAL_SPI_MspInit+0x88>)
 80010d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010d4:	6453      	str	r3, [r2, #68]	; 0x44
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <HAL_SPI_MspInit+0x88>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <HAL_SPI_MspInit+0x88>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a10      	ldr	r2, [pc, #64]	; (800112c <HAL_SPI_MspInit+0x88>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <HAL_SPI_MspInit+0x88>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80010fe:	23e0      	movs	r3, #224	; 0xe0
 8001100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2300      	movs	r3, #0
 800110c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800110e:	2305      	movs	r3, #5
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	4619      	mov	r1, r3
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <HAL_SPI_MspInit+0x8c>)
 800111a:	f000 fd7d 	bl	8001c18 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800111e:	bf00      	nop
 8001120:	3728      	adds	r7, #40	; 0x28
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40013000 	.word	0x40013000
 800112c:	40023800 	.word	0x40023800
 8001130:	40020000 	.word	0x40020000

08001134 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	4b10      	ldr	r3, [pc, #64]	; (8001180 <HAL_MspInit+0x4c>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001142:	4a0f      	ldr	r2, [pc, #60]	; (8001180 <HAL_MspInit+0x4c>)
 8001144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001148:	6453      	str	r3, [r2, #68]	; 0x44
 800114a:	4b0d      	ldr	r3, [pc, #52]	; (8001180 <HAL_MspInit+0x4c>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	603b      	str	r3, [r7, #0]
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <HAL_MspInit+0x4c>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	4a08      	ldr	r2, [pc, #32]	; (8001180 <HAL_MspInit+0x4c>)
 8001160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001164:	6413      	str	r3, [r2, #64]	; 0x40
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_MspInit+0x4c>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116e:	603b      	str	r3, [r7, #0]
 8001170:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001172:	2007      	movs	r0, #7
 8001174:	f000 fa24 	bl	80015c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40023800 	.word	0x40023800

08001184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001188:	e7fe      	b.n	8001188 <NMI_Handler+0x4>

0800118a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800118e:	e7fe      	b.n	800118e <HardFault_Handler+0x4>

08001190 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001194:	e7fe      	b.n	8001194 <MemManage_Handler+0x4>

08001196 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800119a:	e7fe      	b.n	800119a <BusFault_Handler+0x4>

0800119c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <UsageFault_Handler+0x4>

080011a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d0:	f000 f8e2 	bl	8001398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80011dc:	2001      	movs	r0, #1
 80011de:	f000 feeb 	bl	8001fb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80011ec:	4802      	ldr	r0, [pc, #8]	; (80011f8 <DMA1_Stream5_IRQHandler+0x10>)
 80011ee:	f000 fad7 	bl	80017a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200001a4 	.word	0x200001a4

080011fc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001200:	4802      	ldr	r0, [pc, #8]	; (800120c <OTG_FS_IRQHandler+0x10>)
 8001202:	f001 f967 	bl	80024d4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000670 	.word	0x20000670

08001210 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001218:	4a14      	ldr	r2, [pc, #80]	; (800126c <_sbrk+0x5c>)
 800121a:	4b15      	ldr	r3, [pc, #84]	; (8001270 <_sbrk+0x60>)
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001224:	4b13      	ldr	r3, [pc, #76]	; (8001274 <_sbrk+0x64>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d102      	bne.n	8001232 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <_sbrk+0x64>)
 800122e:	4a12      	ldr	r2, [pc, #72]	; (8001278 <_sbrk+0x68>)
 8001230:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <_sbrk+0x64>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4413      	add	r3, r2
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	429a      	cmp	r2, r3
 800123e:	d207      	bcs.n	8001250 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001240:	f009 f8da 	bl	800a3f8 <__errno>
 8001244:	4603      	mov	r3, r0
 8001246:	220c      	movs	r2, #12
 8001248:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800124a:	f04f 33ff 	mov.w	r3, #4294967295
 800124e:	e009      	b.n	8001264 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001250:	4b08      	ldr	r3, [pc, #32]	; (8001274 <_sbrk+0x64>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001256:	4b07      	ldr	r3, [pc, #28]	; (8001274 <_sbrk+0x64>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4413      	add	r3, r2
 800125e:	4a05      	ldr	r2, [pc, #20]	; (8001274 <_sbrk+0x64>)
 8001260:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001262:	68fb      	ldr	r3, [r7, #12]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3718      	adds	r7, #24
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20020000 	.word	0x20020000
 8001270:	00000400 	.word	0x00000400
 8001274:	20000278 	.word	0x20000278
 8001278:	20000988 	.word	0x20000988

0800127c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <SystemInit+0x20>)
 8001282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001286:	4a05      	ldr	r2, [pc, #20]	; (800129c <SystemInit+0x20>)
 8001288:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800128c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012a4:	480d      	ldr	r0, [pc, #52]	; (80012dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012a6:	490e      	ldr	r1, [pc, #56]	; (80012e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012a8:	4a0e      	ldr	r2, [pc, #56]	; (80012e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012ac:	e002      	b.n	80012b4 <LoopCopyDataInit>

080012ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012b2:	3304      	adds	r3, #4

080012b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b8:	d3f9      	bcc.n	80012ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ba:	4a0b      	ldr	r2, [pc, #44]	; (80012e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012bc:	4c0b      	ldr	r4, [pc, #44]	; (80012ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80012be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c0:	e001      	b.n	80012c6 <LoopFillZerobss>

080012c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c4:	3204      	adds	r2, #4

080012c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c8:	d3fb      	bcc.n	80012c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012ca:	f7ff ffd7 	bl	800127c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ce:	f009 f899 	bl	800a404 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012d2:	f7ff fd11 	bl	8000cf8 <main>
  bx  lr    
 80012d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e0:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80012e4:	0800a6f4 	.word	0x0800a6f4
  ldr r2, =_sbss
 80012e8:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80012ec:	20000984 	.word	0x20000984

080012f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012f0:	e7fe      	b.n	80012f0 <ADC_IRQHandler>
	...

080012f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012f8:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <HAL_Init+0x40>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a0d      	ldr	r2, [pc, #52]	; (8001334 <HAL_Init+0x40>)
 80012fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001302:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001304:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <HAL_Init+0x40>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <HAL_Init+0x40>)
 800130a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800130e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <HAL_Init+0x40>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a07      	ldr	r2, [pc, #28]	; (8001334 <HAL_Init+0x40>)
 8001316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800131a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800131c:	2003      	movs	r0, #3
 800131e:	f000 f94f 	bl	80015c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001322:	2000      	movs	r0, #0
 8001324:	f000 f808 	bl	8001338 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001328:	f7ff ff04 	bl	8001134 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40023c00 	.word	0x40023c00

08001338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <HAL_InitTick+0x54>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_InitTick+0x58>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	4619      	mov	r1, r3
 800134a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001352:	fbb2 f3f3 	udiv	r3, r2, r3
 8001356:	4618      	mov	r0, r3
 8001358:	f000 f967 	bl	800162a <HAL_SYSTICK_Config>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e00e      	b.n	8001384 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b0f      	cmp	r3, #15
 800136a:	d80a      	bhi.n	8001382 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800136c:	2200      	movs	r2, #0
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	f04f 30ff 	mov.w	r0, #4294967295
 8001374:	f000 f92f 	bl	80015d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001378:	4a06      	ldr	r2, [pc, #24]	; (8001394 <HAL_InitTick+0x5c>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800137e:	2300      	movs	r3, #0
 8001380:	e000      	b.n	8001384 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000004 	.word	0x20000004
 8001390:	2000000c 	.word	0x2000000c
 8001394:	20000008 	.word	0x20000008

08001398 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_IncTick+0x20>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_IncTick+0x24>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4413      	add	r3, r2
 80013a8:	4a04      	ldr	r2, [pc, #16]	; (80013bc <HAL_IncTick+0x24>)
 80013aa:	6013      	str	r3, [r2, #0]
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	2000000c 	.word	0x2000000c
 80013bc:	2000027c 	.word	0x2000027c

080013c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return uwTick;
 80013c4:	4b03      	ldr	r3, [pc, #12]	; (80013d4 <HAL_GetTick+0x14>)
 80013c6:	681b      	ldr	r3, [r3, #0]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	2000027c 	.word	0x2000027c

080013d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013e0:	f7ff ffee 	bl	80013c0 <HAL_GetTick>
 80013e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013f0:	d005      	beq.n	80013fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013f2:	4b0a      	ldr	r3, [pc, #40]	; (800141c <HAL_Delay+0x44>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	461a      	mov	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4413      	add	r3, r2
 80013fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013fe:	bf00      	nop
 8001400:	f7ff ffde 	bl	80013c0 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	429a      	cmp	r2, r3
 800140e:	d8f7      	bhi.n	8001400 <HAL_Delay+0x28>
  {
  }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	2000000c 	.word	0x2000000c

08001420 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <__NVIC_SetPriorityGrouping+0x44>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800143c:	4013      	ands	r3, r2
 800143e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001448:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800144c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001450:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001452:	4a04      	ldr	r2, [pc, #16]	; (8001464 <__NVIC_SetPriorityGrouping+0x44>)
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	60d3      	str	r3, [r2, #12]
}
 8001458:	bf00      	nop
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800146c:	4b04      	ldr	r3, [pc, #16]	; (8001480 <__NVIC_GetPriorityGrouping+0x18>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	0a1b      	lsrs	r3, r3, #8
 8001472:	f003 0307 	and.w	r3, r3, #7
}
 8001476:	4618      	mov	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	2b00      	cmp	r3, #0
 8001494:	db0b      	blt.n	80014ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	f003 021f 	and.w	r2, r3, #31
 800149c:	4907      	ldr	r1, [pc, #28]	; (80014bc <__NVIC_EnableIRQ+0x38>)
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	095b      	lsrs	r3, r3, #5
 80014a4:	2001      	movs	r0, #1
 80014a6:	fa00 f202 	lsl.w	r2, r0, r2
 80014aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000e100 	.word	0xe000e100

080014c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	6039      	str	r1, [r7, #0]
 80014ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	db0a      	blt.n	80014ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	490c      	ldr	r1, [pc, #48]	; (800150c <__NVIC_SetPriority+0x4c>)
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	0112      	lsls	r2, r2, #4
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	440b      	add	r3, r1
 80014e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e8:	e00a      	b.n	8001500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	4908      	ldr	r1, [pc, #32]	; (8001510 <__NVIC_SetPriority+0x50>)
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	f003 030f 	and.w	r3, r3, #15
 80014f6:	3b04      	subs	r3, #4
 80014f8:	0112      	lsls	r2, r2, #4
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	440b      	add	r3, r1
 80014fe:	761a      	strb	r2, [r3, #24]
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	e000e100 	.word	0xe000e100
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001514:	b480      	push	{r7}
 8001516:	b089      	sub	sp, #36	; 0x24
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	f1c3 0307 	rsb	r3, r3, #7
 800152e:	2b04      	cmp	r3, #4
 8001530:	bf28      	it	cs
 8001532:	2304      	movcs	r3, #4
 8001534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3304      	adds	r3, #4
 800153a:	2b06      	cmp	r3, #6
 800153c:	d902      	bls.n	8001544 <NVIC_EncodePriority+0x30>
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3b03      	subs	r3, #3
 8001542:	e000      	b.n	8001546 <NVIC_EncodePriority+0x32>
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001548:	f04f 32ff 	mov.w	r2, #4294967295
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43da      	mvns	r2, r3
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	401a      	ands	r2, r3
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800155c:	f04f 31ff 	mov.w	r1, #4294967295
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	fa01 f303 	lsl.w	r3, r1, r3
 8001566:	43d9      	mvns	r1, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800156c:	4313      	orrs	r3, r2
         );
}
 800156e:	4618      	mov	r0, r3
 8001570:	3724      	adds	r7, #36	; 0x24
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3b01      	subs	r3, #1
 8001588:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800158c:	d301      	bcc.n	8001592 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800158e:	2301      	movs	r3, #1
 8001590:	e00f      	b.n	80015b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001592:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <SysTick_Config+0x40>)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3b01      	subs	r3, #1
 8001598:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800159a:	210f      	movs	r1, #15
 800159c:	f04f 30ff 	mov.w	r0, #4294967295
 80015a0:	f7ff ff8e 	bl	80014c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a4:	4b05      	ldr	r3, [pc, #20]	; (80015bc <SysTick_Config+0x40>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015aa:	4b04      	ldr	r3, [pc, #16]	; (80015bc <SysTick_Config+0x40>)
 80015ac:	2207      	movs	r2, #7
 80015ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	e000e010 	.word	0xe000e010

080015c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff ff29 	bl	8001420 <__NVIC_SetPriorityGrouping>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b086      	sub	sp, #24
 80015da:	af00      	add	r7, sp, #0
 80015dc:	4603      	mov	r3, r0
 80015de:	60b9      	str	r1, [r7, #8]
 80015e0:	607a      	str	r2, [r7, #4]
 80015e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015e8:	f7ff ff3e 	bl	8001468 <__NVIC_GetPriorityGrouping>
 80015ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	68b9      	ldr	r1, [r7, #8]
 80015f2:	6978      	ldr	r0, [r7, #20]
 80015f4:	f7ff ff8e 	bl	8001514 <NVIC_EncodePriority>
 80015f8:	4602      	mov	r2, r0
 80015fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015fe:	4611      	mov	r1, r2
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff5d 	bl	80014c0 <__NVIC_SetPriority>
}
 8001606:	bf00      	nop
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	4603      	mov	r3, r0
 8001616:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff ff31 	bl	8001484 <__NVIC_EnableIRQ>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff ffa2 	bl	800157c <SysTick_Config>
 8001638:	4603      	mov	r3, r0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
	...

08001644 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001650:	f7ff feb6 	bl	80013c0 <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d101      	bne.n	8001660 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e099      	b.n	8001794 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2202      	movs	r2, #2
 8001664:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f022 0201 	bic.w	r2, r2, #1
 800167e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001680:	e00f      	b.n	80016a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001682:	f7ff fe9d 	bl	80013c0 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b05      	cmp	r3, #5
 800168e:	d908      	bls.n	80016a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2220      	movs	r2, #32
 8001694:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2203      	movs	r2, #3
 800169a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e078      	b.n	8001794 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1e8      	bne.n	8001682 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	4b38      	ldr	r3, [pc, #224]	; (800179c <HAL_DMA_Init+0x158>)
 80016bc:	4013      	ands	r3, r2
 80016be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f8:	2b04      	cmp	r3, #4
 80016fa:	d107      	bne.n	800170c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001704:	4313      	orrs	r3, r2
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	4313      	orrs	r3, r2
 800170a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	f023 0307 	bic.w	r3, r3, #7
 8001722:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	4313      	orrs	r3, r2
 800172c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	2b04      	cmp	r3, #4
 8001734:	d117      	bne.n	8001766 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173a:	697a      	ldr	r2, [r7, #20]
 800173c:	4313      	orrs	r3, r2
 800173e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001744:	2b00      	cmp	r3, #0
 8001746:	d00e      	beq.n	8001766 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f000 f9e9 	bl	8001b20 <DMA_CheckFifoParam>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d008      	beq.n	8001766 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2240      	movs	r2, #64	; 0x40
 8001758:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2201      	movs	r2, #1
 800175e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001762:	2301      	movs	r3, #1
 8001764:	e016      	b.n	8001794 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 f9a0 	bl	8001ab4 <DMA_CalcBaseAndBitshift>
 8001774:	4603      	mov	r3, r0
 8001776:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800177c:	223f      	movs	r2, #63	; 0x3f
 800177e:	409a      	lsls	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2201      	movs	r2, #1
 800178e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	f010803f 	.word	0xf010803f

080017a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80017ac:	4b8e      	ldr	r3, [pc, #568]	; (80019e8 <HAL_DMA_IRQHandler+0x248>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a8e      	ldr	r2, [pc, #568]	; (80019ec <HAL_DMA_IRQHandler+0x24c>)
 80017b2:	fba2 2303 	umull	r2, r3, r2, r3
 80017b6:	0a9b      	lsrs	r3, r3, #10
 80017b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ca:	2208      	movs	r2, #8
 80017cc:	409a      	lsls	r2, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	4013      	ands	r3, r2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d01a      	beq.n	800180c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d013      	beq.n	800180c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0204 	bic.w	r2, r2, #4
 80017f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f8:	2208      	movs	r2, #8
 80017fa:	409a      	lsls	r2, r3
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001804:	f043 0201 	orr.w	r2, r3, #1
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001810:	2201      	movs	r2, #1
 8001812:	409a      	lsls	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4013      	ands	r3, r2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d012      	beq.n	8001842 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001826:	2b00      	cmp	r3, #0
 8001828:	d00b      	beq.n	8001842 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182e:	2201      	movs	r2, #1
 8001830:	409a      	lsls	r2, r3
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800183a:	f043 0202 	orr.w	r2, r3, #2
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001846:	2204      	movs	r2, #4
 8001848:	409a      	lsls	r2, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	4013      	ands	r3, r2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d012      	beq.n	8001878 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d00b      	beq.n	8001878 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001864:	2204      	movs	r2, #4
 8001866:	409a      	lsls	r2, r3
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001870:	f043 0204 	orr.w	r2, r3, #4
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800187c:	2210      	movs	r2, #16
 800187e:	409a      	lsls	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4013      	ands	r3, r2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d043      	beq.n	8001910 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0308 	and.w	r3, r3, #8
 8001892:	2b00      	cmp	r3, #0
 8001894:	d03c      	beq.n	8001910 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800189a:	2210      	movs	r2, #16
 800189c:	409a      	lsls	r2, r3
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d018      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d108      	bne.n	80018d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d024      	beq.n	8001910 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	4798      	blx	r3
 80018ce:	e01f      	b.n	8001910 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d01b      	beq.n	8001910 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	4798      	blx	r3
 80018e0:	e016      	b.n	8001910 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d107      	bne.n	8001900 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 0208 	bic.w	r2, r2, #8
 80018fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001904:	2b00      	cmp	r3, #0
 8001906:	d003      	beq.n	8001910 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001914:	2220      	movs	r2, #32
 8001916:	409a      	lsls	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4013      	ands	r3, r2
 800191c:	2b00      	cmp	r3, #0
 800191e:	f000 808f 	beq.w	8001a40 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0310 	and.w	r3, r3, #16
 800192c:	2b00      	cmp	r3, #0
 800192e:	f000 8087 	beq.w	8001a40 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001936:	2220      	movs	r2, #32
 8001938:	409a      	lsls	r2, r3
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b05      	cmp	r3, #5
 8001948:	d136      	bne.n	80019b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f022 0216 	bic.w	r2, r2, #22
 8001958:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	695a      	ldr	r2, [r3, #20]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001968:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	2b00      	cmp	r3, #0
 8001970:	d103      	bne.n	800197a <HAL_DMA_IRQHandler+0x1da>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001976:	2b00      	cmp	r3, #0
 8001978:	d007      	beq.n	800198a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f022 0208 	bic.w	r2, r2, #8
 8001988:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800198e:	223f      	movs	r2, #63	; 0x3f
 8001990:	409a      	lsls	r2, r3
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2201      	movs	r2, #1
 800199a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d07e      	beq.n	8001aac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	4798      	blx	r3
        }
        return;
 80019b6:	e079      	b.n	8001aac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d01d      	beq.n	8001a02 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d10d      	bne.n	80019f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d031      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	4798      	blx	r3
 80019e4:	e02c      	b.n	8001a40 <HAL_DMA_IRQHandler+0x2a0>
 80019e6:	bf00      	nop
 80019e8:	20000004 	.word	0x20000004
 80019ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d023      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	4798      	blx	r3
 8001a00:	e01e      	b.n	8001a40 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d10f      	bne.n	8001a30 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f022 0210 	bic.w	r2, r2, #16
 8001a1e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d032      	beq.n	8001aae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d022      	beq.n	8001a9a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2205      	movs	r2, #5
 8001a58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0201 	bic.w	r2, r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d307      	bcc.n	8001a88 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f2      	bne.n	8001a6c <HAL_DMA_IRQHandler+0x2cc>
 8001a86:	e000      	b.n	8001a8a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001a88:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d005      	beq.n	8001aae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	4798      	blx	r3
 8001aaa:	e000      	b.n	8001aae <HAL_DMA_IRQHandler+0x30e>
        return;
 8001aac:	bf00      	nop
    }
  }
}
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	3b10      	subs	r3, #16
 8001ac4:	4a14      	ldr	r2, [pc, #80]	; (8001b18 <DMA_CalcBaseAndBitshift+0x64>)
 8001ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aca:	091b      	lsrs	r3, r3, #4
 8001acc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ace:	4a13      	ldr	r2, [pc, #76]	; (8001b1c <DMA_CalcBaseAndBitshift+0x68>)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2b03      	cmp	r3, #3
 8001ae0:	d909      	bls.n	8001af6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001aea:	f023 0303 	bic.w	r3, r3, #3
 8001aee:	1d1a      	adds	r2, r3, #4
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	659a      	str	r2, [r3, #88]	; 0x58
 8001af4:	e007      	b.n	8001b06 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001afe:	f023 0303 	bic.w	r3, r3, #3
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3714      	adds	r7, #20
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	aaaaaaab 	.word	0xaaaaaaab
 8001b1c:	0800a6c8 	.word	0x0800a6c8

08001b20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d11f      	bne.n	8001b7a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	2b03      	cmp	r3, #3
 8001b3e:	d856      	bhi.n	8001bee <DMA_CheckFifoParam+0xce>
 8001b40:	a201      	add	r2, pc, #4	; (adr r2, 8001b48 <DMA_CheckFifoParam+0x28>)
 8001b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b46:	bf00      	nop
 8001b48:	08001b59 	.word	0x08001b59
 8001b4c:	08001b6b 	.word	0x08001b6b
 8001b50:	08001b59 	.word	0x08001b59
 8001b54:	08001bef 	.word	0x08001bef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d046      	beq.n	8001bf2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b68:	e043      	b.n	8001bf2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b72:	d140      	bne.n	8001bf6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b78:	e03d      	b.n	8001bf6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b82:	d121      	bne.n	8001bc8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	2b03      	cmp	r3, #3
 8001b88:	d837      	bhi.n	8001bfa <DMA_CheckFifoParam+0xda>
 8001b8a:	a201      	add	r2, pc, #4	; (adr r2, 8001b90 <DMA_CheckFifoParam+0x70>)
 8001b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b90:	08001ba1 	.word	0x08001ba1
 8001b94:	08001ba7 	.word	0x08001ba7
 8001b98:	08001ba1 	.word	0x08001ba1
 8001b9c:	08001bb9 	.word	0x08001bb9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ba4:	e030      	b.n	8001c08 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001baa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d025      	beq.n	8001bfe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bb6:	e022      	b.n	8001bfe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bc0:	d11f      	bne.n	8001c02 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001bc6:	e01c      	b.n	8001c02 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d903      	bls.n	8001bd6 <DMA_CheckFifoParam+0xb6>
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	2b03      	cmp	r3, #3
 8001bd2:	d003      	beq.n	8001bdc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001bd4:	e018      	b.n	8001c08 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	73fb      	strb	r3, [r7, #15]
      break;
 8001bda:	e015      	b.n	8001c08 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d00e      	beq.n	8001c06 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	73fb      	strb	r3, [r7, #15]
      break;
 8001bec:	e00b      	b.n	8001c06 <DMA_CheckFifoParam+0xe6>
      break;
 8001bee:	bf00      	nop
 8001bf0:	e00a      	b.n	8001c08 <DMA_CheckFifoParam+0xe8>
      break;
 8001bf2:	bf00      	nop
 8001bf4:	e008      	b.n	8001c08 <DMA_CheckFifoParam+0xe8>
      break;
 8001bf6:	bf00      	nop
 8001bf8:	e006      	b.n	8001c08 <DMA_CheckFifoParam+0xe8>
      break;
 8001bfa:	bf00      	nop
 8001bfc:	e004      	b.n	8001c08 <DMA_CheckFifoParam+0xe8>
      break;
 8001bfe:	bf00      	nop
 8001c00:	e002      	b.n	8001c08 <DMA_CheckFifoParam+0xe8>
      break;   
 8001c02:	bf00      	nop
 8001c04:	e000      	b.n	8001c08 <DMA_CheckFifoParam+0xe8>
      break;
 8001c06:	bf00      	nop
    }
  } 
  
  return status; 
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop

08001c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b089      	sub	sp, #36	; 0x24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
 8001c32:	e16b      	b.n	8001f0c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c34:	2201      	movs	r2, #1
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	4013      	ands	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	f040 815a 	bne.w	8001f06 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d005      	beq.n	8001c6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d130      	bne.n	8001ccc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	2203      	movs	r2, #3
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	091b      	lsrs	r3, r3, #4
 8001cb6:	f003 0201 	and.w	r2, r3, #1
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	2b03      	cmp	r3, #3
 8001cd6:	d017      	beq.n	8001d08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	2203      	movs	r2, #3
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 0303 	and.w	r3, r3, #3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d123      	bne.n	8001d5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	08da      	lsrs	r2, r3, #3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3208      	adds	r2, #8
 8001d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	220f      	movs	r2, #15
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	691a      	ldr	r2, [r3, #16]
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	08da      	lsrs	r2, r3, #3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3208      	adds	r2, #8
 8001d56:	69b9      	ldr	r1, [r7, #24]
 8001d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	2203      	movs	r2, #3
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 0203 	and.w	r2, r3, #3
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 80b4 	beq.w	8001f06 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	4b60      	ldr	r3, [pc, #384]	; (8001f24 <HAL_GPIO_Init+0x30c>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	4a5f      	ldr	r2, [pc, #380]	; (8001f24 <HAL_GPIO_Init+0x30c>)
 8001da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dac:	6453      	str	r3, [r2, #68]	; 0x44
 8001dae:	4b5d      	ldr	r3, [pc, #372]	; (8001f24 <HAL_GPIO_Init+0x30c>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dba:	4a5b      	ldr	r2, [pc, #364]	; (8001f28 <HAL_GPIO_Init+0x310>)
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	089b      	lsrs	r3, r3, #2
 8001dc0:	3302      	adds	r3, #2
 8001dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	220f      	movs	r2, #15
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a52      	ldr	r2, [pc, #328]	; (8001f2c <HAL_GPIO_Init+0x314>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d02b      	beq.n	8001e3e <HAL_GPIO_Init+0x226>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a51      	ldr	r2, [pc, #324]	; (8001f30 <HAL_GPIO_Init+0x318>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d025      	beq.n	8001e3a <HAL_GPIO_Init+0x222>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a50      	ldr	r2, [pc, #320]	; (8001f34 <HAL_GPIO_Init+0x31c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d01f      	beq.n	8001e36 <HAL_GPIO_Init+0x21e>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a4f      	ldr	r2, [pc, #316]	; (8001f38 <HAL_GPIO_Init+0x320>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d019      	beq.n	8001e32 <HAL_GPIO_Init+0x21a>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a4e      	ldr	r2, [pc, #312]	; (8001f3c <HAL_GPIO_Init+0x324>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d013      	beq.n	8001e2e <HAL_GPIO_Init+0x216>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a4d      	ldr	r2, [pc, #308]	; (8001f40 <HAL_GPIO_Init+0x328>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d00d      	beq.n	8001e2a <HAL_GPIO_Init+0x212>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a4c      	ldr	r2, [pc, #304]	; (8001f44 <HAL_GPIO_Init+0x32c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d007      	beq.n	8001e26 <HAL_GPIO_Init+0x20e>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a4b      	ldr	r2, [pc, #300]	; (8001f48 <HAL_GPIO_Init+0x330>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d101      	bne.n	8001e22 <HAL_GPIO_Init+0x20a>
 8001e1e:	2307      	movs	r3, #7
 8001e20:	e00e      	b.n	8001e40 <HAL_GPIO_Init+0x228>
 8001e22:	2308      	movs	r3, #8
 8001e24:	e00c      	b.n	8001e40 <HAL_GPIO_Init+0x228>
 8001e26:	2306      	movs	r3, #6
 8001e28:	e00a      	b.n	8001e40 <HAL_GPIO_Init+0x228>
 8001e2a:	2305      	movs	r3, #5
 8001e2c:	e008      	b.n	8001e40 <HAL_GPIO_Init+0x228>
 8001e2e:	2304      	movs	r3, #4
 8001e30:	e006      	b.n	8001e40 <HAL_GPIO_Init+0x228>
 8001e32:	2303      	movs	r3, #3
 8001e34:	e004      	b.n	8001e40 <HAL_GPIO_Init+0x228>
 8001e36:	2302      	movs	r3, #2
 8001e38:	e002      	b.n	8001e40 <HAL_GPIO_Init+0x228>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e000      	b.n	8001e40 <HAL_GPIO_Init+0x228>
 8001e3e:	2300      	movs	r3, #0
 8001e40:	69fa      	ldr	r2, [r7, #28]
 8001e42:	f002 0203 	and.w	r2, r2, #3
 8001e46:	0092      	lsls	r2, r2, #2
 8001e48:	4093      	lsls	r3, r2
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e50:	4935      	ldr	r1, [pc, #212]	; (8001f28 <HAL_GPIO_Init+0x310>)
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	089b      	lsrs	r3, r3, #2
 8001e56:	3302      	adds	r3, #2
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e5e:	4b3b      	ldr	r3, [pc, #236]	; (8001f4c <HAL_GPIO_Init+0x334>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	43db      	mvns	r3, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e82:	4a32      	ldr	r2, [pc, #200]	; (8001f4c <HAL_GPIO_Init+0x334>)
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e88:	4b30      	ldr	r3, [pc, #192]	; (8001f4c <HAL_GPIO_Init+0x334>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	43db      	mvns	r3, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4013      	ands	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001eac:	4a27      	ldr	r2, [pc, #156]	; (8001f4c <HAL_GPIO_Init+0x334>)
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eb2:	4b26      	ldr	r3, [pc, #152]	; (8001f4c <HAL_GPIO_Init+0x334>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ed6:	4a1d      	ldr	r2, [pc, #116]	; (8001f4c <HAL_GPIO_Init+0x334>)
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001edc:	4b1b      	ldr	r3, [pc, #108]	; (8001f4c <HAL_GPIO_Init+0x334>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f00:	4a12      	ldr	r2, [pc, #72]	; (8001f4c <HAL_GPIO_Init+0x334>)
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	61fb      	str	r3, [r7, #28]
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	2b0f      	cmp	r3, #15
 8001f10:	f67f ae90 	bls.w	8001c34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f14:	bf00      	nop
 8001f16:	bf00      	nop
 8001f18:	3724      	adds	r7, #36	; 0x24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	40023800 	.word	0x40023800
 8001f28:	40013800 	.word	0x40013800
 8001f2c:	40020000 	.word	0x40020000
 8001f30:	40020400 	.word	0x40020400
 8001f34:	40020800 	.word	0x40020800
 8001f38:	40020c00 	.word	0x40020c00
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40021400 	.word	0x40021400
 8001f44:	40021800 	.word	0x40021800
 8001f48:	40021c00 	.word	0x40021c00
 8001f4c:	40013c00 	.word	0x40013c00

08001f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	807b      	strh	r3, [r7, #2]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f60:	787b      	ldrb	r3, [r7, #1]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f66:	887a      	ldrh	r2, [r7, #2]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f6c:	e003      	b.n	8001f76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f6e:	887b      	ldrh	r3, [r7, #2]
 8001f70:	041a      	lsls	r2, r3, #16
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	619a      	str	r2, [r3, #24]
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b085      	sub	sp, #20
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f94:	887a      	ldrh	r2, [r7, #2]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	041a      	lsls	r2, r3, #16
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	43d9      	mvns	r1, r3
 8001fa0:	887b      	ldrh	r3, [r7, #2]
 8001fa2:	400b      	ands	r3, r1
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	619a      	str	r2, [r3, #24]
}
 8001faa:	bf00      	nop
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001fc2:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fc4:	695a      	ldr	r2, [r3, #20]
 8001fc6:	88fb      	ldrh	r3, [r7, #6]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d006      	beq.n	8001fdc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fce:	4a05      	ldr	r2, [pc, #20]	; (8001fe4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fd0:	88fb      	ldrh	r3, [r7, #6]
 8001fd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fd4:	88fb      	ldrh	r3, [r7, #6]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 f806 	bl	8001fe8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40013c00 	.word	0x40013c00

08001fe8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001ffe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002000:	b08f      	sub	sp, #60	; 0x3c
 8002002:	af0a      	add	r7, sp, #40	; 0x28
 8002004:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e054      	b.n	80020ba <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d106      	bne.n	8002030 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f007 fefa 	bl	8009e24 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2203      	movs	r2, #3
 8002034:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800203c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002040:	2b00      	cmp	r3, #0
 8002042:	d102      	bne.n	800204a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f003 fda2 	bl	8005b98 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	603b      	str	r3, [r7, #0]
 800205a:	687e      	ldr	r6, [r7, #4]
 800205c:	466d      	mov	r5, sp
 800205e:	f106 0410 	add.w	r4, r6, #16
 8002062:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002064:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002066:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002068:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800206a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800206e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002072:	1d33      	adds	r3, r6, #4
 8002074:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002076:	6838      	ldr	r0, [r7, #0]
 8002078:	f003 fd1c 	bl	8005ab4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2101      	movs	r1, #1
 8002082:	4618      	mov	r0, r3
 8002084:	f003 fd99 	bl	8005bba <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	603b      	str	r3, [r7, #0]
 800208e:	687e      	ldr	r6, [r7, #4]
 8002090:	466d      	mov	r5, sp
 8002092:	f106 0410 	add.w	r4, r6, #16
 8002096:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002098:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800209a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800209c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800209e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80020a6:	1d33      	adds	r3, r6, #4
 80020a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020aa:	6838      	ldr	r0, [r7, #0]
 80020ac:	f003 ff22 	bl	8005ef4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3714      	adds	r7, #20
 80020be:	46bd      	mov	sp, r7
 80020c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020c2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80020c2:	b590      	push	{r4, r7, lr}
 80020c4:	b089      	sub	sp, #36	; 0x24
 80020c6:	af04      	add	r7, sp, #16
 80020c8:	6078      	str	r0, [r7, #4]
 80020ca:	4608      	mov	r0, r1
 80020cc:	4611      	mov	r1, r2
 80020ce:	461a      	mov	r2, r3
 80020d0:	4603      	mov	r3, r0
 80020d2:	70fb      	strb	r3, [r7, #3]
 80020d4:	460b      	mov	r3, r1
 80020d6:	70bb      	strb	r3, [r7, #2]
 80020d8:	4613      	mov	r3, r2
 80020da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d101      	bne.n	80020ea <HAL_HCD_HC_Init+0x28>
 80020e6:	2302      	movs	r3, #2
 80020e8:	e076      	b.n	80021d8 <HAL_HCD_HC_Init+0x116>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	212c      	movs	r1, #44	; 0x2c
 80020f8:	fb01 f303 	mul.w	r3, r1, r3
 80020fc:	4413      	add	r3, r2
 80020fe:	333d      	adds	r3, #61	; 0x3d
 8002100:	2200      	movs	r2, #0
 8002102:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002104:	78fb      	ldrb	r3, [r7, #3]
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	212c      	movs	r1, #44	; 0x2c
 800210a:	fb01 f303 	mul.w	r3, r1, r3
 800210e:	4413      	add	r3, r2
 8002110:	3338      	adds	r3, #56	; 0x38
 8002112:	787a      	ldrb	r2, [r7, #1]
 8002114:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002116:	78fb      	ldrb	r3, [r7, #3]
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	212c      	movs	r1, #44	; 0x2c
 800211c:	fb01 f303 	mul.w	r3, r1, r3
 8002120:	4413      	add	r3, r2
 8002122:	3340      	adds	r3, #64	; 0x40
 8002124:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002126:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002128:	78fb      	ldrb	r3, [r7, #3]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	212c      	movs	r1, #44	; 0x2c
 800212e:	fb01 f303 	mul.w	r3, r1, r3
 8002132:	4413      	add	r3, r2
 8002134:	3339      	adds	r3, #57	; 0x39
 8002136:	78fa      	ldrb	r2, [r7, #3]
 8002138:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800213a:	78fb      	ldrb	r3, [r7, #3]
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	212c      	movs	r1, #44	; 0x2c
 8002140:	fb01 f303 	mul.w	r3, r1, r3
 8002144:	4413      	add	r3, r2
 8002146:	333f      	adds	r3, #63	; 0x3f
 8002148:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800214c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800214e:	78fb      	ldrb	r3, [r7, #3]
 8002150:	78ba      	ldrb	r2, [r7, #2]
 8002152:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002156:	b2d0      	uxtb	r0, r2
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	212c      	movs	r1, #44	; 0x2c
 800215c:	fb01 f303 	mul.w	r3, r1, r3
 8002160:	4413      	add	r3, r2
 8002162:	333a      	adds	r3, #58	; 0x3a
 8002164:	4602      	mov	r2, r0
 8002166:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002168:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800216c:	2b00      	cmp	r3, #0
 800216e:	da09      	bge.n	8002184 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002170:	78fb      	ldrb	r3, [r7, #3]
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	212c      	movs	r1, #44	; 0x2c
 8002176:	fb01 f303 	mul.w	r3, r1, r3
 800217a:	4413      	add	r3, r2
 800217c:	333b      	adds	r3, #59	; 0x3b
 800217e:	2201      	movs	r2, #1
 8002180:	701a      	strb	r2, [r3, #0]
 8002182:	e008      	b.n	8002196 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002184:	78fb      	ldrb	r3, [r7, #3]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	212c      	movs	r1, #44	; 0x2c
 800218a:	fb01 f303 	mul.w	r3, r1, r3
 800218e:	4413      	add	r3, r2
 8002190:	333b      	adds	r3, #59	; 0x3b
 8002192:	2200      	movs	r2, #0
 8002194:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002196:	78fb      	ldrb	r3, [r7, #3]
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	212c      	movs	r1, #44	; 0x2c
 800219c:	fb01 f303 	mul.w	r3, r1, r3
 80021a0:	4413      	add	r3, r2
 80021a2:	333c      	adds	r3, #60	; 0x3c
 80021a4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80021a8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6818      	ldr	r0, [r3, #0]
 80021ae:	787c      	ldrb	r4, [r7, #1]
 80021b0:	78ba      	ldrb	r2, [r7, #2]
 80021b2:	78f9      	ldrb	r1, [r7, #3]
 80021b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80021b6:	9302      	str	r3, [sp, #8]
 80021b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80021bc:	9301      	str	r3, [sp, #4]
 80021be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	4623      	mov	r3, r4
 80021c6:	f004 f81b 	bl	8006200 <USB_HC_Init>
 80021ca:	4603      	mov	r3, r0
 80021cc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd90      	pop	{r4, r7, pc}

080021e0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	460b      	mov	r3, r1
 80021ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80021ec:	2300      	movs	r3, #0
 80021ee:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d101      	bne.n	80021fe <HAL_HCD_HC_Halt+0x1e>
 80021fa:	2302      	movs	r3, #2
 80021fc:	e00f      	b.n	800221e <HAL_HCD_HC_Halt+0x3e>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	78fa      	ldrb	r2, [r7, #3]
 800220c:	4611      	mov	r1, r2
 800220e:	4618      	mov	r0, r3
 8002210:	f004 fa6b 	bl	80066ea <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800221c:	7bfb      	ldrb	r3, [r7, #15]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	4608      	mov	r0, r1
 8002232:	4611      	mov	r1, r2
 8002234:	461a      	mov	r2, r3
 8002236:	4603      	mov	r3, r0
 8002238:	70fb      	strb	r3, [r7, #3]
 800223a:	460b      	mov	r3, r1
 800223c:	70bb      	strb	r3, [r7, #2]
 800223e:	4613      	mov	r3, r2
 8002240:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002242:	78fb      	ldrb	r3, [r7, #3]
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	212c      	movs	r1, #44	; 0x2c
 8002248:	fb01 f303 	mul.w	r3, r1, r3
 800224c:	4413      	add	r3, r2
 800224e:	333b      	adds	r3, #59	; 0x3b
 8002250:	78ba      	ldrb	r2, [r7, #2]
 8002252:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002254:	78fb      	ldrb	r3, [r7, #3]
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	212c      	movs	r1, #44	; 0x2c
 800225a:	fb01 f303 	mul.w	r3, r1, r3
 800225e:	4413      	add	r3, r2
 8002260:	333f      	adds	r3, #63	; 0x3f
 8002262:	787a      	ldrb	r2, [r7, #1]
 8002264:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002266:	7c3b      	ldrb	r3, [r7, #16]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d112      	bne.n	8002292 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800226c:	78fb      	ldrb	r3, [r7, #3]
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	212c      	movs	r1, #44	; 0x2c
 8002272:	fb01 f303 	mul.w	r3, r1, r3
 8002276:	4413      	add	r3, r2
 8002278:	3342      	adds	r3, #66	; 0x42
 800227a:	2203      	movs	r2, #3
 800227c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800227e:	78fb      	ldrb	r3, [r7, #3]
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	212c      	movs	r1, #44	; 0x2c
 8002284:	fb01 f303 	mul.w	r3, r1, r3
 8002288:	4413      	add	r3, r2
 800228a:	333d      	adds	r3, #61	; 0x3d
 800228c:	7f3a      	ldrb	r2, [r7, #28]
 800228e:	701a      	strb	r2, [r3, #0]
 8002290:	e008      	b.n	80022a4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002292:	78fb      	ldrb	r3, [r7, #3]
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	212c      	movs	r1, #44	; 0x2c
 8002298:	fb01 f303 	mul.w	r3, r1, r3
 800229c:	4413      	add	r3, r2
 800229e:	3342      	adds	r3, #66	; 0x42
 80022a0:	2202      	movs	r2, #2
 80022a2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80022a4:	787b      	ldrb	r3, [r7, #1]
 80022a6:	2b03      	cmp	r3, #3
 80022a8:	f200 80c6 	bhi.w	8002438 <HAL_HCD_HC_SubmitRequest+0x210>
 80022ac:	a201      	add	r2, pc, #4	; (adr r2, 80022b4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80022ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b2:	bf00      	nop
 80022b4:	080022c5 	.word	0x080022c5
 80022b8:	08002425 	.word	0x08002425
 80022bc:	08002329 	.word	0x08002329
 80022c0:	080023a7 	.word	0x080023a7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80022c4:	7c3b      	ldrb	r3, [r7, #16]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	f040 80b8 	bne.w	800243c <HAL_HCD_HC_SubmitRequest+0x214>
 80022cc:	78bb      	ldrb	r3, [r7, #2]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f040 80b4 	bne.w	800243c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80022d4:	8b3b      	ldrh	r3, [r7, #24]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d108      	bne.n	80022ec <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80022da:	78fb      	ldrb	r3, [r7, #3]
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	212c      	movs	r1, #44	; 0x2c
 80022e0:	fb01 f303 	mul.w	r3, r1, r3
 80022e4:	4413      	add	r3, r2
 80022e6:	3355      	adds	r3, #85	; 0x55
 80022e8:	2201      	movs	r2, #1
 80022ea:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80022ec:	78fb      	ldrb	r3, [r7, #3]
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	212c      	movs	r1, #44	; 0x2c
 80022f2:	fb01 f303 	mul.w	r3, r1, r3
 80022f6:	4413      	add	r3, r2
 80022f8:	3355      	adds	r3, #85	; 0x55
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d109      	bne.n	8002314 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002300:	78fb      	ldrb	r3, [r7, #3]
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	212c      	movs	r1, #44	; 0x2c
 8002306:	fb01 f303 	mul.w	r3, r1, r3
 800230a:	4413      	add	r3, r2
 800230c:	3342      	adds	r3, #66	; 0x42
 800230e:	2200      	movs	r2, #0
 8002310:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002312:	e093      	b.n	800243c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002314:	78fb      	ldrb	r3, [r7, #3]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	212c      	movs	r1, #44	; 0x2c
 800231a:	fb01 f303 	mul.w	r3, r1, r3
 800231e:	4413      	add	r3, r2
 8002320:	3342      	adds	r3, #66	; 0x42
 8002322:	2202      	movs	r2, #2
 8002324:	701a      	strb	r2, [r3, #0]
      break;
 8002326:	e089      	b.n	800243c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002328:	78bb      	ldrb	r3, [r7, #2]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d11d      	bne.n	800236a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800232e:	78fb      	ldrb	r3, [r7, #3]
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	212c      	movs	r1, #44	; 0x2c
 8002334:	fb01 f303 	mul.w	r3, r1, r3
 8002338:	4413      	add	r3, r2
 800233a:	3355      	adds	r3, #85	; 0x55
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d109      	bne.n	8002356 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002342:	78fb      	ldrb	r3, [r7, #3]
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	212c      	movs	r1, #44	; 0x2c
 8002348:	fb01 f303 	mul.w	r3, r1, r3
 800234c:	4413      	add	r3, r2
 800234e:	3342      	adds	r3, #66	; 0x42
 8002350:	2200      	movs	r2, #0
 8002352:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002354:	e073      	b.n	800243e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002356:	78fb      	ldrb	r3, [r7, #3]
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	212c      	movs	r1, #44	; 0x2c
 800235c:	fb01 f303 	mul.w	r3, r1, r3
 8002360:	4413      	add	r3, r2
 8002362:	3342      	adds	r3, #66	; 0x42
 8002364:	2202      	movs	r2, #2
 8002366:	701a      	strb	r2, [r3, #0]
      break;
 8002368:	e069      	b.n	800243e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800236a:	78fb      	ldrb	r3, [r7, #3]
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	212c      	movs	r1, #44	; 0x2c
 8002370:	fb01 f303 	mul.w	r3, r1, r3
 8002374:	4413      	add	r3, r2
 8002376:	3354      	adds	r3, #84	; 0x54
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d109      	bne.n	8002392 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800237e:	78fb      	ldrb	r3, [r7, #3]
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	212c      	movs	r1, #44	; 0x2c
 8002384:	fb01 f303 	mul.w	r3, r1, r3
 8002388:	4413      	add	r3, r2
 800238a:	3342      	adds	r3, #66	; 0x42
 800238c:	2200      	movs	r2, #0
 800238e:	701a      	strb	r2, [r3, #0]
      break;
 8002390:	e055      	b.n	800243e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002392:	78fb      	ldrb	r3, [r7, #3]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	212c      	movs	r1, #44	; 0x2c
 8002398:	fb01 f303 	mul.w	r3, r1, r3
 800239c:	4413      	add	r3, r2
 800239e:	3342      	adds	r3, #66	; 0x42
 80023a0:	2202      	movs	r2, #2
 80023a2:	701a      	strb	r2, [r3, #0]
      break;
 80023a4:	e04b      	b.n	800243e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80023a6:	78bb      	ldrb	r3, [r7, #2]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d11d      	bne.n	80023e8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023ac:	78fb      	ldrb	r3, [r7, #3]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	212c      	movs	r1, #44	; 0x2c
 80023b2:	fb01 f303 	mul.w	r3, r1, r3
 80023b6:	4413      	add	r3, r2
 80023b8:	3355      	adds	r3, #85	; 0x55
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d109      	bne.n	80023d4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023c0:	78fb      	ldrb	r3, [r7, #3]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	212c      	movs	r1, #44	; 0x2c
 80023c6:	fb01 f303 	mul.w	r3, r1, r3
 80023ca:	4413      	add	r3, r2
 80023cc:	3342      	adds	r3, #66	; 0x42
 80023ce:	2200      	movs	r2, #0
 80023d0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80023d2:	e034      	b.n	800243e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023d4:	78fb      	ldrb	r3, [r7, #3]
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	212c      	movs	r1, #44	; 0x2c
 80023da:	fb01 f303 	mul.w	r3, r1, r3
 80023de:	4413      	add	r3, r2
 80023e0:	3342      	adds	r3, #66	; 0x42
 80023e2:	2202      	movs	r2, #2
 80023e4:	701a      	strb	r2, [r3, #0]
      break;
 80023e6:	e02a      	b.n	800243e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80023e8:	78fb      	ldrb	r3, [r7, #3]
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	212c      	movs	r1, #44	; 0x2c
 80023ee:	fb01 f303 	mul.w	r3, r1, r3
 80023f2:	4413      	add	r3, r2
 80023f4:	3354      	adds	r3, #84	; 0x54
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d109      	bne.n	8002410 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023fc:	78fb      	ldrb	r3, [r7, #3]
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	212c      	movs	r1, #44	; 0x2c
 8002402:	fb01 f303 	mul.w	r3, r1, r3
 8002406:	4413      	add	r3, r2
 8002408:	3342      	adds	r3, #66	; 0x42
 800240a:	2200      	movs	r2, #0
 800240c:	701a      	strb	r2, [r3, #0]
      break;
 800240e:	e016      	b.n	800243e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002410:	78fb      	ldrb	r3, [r7, #3]
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	212c      	movs	r1, #44	; 0x2c
 8002416:	fb01 f303 	mul.w	r3, r1, r3
 800241a:	4413      	add	r3, r2
 800241c:	3342      	adds	r3, #66	; 0x42
 800241e:	2202      	movs	r2, #2
 8002420:	701a      	strb	r2, [r3, #0]
      break;
 8002422:	e00c      	b.n	800243e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002424:	78fb      	ldrb	r3, [r7, #3]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	212c      	movs	r1, #44	; 0x2c
 800242a:	fb01 f303 	mul.w	r3, r1, r3
 800242e:	4413      	add	r3, r2
 8002430:	3342      	adds	r3, #66	; 0x42
 8002432:	2200      	movs	r2, #0
 8002434:	701a      	strb	r2, [r3, #0]
      break;
 8002436:	e002      	b.n	800243e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002438:	bf00      	nop
 800243a:	e000      	b.n	800243e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800243c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800243e:	78fb      	ldrb	r3, [r7, #3]
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	212c      	movs	r1, #44	; 0x2c
 8002444:	fb01 f303 	mul.w	r3, r1, r3
 8002448:	4413      	add	r3, r2
 800244a:	3344      	adds	r3, #68	; 0x44
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002450:	78fb      	ldrb	r3, [r7, #3]
 8002452:	8b3a      	ldrh	r2, [r7, #24]
 8002454:	6879      	ldr	r1, [r7, #4]
 8002456:	202c      	movs	r0, #44	; 0x2c
 8002458:	fb00 f303 	mul.w	r3, r0, r3
 800245c:	440b      	add	r3, r1
 800245e:	334c      	adds	r3, #76	; 0x4c
 8002460:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002462:	78fb      	ldrb	r3, [r7, #3]
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	212c      	movs	r1, #44	; 0x2c
 8002468:	fb01 f303 	mul.w	r3, r1, r3
 800246c:	4413      	add	r3, r2
 800246e:	3360      	adds	r3, #96	; 0x60
 8002470:	2200      	movs	r2, #0
 8002472:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002474:	78fb      	ldrb	r3, [r7, #3]
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	212c      	movs	r1, #44	; 0x2c
 800247a:	fb01 f303 	mul.w	r3, r1, r3
 800247e:	4413      	add	r3, r2
 8002480:	3350      	adds	r3, #80	; 0x50
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002486:	78fb      	ldrb	r3, [r7, #3]
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	212c      	movs	r1, #44	; 0x2c
 800248c:	fb01 f303 	mul.w	r3, r1, r3
 8002490:	4413      	add	r3, r2
 8002492:	3339      	adds	r3, #57	; 0x39
 8002494:	78fa      	ldrb	r2, [r7, #3]
 8002496:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002498:	78fb      	ldrb	r3, [r7, #3]
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	212c      	movs	r1, #44	; 0x2c
 800249e:	fb01 f303 	mul.w	r3, r1, r3
 80024a2:	4413      	add	r3, r2
 80024a4:	3361      	adds	r3, #97	; 0x61
 80024a6:	2200      	movs	r2, #0
 80024a8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6818      	ldr	r0, [r3, #0]
 80024ae:	78fb      	ldrb	r3, [r7, #3]
 80024b0:	222c      	movs	r2, #44	; 0x2c
 80024b2:	fb02 f303 	mul.w	r3, r2, r3
 80024b6:	3338      	adds	r3, #56	; 0x38
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	18d1      	adds	r1, r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	461a      	mov	r2, r3
 80024c4:	f003 ffbe 	bl	8006444 <USB_HC_StartXfer>
 80024c8:	4603      	mov	r3, r0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop

080024d4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f003 fcbf 	bl	8005e6e <USB_GetMode>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	f040 80f6 	bne.w	80026e4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f003 fca3 	bl	8005e48 <USB_ReadInterrupts>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	f000 80ec 	beq.w	80026e2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f003 fc9a 	bl	8005e48 <USB_ReadInterrupts>
 8002514:	4603      	mov	r3, r0
 8002516:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800251a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800251e:	d104      	bne.n	800252a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002528:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f003 fc8a 	bl	8005e48 <USB_ReadInterrupts>
 8002534:	4603      	mov	r3, r0
 8002536:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800253a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800253e:	d104      	bne.n	800254a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002548:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f003 fc7a 	bl	8005e48 <USB_ReadInterrupts>
 8002554:	4603      	mov	r3, r0
 8002556:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800255a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800255e:	d104      	bne.n	800256a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002568:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f003 fc6a 	bl	8005e48 <USB_ReadInterrupts>
 8002574:	4603      	mov	r3, r0
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b02      	cmp	r3, #2
 800257c:	d103      	bne.n	8002586 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2202      	movs	r2, #2
 8002584:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f003 fc5c 	bl	8005e48 <USB_ReadInterrupts>
 8002590:	4603      	mov	r3, r0
 8002592:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002596:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800259a:	d11c      	bne.n	80025d6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80025a4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10f      	bne.n	80025d6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80025b6:	2110      	movs	r1, #16
 80025b8:	6938      	ldr	r0, [r7, #16]
 80025ba:	f003 fb4b 	bl	8005c54 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80025be:	6938      	ldr	r0, [r7, #16]
 80025c0:	f003 fb7c 	bl	8005cbc <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2101      	movs	r1, #1
 80025ca:	4618      	mov	r0, r3
 80025cc:	f003 fd52 	bl	8006074 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f007 fcb5 	bl	8009f40 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f003 fc34 	bl	8005e48 <USB_ReadInterrupts>
 80025e0:	4603      	mov	r3, r0
 80025e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025ea:	d102      	bne.n	80025f2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f001 f89e 	bl	800372e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f003 fc26 	bl	8005e48 <USB_ReadInterrupts>
 80025fc:	4603      	mov	r3, r0
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	2b08      	cmp	r3, #8
 8002604:	d106      	bne.n	8002614 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f007 fc7e 	bl	8009f08 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2208      	movs	r2, #8
 8002612:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f003 fc15 	bl	8005e48 <USB_ReadInterrupts>
 800261e:	4603      	mov	r3, r0
 8002620:	f003 0310 	and.w	r3, r3, #16
 8002624:	2b10      	cmp	r3, #16
 8002626:	d101      	bne.n	800262c <HAL_HCD_IRQHandler+0x158>
 8002628:	2301      	movs	r3, #1
 800262a:	e000      	b.n	800262e <HAL_HCD_IRQHandler+0x15a>
 800262c:	2300      	movs	r3, #0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d012      	beq.n	8002658 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	699a      	ldr	r2, [r3, #24]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 0210 	bic.w	r2, r2, #16
 8002640:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 ffa1 	bl	800358a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	699a      	ldr	r2, [r3, #24]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0210 	orr.w	r2, r2, #16
 8002656:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f003 fbf3 	bl	8005e48 <USB_ReadInterrupts>
 8002662:	4603      	mov	r3, r0
 8002664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002668:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800266c:	d13a      	bne.n	80026e4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f004 f828 	bl	80066c8 <USB_HC_ReadInterrupt>
 8002678:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800267a:	2300      	movs	r3, #0
 800267c:	617b      	str	r3, [r7, #20]
 800267e:	e025      	b.n	80026cc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	68ba      	ldr	r2, [r7, #8]
 8002688:	fa22 f303 	lsr.w	r3, r2, r3
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b00      	cmp	r3, #0
 8002692:	d018      	beq.n	80026c6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4413      	add	r3, r2
 800269c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026aa:	d106      	bne.n	80026ba <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	4619      	mov	r1, r3
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f8ab 	bl	800280e <HCD_HC_IN_IRQHandler>
 80026b8:	e005      	b.n	80026c6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	4619      	mov	r1, r3
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 fbf9 	bl	8002eb8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	3301      	adds	r3, #1
 80026ca:	617b      	str	r3, [r7, #20]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d3d4      	bcc.n	8002680 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026de:	615a      	str	r2, [r3, #20]
 80026e0:	e000      	b.n	80026e4 <HAL_HCD_IRQHandler+0x210>
      return;
 80026e2:	bf00      	nop
    }
  }
}
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b082      	sub	sp, #8
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d101      	bne.n	8002700 <HAL_HCD_Start+0x16>
 80026fc:	2302      	movs	r3, #2
 80026fe:	e013      	b.n	8002728 <HAL_HCD_Start+0x3e>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2101      	movs	r1, #1
 800270e:	4618      	mov	r0, r3
 8002710:	f003 fd14 	bl	800613c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f003 fa2c 	bl	8005b76 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800273e:	2b01      	cmp	r3, #1
 8002740:	d101      	bne.n	8002746 <HAL_HCD_Stop+0x16>
 8002742:	2302      	movs	r3, #2
 8002744:	e00d      	b.n	8002762 <HAL_HCD_Stop+0x32>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f004 f902 	bl	800695c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f003 fcb6 	bl	80060e8 <USB_ResetPort>
 800277c:	4603      	mov	r3, r0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
 800278e:	460b      	mov	r3, r1
 8002790:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002792:	78fb      	ldrb	r3, [r7, #3]
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	212c      	movs	r1, #44	; 0x2c
 8002798:	fb01 f303 	mul.w	r3, r1, r3
 800279c:	4413      	add	r3, r2
 800279e:	3360      	adds	r3, #96	; 0x60
 80027a0:	781b      	ldrb	r3, [r3, #0]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
 80027b6:	460b      	mov	r3, r1
 80027b8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80027ba:	78fb      	ldrb	r3, [r7, #3]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	212c      	movs	r1, #44	; 0x2c
 80027c0:	fb01 f303 	mul.w	r3, r1, r3
 80027c4:	4413      	add	r3, r2
 80027c6:	3350      	adds	r3, #80	; 0x50
 80027c8:	681b      	ldr	r3, [r3, #0]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f003 fcfa 	bl	80061dc <USB_GetCurrentFrame>
 80027e8:	4603      	mov	r3, r0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b082      	sub	sp, #8
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f003 fcd5 	bl	80061ae <USB_GetHostSpeed>
 8002804:	4603      	mov	r3, r0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b086      	sub	sp, #24
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
 8002816:	460b      	mov	r3, r1
 8002818:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002824:	78fb      	ldrb	r3, [r7, #3]
 8002826:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	015a      	lsls	r2, r3, #5
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	4413      	add	r3, r2
 8002830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 0304 	and.w	r3, r3, #4
 800283a:	2b04      	cmp	r3, #4
 800283c:	d11a      	bne.n	8002874 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	015a      	lsls	r2, r3, #5
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	4413      	add	r3, r2
 8002846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284a:	461a      	mov	r2, r3
 800284c:	2304      	movs	r3, #4
 800284e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	212c      	movs	r1, #44	; 0x2c
 8002856:	fb01 f303 	mul.w	r3, r1, r3
 800285a:	4413      	add	r3, r2
 800285c:	3361      	adds	r3, #97	; 0x61
 800285e:	2206      	movs	r2, #6
 8002860:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	4611      	mov	r1, r2
 800286c:	4618      	mov	r0, r3
 800286e:	f003 ff3c 	bl	80066ea <USB_HC_Halt>
 8002872:	e0af      	b.n	80029d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	015a      	lsls	r2, r3, #5
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	4413      	add	r3, r2
 800287c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002886:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800288a:	d11b      	bne.n	80028c4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	015a      	lsls	r2, r3, #5
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	4413      	add	r3, r2
 8002894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002898:	461a      	mov	r2, r3
 800289a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800289e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	212c      	movs	r1, #44	; 0x2c
 80028a6:	fb01 f303 	mul.w	r3, r1, r3
 80028aa:	4413      	add	r3, r2
 80028ac:	3361      	adds	r3, #97	; 0x61
 80028ae:	2207      	movs	r2, #7
 80028b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	4611      	mov	r1, r2
 80028bc:	4618      	mov	r0, r3
 80028be:	f003 ff14 	bl	80066ea <USB_HC_Halt>
 80028c2:	e087      	b.n	80029d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	015a      	lsls	r2, r3, #5
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	4413      	add	r3, r2
 80028cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 0320 	and.w	r3, r3, #32
 80028d6:	2b20      	cmp	r3, #32
 80028d8:	d109      	bne.n	80028ee <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	015a      	lsls	r2, r3, #5
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	4413      	add	r3, r2
 80028e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e6:	461a      	mov	r2, r3
 80028e8:	2320      	movs	r3, #32
 80028ea:	6093      	str	r3, [r2, #8]
 80028ec:	e072      	b.n	80029d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	015a      	lsls	r2, r3, #5
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	4413      	add	r3, r2
 80028f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 0308 	and.w	r3, r3, #8
 8002900:	2b08      	cmp	r3, #8
 8002902:	d11a      	bne.n	800293a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	015a      	lsls	r2, r3, #5
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	4413      	add	r3, r2
 800290c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002910:	461a      	mov	r2, r3
 8002912:	2308      	movs	r3, #8
 8002914:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	212c      	movs	r1, #44	; 0x2c
 800291c:	fb01 f303 	mul.w	r3, r1, r3
 8002920:	4413      	add	r3, r2
 8002922:	3361      	adds	r3, #97	; 0x61
 8002924:	2205      	movs	r2, #5
 8002926:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	4611      	mov	r1, r2
 8002932:	4618      	mov	r0, r3
 8002934:	f003 fed9 	bl	80066ea <USB_HC_Halt>
 8002938:	e04c      	b.n	80029d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	015a      	lsls	r2, r3, #5
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	4413      	add	r3, r2
 8002942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002950:	d11b      	bne.n	800298a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	015a      	lsls	r2, r3, #5
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	4413      	add	r3, r2
 800295a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295e:	461a      	mov	r2, r3
 8002960:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002964:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	212c      	movs	r1, #44	; 0x2c
 800296c:	fb01 f303 	mul.w	r3, r1, r3
 8002970:	4413      	add	r3, r2
 8002972:	3361      	adds	r3, #97	; 0x61
 8002974:	2208      	movs	r2, #8
 8002976:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	4611      	mov	r1, r2
 8002982:	4618      	mov	r0, r3
 8002984:	f003 feb1 	bl	80066ea <USB_HC_Halt>
 8002988:	e024      	b.n	80029d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	015a      	lsls	r2, r3, #5
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4413      	add	r3, r2
 8002992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800299c:	2b80      	cmp	r3, #128	; 0x80
 800299e:	d119      	bne.n	80029d4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	015a      	lsls	r2, r3, #5
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	4413      	add	r3, r2
 80029a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ac:	461a      	mov	r2, r3
 80029ae:	2380      	movs	r3, #128	; 0x80
 80029b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	212c      	movs	r1, #44	; 0x2c
 80029b8:	fb01 f303 	mul.w	r3, r1, r3
 80029bc:	4413      	add	r3, r2
 80029be:	3361      	adds	r3, #97	; 0x61
 80029c0:	2206      	movs	r2, #6
 80029c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	4611      	mov	r1, r2
 80029ce:	4618      	mov	r0, r3
 80029d0:	f003 fe8b 	bl	80066ea <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	015a      	lsls	r2, r3, #5
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	4413      	add	r3, r2
 80029dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029ea:	d112      	bne.n	8002a12 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	4611      	mov	r1, r2
 80029f6:	4618      	mov	r0, r3
 80029f8:	f003 fe77 	bl	80066ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	015a      	lsls	r2, r3, #5
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	4413      	add	r3, r2
 8002a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a08:	461a      	mov	r2, r3
 8002a0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a0e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002a10:	e24e      	b.n	8002eb0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	015a      	lsls	r2, r3, #5
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	4413      	add	r3, r2
 8002a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	f040 80df 	bne.w	8002be8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d019      	beq.n	8002a66 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	212c      	movs	r1, #44	; 0x2c
 8002a38:	fb01 f303 	mul.w	r3, r1, r3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	3348      	adds	r3, #72	; 0x48
 8002a40:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	0159      	lsls	r1, r3, #5
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	440b      	add	r3, r1
 8002a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002a54:	1ad2      	subs	r2, r2, r3
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	202c      	movs	r0, #44	; 0x2c
 8002a5c:	fb00 f303 	mul.w	r3, r0, r3
 8002a60:	440b      	add	r3, r1
 8002a62:	3350      	adds	r3, #80	; 0x50
 8002a64:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	212c      	movs	r1, #44	; 0x2c
 8002a6c:	fb01 f303 	mul.w	r3, r1, r3
 8002a70:	4413      	add	r3, r2
 8002a72:	3361      	adds	r3, #97	; 0x61
 8002a74:	2201      	movs	r2, #1
 8002a76:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	212c      	movs	r1, #44	; 0x2c
 8002a7e:	fb01 f303 	mul.w	r3, r1, r3
 8002a82:	4413      	add	r3, r2
 8002a84:	335c      	adds	r3, #92	; 0x5c
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	015a      	lsls	r2, r3, #5
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	4413      	add	r3, r2
 8002a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a96:	461a      	mov	r2, r3
 8002a98:	2301      	movs	r3, #1
 8002a9a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	212c      	movs	r1, #44	; 0x2c
 8002aa2:	fb01 f303 	mul.w	r3, r1, r3
 8002aa6:	4413      	add	r3, r2
 8002aa8:	333f      	adds	r3, #63	; 0x3f
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d009      	beq.n	8002ac4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	212c      	movs	r1, #44	; 0x2c
 8002ab6:	fb01 f303 	mul.w	r3, r1, r3
 8002aba:	4413      	add	r3, r2
 8002abc:	333f      	adds	r3, #63	; 0x3f
 8002abe:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d111      	bne.n	8002ae8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	4611      	mov	r1, r2
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f003 fe0b 	bl	80066ea <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	015a      	lsls	r2, r3, #5
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	4413      	add	r3, r2
 8002adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	2310      	movs	r3, #16
 8002ae4:	6093      	str	r3, [r2, #8]
 8002ae6:	e03a      	b.n	8002b5e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	212c      	movs	r1, #44	; 0x2c
 8002aee:	fb01 f303 	mul.w	r3, r1, r3
 8002af2:	4413      	add	r3, r2
 8002af4:	333f      	adds	r3, #63	; 0x3f
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	d009      	beq.n	8002b10 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	212c      	movs	r1, #44	; 0x2c
 8002b02:	fb01 f303 	mul.w	r3, r1, r3
 8002b06:	4413      	add	r3, r2
 8002b08:	333f      	adds	r3, #63	; 0x3f
 8002b0a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d126      	bne.n	8002b5e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	015a      	lsls	r2, r3, #5
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	4413      	add	r3, r2
 8002b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	0151      	lsls	r1, r2, #5
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	440a      	add	r2, r1
 8002b26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002b2e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	212c      	movs	r1, #44	; 0x2c
 8002b36:	fb01 f303 	mul.w	r3, r1, r3
 8002b3a:	4413      	add	r3, r2
 8002b3c:	3360      	adds	r3, #96	; 0x60
 8002b3e:	2201      	movs	r2, #1
 8002b40:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	b2d9      	uxtb	r1, r3
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	202c      	movs	r0, #44	; 0x2c
 8002b4c:	fb00 f303 	mul.w	r3, r0, r3
 8002b50:	4413      	add	r3, r2
 8002b52:	3360      	adds	r3, #96	; 0x60
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	461a      	mov	r2, r3
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f007 f9ff 	bl	8009f5c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d12b      	bne.n	8002bbe <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	212c      	movs	r1, #44	; 0x2c
 8002b6c:	fb01 f303 	mul.w	r3, r1, r3
 8002b70:	4413      	add	r3, r2
 8002b72:	3348      	adds	r3, #72	; 0x48
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	202c      	movs	r0, #44	; 0x2c
 8002b7c:	fb00 f202 	mul.w	r2, r0, r2
 8002b80:	440a      	add	r2, r1
 8002b82:	3240      	adds	r2, #64	; 0x40
 8002b84:	8812      	ldrh	r2, [r2, #0]
 8002b86:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 818e 	beq.w	8002eb0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	212c      	movs	r1, #44	; 0x2c
 8002b9a:	fb01 f303 	mul.w	r3, r1, r3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	3354      	adds	r3, #84	; 0x54
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	f083 0301 	eor.w	r3, r3, #1
 8002ba8:	b2d8      	uxtb	r0, r3
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	212c      	movs	r1, #44	; 0x2c
 8002bb0:	fb01 f303 	mul.w	r3, r1, r3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3354      	adds	r3, #84	; 0x54
 8002bb8:	4602      	mov	r2, r0
 8002bba:	701a      	strb	r2, [r3, #0]
}
 8002bbc:	e178      	b.n	8002eb0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	212c      	movs	r1, #44	; 0x2c
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	4413      	add	r3, r2
 8002bca:	3354      	adds	r3, #84	; 0x54
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	f083 0301 	eor.w	r3, r3, #1
 8002bd2:	b2d8      	uxtb	r0, r3
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	212c      	movs	r1, #44	; 0x2c
 8002bda:	fb01 f303 	mul.w	r3, r1, r3
 8002bde:	4413      	add	r3, r2
 8002be0:	3354      	adds	r3, #84	; 0x54
 8002be2:	4602      	mov	r2, r0
 8002be4:	701a      	strb	r2, [r3, #0]
}
 8002be6:	e163      	b.n	8002eb0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	015a      	lsls	r2, r3, #5
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	f040 80f6 	bne.w	8002dec <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	212c      	movs	r1, #44	; 0x2c
 8002c06:	fb01 f303 	mul.w	r3, r1, r3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	3361      	adds	r3, #97	; 0x61
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d109      	bne.n	8002c28 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	212c      	movs	r1, #44	; 0x2c
 8002c1a:	fb01 f303 	mul.w	r3, r1, r3
 8002c1e:	4413      	add	r3, r2
 8002c20:	3360      	adds	r3, #96	; 0x60
 8002c22:	2201      	movs	r2, #1
 8002c24:	701a      	strb	r2, [r3, #0]
 8002c26:	e0c9      	b.n	8002dbc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	212c      	movs	r1, #44	; 0x2c
 8002c2e:	fb01 f303 	mul.w	r3, r1, r3
 8002c32:	4413      	add	r3, r2
 8002c34:	3361      	adds	r3, #97	; 0x61
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b05      	cmp	r3, #5
 8002c3a:	d109      	bne.n	8002c50 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	212c      	movs	r1, #44	; 0x2c
 8002c42:	fb01 f303 	mul.w	r3, r1, r3
 8002c46:	4413      	add	r3, r2
 8002c48:	3360      	adds	r3, #96	; 0x60
 8002c4a:	2205      	movs	r2, #5
 8002c4c:	701a      	strb	r2, [r3, #0]
 8002c4e:	e0b5      	b.n	8002dbc <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	212c      	movs	r1, #44	; 0x2c
 8002c56:	fb01 f303 	mul.w	r3, r1, r3
 8002c5a:	4413      	add	r3, r2
 8002c5c:	3361      	adds	r3, #97	; 0x61
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b06      	cmp	r3, #6
 8002c62:	d009      	beq.n	8002c78 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	212c      	movs	r1, #44	; 0x2c
 8002c6a:	fb01 f303 	mul.w	r3, r1, r3
 8002c6e:	4413      	add	r3, r2
 8002c70:	3361      	adds	r3, #97	; 0x61
 8002c72:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c74:	2b08      	cmp	r3, #8
 8002c76:	d150      	bne.n	8002d1a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	212c      	movs	r1, #44	; 0x2c
 8002c7e:	fb01 f303 	mul.w	r3, r1, r3
 8002c82:	4413      	add	r3, r2
 8002c84:	335c      	adds	r3, #92	; 0x5c
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	1c5a      	adds	r2, r3, #1
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	202c      	movs	r0, #44	; 0x2c
 8002c90:	fb00 f303 	mul.w	r3, r0, r3
 8002c94:	440b      	add	r3, r1
 8002c96:	335c      	adds	r3, #92	; 0x5c
 8002c98:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	212c      	movs	r1, #44	; 0x2c
 8002ca0:	fb01 f303 	mul.w	r3, r1, r3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	335c      	adds	r3, #92	; 0x5c
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d912      	bls.n	8002cd4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	212c      	movs	r1, #44	; 0x2c
 8002cb4:	fb01 f303 	mul.w	r3, r1, r3
 8002cb8:	4413      	add	r3, r2
 8002cba:	335c      	adds	r3, #92	; 0x5c
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	212c      	movs	r1, #44	; 0x2c
 8002cc6:	fb01 f303 	mul.w	r3, r1, r3
 8002cca:	4413      	add	r3, r2
 8002ccc:	3360      	adds	r3, #96	; 0x60
 8002cce:	2204      	movs	r2, #4
 8002cd0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002cd2:	e073      	b.n	8002dbc <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	212c      	movs	r1, #44	; 0x2c
 8002cda:	fb01 f303 	mul.w	r3, r1, r3
 8002cde:	4413      	add	r3, r2
 8002ce0:	3360      	adds	r3, #96	; 0x60
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	015a      	lsls	r2, r3, #5
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	4413      	add	r3, r2
 8002cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002cfc:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d04:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	015a      	lsls	r2, r3, #5
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d12:	461a      	mov	r2, r3
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d18:	e050      	b.n	8002dbc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	212c      	movs	r1, #44	; 0x2c
 8002d20:	fb01 f303 	mul.w	r3, r1, r3
 8002d24:	4413      	add	r3, r2
 8002d26:	3361      	adds	r3, #97	; 0x61
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	2b03      	cmp	r3, #3
 8002d2c:	d122      	bne.n	8002d74 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	212c      	movs	r1, #44	; 0x2c
 8002d34:	fb01 f303 	mul.w	r3, r1, r3
 8002d38:	4413      	add	r3, r2
 8002d3a:	3360      	adds	r3, #96	; 0x60
 8002d3c:	2202      	movs	r2, #2
 8002d3e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	015a      	lsls	r2, r3, #5
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	4413      	add	r3, r2
 8002d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d56:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d5e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	015a      	lsls	r2, r3, #5
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	4413      	add	r3, r2
 8002d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	e023      	b.n	8002dbc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	212c      	movs	r1, #44	; 0x2c
 8002d7a:	fb01 f303 	mul.w	r3, r1, r3
 8002d7e:	4413      	add	r3, r2
 8002d80:	3361      	adds	r3, #97	; 0x61
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	2b07      	cmp	r3, #7
 8002d86:	d119      	bne.n	8002dbc <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	212c      	movs	r1, #44	; 0x2c
 8002d8e:	fb01 f303 	mul.w	r3, r1, r3
 8002d92:	4413      	add	r3, r2
 8002d94:	335c      	adds	r3, #92	; 0x5c
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	1c5a      	adds	r2, r3, #1
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	202c      	movs	r0, #44	; 0x2c
 8002da0:	fb00 f303 	mul.w	r3, r0, r3
 8002da4:	440b      	add	r3, r1
 8002da6:	335c      	adds	r3, #92	; 0x5c
 8002da8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	212c      	movs	r1, #44	; 0x2c
 8002db0:	fb01 f303 	mul.w	r3, r1, r3
 8002db4:	4413      	add	r3, r2
 8002db6:	3360      	adds	r3, #96	; 0x60
 8002db8:	2204      	movs	r2, #4
 8002dba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	015a      	lsls	r2, r3, #5
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc8:	461a      	mov	r2, r3
 8002dca:	2302      	movs	r3, #2
 8002dcc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	b2d9      	uxtb	r1, r3
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	202c      	movs	r0, #44	; 0x2c
 8002dd8:	fb00 f303 	mul.w	r3, r0, r3
 8002ddc:	4413      	add	r3, r2
 8002dde:	3360      	adds	r3, #96	; 0x60
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	461a      	mov	r2, r3
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f007 f8b9 	bl	8009f5c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002dea:	e061      	b.n	8002eb0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	015a      	lsls	r2, r3, #5
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	4413      	add	r3, r2
 8002df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 0310 	and.w	r3, r3, #16
 8002dfe:	2b10      	cmp	r3, #16
 8002e00:	d156      	bne.n	8002eb0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	212c      	movs	r1, #44	; 0x2c
 8002e08:	fb01 f303 	mul.w	r3, r1, r3
 8002e0c:	4413      	add	r3, r2
 8002e0e:	333f      	adds	r3, #63	; 0x3f
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b03      	cmp	r3, #3
 8002e14:	d111      	bne.n	8002e3a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	212c      	movs	r1, #44	; 0x2c
 8002e1c:	fb01 f303 	mul.w	r3, r1, r3
 8002e20:	4413      	add	r3, r2
 8002e22:	335c      	adds	r3, #92	; 0x5c
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	b2d2      	uxtb	r2, r2
 8002e30:	4611      	mov	r1, r2
 8002e32:	4618      	mov	r0, r3
 8002e34:	f003 fc59 	bl	80066ea <USB_HC_Halt>
 8002e38:	e031      	b.n	8002e9e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	212c      	movs	r1, #44	; 0x2c
 8002e40:	fb01 f303 	mul.w	r3, r1, r3
 8002e44:	4413      	add	r3, r2
 8002e46:	333f      	adds	r3, #63	; 0x3f
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d009      	beq.n	8002e62 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	212c      	movs	r1, #44	; 0x2c
 8002e54:	fb01 f303 	mul.w	r3, r1, r3
 8002e58:	4413      	add	r3, r2
 8002e5a:	333f      	adds	r3, #63	; 0x3f
 8002e5c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d11d      	bne.n	8002e9e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	212c      	movs	r1, #44	; 0x2c
 8002e68:	fb01 f303 	mul.w	r3, r1, r3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	335c      	adds	r3, #92	; 0x5c
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d110      	bne.n	8002e9e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	212c      	movs	r1, #44	; 0x2c
 8002e82:	fb01 f303 	mul.w	r3, r1, r3
 8002e86:	4413      	add	r3, r2
 8002e88:	3361      	adds	r3, #97	; 0x61
 8002e8a:	2203      	movs	r2, #3
 8002e8c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	b2d2      	uxtb	r2, r2
 8002e96:	4611      	mov	r1, r2
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f003 fc26 	bl	80066ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	015a      	lsls	r2, r3, #5
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eaa:	461a      	mov	r2, r3
 8002eac:	2310      	movs	r3, #16
 8002eae:	6093      	str	r3, [r2, #8]
}
 8002eb0:	bf00      	nop
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b088      	sub	sp, #32
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002ece:	78fb      	ldrb	r3, [r7, #3]
 8002ed0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	015a      	lsls	r2, r3, #5
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	4413      	add	r3, r2
 8002eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	d11a      	bne.n	8002f1e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	015a      	lsls	r2, r3, #5
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	4413      	add	r3, r2
 8002ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	2304      	movs	r3, #4
 8002ef8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	212c      	movs	r1, #44	; 0x2c
 8002f00:	fb01 f303 	mul.w	r3, r1, r3
 8002f04:	4413      	add	r3, r2
 8002f06:	3361      	adds	r3, #97	; 0x61
 8002f08:	2206      	movs	r2, #6
 8002f0a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	4611      	mov	r1, r2
 8002f16:	4618      	mov	r0, r3
 8002f18:	f003 fbe7 	bl	80066ea <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002f1c:	e331      	b.n	8003582 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	015a      	lsls	r2, r3, #5
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	4413      	add	r3, r2
 8002f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 0320 	and.w	r3, r3, #32
 8002f30:	2b20      	cmp	r3, #32
 8002f32:	d12e      	bne.n	8002f92 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	015a      	lsls	r2, r3, #5
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f40:	461a      	mov	r2, r3
 8002f42:	2320      	movs	r3, #32
 8002f44:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	212c      	movs	r1, #44	; 0x2c
 8002f4c:	fb01 f303 	mul.w	r3, r1, r3
 8002f50:	4413      	add	r3, r2
 8002f52:	333d      	adds	r3, #61	; 0x3d
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	f040 8313 	bne.w	8003582 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	212c      	movs	r1, #44	; 0x2c
 8002f62:	fb01 f303 	mul.w	r3, r1, r3
 8002f66:	4413      	add	r3, r2
 8002f68:	333d      	adds	r3, #61	; 0x3d
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	212c      	movs	r1, #44	; 0x2c
 8002f74:	fb01 f303 	mul.w	r3, r1, r3
 8002f78:	4413      	add	r3, r2
 8002f7a:	3360      	adds	r3, #96	; 0x60
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	4611      	mov	r1, r2
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f003 fbad 	bl	80066ea <USB_HC_Halt>
}
 8002f90:	e2f7      	b.n	8003582 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	015a      	lsls	r2, r3, #5
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	4413      	add	r3, r2
 8002f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa8:	d112      	bne.n	8002fd0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	015a      	lsls	r2, r3, #5
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fbc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	b2d2      	uxtb	r2, r2
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f003 fb8e 	bl	80066ea <USB_HC_Halt>
}
 8002fce:	e2d8      	b.n	8003582 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	015a      	lsls	r2, r3, #5
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d140      	bne.n	8003068 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	212c      	movs	r1, #44	; 0x2c
 8002fec:	fb01 f303 	mul.w	r3, r1, r3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	335c      	adds	r3, #92	; 0x5c
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	015a      	lsls	r2, r3, #5
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	4413      	add	r3, r2
 8003000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300a:	2b40      	cmp	r3, #64	; 0x40
 800300c:	d111      	bne.n	8003032 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	212c      	movs	r1, #44	; 0x2c
 8003014:	fb01 f303 	mul.w	r3, r1, r3
 8003018:	4413      	add	r3, r2
 800301a:	333d      	adds	r3, #61	; 0x3d
 800301c:	2201      	movs	r2, #1
 800301e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	015a      	lsls	r2, r3, #5
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	4413      	add	r3, r2
 8003028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800302c:	461a      	mov	r2, r3
 800302e:	2340      	movs	r3, #64	; 0x40
 8003030:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	015a      	lsls	r2, r3, #5
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	4413      	add	r3, r2
 800303a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800303e:	461a      	mov	r2, r3
 8003040:	2301      	movs	r3, #1
 8003042:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	212c      	movs	r1, #44	; 0x2c
 800304a:	fb01 f303 	mul.w	r3, r1, r3
 800304e:	4413      	add	r3, r2
 8003050:	3361      	adds	r3, #97	; 0x61
 8003052:	2201      	movs	r2, #1
 8003054:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	b2d2      	uxtb	r2, r2
 800305e:	4611      	mov	r1, r2
 8003060:	4618      	mov	r0, r3
 8003062:	f003 fb42 	bl	80066ea <USB_HC_Halt>
}
 8003066:	e28c      	b.n	8003582 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	015a      	lsls	r2, r3, #5
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	4413      	add	r3, r2
 8003070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307a:	2b40      	cmp	r3, #64	; 0x40
 800307c:	d12c      	bne.n	80030d8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	212c      	movs	r1, #44	; 0x2c
 8003084:	fb01 f303 	mul.w	r3, r1, r3
 8003088:	4413      	add	r3, r2
 800308a:	3361      	adds	r3, #97	; 0x61
 800308c:	2204      	movs	r2, #4
 800308e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	212c      	movs	r1, #44	; 0x2c
 8003096:	fb01 f303 	mul.w	r3, r1, r3
 800309a:	4413      	add	r3, r2
 800309c:	333d      	adds	r3, #61	; 0x3d
 800309e:	2201      	movs	r2, #1
 80030a0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	212c      	movs	r1, #44	; 0x2c
 80030a8:	fb01 f303 	mul.w	r3, r1, r3
 80030ac:	4413      	add	r3, r2
 80030ae:	335c      	adds	r3, #92	; 0x5c
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	4611      	mov	r1, r2
 80030be:	4618      	mov	r0, r3
 80030c0:	f003 fb13 	bl	80066ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	015a      	lsls	r2, r3, #5
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	4413      	add	r3, r2
 80030cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d0:	461a      	mov	r2, r3
 80030d2:	2340      	movs	r3, #64	; 0x40
 80030d4:	6093      	str	r3, [r2, #8]
}
 80030d6:	e254      	b.n	8003582 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b08      	cmp	r3, #8
 80030ec:	d11a      	bne.n	8003124 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	015a      	lsls	r2, r3, #5
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	4413      	add	r3, r2
 80030f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030fa:	461a      	mov	r2, r3
 80030fc:	2308      	movs	r3, #8
 80030fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	212c      	movs	r1, #44	; 0x2c
 8003106:	fb01 f303 	mul.w	r3, r1, r3
 800310a:	4413      	add	r3, r2
 800310c:	3361      	adds	r3, #97	; 0x61
 800310e:	2205      	movs	r2, #5
 8003110:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	4611      	mov	r1, r2
 800311c:	4618      	mov	r0, r3
 800311e:	f003 fae4 	bl	80066ea <USB_HC_Halt>
}
 8003122:	e22e      	b.n	8003582 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	015a      	lsls	r2, r3, #5
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	4413      	add	r3, r2
 800312c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 0310 	and.w	r3, r3, #16
 8003136:	2b10      	cmp	r3, #16
 8003138:	d140      	bne.n	80031bc <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	212c      	movs	r1, #44	; 0x2c
 8003140:	fb01 f303 	mul.w	r3, r1, r3
 8003144:	4413      	add	r3, r2
 8003146:	335c      	adds	r3, #92	; 0x5c
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	212c      	movs	r1, #44	; 0x2c
 8003152:	fb01 f303 	mul.w	r3, r1, r3
 8003156:	4413      	add	r3, r2
 8003158:	3361      	adds	r3, #97	; 0x61
 800315a:	2203      	movs	r2, #3
 800315c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	212c      	movs	r1, #44	; 0x2c
 8003164:	fb01 f303 	mul.w	r3, r1, r3
 8003168:	4413      	add	r3, r2
 800316a:	333d      	adds	r3, #61	; 0x3d
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d112      	bne.n	8003198 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	212c      	movs	r1, #44	; 0x2c
 8003178:	fb01 f303 	mul.w	r3, r1, r3
 800317c:	4413      	add	r3, r2
 800317e:	333c      	adds	r3, #60	; 0x3c
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d108      	bne.n	8003198 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	212c      	movs	r1, #44	; 0x2c
 800318c:	fb01 f303 	mul.w	r3, r1, r3
 8003190:	4413      	add	r3, r2
 8003192:	333d      	adds	r3, #61	; 0x3d
 8003194:	2201      	movs	r2, #1
 8003196:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	4611      	mov	r1, r2
 80031a2:	4618      	mov	r0, r3
 80031a4:	f003 faa1 	bl	80066ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	015a      	lsls	r2, r3, #5
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	4413      	add	r3, r2
 80031b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b4:	461a      	mov	r2, r3
 80031b6:	2310      	movs	r3, #16
 80031b8:	6093      	str	r3, [r2, #8]
}
 80031ba:	e1e2      	b.n	8003582 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	015a      	lsls	r2, r3, #5
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ce:	2b80      	cmp	r3, #128	; 0x80
 80031d0:	d164      	bne.n	800329c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d111      	bne.n	80031fe <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	212c      	movs	r1, #44	; 0x2c
 80031e0:	fb01 f303 	mul.w	r3, r1, r3
 80031e4:	4413      	add	r3, r2
 80031e6:	3361      	adds	r3, #97	; 0x61
 80031e8:	2206      	movs	r2, #6
 80031ea:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	4611      	mov	r1, r2
 80031f6:	4618      	mov	r0, r3
 80031f8:	f003 fa77 	bl	80066ea <USB_HC_Halt>
 80031fc:	e044      	b.n	8003288 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	212c      	movs	r1, #44	; 0x2c
 8003204:	fb01 f303 	mul.w	r3, r1, r3
 8003208:	4413      	add	r3, r2
 800320a:	335c      	adds	r3, #92	; 0x5c
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	1c5a      	adds	r2, r3, #1
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	202c      	movs	r0, #44	; 0x2c
 8003216:	fb00 f303 	mul.w	r3, r0, r3
 800321a:	440b      	add	r3, r1
 800321c:	335c      	adds	r3, #92	; 0x5c
 800321e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	212c      	movs	r1, #44	; 0x2c
 8003226:	fb01 f303 	mul.w	r3, r1, r3
 800322a:	4413      	add	r3, r2
 800322c:	335c      	adds	r3, #92	; 0x5c
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b02      	cmp	r3, #2
 8003232:	d920      	bls.n	8003276 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	212c      	movs	r1, #44	; 0x2c
 800323a:	fb01 f303 	mul.w	r3, r1, r3
 800323e:	4413      	add	r3, r2
 8003240:	335c      	adds	r3, #92	; 0x5c
 8003242:	2200      	movs	r2, #0
 8003244:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	212c      	movs	r1, #44	; 0x2c
 800324c:	fb01 f303 	mul.w	r3, r1, r3
 8003250:	4413      	add	r3, r2
 8003252:	3360      	adds	r3, #96	; 0x60
 8003254:	2204      	movs	r2, #4
 8003256:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	b2d9      	uxtb	r1, r3
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	202c      	movs	r0, #44	; 0x2c
 8003262:	fb00 f303 	mul.w	r3, r0, r3
 8003266:	4413      	add	r3, r2
 8003268:	3360      	adds	r3, #96	; 0x60
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	461a      	mov	r2, r3
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f006 fe74 	bl	8009f5c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003274:	e008      	b.n	8003288 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	212c      	movs	r1, #44	; 0x2c
 800327c:	fb01 f303 	mul.w	r3, r1, r3
 8003280:	4413      	add	r3, r2
 8003282:	3360      	adds	r3, #96	; 0x60
 8003284:	2202      	movs	r2, #2
 8003286:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	4413      	add	r3, r2
 8003290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003294:	461a      	mov	r2, r3
 8003296:	2380      	movs	r3, #128	; 0x80
 8003298:	6093      	str	r3, [r2, #8]
}
 800329a:	e172      	b.n	8003582 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	015a      	lsls	r2, r3, #5
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	4413      	add	r3, r2
 80032a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032b2:	d11b      	bne.n	80032ec <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	212c      	movs	r1, #44	; 0x2c
 80032ba:	fb01 f303 	mul.w	r3, r1, r3
 80032be:	4413      	add	r3, r2
 80032c0:	3361      	adds	r3, #97	; 0x61
 80032c2:	2208      	movs	r2, #8
 80032c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	4611      	mov	r1, r2
 80032d0:	4618      	mov	r0, r3
 80032d2:	f003 fa0a 	bl	80066ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	015a      	lsls	r2, r3, #5
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	4413      	add	r3, r2
 80032de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e2:	461a      	mov	r2, r3
 80032e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032e8:	6093      	str	r3, [r2, #8]
}
 80032ea:	e14a      	b.n	8003582 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	015a      	lsls	r2, r3, #5
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	4413      	add	r3, r2
 80032f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b02      	cmp	r3, #2
 8003300:	f040 813f 	bne.w	8003582 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	212c      	movs	r1, #44	; 0x2c
 800330a:	fb01 f303 	mul.w	r3, r1, r3
 800330e:	4413      	add	r3, r2
 8003310:	3361      	adds	r3, #97	; 0x61
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d17d      	bne.n	8003414 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	212c      	movs	r1, #44	; 0x2c
 800331e:	fb01 f303 	mul.w	r3, r1, r3
 8003322:	4413      	add	r3, r2
 8003324:	3360      	adds	r3, #96	; 0x60
 8003326:	2201      	movs	r2, #1
 8003328:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	212c      	movs	r1, #44	; 0x2c
 8003330:	fb01 f303 	mul.w	r3, r1, r3
 8003334:	4413      	add	r3, r2
 8003336:	333f      	adds	r3, #63	; 0x3f
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b02      	cmp	r3, #2
 800333c:	d00a      	beq.n	8003354 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	212c      	movs	r1, #44	; 0x2c
 8003344:	fb01 f303 	mul.w	r3, r1, r3
 8003348:	4413      	add	r3, r2
 800334a:	333f      	adds	r3, #63	; 0x3f
 800334c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800334e:	2b03      	cmp	r3, #3
 8003350:	f040 8100 	bne.w	8003554 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d113      	bne.n	8003384 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	212c      	movs	r1, #44	; 0x2c
 8003362:	fb01 f303 	mul.w	r3, r1, r3
 8003366:	4413      	add	r3, r2
 8003368:	3355      	adds	r3, #85	; 0x55
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	f083 0301 	eor.w	r3, r3, #1
 8003370:	b2d8      	uxtb	r0, r3
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	212c      	movs	r1, #44	; 0x2c
 8003378:	fb01 f303 	mul.w	r3, r1, r3
 800337c:	4413      	add	r3, r2
 800337e:	3355      	adds	r3, #85	; 0x55
 8003380:	4602      	mov	r2, r0
 8003382:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	2b01      	cmp	r3, #1
 800338a:	f040 80e3 	bne.w	8003554 <HCD_HC_OUT_IRQHandler+0x69c>
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	212c      	movs	r1, #44	; 0x2c
 8003394:	fb01 f303 	mul.w	r3, r1, r3
 8003398:	4413      	add	r3, r2
 800339a:	334c      	adds	r3, #76	; 0x4c
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 80d8 	beq.w	8003554 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	212c      	movs	r1, #44	; 0x2c
 80033aa:	fb01 f303 	mul.w	r3, r1, r3
 80033ae:	4413      	add	r3, r2
 80033b0:	334c      	adds	r3, #76	; 0x4c
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	202c      	movs	r0, #44	; 0x2c
 80033ba:	fb00 f202 	mul.w	r2, r0, r2
 80033be:	440a      	add	r2, r1
 80033c0:	3240      	adds	r2, #64	; 0x40
 80033c2:	8812      	ldrh	r2, [r2, #0]
 80033c4:	4413      	add	r3, r2
 80033c6:	3b01      	subs	r3, #1
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	202c      	movs	r0, #44	; 0x2c
 80033ce:	fb00 f202 	mul.w	r2, r0, r2
 80033d2:	440a      	add	r2, r1
 80033d4:	3240      	adds	r2, #64	; 0x40
 80033d6:	8812      	ldrh	r2, [r2, #0]
 80033d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 80b5 	beq.w	8003554 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	212c      	movs	r1, #44	; 0x2c
 80033f0:	fb01 f303 	mul.w	r3, r1, r3
 80033f4:	4413      	add	r3, r2
 80033f6:	3355      	adds	r3, #85	; 0x55
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	f083 0301 	eor.w	r3, r3, #1
 80033fe:	b2d8      	uxtb	r0, r3
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	212c      	movs	r1, #44	; 0x2c
 8003406:	fb01 f303 	mul.w	r3, r1, r3
 800340a:	4413      	add	r3, r2
 800340c:	3355      	adds	r3, #85	; 0x55
 800340e:	4602      	mov	r2, r0
 8003410:	701a      	strb	r2, [r3, #0]
 8003412:	e09f      	b.n	8003554 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	212c      	movs	r1, #44	; 0x2c
 800341a:	fb01 f303 	mul.w	r3, r1, r3
 800341e:	4413      	add	r3, r2
 8003420:	3361      	adds	r3, #97	; 0x61
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b03      	cmp	r3, #3
 8003426:	d109      	bne.n	800343c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	212c      	movs	r1, #44	; 0x2c
 800342e:	fb01 f303 	mul.w	r3, r1, r3
 8003432:	4413      	add	r3, r2
 8003434:	3360      	adds	r3, #96	; 0x60
 8003436:	2202      	movs	r2, #2
 8003438:	701a      	strb	r2, [r3, #0]
 800343a:	e08b      	b.n	8003554 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	212c      	movs	r1, #44	; 0x2c
 8003442:	fb01 f303 	mul.w	r3, r1, r3
 8003446:	4413      	add	r3, r2
 8003448:	3361      	adds	r3, #97	; 0x61
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b04      	cmp	r3, #4
 800344e:	d109      	bne.n	8003464 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	212c      	movs	r1, #44	; 0x2c
 8003456:	fb01 f303 	mul.w	r3, r1, r3
 800345a:	4413      	add	r3, r2
 800345c:	3360      	adds	r3, #96	; 0x60
 800345e:	2202      	movs	r2, #2
 8003460:	701a      	strb	r2, [r3, #0]
 8003462:	e077      	b.n	8003554 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	212c      	movs	r1, #44	; 0x2c
 800346a:	fb01 f303 	mul.w	r3, r1, r3
 800346e:	4413      	add	r3, r2
 8003470:	3361      	adds	r3, #97	; 0x61
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b05      	cmp	r3, #5
 8003476:	d109      	bne.n	800348c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	212c      	movs	r1, #44	; 0x2c
 800347e:	fb01 f303 	mul.w	r3, r1, r3
 8003482:	4413      	add	r3, r2
 8003484:	3360      	adds	r3, #96	; 0x60
 8003486:	2205      	movs	r2, #5
 8003488:	701a      	strb	r2, [r3, #0]
 800348a:	e063      	b.n	8003554 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	212c      	movs	r1, #44	; 0x2c
 8003492:	fb01 f303 	mul.w	r3, r1, r3
 8003496:	4413      	add	r3, r2
 8003498:	3361      	adds	r3, #97	; 0x61
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b06      	cmp	r3, #6
 800349e:	d009      	beq.n	80034b4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	212c      	movs	r1, #44	; 0x2c
 80034a6:	fb01 f303 	mul.w	r3, r1, r3
 80034aa:	4413      	add	r3, r2
 80034ac:	3361      	adds	r3, #97	; 0x61
 80034ae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	d14f      	bne.n	8003554 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	212c      	movs	r1, #44	; 0x2c
 80034ba:	fb01 f303 	mul.w	r3, r1, r3
 80034be:	4413      	add	r3, r2
 80034c0:	335c      	adds	r3, #92	; 0x5c
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	202c      	movs	r0, #44	; 0x2c
 80034cc:	fb00 f303 	mul.w	r3, r0, r3
 80034d0:	440b      	add	r3, r1
 80034d2:	335c      	adds	r3, #92	; 0x5c
 80034d4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	212c      	movs	r1, #44	; 0x2c
 80034dc:	fb01 f303 	mul.w	r3, r1, r3
 80034e0:	4413      	add	r3, r2
 80034e2:	335c      	adds	r3, #92	; 0x5c
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d912      	bls.n	8003510 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	212c      	movs	r1, #44	; 0x2c
 80034f0:	fb01 f303 	mul.w	r3, r1, r3
 80034f4:	4413      	add	r3, r2
 80034f6:	335c      	adds	r3, #92	; 0x5c
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	212c      	movs	r1, #44	; 0x2c
 8003502:	fb01 f303 	mul.w	r3, r1, r3
 8003506:	4413      	add	r3, r2
 8003508:	3360      	adds	r3, #96	; 0x60
 800350a:	2204      	movs	r2, #4
 800350c:	701a      	strb	r2, [r3, #0]
 800350e:	e021      	b.n	8003554 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	212c      	movs	r1, #44	; 0x2c
 8003516:	fb01 f303 	mul.w	r3, r1, r3
 800351a:	4413      	add	r3, r2
 800351c:	3360      	adds	r3, #96	; 0x60
 800351e:	2202      	movs	r2, #2
 8003520:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	015a      	lsls	r2, r3, #5
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	4413      	add	r3, r2
 800352a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003538:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003540:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	015a      	lsls	r2, r3, #5
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	4413      	add	r3, r2
 800354a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800354e:	461a      	mov	r2, r3
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	015a      	lsls	r2, r3, #5
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	4413      	add	r3, r2
 800355c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003560:	461a      	mov	r2, r3
 8003562:	2302      	movs	r3, #2
 8003564:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	b2d9      	uxtb	r1, r3
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	202c      	movs	r0, #44	; 0x2c
 8003570:	fb00 f303 	mul.w	r3, r0, r3
 8003574:	4413      	add	r3, r2
 8003576:	3360      	adds	r3, #96	; 0x60
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	461a      	mov	r2, r3
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f006 fced 	bl	8009f5c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003582:	bf00      	nop
 8003584:	3720      	adds	r7, #32
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b08a      	sub	sp, #40	; 0x28
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	0c5b      	lsrs	r3, r3, #17
 80035b0:	f003 030f 	and.w	r3, r3, #15
 80035b4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	091b      	lsrs	r3, r3, #4
 80035ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035be:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d004      	beq.n	80035d0 <HCD_RXQLVL_IRQHandler+0x46>
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	2b05      	cmp	r3, #5
 80035ca:	f000 80a9 	beq.w	8003720 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80035ce:	e0aa      	b.n	8003726 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f000 80a6 	beq.w	8003724 <HCD_RXQLVL_IRQHandler+0x19a>
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	212c      	movs	r1, #44	; 0x2c
 80035de:	fb01 f303 	mul.w	r3, r1, r3
 80035e2:	4413      	add	r3, r2
 80035e4:	3344      	adds	r3, #68	; 0x44
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 809b 	beq.w	8003724 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	212c      	movs	r1, #44	; 0x2c
 80035f4:	fb01 f303 	mul.w	r3, r1, r3
 80035f8:	4413      	add	r3, r2
 80035fa:	3350      	adds	r3, #80	; 0x50
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	441a      	add	r2, r3
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	202c      	movs	r0, #44	; 0x2c
 8003608:	fb00 f303 	mul.w	r3, r0, r3
 800360c:	440b      	add	r3, r1
 800360e:	334c      	adds	r3, #76	; 0x4c
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	429a      	cmp	r2, r3
 8003614:	d87a      	bhi.n	800370c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6818      	ldr	r0, [r3, #0]
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	212c      	movs	r1, #44	; 0x2c
 8003620:	fb01 f303 	mul.w	r3, r1, r3
 8003624:	4413      	add	r3, r2
 8003626:	3344      	adds	r3, #68	; 0x44
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	b292      	uxth	r2, r2
 800362e:	4619      	mov	r1, r3
 8003630:	f002 fbb2 	bl	8005d98 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	212c      	movs	r1, #44	; 0x2c
 800363a:	fb01 f303 	mul.w	r3, r1, r3
 800363e:	4413      	add	r3, r2
 8003640:	3344      	adds	r3, #68	; 0x44
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	441a      	add	r2, r3
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	202c      	movs	r0, #44	; 0x2c
 800364e:	fb00 f303 	mul.w	r3, r0, r3
 8003652:	440b      	add	r3, r1
 8003654:	3344      	adds	r3, #68	; 0x44
 8003656:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	212c      	movs	r1, #44	; 0x2c
 800365e:	fb01 f303 	mul.w	r3, r1, r3
 8003662:	4413      	add	r3, r2
 8003664:	3350      	adds	r3, #80	; 0x50
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	441a      	add	r2, r3
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	202c      	movs	r0, #44	; 0x2c
 8003672:	fb00 f303 	mul.w	r3, r0, r3
 8003676:	440b      	add	r3, r1
 8003678:	3350      	adds	r3, #80	; 0x50
 800367a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	015a      	lsls	r2, r3, #5
 8003680:	6a3b      	ldr	r3, [r7, #32]
 8003682:	4413      	add	r3, r2
 8003684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	0cdb      	lsrs	r3, r3, #19
 800368c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003690:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	212c      	movs	r1, #44	; 0x2c
 8003698:	fb01 f303 	mul.w	r3, r1, r3
 800369c:	4413      	add	r3, r2
 800369e:	3340      	adds	r3, #64	; 0x40
 80036a0:	881b      	ldrh	r3, [r3, #0]
 80036a2:	461a      	mov	r2, r3
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d13c      	bne.n	8003724 <HCD_RXQLVL_IRQHandler+0x19a>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d039      	beq.n	8003724 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	015a      	lsls	r2, r3, #5
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	4413      	add	r3, r2
 80036b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80036c6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80036ce:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	015a      	lsls	r2, r3, #5
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	4413      	add	r3, r2
 80036d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036dc:	461a      	mov	r2, r3
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	212c      	movs	r1, #44	; 0x2c
 80036e8:	fb01 f303 	mul.w	r3, r1, r3
 80036ec:	4413      	add	r3, r2
 80036ee:	3354      	adds	r3, #84	; 0x54
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	f083 0301 	eor.w	r3, r3, #1
 80036f6:	b2d8      	uxtb	r0, r3
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	212c      	movs	r1, #44	; 0x2c
 80036fe:	fb01 f303 	mul.w	r3, r1, r3
 8003702:	4413      	add	r3, r2
 8003704:	3354      	adds	r3, #84	; 0x54
 8003706:	4602      	mov	r2, r0
 8003708:	701a      	strb	r2, [r3, #0]
      break;
 800370a:	e00b      	b.n	8003724 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	212c      	movs	r1, #44	; 0x2c
 8003712:	fb01 f303 	mul.w	r3, r1, r3
 8003716:	4413      	add	r3, r2
 8003718:	3360      	adds	r3, #96	; 0x60
 800371a:	2204      	movs	r2, #4
 800371c:	701a      	strb	r2, [r3, #0]
      break;
 800371e:	e001      	b.n	8003724 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003720:	bf00      	nop
 8003722:	e000      	b.n	8003726 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003724:	bf00      	nop
  }
}
 8003726:	bf00      	nop
 8003728:	3728      	adds	r7, #40	; 0x28
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b086      	sub	sp, #24
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800375a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b02      	cmp	r3, #2
 8003764:	d10b      	bne.n	800377e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b01      	cmp	r3, #1
 800376e:	d102      	bne.n	8003776 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f006 fbd7 	bl	8009f24 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	f043 0302 	orr.w	r3, r3, #2
 800377c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b08      	cmp	r3, #8
 8003786:	d132      	bne.n	80037ee <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	f043 0308 	orr.w	r3, r3, #8
 800378e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f003 0304 	and.w	r3, r3, #4
 8003796:	2b04      	cmp	r3, #4
 8003798:	d126      	bne.n	80037e8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d113      	bne.n	80037ca <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80037a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037ac:	d106      	bne.n	80037bc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2102      	movs	r1, #2
 80037b4:	4618      	mov	r0, r3
 80037b6:	f002 fc5d 	bl	8006074 <USB_InitFSLSPClkSel>
 80037ba:	e011      	b.n	80037e0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2101      	movs	r1, #1
 80037c2:	4618      	mov	r0, r3
 80037c4:	f002 fc56 	bl	8006074 <USB_InitFSLSPClkSel>
 80037c8:	e00a      	b.n	80037e0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d106      	bne.n	80037e0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037d8:	461a      	mov	r2, r3
 80037da:	f64e 2360 	movw	r3, #60000	; 0xea60
 80037de:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f006 fbc9 	bl	8009f78 <HAL_HCD_PortEnabled_Callback>
 80037e6:	e002      	b.n	80037ee <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f006 fbd3 	bl	8009f94 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f003 0320 	and.w	r3, r3, #32
 80037f4:	2b20      	cmp	r3, #32
 80037f6:	d103      	bne.n	8003800 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	f043 0320 	orr.w	r3, r3, #32
 80037fe:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003806:	461a      	mov	r2, r3
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	6013      	str	r3, [r2, #0]
}
 800380c:	bf00      	nop
 800380e:	3718      	adds	r7, #24
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e12b      	b.n	8003a7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d106      	bne.n	8003840 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7fd f928 	bl	8000a90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2224      	movs	r2, #36	; 0x24
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0201 	bic.w	r2, r2, #1
 8003856:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003866:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003876:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003878:	f001 fa20 	bl	8004cbc <HAL_RCC_GetPCLK1Freq>
 800387c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	4a81      	ldr	r2, [pc, #516]	; (8003a88 <HAL_I2C_Init+0x274>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d807      	bhi.n	8003898 <HAL_I2C_Init+0x84>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4a80      	ldr	r2, [pc, #512]	; (8003a8c <HAL_I2C_Init+0x278>)
 800388c:	4293      	cmp	r3, r2
 800388e:	bf94      	ite	ls
 8003890:	2301      	movls	r3, #1
 8003892:	2300      	movhi	r3, #0
 8003894:	b2db      	uxtb	r3, r3
 8003896:	e006      	b.n	80038a6 <HAL_I2C_Init+0x92>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4a7d      	ldr	r2, [pc, #500]	; (8003a90 <HAL_I2C_Init+0x27c>)
 800389c:	4293      	cmp	r3, r2
 800389e:	bf94      	ite	ls
 80038a0:	2301      	movls	r3, #1
 80038a2:	2300      	movhi	r3, #0
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e0e7      	b.n	8003a7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	4a78      	ldr	r2, [pc, #480]	; (8003a94 <HAL_I2C_Init+0x280>)
 80038b2:	fba2 2303 	umull	r2, r3, r2, r3
 80038b6:	0c9b      	lsrs	r3, r3, #18
 80038b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	4a6a      	ldr	r2, [pc, #424]	; (8003a88 <HAL_I2C_Init+0x274>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d802      	bhi.n	80038e8 <HAL_I2C_Init+0xd4>
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	3301      	adds	r3, #1
 80038e6:	e009      	b.n	80038fc <HAL_I2C_Init+0xe8>
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038ee:	fb02 f303 	mul.w	r3, r2, r3
 80038f2:	4a69      	ldr	r2, [pc, #420]	; (8003a98 <HAL_I2C_Init+0x284>)
 80038f4:	fba2 2303 	umull	r2, r3, r2, r3
 80038f8:	099b      	lsrs	r3, r3, #6
 80038fa:	3301      	adds	r3, #1
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	6812      	ldr	r2, [r2, #0]
 8003900:	430b      	orrs	r3, r1
 8003902:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800390e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	495c      	ldr	r1, [pc, #368]	; (8003a88 <HAL_I2C_Init+0x274>)
 8003918:	428b      	cmp	r3, r1
 800391a:	d819      	bhi.n	8003950 <HAL_I2C_Init+0x13c>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	1e59      	subs	r1, r3, #1
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	fbb1 f3f3 	udiv	r3, r1, r3
 800392a:	1c59      	adds	r1, r3, #1
 800392c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003930:	400b      	ands	r3, r1
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00a      	beq.n	800394c <HAL_I2C_Init+0x138>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	1e59      	subs	r1, r3, #1
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	fbb1 f3f3 	udiv	r3, r1, r3
 8003944:	3301      	adds	r3, #1
 8003946:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800394a:	e051      	b.n	80039f0 <HAL_I2C_Init+0x1dc>
 800394c:	2304      	movs	r3, #4
 800394e:	e04f      	b.n	80039f0 <HAL_I2C_Init+0x1dc>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d111      	bne.n	800397c <HAL_I2C_Init+0x168>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	1e58      	subs	r0, r3, #1
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6859      	ldr	r1, [r3, #4]
 8003960:	460b      	mov	r3, r1
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	440b      	add	r3, r1
 8003966:	fbb0 f3f3 	udiv	r3, r0, r3
 800396a:	3301      	adds	r3, #1
 800396c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003970:	2b00      	cmp	r3, #0
 8003972:	bf0c      	ite	eq
 8003974:	2301      	moveq	r3, #1
 8003976:	2300      	movne	r3, #0
 8003978:	b2db      	uxtb	r3, r3
 800397a:	e012      	b.n	80039a2 <HAL_I2C_Init+0x18e>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	1e58      	subs	r0, r3, #1
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6859      	ldr	r1, [r3, #4]
 8003984:	460b      	mov	r3, r1
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	0099      	lsls	r1, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003992:	3301      	adds	r3, #1
 8003994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003998:	2b00      	cmp	r3, #0
 800399a:	bf0c      	ite	eq
 800399c:	2301      	moveq	r3, #1
 800399e:	2300      	movne	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <HAL_I2C_Init+0x196>
 80039a6:	2301      	movs	r3, #1
 80039a8:	e022      	b.n	80039f0 <HAL_I2C_Init+0x1dc>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10e      	bne.n	80039d0 <HAL_I2C_Init+0x1bc>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	1e58      	subs	r0, r3, #1
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6859      	ldr	r1, [r3, #4]
 80039ba:	460b      	mov	r3, r1
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	440b      	add	r3, r1
 80039c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80039c4:	3301      	adds	r3, #1
 80039c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ce:	e00f      	b.n	80039f0 <HAL_I2C_Init+0x1dc>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	1e58      	subs	r0, r3, #1
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6859      	ldr	r1, [r3, #4]
 80039d8:	460b      	mov	r3, r1
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	440b      	add	r3, r1
 80039de:	0099      	lsls	r1, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039e6:	3301      	adds	r3, #1
 80039e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039f0:	6879      	ldr	r1, [r7, #4]
 80039f2:	6809      	ldr	r1, [r1, #0]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69da      	ldr	r2, [r3, #28]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	6911      	ldr	r1, [r2, #16]
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	68d2      	ldr	r2, [r2, #12]
 8003a2a:	4311      	orrs	r1, r2
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6812      	ldr	r2, [r2, #0]
 8003a30:	430b      	orrs	r3, r1
 8003a32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	695a      	ldr	r2, [r3, #20]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0201 	orr.w	r2, r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	000186a0 	.word	0x000186a0
 8003a8c:	001e847f 	.word	0x001e847f
 8003a90:	003d08ff 	.word	0x003d08ff
 8003a94:	431bde83 	.word	0x431bde83
 8003a98:	10624dd3 	.word	0x10624dd3

08003a9c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b088      	sub	sp, #32
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e128      	b.n	8003d00 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d109      	bne.n	8003ace <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a90      	ldr	r2, [pc, #576]	; (8003d08 <HAL_I2S_Init+0x26c>)
 8003ac6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f7fd f857 	bl	8000b7c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	6812      	ldr	r2, [r2, #0]
 8003ae0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003ae4:	f023 030f 	bic.w	r3, r3, #15
 8003ae8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2202      	movs	r2, #2
 8003af0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d060      	beq.n	8003bbc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d102      	bne.n	8003b08 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003b02:	2310      	movs	r3, #16
 8003b04:	617b      	str	r3, [r7, #20]
 8003b06:	e001      	b.n	8003b0c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003b08:	2320      	movs	r3, #32
 8003b0a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	2b20      	cmp	r3, #32
 8003b12:	d802      	bhi.n	8003b1a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003b1a:	2001      	movs	r0, #1
 8003b1c:	f001 f9c4 	bl	8004ea8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003b20:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b2a:	d125      	bne.n	8003b78 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d010      	beq.n	8003b56 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b3e:	4613      	mov	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4413      	add	r3, r2
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	461a      	mov	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b50:	3305      	adds	r3, #5
 8003b52:	613b      	str	r3, [r7, #16]
 8003b54:	e01f      	b.n	8003b96 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b60:	4613      	mov	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	461a      	mov	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b72:	3305      	adds	r3, #5
 8003b74:	613b      	str	r3, [r7, #16]
 8003b76:	e00e      	b.n	8003b96 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b80:	4613      	mov	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	461a      	mov	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b92:	3305      	adds	r3, #5
 8003b94:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	4a5c      	ldr	r2, [pc, #368]	; (8003d0c <HAL_I2S_Init+0x270>)
 8003b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9e:	08db      	lsrs	r3, r3, #3
 8003ba0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	085b      	lsrs	r3, r3, #1
 8003bb2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	021b      	lsls	r3, r3, #8
 8003bb8:	61bb      	str	r3, [r7, #24]
 8003bba:	e003      	b.n	8003bc4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d902      	bls.n	8003bd0 <HAL_I2S_Init+0x134>
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	2bff      	cmp	r3, #255	; 0xff
 8003bce:	d907      	bls.n	8003be0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd4:	f043 0210 	orr.w	r2, r3, #16
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e08f      	b.n	8003d00 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	691a      	ldr	r2, [r3, #16]
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	ea42 0103 	orr.w	r1, r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	69fa      	ldr	r2, [r7, #28]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003bfe:	f023 030f 	bic.w	r3, r3, #15
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6851      	ldr	r1, [r2, #4]
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6892      	ldr	r2, [r2, #8]
 8003c0a:	4311      	orrs	r1, r2
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	68d2      	ldr	r2, [r2, #12]
 8003c10:	4311      	orrs	r1, r2
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	6992      	ldr	r2, [r2, #24]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c22:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d161      	bne.n	8003cf0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a38      	ldr	r2, [pc, #224]	; (8003d10 <HAL_I2S_Init+0x274>)
 8003c30:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a37      	ldr	r2, [pc, #220]	; (8003d14 <HAL_I2S_Init+0x278>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d101      	bne.n	8003c40 <HAL_I2S_Init+0x1a4>
 8003c3c:	4b36      	ldr	r3, [pc, #216]	; (8003d18 <HAL_I2S_Init+0x27c>)
 8003c3e:	e001      	b.n	8003c44 <HAL_I2S_Init+0x1a8>
 8003c40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	6812      	ldr	r2, [r2, #0]
 8003c4a:	4932      	ldr	r1, [pc, #200]	; (8003d14 <HAL_I2S_Init+0x278>)
 8003c4c:	428a      	cmp	r2, r1
 8003c4e:	d101      	bne.n	8003c54 <HAL_I2S_Init+0x1b8>
 8003c50:	4a31      	ldr	r2, [pc, #196]	; (8003d18 <HAL_I2S_Init+0x27c>)
 8003c52:	e001      	b.n	8003c58 <HAL_I2S_Init+0x1bc>
 8003c54:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003c58:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003c5c:	f023 030f 	bic.w	r3, r3, #15
 8003c60:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a2b      	ldr	r2, [pc, #172]	; (8003d14 <HAL_I2S_Init+0x278>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d101      	bne.n	8003c70 <HAL_I2S_Init+0x1d4>
 8003c6c:	4b2a      	ldr	r3, [pc, #168]	; (8003d18 <HAL_I2S_Init+0x27c>)
 8003c6e:	e001      	b.n	8003c74 <HAL_I2S_Init+0x1d8>
 8003c70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c74:	2202      	movs	r2, #2
 8003c76:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a25      	ldr	r2, [pc, #148]	; (8003d14 <HAL_I2S_Init+0x278>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d101      	bne.n	8003c86 <HAL_I2S_Init+0x1ea>
 8003c82:	4b25      	ldr	r3, [pc, #148]	; (8003d18 <HAL_I2S_Init+0x27c>)
 8003c84:	e001      	b.n	8003c8a <HAL_I2S_Init+0x1ee>
 8003c86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c8a:	69db      	ldr	r3, [r3, #28]
 8003c8c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c96:	d003      	beq.n	8003ca0 <HAL_I2S_Init+0x204>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d103      	bne.n	8003ca8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003ca0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ca4:	613b      	str	r3, [r7, #16]
 8003ca6:	e001      	b.n	8003cac <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	897b      	ldrh	r3, [r7, #10]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003cd8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a0d      	ldr	r2, [pc, #52]	; (8003d14 <HAL_I2S_Init+0x278>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d101      	bne.n	8003ce8 <HAL_I2S_Init+0x24c>
 8003ce4:	4b0c      	ldr	r3, [pc, #48]	; (8003d18 <HAL_I2S_Init+0x27c>)
 8003ce6:	e001      	b.n	8003cec <HAL_I2S_Init+0x250>
 8003ce8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cec:	897a      	ldrh	r2, [r7, #10]
 8003cee:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3720      	adds	r7, #32
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	08003e13 	.word	0x08003e13
 8003d0c:	cccccccd 	.word	0xcccccccd
 8003d10:	08003f29 	.word	0x08003f29
 8003d14:	40003800 	.word	0x40003800
 8003d18:	40003400 	.word	0x40003400

08003d1c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d64:	881a      	ldrh	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d70:	1c9a      	adds	r2, r3, #2
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10e      	bne.n	8003dac <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d9c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7ff ffb8 	bl	8003d1c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003dac:	bf00      	nop
 8003dae:	3708      	adds	r7, #8
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68da      	ldr	r2, [r3, #12]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc6:	b292      	uxth	r2, r2
 8003dc8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dce:	1c9a      	adds	r2, r3, #2
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10e      	bne.n	8003e0a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003dfa:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7ff ff93 	bl	8003d30 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003e0a:	bf00      	nop
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b086      	sub	sp, #24
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b04      	cmp	r3, #4
 8003e2c:	d13a      	bne.n	8003ea4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d109      	bne.n	8003e4c <I2S_IRQHandler+0x3a>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e42:	2b40      	cmp	r3, #64	; 0x40
 8003e44:	d102      	bne.n	8003e4c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7ff ffb4 	bl	8003db4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e52:	2b40      	cmp	r3, #64	; 0x40
 8003e54:	d126      	bne.n	8003ea4 <I2S_IRQHandler+0x92>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f003 0320 	and.w	r3, r3, #32
 8003e60:	2b20      	cmp	r3, #32
 8003e62:	d11f      	bne.n	8003ea4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e72:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003e74:	2300      	movs	r3, #0
 8003e76:	613b      	str	r3, [r7, #16]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	613b      	str	r3, [r7, #16]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	613b      	str	r3, [r7, #16]
 8003e88:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e96:	f043 0202 	orr.w	r2, r3, #2
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7ff ff50 	bl	8003d44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b03      	cmp	r3, #3
 8003eae:	d136      	bne.n	8003f1e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d109      	bne.n	8003ece <I2S_IRQHandler+0xbc>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec4:	2b80      	cmp	r3, #128	; 0x80
 8003ec6:	d102      	bne.n	8003ece <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f7ff ff45 	bl	8003d58 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f003 0308 	and.w	r3, r3, #8
 8003ed4:	2b08      	cmp	r3, #8
 8003ed6:	d122      	bne.n	8003f1e <I2S_IRQHandler+0x10c>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f003 0320 	and.w	r3, r3, #32
 8003ee2:	2b20      	cmp	r3, #32
 8003ee4:	d11b      	bne.n	8003f1e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ef4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f10:	f043 0204 	orr.w	r2, r3, #4
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f7ff ff13 	bl	8003d44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f1e:	bf00      	nop
 8003f20:	3718      	adds	r7, #24
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
	...

08003f28 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b088      	sub	sp, #32
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a92      	ldr	r2, [pc, #584]	; (8004188 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d101      	bne.n	8003f46 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003f42:	4b92      	ldr	r3, [pc, #584]	; (800418c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f44:	e001      	b.n	8003f4a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003f46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a8b      	ldr	r2, [pc, #556]	; (8004188 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d101      	bne.n	8003f64 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003f60:	4b8a      	ldr	r3, [pc, #552]	; (800418c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f62:	e001      	b.n	8003f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003f64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f74:	d004      	beq.n	8003f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f040 8099 	bne.w	80040b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d107      	bne.n	8003f9a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d002      	beq.n	8003f9a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 f925 	bl	80041e4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d107      	bne.n	8003fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d002      	beq.n	8003fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f9c8 	bl	8004344 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fba:	2b40      	cmp	r3, #64	; 0x40
 8003fbc:	d13a      	bne.n	8004034 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	f003 0320 	and.w	r3, r3, #32
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d035      	beq.n	8004034 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a6e      	ldr	r2, [pc, #440]	; (8004188 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d101      	bne.n	8003fd6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003fd2:	4b6e      	ldr	r3, [pc, #440]	; (800418c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fd4:	e001      	b.n	8003fda <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003fd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4969      	ldr	r1, [pc, #420]	; (8004188 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fe2:	428b      	cmp	r3, r1
 8003fe4:	d101      	bne.n	8003fea <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003fe6:	4b69      	ldr	r3, [pc, #420]	; (800418c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fe8:	e001      	b.n	8003fee <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003fea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ff2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004002:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004004:	2300      	movs	r3, #0
 8004006:	60fb      	str	r3, [r7, #12]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	60fb      	str	r3, [r7, #12]
 8004018:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004026:	f043 0202 	orr.w	r2, r3, #2
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7ff fe88 	bl	8003d44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	f003 0308 	and.w	r3, r3, #8
 800403a:	2b08      	cmp	r3, #8
 800403c:	f040 80c3 	bne.w	80041c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f003 0320 	and.w	r3, r3, #32
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 80bd 	beq.w	80041c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800405a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a49      	ldr	r2, [pc, #292]	; (8004188 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d101      	bne.n	800406a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004066:	4b49      	ldr	r3, [pc, #292]	; (800418c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004068:	e001      	b.n	800406e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800406a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4944      	ldr	r1, [pc, #272]	; (8004188 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004076:	428b      	cmp	r3, r1
 8004078:	d101      	bne.n	800407e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800407a:	4b44      	ldr	r3, [pc, #272]	; (800418c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800407c:	e001      	b.n	8004082 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800407e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004082:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004086:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004088:	2300      	movs	r3, #0
 800408a:	60bb      	str	r3, [r7, #8]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	60bb      	str	r3, [r7, #8]
 8004094:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a2:	f043 0204 	orr.w	r2, r3, #4
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7ff fe4a 	bl	8003d44 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040b0:	e089      	b.n	80041c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d107      	bne.n	80040cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d002      	beq.n	80040cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f8be 	bl	8004248 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d107      	bne.n	80040e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d002      	beq.n	80040e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f8fd 	bl	80042e0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ec:	2b40      	cmp	r3, #64	; 0x40
 80040ee:	d12f      	bne.n	8004150 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d02a      	beq.n	8004150 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004108:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a1e      	ldr	r2, [pc, #120]	; (8004188 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d101      	bne.n	8004118 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004114:	4b1d      	ldr	r3, [pc, #116]	; (800418c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004116:	e001      	b.n	800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004118:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4919      	ldr	r1, [pc, #100]	; (8004188 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004124:	428b      	cmp	r3, r1
 8004126:	d101      	bne.n	800412c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004128:	4b18      	ldr	r3, [pc, #96]	; (800418c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800412a:	e001      	b.n	8004130 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800412c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004130:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004134:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004142:	f043 0202 	orr.w	r2, r3, #2
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7ff fdfa 	bl	8003d44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	f003 0308 	and.w	r3, r3, #8
 8004156:	2b08      	cmp	r3, #8
 8004158:	d136      	bne.n	80041c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	f003 0320 	and.w	r3, r3, #32
 8004160:	2b00      	cmp	r3, #0
 8004162:	d031      	beq.n	80041c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a07      	ldr	r2, [pc, #28]	; (8004188 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d101      	bne.n	8004172 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800416e:	4b07      	ldr	r3, [pc, #28]	; (800418c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004170:	e001      	b.n	8004176 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004172:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4902      	ldr	r1, [pc, #8]	; (8004188 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800417e:	428b      	cmp	r3, r1
 8004180:	d106      	bne.n	8004190 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004182:	4b02      	ldr	r3, [pc, #8]	; (800418c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004184:	e006      	b.n	8004194 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004186:	bf00      	nop
 8004188:	40003800 	.word	0x40003800
 800418c:	40003400 	.word	0x40003400
 8004190:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004194:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004198:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041a8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b6:	f043 0204 	orr.w	r2, r3, #4
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7ff fdc0 	bl	8003d44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041c4:	e000      	b.n	80041c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80041c6:	bf00      	nop
}
 80041c8:	bf00      	nop
 80041ca:	3720      	adds	r7, #32
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	1c99      	adds	r1, r3, #2
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6251      	str	r1, [r2, #36]	; 0x24
 80041f6:	881a      	ldrh	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004202:	b29b      	uxth	r3, r3
 8004204:	3b01      	subs	r3, #1
 8004206:	b29a      	uxth	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004210:	b29b      	uxth	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d113      	bne.n	800423e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004224:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800422a:	b29b      	uxth	r3, r3
 800422c:	2b00      	cmp	r3, #0
 800422e:	d106      	bne.n	800423e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7ff ffc9 	bl	80041d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800423e:	bf00      	nop
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
	...

08004248 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004254:	1c99      	adds	r1, r3, #2
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	6251      	str	r1, [r2, #36]	; 0x24
 800425a:	8819      	ldrh	r1, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a1d      	ldr	r2, [pc, #116]	; (80042d8 <I2SEx_TxISR_I2SExt+0x90>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d101      	bne.n	800426a <I2SEx_TxISR_I2SExt+0x22>
 8004266:	4b1d      	ldr	r3, [pc, #116]	; (80042dc <I2SEx_TxISR_I2SExt+0x94>)
 8004268:	e001      	b.n	800426e <I2SEx_TxISR_I2SExt+0x26>
 800426a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800426e:	460a      	mov	r2, r1
 8004270:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004276:	b29b      	uxth	r3, r3
 8004278:	3b01      	subs	r3, #1
 800427a:	b29a      	uxth	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004284:	b29b      	uxth	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d121      	bne.n	80042ce <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a12      	ldr	r2, [pc, #72]	; (80042d8 <I2SEx_TxISR_I2SExt+0x90>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d101      	bne.n	8004298 <I2SEx_TxISR_I2SExt+0x50>
 8004294:	4b11      	ldr	r3, [pc, #68]	; (80042dc <I2SEx_TxISR_I2SExt+0x94>)
 8004296:	e001      	b.n	800429c <I2SEx_TxISR_I2SExt+0x54>
 8004298:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	490d      	ldr	r1, [pc, #52]	; (80042d8 <I2SEx_TxISR_I2SExt+0x90>)
 80042a4:	428b      	cmp	r3, r1
 80042a6:	d101      	bne.n	80042ac <I2SEx_TxISR_I2SExt+0x64>
 80042a8:	4b0c      	ldr	r3, [pc, #48]	; (80042dc <I2SEx_TxISR_I2SExt+0x94>)
 80042aa:	e001      	b.n	80042b0 <I2SEx_TxISR_I2SExt+0x68>
 80042ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042b4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d106      	bne.n	80042ce <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f7ff ff81 	bl	80041d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042ce:	bf00      	nop
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40003800 	.word	0x40003800
 80042dc:	40003400 	.word	0x40003400

080042e0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68d8      	ldr	r0, [r3, #12]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f2:	1c99      	adds	r1, r3, #2
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80042f8:	b282      	uxth	r2, r0
 80042fa:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004300:	b29b      	uxth	r3, r3
 8004302:	3b01      	subs	r3, #1
 8004304:	b29a      	uxth	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800430e:	b29b      	uxth	r3, r3
 8004310:	2b00      	cmp	r3, #0
 8004312:	d113      	bne.n	800433c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004322:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004328:	b29b      	uxth	r3, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d106      	bne.n	800433c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f7ff ff4a 	bl	80041d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800433c:	bf00      	nop
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a20      	ldr	r2, [pc, #128]	; (80043d4 <I2SEx_RxISR_I2SExt+0x90>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d101      	bne.n	800435a <I2SEx_RxISR_I2SExt+0x16>
 8004356:	4b20      	ldr	r3, [pc, #128]	; (80043d8 <I2SEx_RxISR_I2SExt+0x94>)
 8004358:	e001      	b.n	800435e <I2SEx_RxISR_I2SExt+0x1a>
 800435a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800435e:	68d8      	ldr	r0, [r3, #12]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004364:	1c99      	adds	r1, r3, #2
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	62d1      	str	r1, [r2, #44]	; 0x2c
 800436a:	b282      	uxth	r2, r0
 800436c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004372:	b29b      	uxth	r3, r3
 8004374:	3b01      	subs	r3, #1
 8004376:	b29a      	uxth	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004380:	b29b      	uxth	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d121      	bne.n	80043ca <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a12      	ldr	r2, [pc, #72]	; (80043d4 <I2SEx_RxISR_I2SExt+0x90>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d101      	bne.n	8004394 <I2SEx_RxISR_I2SExt+0x50>
 8004390:	4b11      	ldr	r3, [pc, #68]	; (80043d8 <I2SEx_RxISR_I2SExt+0x94>)
 8004392:	e001      	b.n	8004398 <I2SEx_RxISR_I2SExt+0x54>
 8004394:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004398:	685a      	ldr	r2, [r3, #4]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	490d      	ldr	r1, [pc, #52]	; (80043d4 <I2SEx_RxISR_I2SExt+0x90>)
 80043a0:	428b      	cmp	r3, r1
 80043a2:	d101      	bne.n	80043a8 <I2SEx_RxISR_I2SExt+0x64>
 80043a4:	4b0c      	ldr	r3, [pc, #48]	; (80043d8 <I2SEx_RxISR_I2SExt+0x94>)
 80043a6:	e001      	b.n	80043ac <I2SEx_RxISR_I2SExt+0x68>
 80043a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80043b0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d106      	bne.n	80043ca <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f7ff ff03 	bl	80041d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043ca:	bf00      	nop
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	40003800 	.word	0x40003800
 80043d8:	40003400 	.word	0x40003400

080043dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e267      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d075      	beq.n	80044e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043fa:	4b88      	ldr	r3, [pc, #544]	; (800461c <HAL_RCC_OscConfig+0x240>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f003 030c 	and.w	r3, r3, #12
 8004402:	2b04      	cmp	r3, #4
 8004404:	d00c      	beq.n	8004420 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004406:	4b85      	ldr	r3, [pc, #532]	; (800461c <HAL_RCC_OscConfig+0x240>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800440e:	2b08      	cmp	r3, #8
 8004410:	d112      	bne.n	8004438 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004412:	4b82      	ldr	r3, [pc, #520]	; (800461c <HAL_RCC_OscConfig+0x240>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800441a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800441e:	d10b      	bne.n	8004438 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004420:	4b7e      	ldr	r3, [pc, #504]	; (800461c <HAL_RCC_OscConfig+0x240>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d05b      	beq.n	80044e4 <HAL_RCC_OscConfig+0x108>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d157      	bne.n	80044e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e242      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004440:	d106      	bne.n	8004450 <HAL_RCC_OscConfig+0x74>
 8004442:	4b76      	ldr	r3, [pc, #472]	; (800461c <HAL_RCC_OscConfig+0x240>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a75      	ldr	r2, [pc, #468]	; (800461c <HAL_RCC_OscConfig+0x240>)
 8004448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800444c:	6013      	str	r3, [r2, #0]
 800444e:	e01d      	b.n	800448c <HAL_RCC_OscConfig+0xb0>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004458:	d10c      	bne.n	8004474 <HAL_RCC_OscConfig+0x98>
 800445a:	4b70      	ldr	r3, [pc, #448]	; (800461c <HAL_RCC_OscConfig+0x240>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a6f      	ldr	r2, [pc, #444]	; (800461c <HAL_RCC_OscConfig+0x240>)
 8004460:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004464:	6013      	str	r3, [r2, #0]
 8004466:	4b6d      	ldr	r3, [pc, #436]	; (800461c <HAL_RCC_OscConfig+0x240>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a6c      	ldr	r2, [pc, #432]	; (800461c <HAL_RCC_OscConfig+0x240>)
 800446c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004470:	6013      	str	r3, [r2, #0]
 8004472:	e00b      	b.n	800448c <HAL_RCC_OscConfig+0xb0>
 8004474:	4b69      	ldr	r3, [pc, #420]	; (800461c <HAL_RCC_OscConfig+0x240>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a68      	ldr	r2, [pc, #416]	; (800461c <HAL_RCC_OscConfig+0x240>)
 800447a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800447e:	6013      	str	r3, [r2, #0]
 8004480:	4b66      	ldr	r3, [pc, #408]	; (800461c <HAL_RCC_OscConfig+0x240>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a65      	ldr	r2, [pc, #404]	; (800461c <HAL_RCC_OscConfig+0x240>)
 8004486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800448a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d013      	beq.n	80044bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004494:	f7fc ff94 	bl	80013c0 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800449c:	f7fc ff90 	bl	80013c0 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b64      	cmp	r3, #100	; 0x64
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e207      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ae:	4b5b      	ldr	r3, [pc, #364]	; (800461c <HAL_RCC_OscConfig+0x240>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0f0      	beq.n	800449c <HAL_RCC_OscConfig+0xc0>
 80044ba:	e014      	b.n	80044e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044bc:	f7fc ff80 	bl	80013c0 <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044c4:	f7fc ff7c 	bl	80013c0 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b64      	cmp	r3, #100	; 0x64
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e1f3      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044d6:	4b51      	ldr	r3, [pc, #324]	; (800461c <HAL_RCC_OscConfig+0x240>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1f0      	bne.n	80044c4 <HAL_RCC_OscConfig+0xe8>
 80044e2:	e000      	b.n	80044e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d063      	beq.n	80045ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044f2:	4b4a      	ldr	r3, [pc, #296]	; (800461c <HAL_RCC_OscConfig+0x240>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f003 030c 	and.w	r3, r3, #12
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00b      	beq.n	8004516 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044fe:	4b47      	ldr	r3, [pc, #284]	; (800461c <HAL_RCC_OscConfig+0x240>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004506:	2b08      	cmp	r3, #8
 8004508:	d11c      	bne.n	8004544 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800450a:	4b44      	ldr	r3, [pc, #272]	; (800461c <HAL_RCC_OscConfig+0x240>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d116      	bne.n	8004544 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004516:	4b41      	ldr	r3, [pc, #260]	; (800461c <HAL_RCC_OscConfig+0x240>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d005      	beq.n	800452e <HAL_RCC_OscConfig+0x152>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d001      	beq.n	800452e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e1c7      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800452e:	4b3b      	ldr	r3, [pc, #236]	; (800461c <HAL_RCC_OscConfig+0x240>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	4937      	ldr	r1, [pc, #220]	; (800461c <HAL_RCC_OscConfig+0x240>)
 800453e:	4313      	orrs	r3, r2
 8004540:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004542:	e03a      	b.n	80045ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d020      	beq.n	800458e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800454c:	4b34      	ldr	r3, [pc, #208]	; (8004620 <HAL_RCC_OscConfig+0x244>)
 800454e:	2201      	movs	r2, #1
 8004550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004552:	f7fc ff35 	bl	80013c0 <HAL_GetTick>
 8004556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004558:	e008      	b.n	800456c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800455a:	f7fc ff31 	bl	80013c0 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d901      	bls.n	800456c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e1a8      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800456c:	4b2b      	ldr	r3, [pc, #172]	; (800461c <HAL_RCC_OscConfig+0x240>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d0f0      	beq.n	800455a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004578:	4b28      	ldr	r3, [pc, #160]	; (800461c <HAL_RCC_OscConfig+0x240>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	4925      	ldr	r1, [pc, #148]	; (800461c <HAL_RCC_OscConfig+0x240>)
 8004588:	4313      	orrs	r3, r2
 800458a:	600b      	str	r3, [r1, #0]
 800458c:	e015      	b.n	80045ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800458e:	4b24      	ldr	r3, [pc, #144]	; (8004620 <HAL_RCC_OscConfig+0x244>)
 8004590:	2200      	movs	r2, #0
 8004592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004594:	f7fc ff14 	bl	80013c0 <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800459c:	f7fc ff10 	bl	80013c0 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e187      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ae:	4b1b      	ldr	r3, [pc, #108]	; (800461c <HAL_RCC_OscConfig+0x240>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1f0      	bne.n	800459c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0308 	and.w	r3, r3, #8
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d036      	beq.n	8004634 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d016      	beq.n	80045fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045ce:	4b15      	ldr	r3, [pc, #84]	; (8004624 <HAL_RCC_OscConfig+0x248>)
 80045d0:	2201      	movs	r2, #1
 80045d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d4:	f7fc fef4 	bl	80013c0 <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045da:	e008      	b.n	80045ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045dc:	f7fc fef0 	bl	80013c0 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e167      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ee:	4b0b      	ldr	r3, [pc, #44]	; (800461c <HAL_RCC_OscConfig+0x240>)
 80045f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d0f0      	beq.n	80045dc <HAL_RCC_OscConfig+0x200>
 80045fa:	e01b      	b.n	8004634 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045fc:	4b09      	ldr	r3, [pc, #36]	; (8004624 <HAL_RCC_OscConfig+0x248>)
 80045fe:	2200      	movs	r2, #0
 8004600:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004602:	f7fc fedd 	bl	80013c0 <HAL_GetTick>
 8004606:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004608:	e00e      	b.n	8004628 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800460a:	f7fc fed9 	bl	80013c0 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d907      	bls.n	8004628 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e150      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
 800461c:	40023800 	.word	0x40023800
 8004620:	42470000 	.word	0x42470000
 8004624:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004628:	4b88      	ldr	r3, [pc, #544]	; (800484c <HAL_RCC_OscConfig+0x470>)
 800462a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1ea      	bne.n	800460a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b00      	cmp	r3, #0
 800463e:	f000 8097 	beq.w	8004770 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004642:	2300      	movs	r3, #0
 8004644:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004646:	4b81      	ldr	r3, [pc, #516]	; (800484c <HAL_RCC_OscConfig+0x470>)
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10f      	bne.n	8004672 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004652:	2300      	movs	r3, #0
 8004654:	60bb      	str	r3, [r7, #8]
 8004656:	4b7d      	ldr	r3, [pc, #500]	; (800484c <HAL_RCC_OscConfig+0x470>)
 8004658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465a:	4a7c      	ldr	r2, [pc, #496]	; (800484c <HAL_RCC_OscConfig+0x470>)
 800465c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004660:	6413      	str	r3, [r2, #64]	; 0x40
 8004662:	4b7a      	ldr	r3, [pc, #488]	; (800484c <HAL_RCC_OscConfig+0x470>)
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800466a:	60bb      	str	r3, [r7, #8]
 800466c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800466e:	2301      	movs	r3, #1
 8004670:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004672:	4b77      	ldr	r3, [pc, #476]	; (8004850 <HAL_RCC_OscConfig+0x474>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467a:	2b00      	cmp	r3, #0
 800467c:	d118      	bne.n	80046b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800467e:	4b74      	ldr	r3, [pc, #464]	; (8004850 <HAL_RCC_OscConfig+0x474>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a73      	ldr	r2, [pc, #460]	; (8004850 <HAL_RCC_OscConfig+0x474>)
 8004684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004688:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800468a:	f7fc fe99 	bl	80013c0 <HAL_GetTick>
 800468e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004690:	e008      	b.n	80046a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004692:	f7fc fe95 	bl	80013c0 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e10c      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a4:	4b6a      	ldr	r3, [pc, #424]	; (8004850 <HAL_RCC_OscConfig+0x474>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0f0      	beq.n	8004692 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d106      	bne.n	80046c6 <HAL_RCC_OscConfig+0x2ea>
 80046b8:	4b64      	ldr	r3, [pc, #400]	; (800484c <HAL_RCC_OscConfig+0x470>)
 80046ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046bc:	4a63      	ldr	r2, [pc, #396]	; (800484c <HAL_RCC_OscConfig+0x470>)
 80046be:	f043 0301 	orr.w	r3, r3, #1
 80046c2:	6713      	str	r3, [r2, #112]	; 0x70
 80046c4:	e01c      	b.n	8004700 <HAL_RCC_OscConfig+0x324>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	2b05      	cmp	r3, #5
 80046cc:	d10c      	bne.n	80046e8 <HAL_RCC_OscConfig+0x30c>
 80046ce:	4b5f      	ldr	r3, [pc, #380]	; (800484c <HAL_RCC_OscConfig+0x470>)
 80046d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d2:	4a5e      	ldr	r2, [pc, #376]	; (800484c <HAL_RCC_OscConfig+0x470>)
 80046d4:	f043 0304 	orr.w	r3, r3, #4
 80046d8:	6713      	str	r3, [r2, #112]	; 0x70
 80046da:	4b5c      	ldr	r3, [pc, #368]	; (800484c <HAL_RCC_OscConfig+0x470>)
 80046dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046de:	4a5b      	ldr	r2, [pc, #364]	; (800484c <HAL_RCC_OscConfig+0x470>)
 80046e0:	f043 0301 	orr.w	r3, r3, #1
 80046e4:	6713      	str	r3, [r2, #112]	; 0x70
 80046e6:	e00b      	b.n	8004700 <HAL_RCC_OscConfig+0x324>
 80046e8:	4b58      	ldr	r3, [pc, #352]	; (800484c <HAL_RCC_OscConfig+0x470>)
 80046ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ec:	4a57      	ldr	r2, [pc, #348]	; (800484c <HAL_RCC_OscConfig+0x470>)
 80046ee:	f023 0301 	bic.w	r3, r3, #1
 80046f2:	6713      	str	r3, [r2, #112]	; 0x70
 80046f4:	4b55      	ldr	r3, [pc, #340]	; (800484c <HAL_RCC_OscConfig+0x470>)
 80046f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f8:	4a54      	ldr	r2, [pc, #336]	; (800484c <HAL_RCC_OscConfig+0x470>)
 80046fa:	f023 0304 	bic.w	r3, r3, #4
 80046fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d015      	beq.n	8004734 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004708:	f7fc fe5a 	bl	80013c0 <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800470e:	e00a      	b.n	8004726 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004710:	f7fc fe56 	bl	80013c0 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	f241 3288 	movw	r2, #5000	; 0x1388
 800471e:	4293      	cmp	r3, r2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e0cb      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004726:	4b49      	ldr	r3, [pc, #292]	; (800484c <HAL_RCC_OscConfig+0x470>)
 8004728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d0ee      	beq.n	8004710 <HAL_RCC_OscConfig+0x334>
 8004732:	e014      	b.n	800475e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004734:	f7fc fe44 	bl	80013c0 <HAL_GetTick>
 8004738:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800473a:	e00a      	b.n	8004752 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800473c:	f7fc fe40 	bl	80013c0 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	f241 3288 	movw	r2, #5000	; 0x1388
 800474a:	4293      	cmp	r3, r2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e0b5      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004752:	4b3e      	ldr	r3, [pc, #248]	; (800484c <HAL_RCC_OscConfig+0x470>)
 8004754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1ee      	bne.n	800473c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800475e:	7dfb      	ldrb	r3, [r7, #23]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d105      	bne.n	8004770 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004764:	4b39      	ldr	r3, [pc, #228]	; (800484c <HAL_RCC_OscConfig+0x470>)
 8004766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004768:	4a38      	ldr	r2, [pc, #224]	; (800484c <HAL_RCC_OscConfig+0x470>)
 800476a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800476e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 80a1 	beq.w	80048bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800477a:	4b34      	ldr	r3, [pc, #208]	; (800484c <HAL_RCC_OscConfig+0x470>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f003 030c 	and.w	r3, r3, #12
 8004782:	2b08      	cmp	r3, #8
 8004784:	d05c      	beq.n	8004840 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	2b02      	cmp	r3, #2
 800478c:	d141      	bne.n	8004812 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800478e:	4b31      	ldr	r3, [pc, #196]	; (8004854 <HAL_RCC_OscConfig+0x478>)
 8004790:	2200      	movs	r2, #0
 8004792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004794:	f7fc fe14 	bl	80013c0 <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800479c:	f7fc fe10 	bl	80013c0 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e087      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ae:	4b27      	ldr	r3, [pc, #156]	; (800484c <HAL_RCC_OscConfig+0x470>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1f0      	bne.n	800479c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	69da      	ldr	r2, [r3, #28]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	431a      	orrs	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	019b      	lsls	r3, r3, #6
 80047ca:	431a      	orrs	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d0:	085b      	lsrs	r3, r3, #1
 80047d2:	3b01      	subs	r3, #1
 80047d4:	041b      	lsls	r3, r3, #16
 80047d6:	431a      	orrs	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047dc:	061b      	lsls	r3, r3, #24
 80047de:	491b      	ldr	r1, [pc, #108]	; (800484c <HAL_RCC_OscConfig+0x470>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047e4:	4b1b      	ldr	r3, [pc, #108]	; (8004854 <HAL_RCC_OscConfig+0x478>)
 80047e6:	2201      	movs	r2, #1
 80047e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ea:	f7fc fde9 	bl	80013c0 <HAL_GetTick>
 80047ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047f0:	e008      	b.n	8004804 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047f2:	f7fc fde5 	bl	80013c0 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d901      	bls.n	8004804 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e05c      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004804:	4b11      	ldr	r3, [pc, #68]	; (800484c <HAL_RCC_OscConfig+0x470>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d0f0      	beq.n	80047f2 <HAL_RCC_OscConfig+0x416>
 8004810:	e054      	b.n	80048bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004812:	4b10      	ldr	r3, [pc, #64]	; (8004854 <HAL_RCC_OscConfig+0x478>)
 8004814:	2200      	movs	r2, #0
 8004816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004818:	f7fc fdd2 	bl	80013c0 <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800481e:	e008      	b.n	8004832 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004820:	f7fc fdce 	bl	80013c0 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e045      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004832:	4b06      	ldr	r3, [pc, #24]	; (800484c <HAL_RCC_OscConfig+0x470>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1f0      	bne.n	8004820 <HAL_RCC_OscConfig+0x444>
 800483e:	e03d      	b.n	80048bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d107      	bne.n	8004858 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e038      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
 800484c:	40023800 	.word	0x40023800
 8004850:	40007000 	.word	0x40007000
 8004854:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004858:	4b1b      	ldr	r3, [pc, #108]	; (80048c8 <HAL_RCC_OscConfig+0x4ec>)
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d028      	beq.n	80048b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004870:	429a      	cmp	r2, r3
 8004872:	d121      	bne.n	80048b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800487e:	429a      	cmp	r2, r3
 8004880:	d11a      	bne.n	80048b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004888:	4013      	ands	r3, r2
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800488e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004890:	4293      	cmp	r3, r2
 8004892:	d111      	bne.n	80048b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489e:	085b      	lsrs	r3, r3, #1
 80048a0:	3b01      	subs	r3, #1
 80048a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d107      	bne.n	80048b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d001      	beq.n	80048bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e000      	b.n	80048be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3718      	adds	r7, #24
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	40023800 	.word	0x40023800

080048cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d101      	bne.n	80048e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e0cc      	b.n	8004a7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048e0:	4b68      	ldr	r3, [pc, #416]	; (8004a84 <HAL_RCC_ClockConfig+0x1b8>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0307 	and.w	r3, r3, #7
 80048e8:	683a      	ldr	r2, [r7, #0]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d90c      	bls.n	8004908 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ee:	4b65      	ldr	r3, [pc, #404]	; (8004a84 <HAL_RCC_ClockConfig+0x1b8>)
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	b2d2      	uxtb	r2, r2
 80048f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048f6:	4b63      	ldr	r3, [pc, #396]	; (8004a84 <HAL_RCC_ClockConfig+0x1b8>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0307 	and.w	r3, r3, #7
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	429a      	cmp	r2, r3
 8004902:	d001      	beq.n	8004908 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e0b8      	b.n	8004a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d020      	beq.n	8004956 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0304 	and.w	r3, r3, #4
 800491c:	2b00      	cmp	r3, #0
 800491e:	d005      	beq.n	800492c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004920:	4b59      	ldr	r3, [pc, #356]	; (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	4a58      	ldr	r2, [pc, #352]	; (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 8004926:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800492a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0308 	and.w	r3, r3, #8
 8004934:	2b00      	cmp	r3, #0
 8004936:	d005      	beq.n	8004944 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004938:	4b53      	ldr	r3, [pc, #332]	; (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	4a52      	ldr	r2, [pc, #328]	; (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 800493e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004942:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004944:	4b50      	ldr	r3, [pc, #320]	; (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	494d      	ldr	r1, [pc, #308]	; (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 8004952:	4313      	orrs	r3, r2
 8004954:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	d044      	beq.n	80049ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d107      	bne.n	800497a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800496a:	4b47      	ldr	r3, [pc, #284]	; (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d119      	bne.n	80049aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e07f      	b.n	8004a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	2b02      	cmp	r3, #2
 8004980:	d003      	beq.n	800498a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004986:	2b03      	cmp	r3, #3
 8004988:	d107      	bne.n	800499a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800498a:	4b3f      	ldr	r3, [pc, #252]	; (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d109      	bne.n	80049aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e06f      	b.n	8004a7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800499a:	4b3b      	ldr	r3, [pc, #236]	; (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e067      	b.n	8004a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049aa:	4b37      	ldr	r3, [pc, #220]	; (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f023 0203 	bic.w	r2, r3, #3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	4934      	ldr	r1, [pc, #208]	; (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049bc:	f7fc fd00 	bl	80013c0 <HAL_GetTick>
 80049c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049c2:	e00a      	b.n	80049da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049c4:	f7fc fcfc 	bl	80013c0 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e04f      	b.n	8004a7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049da:	4b2b      	ldr	r3, [pc, #172]	; (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f003 020c 	and.w	r2, r3, #12
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d1eb      	bne.n	80049c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049ec:	4b25      	ldr	r3, [pc, #148]	; (8004a84 <HAL_RCC_ClockConfig+0x1b8>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0307 	and.w	r3, r3, #7
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d20c      	bcs.n	8004a14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049fa:	4b22      	ldr	r3, [pc, #136]	; (8004a84 <HAL_RCC_ClockConfig+0x1b8>)
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	b2d2      	uxtb	r2, r2
 8004a00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a02:	4b20      	ldr	r3, [pc, #128]	; (8004a84 <HAL_RCC_ClockConfig+0x1b8>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0307 	and.w	r3, r3, #7
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d001      	beq.n	8004a14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e032      	b.n	8004a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d008      	beq.n	8004a32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a20:	4b19      	ldr	r3, [pc, #100]	; (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	4916      	ldr	r1, [pc, #88]	; (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0308 	and.w	r3, r3, #8
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d009      	beq.n	8004a52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a3e:	4b12      	ldr	r3, [pc, #72]	; (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	00db      	lsls	r3, r3, #3
 8004a4c:	490e      	ldr	r1, [pc, #56]	; (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a52:	f000 f821 	bl	8004a98 <HAL_RCC_GetSysClockFreq>
 8004a56:	4602      	mov	r2, r0
 8004a58:	4b0b      	ldr	r3, [pc, #44]	; (8004a88 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	091b      	lsrs	r3, r3, #4
 8004a5e:	f003 030f 	and.w	r3, r3, #15
 8004a62:	490a      	ldr	r1, [pc, #40]	; (8004a8c <HAL_RCC_ClockConfig+0x1c0>)
 8004a64:	5ccb      	ldrb	r3, [r1, r3]
 8004a66:	fa22 f303 	lsr.w	r3, r2, r3
 8004a6a:	4a09      	ldr	r2, [pc, #36]	; (8004a90 <HAL_RCC_ClockConfig+0x1c4>)
 8004a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a6e:	4b09      	ldr	r3, [pc, #36]	; (8004a94 <HAL_RCC_ClockConfig+0x1c8>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7fc fc60 	bl	8001338 <HAL_InitTick>

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	40023c00 	.word	0x40023c00
 8004a88:	40023800 	.word	0x40023800
 8004a8c:	0800a6b0 	.word	0x0800a6b0
 8004a90:	20000004 	.word	0x20000004
 8004a94:	20000008 	.word	0x20000008

08004a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a9c:	b094      	sub	sp, #80	; 0x50
 8004a9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	647b      	str	r3, [r7, #68]	; 0x44
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ab0:	4b79      	ldr	r3, [pc, #484]	; (8004c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f003 030c 	and.w	r3, r3, #12
 8004ab8:	2b08      	cmp	r3, #8
 8004aba:	d00d      	beq.n	8004ad8 <HAL_RCC_GetSysClockFreq+0x40>
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	f200 80e1 	bhi.w	8004c84 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d002      	beq.n	8004acc <HAL_RCC_GetSysClockFreq+0x34>
 8004ac6:	2b04      	cmp	r3, #4
 8004ac8:	d003      	beq.n	8004ad2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004aca:	e0db      	b.n	8004c84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004acc:	4b73      	ldr	r3, [pc, #460]	; (8004c9c <HAL_RCC_GetSysClockFreq+0x204>)
 8004ace:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004ad0:	e0db      	b.n	8004c8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ad2:	4b73      	ldr	r3, [pc, #460]	; (8004ca0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004ad4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ad6:	e0d8      	b.n	8004c8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ad8:	4b6f      	ldr	r3, [pc, #444]	; (8004c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ae0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ae2:	4b6d      	ldr	r3, [pc, #436]	; (8004c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d063      	beq.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aee:	4b6a      	ldr	r3, [pc, #424]	; (8004c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	099b      	lsrs	r3, r3, #6
 8004af4:	2200      	movs	r2, #0
 8004af6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004af8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b00:	633b      	str	r3, [r7, #48]	; 0x30
 8004b02:	2300      	movs	r3, #0
 8004b04:	637b      	str	r3, [r7, #52]	; 0x34
 8004b06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004b0a:	4622      	mov	r2, r4
 8004b0c:	462b      	mov	r3, r5
 8004b0e:	f04f 0000 	mov.w	r0, #0
 8004b12:	f04f 0100 	mov.w	r1, #0
 8004b16:	0159      	lsls	r1, r3, #5
 8004b18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b1c:	0150      	lsls	r0, r2, #5
 8004b1e:	4602      	mov	r2, r0
 8004b20:	460b      	mov	r3, r1
 8004b22:	4621      	mov	r1, r4
 8004b24:	1a51      	subs	r1, r2, r1
 8004b26:	6139      	str	r1, [r7, #16]
 8004b28:	4629      	mov	r1, r5
 8004b2a:	eb63 0301 	sbc.w	r3, r3, r1
 8004b2e:	617b      	str	r3, [r7, #20]
 8004b30:	f04f 0200 	mov.w	r2, #0
 8004b34:	f04f 0300 	mov.w	r3, #0
 8004b38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b3c:	4659      	mov	r1, fp
 8004b3e:	018b      	lsls	r3, r1, #6
 8004b40:	4651      	mov	r1, sl
 8004b42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b46:	4651      	mov	r1, sl
 8004b48:	018a      	lsls	r2, r1, #6
 8004b4a:	4651      	mov	r1, sl
 8004b4c:	ebb2 0801 	subs.w	r8, r2, r1
 8004b50:	4659      	mov	r1, fp
 8004b52:	eb63 0901 	sbc.w	r9, r3, r1
 8004b56:	f04f 0200 	mov.w	r2, #0
 8004b5a:	f04f 0300 	mov.w	r3, #0
 8004b5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b6a:	4690      	mov	r8, r2
 8004b6c:	4699      	mov	r9, r3
 8004b6e:	4623      	mov	r3, r4
 8004b70:	eb18 0303 	adds.w	r3, r8, r3
 8004b74:	60bb      	str	r3, [r7, #8]
 8004b76:	462b      	mov	r3, r5
 8004b78:	eb49 0303 	adc.w	r3, r9, r3
 8004b7c:	60fb      	str	r3, [r7, #12]
 8004b7e:	f04f 0200 	mov.w	r2, #0
 8004b82:	f04f 0300 	mov.w	r3, #0
 8004b86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b8a:	4629      	mov	r1, r5
 8004b8c:	024b      	lsls	r3, r1, #9
 8004b8e:	4621      	mov	r1, r4
 8004b90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b94:	4621      	mov	r1, r4
 8004b96:	024a      	lsls	r2, r1, #9
 8004b98:	4610      	mov	r0, r2
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ba2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ba4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ba8:	f7fb fb0e 	bl	80001c8 <__aeabi_uldivmod>
 8004bac:	4602      	mov	r2, r0
 8004bae:	460b      	mov	r3, r1
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bb4:	e058      	b.n	8004c68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bb6:	4b38      	ldr	r3, [pc, #224]	; (8004c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	099b      	lsrs	r3, r3, #6
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	4611      	mov	r1, r2
 8004bc2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004bc6:	623b      	str	r3, [r7, #32]
 8004bc8:	2300      	movs	r3, #0
 8004bca:	627b      	str	r3, [r7, #36]	; 0x24
 8004bcc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004bd0:	4642      	mov	r2, r8
 8004bd2:	464b      	mov	r3, r9
 8004bd4:	f04f 0000 	mov.w	r0, #0
 8004bd8:	f04f 0100 	mov.w	r1, #0
 8004bdc:	0159      	lsls	r1, r3, #5
 8004bde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004be2:	0150      	lsls	r0, r2, #5
 8004be4:	4602      	mov	r2, r0
 8004be6:	460b      	mov	r3, r1
 8004be8:	4641      	mov	r1, r8
 8004bea:	ebb2 0a01 	subs.w	sl, r2, r1
 8004bee:	4649      	mov	r1, r9
 8004bf0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004bf4:	f04f 0200 	mov.w	r2, #0
 8004bf8:	f04f 0300 	mov.w	r3, #0
 8004bfc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c08:	ebb2 040a 	subs.w	r4, r2, sl
 8004c0c:	eb63 050b 	sbc.w	r5, r3, fp
 8004c10:	f04f 0200 	mov.w	r2, #0
 8004c14:	f04f 0300 	mov.w	r3, #0
 8004c18:	00eb      	lsls	r3, r5, #3
 8004c1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c1e:	00e2      	lsls	r2, r4, #3
 8004c20:	4614      	mov	r4, r2
 8004c22:	461d      	mov	r5, r3
 8004c24:	4643      	mov	r3, r8
 8004c26:	18e3      	adds	r3, r4, r3
 8004c28:	603b      	str	r3, [r7, #0]
 8004c2a:	464b      	mov	r3, r9
 8004c2c:	eb45 0303 	adc.w	r3, r5, r3
 8004c30:	607b      	str	r3, [r7, #4]
 8004c32:	f04f 0200 	mov.w	r2, #0
 8004c36:	f04f 0300 	mov.w	r3, #0
 8004c3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c3e:	4629      	mov	r1, r5
 8004c40:	028b      	lsls	r3, r1, #10
 8004c42:	4621      	mov	r1, r4
 8004c44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c48:	4621      	mov	r1, r4
 8004c4a:	028a      	lsls	r2, r1, #10
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	4619      	mov	r1, r3
 8004c50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c52:	2200      	movs	r2, #0
 8004c54:	61bb      	str	r3, [r7, #24]
 8004c56:	61fa      	str	r2, [r7, #28]
 8004c58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c5c:	f7fb fab4 	bl	80001c8 <__aeabi_uldivmod>
 8004c60:	4602      	mov	r2, r0
 8004c62:	460b      	mov	r3, r1
 8004c64:	4613      	mov	r3, r2
 8004c66:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c68:	4b0b      	ldr	r3, [pc, #44]	; (8004c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	0c1b      	lsrs	r3, r3, #16
 8004c6e:	f003 0303 	and.w	r3, r3, #3
 8004c72:	3301      	adds	r3, #1
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004c78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c82:	e002      	b.n	8004c8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c84:	4b05      	ldr	r3, [pc, #20]	; (8004c9c <HAL_RCC_GetSysClockFreq+0x204>)
 8004c86:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3750      	adds	r7, #80	; 0x50
 8004c90:	46bd      	mov	sp, r7
 8004c92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c96:	bf00      	nop
 8004c98:	40023800 	.word	0x40023800
 8004c9c:	00f42400 	.word	0x00f42400
 8004ca0:	007a1200 	.word	0x007a1200

08004ca4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ca8:	4b03      	ldr	r3, [pc, #12]	; (8004cb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004caa:	681b      	ldr	r3, [r3, #0]
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	20000004 	.word	0x20000004

08004cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004cc0:	f7ff fff0 	bl	8004ca4 <HAL_RCC_GetHCLKFreq>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	4b05      	ldr	r3, [pc, #20]	; (8004cdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	0a9b      	lsrs	r3, r3, #10
 8004ccc:	f003 0307 	and.w	r3, r3, #7
 8004cd0:	4903      	ldr	r1, [pc, #12]	; (8004ce0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cd2:	5ccb      	ldrb	r3, [r1, r3]
 8004cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	40023800 	.word	0x40023800
 8004ce0:	0800a6c0 	.word	0x0800a6c0

08004ce4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d105      	bne.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d035      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d0c:	4b62      	ldr	r3, [pc, #392]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d12:	f7fc fb55 	bl	80013c0 <HAL_GetTick>
 8004d16:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d18:	e008      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d1a:	f7fc fb51 	bl	80013c0 <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d901      	bls.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e0b0      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d2c:	4b5b      	ldr	r3, [pc, #364]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1f0      	bne.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	019a      	lsls	r2, r3, #6
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	071b      	lsls	r3, r3, #28
 8004d44:	4955      	ldr	r1, [pc, #340]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d4c:	4b52      	ldr	r3, [pc, #328]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004d4e:	2201      	movs	r2, #1
 8004d50:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d52:	f7fc fb35 	bl	80013c0 <HAL_GetTick>
 8004d56:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d58:	e008      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d5a:	f7fc fb31 	bl	80013c0 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d901      	bls.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e090      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d6c:	4b4b      	ldr	r3, [pc, #300]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d0f0      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 8083 	beq.w	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d86:	2300      	movs	r3, #0
 8004d88:	60fb      	str	r3, [r7, #12]
 8004d8a:	4b44      	ldr	r3, [pc, #272]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8e:	4a43      	ldr	r2, [pc, #268]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d94:	6413      	str	r3, [r2, #64]	; 0x40
 8004d96:	4b41      	ldr	r3, [pc, #260]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d9e:	60fb      	str	r3, [r7, #12]
 8004da0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004da2:	4b3f      	ldr	r3, [pc, #252]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a3e      	ldr	r2, [pc, #248]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004dae:	f7fc fb07 	bl	80013c0 <HAL_GetTick>
 8004db2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004db4:	e008      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004db6:	f7fc fb03 	bl	80013c0 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d901      	bls.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e062      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004dc8:	4b35      	ldr	r3, [pc, #212]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d0f0      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004dd4:	4b31      	ldr	r3, [pc, #196]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ddc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d02f      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d028      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004df2:	4b2a      	ldr	r3, [pc, #168]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dfa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dfc:	4b29      	ldr	r3, [pc, #164]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004dfe:	2201      	movs	r2, #1
 8004e00:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e02:	4b28      	ldr	r3, [pc, #160]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004e08:	4a24      	ldr	r2, [pc, #144]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e0e:	4b23      	ldr	r3, [pc, #140]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d114      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004e1a:	f7fc fad1 	bl	80013c0 <HAL_GetTick>
 8004e1e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e20:	e00a      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e22:	f7fc facd 	bl	80013c0 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e02a      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e38:	4b18      	ldr	r3, [pc, #96]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0ee      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e50:	d10d      	bne.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004e52:	4b12      	ldr	r3, [pc, #72]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004e62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e66:	490d      	ldr	r1, [pc, #52]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	608b      	str	r3, [r1, #8]
 8004e6c:	e005      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004e6e:	4b0b      	ldr	r3, [pc, #44]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	4a0a      	ldr	r2, [pc, #40]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e74:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004e78:	6093      	str	r3, [r2, #8]
 8004e7a:	4b08      	ldr	r3, [pc, #32]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e86:	4905      	ldr	r1, [pc, #20]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3718      	adds	r7, #24
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	42470068 	.word	0x42470068
 8004e9c:	40023800 	.word	0x40023800
 8004ea0:	40007000 	.word	0x40007000
 8004ea4:	42470e40 	.word	0x42470e40

08004ea8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b087      	sub	sp, #28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d13e      	bne.n	8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004ec6:	4b23      	ldr	r3, [pc, #140]	; (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ece:	60fb      	str	r3, [r7, #12]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d005      	beq.n	8004ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d12f      	bne.n	8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004edc:	4b1e      	ldr	r3, [pc, #120]	; (8004f58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ede:	617b      	str	r3, [r7, #20]
          break;
 8004ee0:	e02f      	b.n	8004f42 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004ee2:	4b1c      	ldr	r3, [pc, #112]	; (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eee:	d108      	bne.n	8004f02 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004ef0:	4b18      	ldr	r3, [pc, #96]	; (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ef8:	4a18      	ldr	r2, [pc, #96]	; (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004efe:	613b      	str	r3, [r7, #16]
 8004f00:	e007      	b.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004f02:	4b14      	ldr	r3, [pc, #80]	; (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f0a:	4a15      	ldr	r2, [pc, #84]	; (8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f10:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004f12:	4b10      	ldr	r3, [pc, #64]	; (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004f14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f18:	099b      	lsrs	r3, r3, #6
 8004f1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	fb02 f303 	mul.w	r3, r2, r3
 8004f24:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004f26:	4b0b      	ldr	r3, [pc, #44]	; (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004f28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f2c:	0f1b      	lsrs	r3, r3, #28
 8004f2e:	f003 0307 	and.w	r3, r3, #7
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f38:	617b      	str	r3, [r7, #20]
          break;
 8004f3a:	e002      	b.n	8004f42 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	617b      	str	r3, [r7, #20]
          break;
 8004f40:	bf00      	nop
        }
      }
      break;
 8004f42:	bf00      	nop
    }
  }
  return frequency;
 8004f44:	697b      	ldr	r3, [r7, #20]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	371c      	adds	r7, #28
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	40023800 	.word	0x40023800
 8004f58:	00bb8000 	.word	0x00bb8000
 8004f5c:	007a1200 	.word	0x007a1200
 8004f60:	00f42400 	.word	0x00f42400

08004f64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e07b      	b.n	800506e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d108      	bne.n	8004f90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f86:	d009      	beq.n	8004f9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	61da      	str	r2, [r3, #28]
 8004f8e:	e005      	b.n	8004f9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d106      	bne.n	8004fbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7fc f874 	bl	80010a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fd2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fee:	431a      	orrs	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	431a      	orrs	r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	431a      	orrs	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800500c:	431a      	orrs	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005016:	431a      	orrs	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005020:	ea42 0103 	orr.w	r1, r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005028:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	0c1b      	lsrs	r3, r3, #16
 800503a:	f003 0104 	and.w	r1, r3, #4
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005042:	f003 0210 	and.w	r2, r3, #16
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	69da      	ldr	r2, [r3, #28]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800505c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005076:	b580      	push	{r7, lr}
 8005078:	b088      	sub	sp, #32
 800507a:	af00      	add	r7, sp, #0
 800507c:	60f8      	str	r0, [r7, #12]
 800507e:	60b9      	str	r1, [r7, #8]
 8005080:	603b      	str	r3, [r7, #0]
 8005082:	4613      	mov	r3, r2
 8005084:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005086:	2300      	movs	r3, #0
 8005088:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005090:	2b01      	cmp	r3, #1
 8005092:	d101      	bne.n	8005098 <HAL_SPI_Transmit+0x22>
 8005094:	2302      	movs	r3, #2
 8005096:	e126      	b.n	80052e6 <HAL_SPI_Transmit+0x270>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050a0:	f7fc f98e 	bl	80013c0 <HAL_GetTick>
 80050a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80050a6:	88fb      	ldrh	r3, [r7, #6]
 80050a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d002      	beq.n	80050bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80050b6:	2302      	movs	r3, #2
 80050b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80050ba:	e10b      	b.n	80052d4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d002      	beq.n	80050c8 <HAL_SPI_Transmit+0x52>
 80050c2:	88fb      	ldrh	r3, [r7, #6]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d102      	bne.n	80050ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80050cc:	e102      	b.n	80052d4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2203      	movs	r2, #3
 80050d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	88fa      	ldrh	r2, [r7, #6]
 80050e6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	88fa      	ldrh	r2, [r7, #6]
 80050ec:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005114:	d10f      	bne.n	8005136 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005124:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005134:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005140:	2b40      	cmp	r3, #64	; 0x40
 8005142:	d007      	beq.n	8005154 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005152:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800515c:	d14b      	bne.n	80051f6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d002      	beq.n	800516c <HAL_SPI_Transmit+0xf6>
 8005166:	8afb      	ldrh	r3, [r7, #22]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d13e      	bne.n	80051ea <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005170:	881a      	ldrh	r2, [r3, #0]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517c:	1c9a      	adds	r2, r3, #2
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005186:	b29b      	uxth	r3, r3
 8005188:	3b01      	subs	r3, #1
 800518a:	b29a      	uxth	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005190:	e02b      	b.n	80051ea <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f003 0302 	and.w	r3, r3, #2
 800519c:	2b02      	cmp	r3, #2
 800519e:	d112      	bne.n	80051c6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a4:	881a      	ldrh	r2, [r3, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b0:	1c9a      	adds	r2, r3, #2
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	3b01      	subs	r3, #1
 80051be:	b29a      	uxth	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80051c4:	e011      	b.n	80051ea <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051c6:	f7fc f8fb 	bl	80013c0 <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	683a      	ldr	r2, [r7, #0]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d803      	bhi.n	80051de <HAL_SPI_Transmit+0x168>
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051dc:	d102      	bne.n	80051e4 <HAL_SPI_Transmit+0x16e>
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d102      	bne.n	80051ea <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80051e8:	e074      	b.n	80052d4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1ce      	bne.n	8005192 <HAL_SPI_Transmit+0x11c>
 80051f4:	e04c      	b.n	8005290 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d002      	beq.n	8005204 <HAL_SPI_Transmit+0x18e>
 80051fe:	8afb      	ldrh	r3, [r7, #22]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d140      	bne.n	8005286 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	330c      	adds	r3, #12
 800520e:	7812      	ldrb	r2, [r2, #0]
 8005210:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005216:	1c5a      	adds	r2, r3, #1
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005220:	b29b      	uxth	r3, r3
 8005222:	3b01      	subs	r3, #1
 8005224:	b29a      	uxth	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800522a:	e02c      	b.n	8005286 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b02      	cmp	r3, #2
 8005238:	d113      	bne.n	8005262 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	330c      	adds	r3, #12
 8005244:	7812      	ldrb	r2, [r2, #0]
 8005246:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524c:	1c5a      	adds	r2, r3, #1
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005256:	b29b      	uxth	r3, r3
 8005258:	3b01      	subs	r3, #1
 800525a:	b29a      	uxth	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005260:	e011      	b.n	8005286 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005262:	f7fc f8ad 	bl	80013c0 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	429a      	cmp	r2, r3
 8005270:	d803      	bhi.n	800527a <HAL_SPI_Transmit+0x204>
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005278:	d102      	bne.n	8005280 <HAL_SPI_Transmit+0x20a>
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d102      	bne.n	8005286 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005284:	e026      	b.n	80052d4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800528a:	b29b      	uxth	r3, r3
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1cd      	bne.n	800522c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005290:	69ba      	ldr	r2, [r7, #24]
 8005292:	6839      	ldr	r1, [r7, #0]
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f000 fbcb 	bl	8005a30 <SPI_EndRxTxTransaction>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d002      	beq.n	80052a6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2220      	movs	r2, #32
 80052a4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10a      	bne.n	80052c4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052ae:	2300      	movs	r3, #0
 80052b0:	613b      	str	r3, [r7, #16]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	613b      	str	r3, [r7, #16]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	613b      	str	r3, [r7, #16]
 80052c2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d002      	beq.n	80052d2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	77fb      	strb	r3, [r7, #31]
 80052d0:	e000      	b.n	80052d4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80052d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3720      	adds	r7, #32
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b088      	sub	sp, #32
 80052f2:	af02      	add	r7, sp, #8
 80052f4:	60f8      	str	r0, [r7, #12]
 80052f6:	60b9      	str	r1, [r7, #8]
 80052f8:	603b      	str	r3, [r7, #0]
 80052fa:	4613      	mov	r3, r2
 80052fc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052fe:	2300      	movs	r3, #0
 8005300:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800530a:	d112      	bne.n	8005332 <HAL_SPI_Receive+0x44>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10e      	bne.n	8005332 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2204      	movs	r2, #4
 8005318:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800531c:	88fa      	ldrh	r2, [r7, #6]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	9300      	str	r3, [sp, #0]
 8005322:	4613      	mov	r3, r2
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	68b9      	ldr	r1, [r7, #8]
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f000 f8f1 	bl	8005510 <HAL_SPI_TransmitReceive>
 800532e:	4603      	mov	r3, r0
 8005330:	e0ea      	b.n	8005508 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005338:	2b01      	cmp	r3, #1
 800533a:	d101      	bne.n	8005340 <HAL_SPI_Receive+0x52>
 800533c:	2302      	movs	r3, #2
 800533e:	e0e3      	b.n	8005508 <HAL_SPI_Receive+0x21a>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005348:	f7fc f83a 	bl	80013c0 <HAL_GetTick>
 800534c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b01      	cmp	r3, #1
 8005358:	d002      	beq.n	8005360 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800535a:	2302      	movs	r3, #2
 800535c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800535e:	e0ca      	b.n	80054f6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d002      	beq.n	800536c <HAL_SPI_Receive+0x7e>
 8005366:	88fb      	ldrh	r3, [r7, #6]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d102      	bne.n	8005372 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005370:	e0c1      	b.n	80054f6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2204      	movs	r2, #4
 8005376:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	68ba      	ldr	r2, [r7, #8]
 8005384:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	88fa      	ldrh	r2, [r7, #6]
 800538a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	88fa      	ldrh	r2, [r7, #6]
 8005390:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053b8:	d10f      	bne.n	80053da <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80053d8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e4:	2b40      	cmp	r3, #64	; 0x40
 80053e6:	d007      	beq.n	80053f8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053f6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d162      	bne.n	80054c6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005400:	e02e      	b.n	8005460 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	2b01      	cmp	r3, #1
 800540e:	d115      	bne.n	800543c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f103 020c 	add.w	r2, r3, #12
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541c:	7812      	ldrb	r2, [r2, #0]
 800541e:	b2d2      	uxtb	r2, r2
 8005420:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005426:	1c5a      	adds	r2, r3, #1
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005430:	b29b      	uxth	r3, r3
 8005432:	3b01      	subs	r3, #1
 8005434:	b29a      	uxth	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	87da      	strh	r2, [r3, #62]	; 0x3e
 800543a:	e011      	b.n	8005460 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800543c:	f7fb ffc0 	bl	80013c0 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	683a      	ldr	r2, [r7, #0]
 8005448:	429a      	cmp	r2, r3
 800544a:	d803      	bhi.n	8005454 <HAL_SPI_Receive+0x166>
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005452:	d102      	bne.n	800545a <HAL_SPI_Receive+0x16c>
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d102      	bne.n	8005460 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800545e:	e04a      	b.n	80054f6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005464:	b29b      	uxth	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1cb      	bne.n	8005402 <HAL_SPI_Receive+0x114>
 800546a:	e031      	b.n	80054d0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b01      	cmp	r3, #1
 8005478:	d113      	bne.n	80054a2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68da      	ldr	r2, [r3, #12]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005484:	b292      	uxth	r2, r2
 8005486:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548c:	1c9a      	adds	r2, r3, #2
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005496:	b29b      	uxth	r3, r3
 8005498:	3b01      	subs	r3, #1
 800549a:	b29a      	uxth	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054a0:	e011      	b.n	80054c6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054a2:	f7fb ff8d 	bl	80013c0 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	683a      	ldr	r2, [r7, #0]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d803      	bhi.n	80054ba <HAL_SPI_Receive+0x1cc>
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b8:	d102      	bne.n	80054c0 <HAL_SPI_Receive+0x1d2>
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d102      	bne.n	80054c6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80054c4:	e017      	b.n	80054f6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1cd      	bne.n	800546c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	6839      	ldr	r1, [r7, #0]
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f000 fa45 	bl	8005964 <SPI_EndRxTransaction>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d002      	beq.n	80054e6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2220      	movs	r2, #32
 80054e4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	75fb      	strb	r3, [r7, #23]
 80054f2:	e000      	b.n	80054f6 <HAL_SPI_Receive+0x208>
  }

error :
 80054f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005506:	7dfb      	ldrb	r3, [r7, #23]
}
 8005508:	4618      	mov	r0, r3
 800550a:	3718      	adds	r7, #24
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b08c      	sub	sp, #48	; 0x30
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
 800551c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800551e:	2301      	movs	r3, #1
 8005520:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005522:	2300      	movs	r3, #0
 8005524:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800552e:	2b01      	cmp	r3, #1
 8005530:	d101      	bne.n	8005536 <HAL_SPI_TransmitReceive+0x26>
 8005532:	2302      	movs	r3, #2
 8005534:	e18a      	b.n	800584c <HAL_SPI_TransmitReceive+0x33c>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800553e:	f7fb ff3f 	bl	80013c0 <HAL_GetTick>
 8005542:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800554a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005554:	887b      	ldrh	r3, [r7, #2]
 8005556:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005558:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800555c:	2b01      	cmp	r3, #1
 800555e:	d00f      	beq.n	8005580 <HAL_SPI_TransmitReceive+0x70>
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005566:	d107      	bne.n	8005578 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d103      	bne.n	8005578 <HAL_SPI_TransmitReceive+0x68>
 8005570:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005574:	2b04      	cmp	r3, #4
 8005576:	d003      	beq.n	8005580 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005578:	2302      	movs	r3, #2
 800557a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800557e:	e15b      	b.n	8005838 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d005      	beq.n	8005592 <HAL_SPI_TransmitReceive+0x82>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d002      	beq.n	8005592 <HAL_SPI_TransmitReceive+0x82>
 800558c:	887b      	ldrh	r3, [r7, #2]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d103      	bne.n	800559a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005598:	e14e      	b.n	8005838 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b04      	cmp	r3, #4
 80055a4:	d003      	beq.n	80055ae <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2205      	movs	r2, #5
 80055aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	887a      	ldrh	r2, [r7, #2]
 80055be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	887a      	ldrh	r2, [r7, #2]
 80055c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	887a      	ldrh	r2, [r7, #2]
 80055d0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	887a      	ldrh	r2, [r7, #2]
 80055d6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ee:	2b40      	cmp	r3, #64	; 0x40
 80055f0:	d007      	beq.n	8005602 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005600:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800560a:	d178      	bne.n	80056fe <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d002      	beq.n	800561a <HAL_SPI_TransmitReceive+0x10a>
 8005614:	8b7b      	ldrh	r3, [r7, #26]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d166      	bne.n	80056e8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561e:	881a      	ldrh	r2, [r3, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562a:	1c9a      	adds	r2, r3, #2
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005634:	b29b      	uxth	r3, r3
 8005636:	3b01      	subs	r3, #1
 8005638:	b29a      	uxth	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800563e:	e053      	b.n	80056e8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f003 0302 	and.w	r3, r3, #2
 800564a:	2b02      	cmp	r3, #2
 800564c:	d11b      	bne.n	8005686 <HAL_SPI_TransmitReceive+0x176>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005652:	b29b      	uxth	r3, r3
 8005654:	2b00      	cmp	r3, #0
 8005656:	d016      	beq.n	8005686 <HAL_SPI_TransmitReceive+0x176>
 8005658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800565a:	2b01      	cmp	r3, #1
 800565c:	d113      	bne.n	8005686 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005662:	881a      	ldrh	r2, [r3, #0]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566e:	1c9a      	adds	r2, r3, #2
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005678:	b29b      	uxth	r3, r3
 800567a:	3b01      	subs	r3, #1
 800567c:	b29a      	uxth	r2, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005682:	2300      	movs	r3, #0
 8005684:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	2b01      	cmp	r3, #1
 8005692:	d119      	bne.n	80056c8 <HAL_SPI_TransmitReceive+0x1b8>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005698:	b29b      	uxth	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d014      	beq.n	80056c8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68da      	ldr	r2, [r3, #12]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a8:	b292      	uxth	r2, r2
 80056aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b0:	1c9a      	adds	r2, r3, #2
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	3b01      	subs	r3, #1
 80056be:	b29a      	uxth	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80056c4:	2301      	movs	r3, #1
 80056c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80056c8:	f7fb fe7a 	bl	80013c0 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d807      	bhi.n	80056e8 <HAL_SPI_TransmitReceive+0x1d8>
 80056d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056de:	d003      	beq.n	80056e8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80056e6:	e0a7      	b.n	8005838 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1a6      	bne.n	8005640 <HAL_SPI_TransmitReceive+0x130>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1a1      	bne.n	8005640 <HAL_SPI_TransmitReceive+0x130>
 80056fc:	e07c      	b.n	80057f8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d002      	beq.n	800570c <HAL_SPI_TransmitReceive+0x1fc>
 8005706:	8b7b      	ldrh	r3, [r7, #26]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d16b      	bne.n	80057e4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	330c      	adds	r3, #12
 8005716:	7812      	ldrb	r2, [r2, #0]
 8005718:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571e:	1c5a      	adds	r2, r3, #1
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005728:	b29b      	uxth	r3, r3
 800572a:	3b01      	subs	r3, #1
 800572c:	b29a      	uxth	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005732:	e057      	b.n	80057e4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f003 0302 	and.w	r3, r3, #2
 800573e:	2b02      	cmp	r3, #2
 8005740:	d11c      	bne.n	800577c <HAL_SPI_TransmitReceive+0x26c>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005746:	b29b      	uxth	r3, r3
 8005748:	2b00      	cmp	r3, #0
 800574a:	d017      	beq.n	800577c <HAL_SPI_TransmitReceive+0x26c>
 800574c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574e:	2b01      	cmp	r3, #1
 8005750:	d114      	bne.n	800577c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	330c      	adds	r3, #12
 800575c:	7812      	ldrb	r2, [r2, #0]
 800575e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005764:	1c5a      	adds	r2, r3, #1
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800576e:	b29b      	uxth	r3, r3
 8005770:	3b01      	subs	r3, #1
 8005772:	b29a      	uxth	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005778:	2300      	movs	r3, #0
 800577a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	2b01      	cmp	r3, #1
 8005788:	d119      	bne.n	80057be <HAL_SPI_TransmitReceive+0x2ae>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800578e:	b29b      	uxth	r3, r3
 8005790:	2b00      	cmp	r3, #0
 8005792:	d014      	beq.n	80057be <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68da      	ldr	r2, [r3, #12]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579e:	b2d2      	uxtb	r2, r2
 80057a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a6:	1c5a      	adds	r2, r3, #1
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	3b01      	subs	r3, #1
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80057ba:	2301      	movs	r3, #1
 80057bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80057be:	f7fb fdff 	bl	80013c0 <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d803      	bhi.n	80057d6 <HAL_SPI_TransmitReceive+0x2c6>
 80057ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d4:	d102      	bne.n	80057dc <HAL_SPI_TransmitReceive+0x2cc>
 80057d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d103      	bne.n	80057e4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80057e2:	e029      	b.n	8005838 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1a2      	bne.n	8005734 <HAL_SPI_TransmitReceive+0x224>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d19d      	bne.n	8005734 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f000 f917 	bl	8005a30 <SPI_EndRxTxTransaction>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d006      	beq.n	8005816 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2220      	movs	r2, #32
 8005812:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005814:	e010      	b.n	8005838 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d10b      	bne.n	8005836 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800581e:	2300      	movs	r3, #0
 8005820:	617b      	str	r3, [r7, #20]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	617b      	str	r3, [r7, #20]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	617b      	str	r3, [r7, #20]
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	e000      	b.n	8005838 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005836:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005848:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800584c:	4618      	mov	r0, r3
 800584e:	3730      	adds	r7, #48	; 0x30
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b088      	sub	sp, #32
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	603b      	str	r3, [r7, #0]
 8005860:	4613      	mov	r3, r2
 8005862:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005864:	f7fb fdac 	bl	80013c0 <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586c:	1a9b      	subs	r3, r3, r2
 800586e:	683a      	ldr	r2, [r7, #0]
 8005870:	4413      	add	r3, r2
 8005872:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005874:	f7fb fda4 	bl	80013c0 <HAL_GetTick>
 8005878:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800587a:	4b39      	ldr	r3, [pc, #228]	; (8005960 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	015b      	lsls	r3, r3, #5
 8005880:	0d1b      	lsrs	r3, r3, #20
 8005882:	69fa      	ldr	r2, [r7, #28]
 8005884:	fb02 f303 	mul.w	r3, r2, r3
 8005888:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800588a:	e054      	b.n	8005936 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005892:	d050      	beq.n	8005936 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005894:	f7fb fd94 	bl	80013c0 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	69fa      	ldr	r2, [r7, #28]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d902      	bls.n	80058aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d13d      	bne.n	8005926 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80058b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058c2:	d111      	bne.n	80058e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058cc:	d004      	beq.n	80058d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058d6:	d107      	bne.n	80058e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058f0:	d10f      	bne.n	8005912 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005910:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e017      	b.n	8005956 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d101      	bne.n	8005930 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800592c:	2300      	movs	r3, #0
 800592e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	3b01      	subs	r3, #1
 8005934:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	689a      	ldr	r2, [r3, #8]
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	4013      	ands	r3, r2
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	429a      	cmp	r2, r3
 8005944:	bf0c      	ite	eq
 8005946:	2301      	moveq	r3, #1
 8005948:	2300      	movne	r3, #0
 800594a:	b2db      	uxtb	r3, r3
 800594c:	461a      	mov	r2, r3
 800594e:	79fb      	ldrb	r3, [r7, #7]
 8005950:	429a      	cmp	r2, r3
 8005952:	d19b      	bne.n	800588c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3720      	adds	r7, #32
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	20000004 	.word	0x20000004

08005964 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b086      	sub	sp, #24
 8005968:	af02      	add	r7, sp, #8
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005978:	d111      	bne.n	800599e <SPI_EndRxTransaction+0x3a>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005982:	d004      	beq.n	800598e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800598c:	d107      	bne.n	800599e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800599c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059a6:	d12a      	bne.n	80059fe <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059b0:	d012      	beq.n	80059d8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	9300      	str	r3, [sp, #0]
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	2200      	movs	r2, #0
 80059ba:	2180      	movs	r1, #128	; 0x80
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f7ff ff49 	bl	8005854 <SPI_WaitFlagStateUntilTimeout>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d02d      	beq.n	8005a24 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059cc:	f043 0220 	orr.w	r2, r3, #32
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e026      	b.n	8005a26 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	9300      	str	r3, [sp, #0]
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	2200      	movs	r2, #0
 80059e0:	2101      	movs	r1, #1
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f7ff ff36 	bl	8005854 <SPI_WaitFlagStateUntilTimeout>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d01a      	beq.n	8005a24 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059f2:	f043 0220 	orr.w	r2, r3, #32
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e013      	b.n	8005a26 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	9300      	str	r3, [sp, #0]
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	2200      	movs	r2, #0
 8005a06:	2101      	movs	r1, #1
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f7ff ff23 	bl	8005854 <SPI_WaitFlagStateUntilTimeout>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d007      	beq.n	8005a24 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a18:	f043 0220 	orr.w	r2, r3, #32
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e000      	b.n	8005a26 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
	...

08005a30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b088      	sub	sp, #32
 8005a34:	af02      	add	r7, sp, #8
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a3c:	4b1b      	ldr	r3, [pc, #108]	; (8005aac <SPI_EndRxTxTransaction+0x7c>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a1b      	ldr	r2, [pc, #108]	; (8005ab0 <SPI_EndRxTxTransaction+0x80>)
 8005a42:	fba2 2303 	umull	r2, r3, r2, r3
 8005a46:	0d5b      	lsrs	r3, r3, #21
 8005a48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a4c:	fb02 f303 	mul.w	r3, r2, r3
 8005a50:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a5a:	d112      	bne.n	8005a82 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	9300      	str	r3, [sp, #0]
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	2200      	movs	r2, #0
 8005a64:	2180      	movs	r1, #128	; 0x80
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f7ff fef4 	bl	8005854 <SPI_WaitFlagStateUntilTimeout>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d016      	beq.n	8005aa0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a76:	f043 0220 	orr.w	r2, r3, #32
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e00f      	b.n	8005aa2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00a      	beq.n	8005a9e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a98:	2b80      	cmp	r3, #128	; 0x80
 8005a9a:	d0f2      	beq.n	8005a82 <SPI_EndRxTxTransaction+0x52>
 8005a9c:	e000      	b.n	8005aa0 <SPI_EndRxTxTransaction+0x70>
        break;
 8005a9e:	bf00      	nop
  }

  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3718      	adds	r7, #24
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	20000004 	.word	0x20000004
 8005ab0:	165e9f81 	.word	0x165e9f81

08005ab4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ab4:	b084      	sub	sp, #16
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b084      	sub	sp, #16
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
 8005abe:	f107 001c 	add.w	r0, r7, #28
 8005ac2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d122      	bne.n	8005b12 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005ae0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d105      	bne.n	8005b06 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 f9c0 	bl	8005e8c <USB_CoreReset>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	73fb      	strb	r3, [r7, #15]
 8005b10:	e01a      	b.n	8005b48 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f9b4 	bl	8005e8c <USB_CoreReset>
 8005b24:	4603      	mov	r3, r0
 8005b26:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005b28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d106      	bne.n	8005b3c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b32:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	639a      	str	r2, [r3, #56]	; 0x38
 8005b3a:	e005      	b.n	8005b48 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d10b      	bne.n	8005b66 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f043 0206 	orr.w	r2, r3, #6
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	f043 0220 	orr.w	r2, r3, #32
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b72:	b004      	add	sp, #16
 8005b74:	4770      	bx	lr

08005b76 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b083      	sub	sp, #12
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f043 0201 	orr.w	r2, r3, #1
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f023 0201 	bic.w	r2, r3, #1
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	370c      	adds	r7, #12
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr

08005bba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b084      	sub	sp, #16
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005bd6:	78fb      	ldrb	r3, [r7, #3]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d115      	bne.n	8005c08 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005be8:	2001      	movs	r0, #1
 8005bea:	f7fb fbf5 	bl	80013d8 <HAL_Delay>
      ms++;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 f93a 	bl	8005e6e <USB_GetMode>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d01e      	beq.n	8005c3e <USB_SetCurrentMode+0x84>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2b31      	cmp	r3, #49	; 0x31
 8005c04:	d9f0      	bls.n	8005be8 <USB_SetCurrentMode+0x2e>
 8005c06:	e01a      	b.n	8005c3e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c08:	78fb      	ldrb	r3, [r7, #3]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d115      	bne.n	8005c3a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c1a:	2001      	movs	r0, #1
 8005c1c:	f7fb fbdc 	bl	80013d8 <HAL_Delay>
      ms++;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	3301      	adds	r3, #1
 8005c24:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f921 	bl	8005e6e <USB_GetMode>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d005      	beq.n	8005c3e <USB_SetCurrentMode+0x84>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2b31      	cmp	r3, #49	; 0x31
 8005c36:	d9f0      	bls.n	8005c1a <USB_SetCurrentMode+0x60>
 8005c38:	e001      	b.n	8005c3e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e005      	b.n	8005c4a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2b32      	cmp	r3, #50	; 0x32
 8005c42:	d101      	bne.n	8005c48 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e000      	b.n	8005c4a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
	...

08005c54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	3301      	adds	r3, #1
 8005c66:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4a13      	ldr	r2, [pc, #76]	; (8005cb8 <USB_FlushTxFifo+0x64>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d901      	bls.n	8005c74 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e01b      	b.n	8005cac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	daf2      	bge.n	8005c62 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	019b      	lsls	r3, r3, #6
 8005c84:	f043 0220 	orr.w	r2, r3, #32
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	4a08      	ldr	r2, [pc, #32]	; (8005cb8 <USB_FlushTxFifo+0x64>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d901      	bls.n	8005c9e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e006      	b.n	8005cac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	f003 0320 	and.w	r3, r3, #32
 8005ca6:	2b20      	cmp	r3, #32
 8005ca8:	d0f0      	beq.n	8005c8c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3714      	adds	r7, #20
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr
 8005cb8:	00030d40 	.word	0x00030d40

08005cbc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4a11      	ldr	r2, [pc, #68]	; (8005d18 <USB_FlushRxFifo+0x5c>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d901      	bls.n	8005cda <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e018      	b.n	8005d0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	daf2      	bge.n	8005cc8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2210      	movs	r2, #16
 8005cea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	4a08      	ldr	r2, [pc, #32]	; (8005d18 <USB_FlushRxFifo+0x5c>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d901      	bls.n	8005cfe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e006      	b.n	8005d0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	f003 0310 	and.w	r3, r3, #16
 8005d06:	2b10      	cmp	r3, #16
 8005d08:	d0f0      	beq.n	8005cec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3714      	adds	r7, #20
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr
 8005d18:	00030d40 	.word	0x00030d40

08005d1c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b089      	sub	sp, #36	; 0x24
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	4611      	mov	r1, r2
 8005d28:	461a      	mov	r2, r3
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	71fb      	strb	r3, [r7, #7]
 8005d2e:	4613      	mov	r3, r2
 8005d30:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005d3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d123      	bne.n	8005d8a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005d42:	88bb      	ldrh	r3, [r7, #4]
 8005d44:	3303      	adds	r3, #3
 8005d46:	089b      	lsrs	r3, r3, #2
 8005d48:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	61bb      	str	r3, [r7, #24]
 8005d4e:	e018      	b.n	8005d82 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005d50:	79fb      	ldrb	r3, [r7, #7]
 8005d52:	031a      	lsls	r2, r3, #12
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	4413      	add	r3, r2
 8005d58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	3301      	adds	r3, #1
 8005d68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	3301      	adds	r3, #1
 8005d74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	3301      	adds	r3, #1
 8005d80:	61bb      	str	r3, [r7, #24]
 8005d82:	69ba      	ldr	r2, [r7, #24]
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d3e2      	bcc.n	8005d50 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3724      	adds	r7, #36	; 0x24
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b08b      	sub	sp, #44	; 0x2c
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	4613      	mov	r3, r2
 8005da4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005dae:	88fb      	ldrh	r3, [r7, #6]
 8005db0:	089b      	lsrs	r3, r3, #2
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005db6:	88fb      	ldrh	r3, [r7, #6]
 8005db8:	f003 0303 	and.w	r3, r3, #3
 8005dbc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	623b      	str	r3, [r7, #32]
 8005dc2:	e014      	b.n	8005dee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dce:	601a      	str	r2, [r3, #0]
    pDest++;
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd8:	3301      	adds	r3, #1
 8005dda:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dde:	3301      	adds	r3, #1
 8005de0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de4:	3301      	adds	r3, #1
 8005de6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005de8:	6a3b      	ldr	r3, [r7, #32]
 8005dea:	3301      	adds	r3, #1
 8005dec:	623b      	str	r3, [r7, #32]
 8005dee:	6a3a      	ldr	r2, [r7, #32]
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d3e6      	bcc.n	8005dc4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005df6:	8bfb      	ldrh	r3, [r7, #30]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d01e      	beq.n	8005e3a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e06:	461a      	mov	r2, r3
 8005e08:	f107 0310 	add.w	r3, r7, #16
 8005e0c:	6812      	ldr	r2, [r2, #0]
 8005e0e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	6a3b      	ldr	r3, [r7, #32]
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	00db      	lsls	r3, r3, #3
 8005e18:	fa22 f303 	lsr.w	r3, r2, r3
 8005e1c:	b2da      	uxtb	r2, r3
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e20:	701a      	strb	r2, [r3, #0]
      i++;
 8005e22:	6a3b      	ldr	r3, [r7, #32]
 8005e24:	3301      	adds	r3, #1
 8005e26:	623b      	str	r3, [r7, #32]
      pDest++;
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005e2e:	8bfb      	ldrh	r3, [r7, #30]
 8005e30:	3b01      	subs	r3, #1
 8005e32:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005e34:	8bfb      	ldrh	r3, [r7, #30]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1ea      	bne.n	8005e10 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	372c      	adds	r7, #44	; 0x2c
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	695b      	ldr	r3, [r3, #20]
 8005e54:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005e60:	68fb      	ldr	r3, [r7, #12]
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3714      	adds	r7, #20
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr

08005e6e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005e6e:	b480      	push	{r7}
 8005e70:	b083      	sub	sp, #12
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	f003 0301 	and.w	r3, r3, #1
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	370c      	adds	r7, #12
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
	...

08005e8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b085      	sub	sp, #20
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e94:	2300      	movs	r3, #0
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	4a13      	ldr	r2, [pc, #76]	; (8005ef0 <USB_CoreReset+0x64>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d901      	bls.n	8005eaa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e01b      	b.n	8005ee2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	daf2      	bge.n	8005e98 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	f043 0201 	orr.w	r2, r3, #1
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	4a09      	ldr	r2, [pc, #36]	; (8005ef0 <USB_CoreReset+0x64>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d901      	bls.n	8005ed4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e006      	b.n	8005ee2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	f003 0301 	and.w	r3, r3, #1
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d0f0      	beq.n	8005ec2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3714      	adds	r7, #20
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	00030d40 	.word	0x00030d40

08005ef4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ef4:	b084      	sub	sp, #16
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b086      	sub	sp, #24
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
 8005efe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005f02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005f06:	2300      	movs	r3, #0
 8005f08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f14:	461a      	mov	r2, r3
 8005f16:	2300      	movs	r3, #0
 8005f18:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f36:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d018      	beq.n	8005f7c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d10a      	bne.n	8005f66 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f5e:	f043 0304 	orr.w	r3, r3, #4
 8005f62:	6013      	str	r3, [r2, #0]
 8005f64:	e014      	b.n	8005f90 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f74:	f023 0304 	bic.w	r3, r3, #4
 8005f78:	6013      	str	r3, [r2, #0]
 8005f7a:	e009      	b.n	8005f90 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f8a:	f023 0304 	bic.w	r3, r3, #4
 8005f8e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f90:	2110      	movs	r1, #16
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7ff fe5e 	bl	8005c54 <USB_FlushTxFifo>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d001      	beq.n	8005fa2 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f7ff fe8a 	bl	8005cbc <USB_FlushRxFifo>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	613b      	str	r3, [r7, #16]
 8005fb6:	e015      	b.n	8005fe4 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8005fca:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	015a      	lsls	r2, r3, #5
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd8:	461a      	mov	r2, r3
 8005fda:	2300      	movs	r3, #0
 8005fdc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	613b      	str	r3, [r7, #16]
 8005fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d3e5      	bcc.n	8005fb8 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ff8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00b      	beq.n	800601e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800600c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a13      	ldr	r2, [pc, #76]	; (8006060 <USB_HostInit+0x16c>)
 8006012:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a13      	ldr	r2, [pc, #76]	; (8006064 <USB_HostInit+0x170>)
 8006018:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800601c:	e009      	b.n	8006032 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2280      	movs	r2, #128	; 0x80
 8006022:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a10      	ldr	r2, [pc, #64]	; (8006068 <USB_HostInit+0x174>)
 8006028:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a0f      	ldr	r2, [pc, #60]	; (800606c <USB_HostInit+0x178>)
 800602e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006034:	2b00      	cmp	r3, #0
 8006036:	d105      	bne.n	8006044 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	f043 0210 	orr.w	r2, r3, #16
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	699a      	ldr	r2, [r3, #24]
 8006048:	4b09      	ldr	r3, [pc, #36]	; (8006070 <USB_HostInit+0x17c>)
 800604a:	4313      	orrs	r3, r2
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006050:	7dfb      	ldrb	r3, [r7, #23]
}
 8006052:	4618      	mov	r0, r3
 8006054:	3718      	adds	r7, #24
 8006056:	46bd      	mov	sp, r7
 8006058:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800605c:	b004      	add	sp, #16
 800605e:	4770      	bx	lr
 8006060:	01000200 	.word	0x01000200
 8006064:	00e00300 	.word	0x00e00300
 8006068:	00600080 	.word	0x00600080
 800606c:	004000e0 	.word	0x004000e0
 8006070:	a3200008 	.word	0xa3200008

08006074 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	460b      	mov	r3, r1
 800607e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006092:	f023 0303 	bic.w	r3, r3, #3
 8006096:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	78fb      	ldrb	r3, [r7, #3]
 80060a2:	f003 0303 	and.w	r3, r3, #3
 80060a6:	68f9      	ldr	r1, [r7, #12]
 80060a8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80060ac:	4313      	orrs	r3, r2
 80060ae:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80060b0:	78fb      	ldrb	r3, [r7, #3]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d107      	bne.n	80060c6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060bc:	461a      	mov	r2, r3
 80060be:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80060c2:	6053      	str	r3, [r2, #4]
 80060c4:	e009      	b.n	80060da <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80060c6:	78fb      	ldrb	r3, [r7, #3]
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d106      	bne.n	80060da <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060d2:	461a      	mov	r2, r3
 80060d4:	f241 7370 	movw	r3, #6000	; 0x1770
 80060d8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3714      	adds	r7, #20
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80060f4:	2300      	movs	r3, #0
 80060f6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006108:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006116:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006118:	2064      	movs	r0, #100	; 0x64
 800611a:	f7fb f95d 	bl	80013d8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006126:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800612a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800612c:	200a      	movs	r0, #10
 800612e:	f7fb f953 	bl	80013d8 <HAL_Delay>

  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	460b      	mov	r3, r1
 8006146:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800614c:	2300      	movs	r3, #0
 800614e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006160:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d109      	bne.n	8006180 <USB_DriveVbus+0x44>
 800616c:	78fb      	ldrb	r3, [r7, #3]
 800616e:	2b01      	cmp	r3, #1
 8006170:	d106      	bne.n	8006180 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800617a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800617e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800618a:	d109      	bne.n	80061a0 <USB_DriveVbus+0x64>
 800618c:	78fb      	ldrb	r3, [r7, #3]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d106      	bne.n	80061a0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800619a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800619e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3714      	adds	r7, #20
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80061ae:	b480      	push	{r7}
 80061b0:	b085      	sub	sp, #20
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80061ba:	2300      	movs	r3, #0
 80061bc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	0c5b      	lsrs	r3, r3, #17
 80061cc:	f003 0303 	and.w	r3, r3, #3
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3714      	adds	r7, #20
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	b29b      	uxth	r3, r3
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3714      	adds	r7, #20
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
	...

08006200 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b088      	sub	sp, #32
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	4608      	mov	r0, r1
 800620a:	4611      	mov	r1, r2
 800620c:	461a      	mov	r2, r3
 800620e:	4603      	mov	r3, r0
 8006210:	70fb      	strb	r3, [r7, #3]
 8006212:	460b      	mov	r3, r1
 8006214:	70bb      	strb	r3, [r7, #2]
 8006216:	4613      	mov	r3, r2
 8006218:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800621a:	2300      	movs	r3, #0
 800621c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006222:	78fb      	ldrb	r3, [r7, #3]
 8006224:	015a      	lsls	r2, r3, #5
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	4413      	add	r3, r2
 800622a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800622e:	461a      	mov	r2, r3
 8006230:	f04f 33ff 	mov.w	r3, #4294967295
 8006234:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006236:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800623a:	2b03      	cmp	r3, #3
 800623c:	d87e      	bhi.n	800633c <USB_HC_Init+0x13c>
 800623e:	a201      	add	r2, pc, #4	; (adr r2, 8006244 <USB_HC_Init+0x44>)
 8006240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006244:	08006255 	.word	0x08006255
 8006248:	080062ff 	.word	0x080062ff
 800624c:	08006255 	.word	0x08006255
 8006250:	080062c1 	.word	0x080062c1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006254:	78fb      	ldrb	r3, [r7, #3]
 8006256:	015a      	lsls	r2, r3, #5
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	4413      	add	r3, r2
 800625c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006260:	461a      	mov	r2, r3
 8006262:	f240 439d 	movw	r3, #1181	; 0x49d
 8006266:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006268:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800626c:	2b00      	cmp	r3, #0
 800626e:	da10      	bge.n	8006292 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006270:	78fb      	ldrb	r3, [r7, #3]
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	4413      	add	r3, r2
 8006278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	78fa      	ldrb	r2, [r7, #3]
 8006280:	0151      	lsls	r1, r2, #5
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	440a      	add	r2, r1
 8006286:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800628a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800628e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006290:	e057      	b.n	8006342 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800629a:	2b00      	cmp	r3, #0
 800629c:	d051      	beq.n	8006342 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800629e:	78fb      	ldrb	r3, [r7, #3]
 80062a0:	015a      	lsls	r2, r3, #5
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	78fa      	ldrb	r2, [r7, #3]
 80062ae:	0151      	lsls	r1, r2, #5
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	440a      	add	r2, r1
 80062b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062b8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80062bc:	60d3      	str	r3, [r2, #12]
      break;
 80062be:	e040      	b.n	8006342 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80062c0:	78fb      	ldrb	r3, [r7, #3]
 80062c2:	015a      	lsls	r2, r3, #5
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	4413      	add	r3, r2
 80062c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062cc:	461a      	mov	r2, r3
 80062ce:	f240 639d 	movw	r3, #1693	; 0x69d
 80062d2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80062d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	da34      	bge.n	8006346 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80062dc:	78fb      	ldrb	r3, [r7, #3]
 80062de:	015a      	lsls	r2, r3, #5
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	78fa      	ldrb	r2, [r7, #3]
 80062ec:	0151      	lsls	r1, r2, #5
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	440a      	add	r2, r1
 80062f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062fa:	60d3      	str	r3, [r2, #12]
      }

      break;
 80062fc:	e023      	b.n	8006346 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80062fe:	78fb      	ldrb	r3, [r7, #3]
 8006300:	015a      	lsls	r2, r3, #5
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	4413      	add	r3, r2
 8006306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800630a:	461a      	mov	r2, r3
 800630c:	f240 2325 	movw	r3, #549	; 0x225
 8006310:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006312:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006316:	2b00      	cmp	r3, #0
 8006318:	da17      	bge.n	800634a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800631a:	78fb      	ldrb	r3, [r7, #3]
 800631c:	015a      	lsls	r2, r3, #5
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	4413      	add	r3, r2
 8006322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	78fa      	ldrb	r2, [r7, #3]
 800632a:	0151      	lsls	r1, r2, #5
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	440a      	add	r2, r1
 8006330:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006334:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006338:	60d3      	str	r3, [r2, #12]
      }
      break;
 800633a:	e006      	b.n	800634a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	77fb      	strb	r3, [r7, #31]
      break;
 8006340:	e004      	b.n	800634c <USB_HC_Init+0x14c>
      break;
 8006342:	bf00      	nop
 8006344:	e002      	b.n	800634c <USB_HC_Init+0x14c>
      break;
 8006346:	bf00      	nop
 8006348:	e000      	b.n	800634c <USB_HC_Init+0x14c>
      break;
 800634a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800634c:	78fb      	ldrb	r3, [r7, #3]
 800634e:	015a      	lsls	r2, r3, #5
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	4413      	add	r3, r2
 8006354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	78fa      	ldrb	r2, [r7, #3]
 800635c:	0151      	lsls	r1, r2, #5
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	440a      	add	r2, r1
 8006362:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006366:	f043 0302 	orr.w	r3, r3, #2
 800636a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006372:	699a      	ldr	r2, [r3, #24]
 8006374:	78fb      	ldrb	r3, [r7, #3]
 8006376:	f003 030f 	and.w	r3, r3, #15
 800637a:	2101      	movs	r1, #1
 800637c:	fa01 f303 	lsl.w	r3, r1, r3
 8006380:	6939      	ldr	r1, [r7, #16]
 8006382:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006386:	4313      	orrs	r3, r2
 8006388:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006396:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800639a:	2b00      	cmp	r3, #0
 800639c:	da03      	bge.n	80063a6 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800639e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063a2:	61bb      	str	r3, [r7, #24]
 80063a4:	e001      	b.n	80063aa <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80063a6:	2300      	movs	r3, #0
 80063a8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f7ff feff 	bl	80061ae <USB_GetHostSpeed>
 80063b0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80063b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d106      	bne.n	80063c8 <USB_HC_Init+0x1c8>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d003      	beq.n	80063c8 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80063c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80063c4:	617b      	str	r3, [r7, #20]
 80063c6:	e001      	b.n	80063cc <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80063c8:	2300      	movs	r3, #0
 80063ca:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80063cc:	787b      	ldrb	r3, [r7, #1]
 80063ce:	059b      	lsls	r3, r3, #22
 80063d0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80063d4:	78bb      	ldrb	r3, [r7, #2]
 80063d6:	02db      	lsls	r3, r3, #11
 80063d8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80063dc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80063de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80063e2:	049b      	lsls	r3, r3, #18
 80063e4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80063e8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80063ea:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80063ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80063f0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80063f6:	78fb      	ldrb	r3, [r7, #3]
 80063f8:	0159      	lsls	r1, r3, #5
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	440b      	add	r3, r1
 80063fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006402:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006408:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800640a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800640e:	2b03      	cmp	r3, #3
 8006410:	d003      	beq.n	800641a <USB_HC_Init+0x21a>
 8006412:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006416:	2b01      	cmp	r3, #1
 8006418:	d10f      	bne.n	800643a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800641a:	78fb      	ldrb	r3, [r7, #3]
 800641c:	015a      	lsls	r2, r3, #5
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	4413      	add	r3, r2
 8006422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	78fa      	ldrb	r2, [r7, #3]
 800642a:	0151      	lsls	r1, r2, #5
 800642c:	693a      	ldr	r2, [r7, #16]
 800642e:	440a      	add	r2, r1
 8006430:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006434:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006438:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800643a:	7ffb      	ldrb	r3, [r7, #31]
}
 800643c:	4618      	mov	r0, r3
 800643e:	3720      	adds	r7, #32
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b08c      	sub	sp, #48	; 0x30
 8006448:	af02      	add	r7, sp, #8
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	4613      	mov	r3, r2
 8006450:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	785b      	ldrb	r3, [r3, #1]
 800645a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800645c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006460:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800646a:	2b00      	cmp	r3, #0
 800646c:	d02d      	beq.n	80064ca <USB_HC_StartXfer+0x86>
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	791b      	ldrb	r3, [r3, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d129      	bne.n	80064ca <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006476:	79fb      	ldrb	r3, [r7, #7]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d117      	bne.n	80064ac <USB_HC_StartXfer+0x68>
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	79db      	ldrb	r3, [r3, #7]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d003      	beq.n	800648c <USB_HC_StartXfer+0x48>
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	79db      	ldrb	r3, [r3, #7]
 8006488:	2b02      	cmp	r3, #2
 800648a:	d10f      	bne.n	80064ac <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	015a      	lsls	r2, r3, #5
 8006490:	6a3b      	ldr	r3, [r7, #32]
 8006492:	4413      	add	r3, r2
 8006494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	69fa      	ldr	r2, [r7, #28]
 800649c:	0151      	lsls	r1, r2, #5
 800649e:	6a3a      	ldr	r2, [r7, #32]
 80064a0:	440a      	add	r2, r1
 80064a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064aa:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80064ac:	79fb      	ldrb	r3, [r7, #7]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10b      	bne.n	80064ca <USB_HC_StartXfer+0x86>
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	795b      	ldrb	r3, [r3, #5]
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d107      	bne.n	80064ca <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	785b      	ldrb	r3, [r3, #1]
 80064be:	4619      	mov	r1, r3
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f000 fa0f 	bl	80068e4 <USB_DoPing>
      return HAL_OK;
 80064c6:	2300      	movs	r3, #0
 80064c8:	e0f8      	b.n	80066bc <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d018      	beq.n	8006504 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	68ba      	ldr	r2, [r7, #8]
 80064d8:	8912      	ldrh	r2, [r2, #8]
 80064da:	4413      	add	r3, r2
 80064dc:	3b01      	subs	r3, #1
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	8912      	ldrh	r2, [r2, #8]
 80064e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80064e6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80064e8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80064ea:	8b7b      	ldrh	r3, [r7, #26]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d90b      	bls.n	8006508 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80064f0:	8b7b      	ldrh	r3, [r7, #26]
 80064f2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80064f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80064f6:	68ba      	ldr	r2, [r7, #8]
 80064f8:	8912      	ldrh	r2, [r2, #8]
 80064fa:	fb03 f202 	mul.w	r2, r3, r2
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	611a      	str	r2, [r3, #16]
 8006502:	e001      	b.n	8006508 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006504:	2301      	movs	r3, #1
 8006506:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	78db      	ldrb	r3, [r3, #3]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d007      	beq.n	8006520 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006510:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006512:	68ba      	ldr	r2, [r7, #8]
 8006514:	8912      	ldrh	r2, [r2, #8]
 8006516:	fb03 f202 	mul.w	r2, r3, r2
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	611a      	str	r2, [r3, #16]
 800651e:	e003      	b.n	8006528 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	695a      	ldr	r2, [r3, #20]
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006530:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006532:	04d9      	lsls	r1, r3, #19
 8006534:	4b63      	ldr	r3, [pc, #396]	; (80066c4 <USB_HC_StartXfer+0x280>)
 8006536:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006538:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	7a9b      	ldrb	r3, [r3, #10]
 800653e:	075b      	lsls	r3, r3, #29
 8006540:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006544:	69f9      	ldr	r1, [r7, #28]
 8006546:	0148      	lsls	r0, r1, #5
 8006548:	6a39      	ldr	r1, [r7, #32]
 800654a:	4401      	add	r1, r0
 800654c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006550:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006552:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006554:	79fb      	ldrb	r3, [r7, #7]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d009      	beq.n	800656e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	68d9      	ldr	r1, [r3, #12]
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	015a      	lsls	r2, r3, #5
 8006562:	6a3b      	ldr	r3, [r7, #32]
 8006564:	4413      	add	r3, r2
 8006566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800656a:	460a      	mov	r2, r1
 800656c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800656e:	6a3b      	ldr	r3, [r7, #32]
 8006570:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	2b00      	cmp	r3, #0
 800657c:	bf0c      	ite	eq
 800657e:	2301      	moveq	r3, #1
 8006580:	2300      	movne	r3, #0
 8006582:	b2db      	uxtb	r3, r3
 8006584:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	015a      	lsls	r2, r3, #5
 800658a:	6a3b      	ldr	r3, [r7, #32]
 800658c:	4413      	add	r3, r2
 800658e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	69fa      	ldr	r2, [r7, #28]
 8006596:	0151      	lsls	r1, r2, #5
 8006598:	6a3a      	ldr	r2, [r7, #32]
 800659a:	440a      	add	r2, r1
 800659c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80065a4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	015a      	lsls	r2, r3, #5
 80065aa:	6a3b      	ldr	r3, [r7, #32]
 80065ac:	4413      	add	r3, r2
 80065ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	7e7b      	ldrb	r3, [r7, #25]
 80065b6:	075b      	lsls	r3, r3, #29
 80065b8:	69f9      	ldr	r1, [r7, #28]
 80065ba:	0148      	lsls	r0, r1, #5
 80065bc:	6a39      	ldr	r1, [r7, #32]
 80065be:	4401      	add	r1, r0
 80065c0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80065c4:	4313      	orrs	r3, r2
 80065c6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	6a3b      	ldr	r3, [r7, #32]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065de:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	78db      	ldrb	r3, [r3, #3]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d004      	beq.n	80065f2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065ee:	613b      	str	r3, [r7, #16]
 80065f0:	e003      	b.n	80065fa <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80065f8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006600:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	015a      	lsls	r2, r3, #5
 8006606:	6a3b      	ldr	r3, [r7, #32]
 8006608:	4413      	add	r3, r2
 800660a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800660e:	461a      	mov	r2, r3
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006614:	79fb      	ldrb	r3, [r7, #7]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d001      	beq.n	800661e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800661a:	2300      	movs	r3, #0
 800661c:	e04e      	b.n	80066bc <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	78db      	ldrb	r3, [r3, #3]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d149      	bne.n	80066ba <USB_HC_StartXfer+0x276>
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d045      	beq.n	80066ba <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	79db      	ldrb	r3, [r3, #7]
 8006632:	2b03      	cmp	r3, #3
 8006634:	d830      	bhi.n	8006698 <USB_HC_StartXfer+0x254>
 8006636:	a201      	add	r2, pc, #4	; (adr r2, 800663c <USB_HC_StartXfer+0x1f8>)
 8006638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663c:	0800664d 	.word	0x0800664d
 8006640:	08006671 	.word	0x08006671
 8006644:	0800664d 	.word	0x0800664d
 8006648:	08006671 	.word	0x08006671
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	695b      	ldr	r3, [r3, #20]
 8006650:	3303      	adds	r3, #3
 8006652:	089b      	lsrs	r3, r3, #2
 8006654:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006656:	8afa      	ldrh	r2, [r7, #22]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665c:	b29b      	uxth	r3, r3
 800665e:	429a      	cmp	r2, r3
 8006660:	d91c      	bls.n	800669c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	f043 0220 	orr.w	r2, r3, #32
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	619a      	str	r2, [r3, #24]
        }
        break;
 800666e:	e015      	b.n	800669c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	695b      	ldr	r3, [r3, #20]
 8006674:	3303      	adds	r3, #3
 8006676:	089b      	lsrs	r3, r3, #2
 8006678:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800667a:	8afa      	ldrh	r2, [r7, #22]
 800667c:	6a3b      	ldr	r3, [r7, #32]
 800667e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	b29b      	uxth	r3, r3
 8006686:	429a      	cmp	r2, r3
 8006688:	d90a      	bls.n	80066a0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	619a      	str	r2, [r3, #24]
        }
        break;
 8006696:	e003      	b.n	80066a0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006698:	bf00      	nop
 800669a:	e002      	b.n	80066a2 <USB_HC_StartXfer+0x25e>
        break;
 800669c:	bf00      	nop
 800669e:	e000      	b.n	80066a2 <USB_HC_StartXfer+0x25e>
        break;
 80066a0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	68d9      	ldr	r1, [r3, #12]
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	785a      	ldrb	r2, [r3, #1]
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	2000      	movs	r0, #0
 80066b2:	9000      	str	r0, [sp, #0]
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f7ff fb31 	bl	8005d1c <USB_WritePacket>
  }

  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3728      	adds	r7, #40	; 0x28
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	1ff80000 	.word	0x1ff80000

080066c8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066da:	695b      	ldr	r3, [r3, #20]
 80066dc:	b29b      	uxth	r3, r3
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3714      	adds	r7, #20
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80066ea:	b480      	push	{r7}
 80066ec:	b089      	sub	sp, #36	; 0x24
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
 80066f2:	460b      	mov	r3, r1
 80066f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80066fa:	78fb      	ldrb	r3, [r7, #3]
 80066fc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80066fe:	2300      	movs	r3, #0
 8006700:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	015a      	lsls	r2, r3, #5
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	4413      	add	r3, r2
 800670a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	0c9b      	lsrs	r3, r3, #18
 8006712:	f003 0303 	and.w	r3, r3, #3
 8006716:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	4413      	add	r3, r2
 8006720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	0fdb      	lsrs	r3, r3, #31
 8006728:	f003 0301 	and.w	r3, r3, #1
 800672c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f003 0320 	and.w	r3, r3, #32
 8006736:	2b20      	cmp	r3, #32
 8006738:	d104      	bne.n	8006744 <USB_HC_Halt+0x5a>
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d101      	bne.n	8006744 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006740:	2300      	movs	r3, #0
 8006742:	e0c8      	b.n	80068d6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d002      	beq.n	8006750 <USB_HC_Halt+0x66>
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	2b02      	cmp	r3, #2
 800674e:	d163      	bne.n	8006818 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	015a      	lsls	r2, r3, #5
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	4413      	add	r3, r2
 8006758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	69ba      	ldr	r2, [r7, #24]
 8006760:	0151      	lsls	r1, r2, #5
 8006762:	69fa      	ldr	r2, [r7, #28]
 8006764:	440a      	add	r2, r1
 8006766:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800676a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800676e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f003 0320 	and.w	r3, r3, #32
 8006778:	2b00      	cmp	r3, #0
 800677a:	f040 80ab 	bne.w	80068d4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006782:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d133      	bne.n	80067f2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	015a      	lsls	r2, r3, #5
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	4413      	add	r3, r2
 8006792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	69ba      	ldr	r2, [r7, #24]
 800679a:	0151      	lsls	r1, r2, #5
 800679c:	69fa      	ldr	r2, [r7, #28]
 800679e:	440a      	add	r2, r1
 80067a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067a8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	015a      	lsls	r2, r3, #5
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	69ba      	ldr	r2, [r7, #24]
 80067ba:	0151      	lsls	r1, r2, #5
 80067bc:	69fa      	ldr	r2, [r7, #28]
 80067be:	440a      	add	r2, r1
 80067c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067c8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	3301      	adds	r3, #1
 80067ce:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067d6:	d81d      	bhi.n	8006814 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	015a      	lsls	r2, r3, #5
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	4413      	add	r3, r2
 80067e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067ee:	d0ec      	beq.n	80067ca <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80067f0:	e070      	b.n	80068d4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	015a      	lsls	r2, r3, #5
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	4413      	add	r3, r2
 80067fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	69ba      	ldr	r2, [r7, #24]
 8006802:	0151      	lsls	r1, r2, #5
 8006804:	69fa      	ldr	r2, [r7, #28]
 8006806:	440a      	add	r2, r1
 8006808:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800680c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006810:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006812:	e05f      	b.n	80068d4 <USB_HC_Halt+0x1ea>
            break;
 8006814:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006816:	e05d      	b.n	80068d4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	015a      	lsls	r2, r3, #5
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	4413      	add	r3, r2
 8006820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	69ba      	ldr	r2, [r7, #24]
 8006828:	0151      	lsls	r1, r2, #5
 800682a:	69fa      	ldr	r2, [r7, #28]
 800682c:	440a      	add	r2, r1
 800682e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006832:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006836:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006844:	2b00      	cmp	r3, #0
 8006846:	d133      	bne.n	80068b0 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	4413      	add	r3, r2
 8006850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	69ba      	ldr	r2, [r7, #24]
 8006858:	0151      	lsls	r1, r2, #5
 800685a:	69fa      	ldr	r2, [r7, #28]
 800685c:	440a      	add	r2, r1
 800685e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006862:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006866:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	015a      	lsls	r2, r3, #5
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	4413      	add	r3, r2
 8006870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	69ba      	ldr	r2, [r7, #24]
 8006878:	0151      	lsls	r1, r2, #5
 800687a:	69fa      	ldr	r2, [r7, #28]
 800687c:	440a      	add	r2, r1
 800687e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006882:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006886:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	3301      	adds	r3, #1
 800688c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006894:	d81d      	bhi.n	80068d2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	015a      	lsls	r2, r3, #5
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	4413      	add	r3, r2
 800689e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068ac:	d0ec      	beq.n	8006888 <USB_HC_Halt+0x19e>
 80068ae:	e011      	b.n	80068d4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	015a      	lsls	r2, r3, #5
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	4413      	add	r3, r2
 80068b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	69ba      	ldr	r2, [r7, #24]
 80068c0:	0151      	lsls	r1, r2, #5
 80068c2:	69fa      	ldr	r2, [r7, #28]
 80068c4:	440a      	add	r2, r1
 80068c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068ce:	6013      	str	r3, [r2, #0]
 80068d0:	e000      	b.n	80068d4 <USB_HC_Halt+0x1ea>
          break;
 80068d2:	bf00      	nop
    }
  }

  return HAL_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3724      	adds	r7, #36	; 0x24
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr
	...

080068e4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b087      	sub	sp, #28
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	460b      	mov	r3, r1
 80068ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80068f4:	78fb      	ldrb	r3, [r7, #3]
 80068f6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80068f8:	2301      	movs	r3, #1
 80068fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	04da      	lsls	r2, r3, #19
 8006900:	4b15      	ldr	r3, [pc, #84]	; (8006958 <USB_DoPing+0x74>)
 8006902:	4013      	ands	r3, r2
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	0151      	lsls	r1, r2, #5
 8006908:	697a      	ldr	r2, [r7, #20]
 800690a:	440a      	add	r2, r1
 800690c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006910:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006914:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	015a      	lsls	r2, r3, #5
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	4413      	add	r3, r2
 800691e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800692c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006934:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	015a      	lsls	r2, r3, #5
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	4413      	add	r3, r2
 800693e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006942:	461a      	mov	r2, r3
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	371c      	adds	r7, #28
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	1ff80000 	.word	0x1ff80000

0800695c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b088      	sub	sp, #32
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006964:	2300      	movs	r3, #0
 8006966:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800696c:	2300      	movs	r3, #0
 800696e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f7ff f911 	bl	8005b98 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006976:	2110      	movs	r1, #16
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f7ff f96b 	bl	8005c54 <USB_FlushTxFifo>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d001      	beq.n	8006988 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f7ff f997 	bl	8005cbc <USB_FlushRxFifo>
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d001      	beq.n	8006998 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006998:	2300      	movs	r3, #0
 800699a:	61bb      	str	r3, [r7, #24]
 800699c:	e01f      	b.n	80069de <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	015a      	lsls	r2, r3, #5
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	4413      	add	r3, r2
 80069a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069b4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069bc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069c4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	015a      	lsls	r2, r3, #5
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	4413      	add	r3, r2
 80069ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069d2:	461a      	mov	r2, r3
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	3301      	adds	r3, #1
 80069dc:	61bb      	str	r3, [r7, #24]
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	2b0f      	cmp	r3, #15
 80069e2:	d9dc      	bls.n	800699e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80069e4:	2300      	movs	r3, #0
 80069e6:	61bb      	str	r3, [r7, #24]
 80069e8:	e034      	b.n	8006a54 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	015a      	lsls	r2, r3, #5
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	4413      	add	r3, r2
 80069f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a00:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a08:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a10:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	015a      	lsls	r2, r3, #5
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	4413      	add	r3, r2
 8006a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a1e:	461a      	mov	r2, r3
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	3301      	adds	r3, #1
 8006a28:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a30:	d80c      	bhi.n	8006a4c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	015a      	lsls	r2, r3, #5
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	4413      	add	r3, r2
 8006a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a48:	d0ec      	beq.n	8006a24 <USB_StopHost+0xc8>
 8006a4a:	e000      	b.n	8006a4e <USB_StopHost+0xf2>
        break;
 8006a4c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	3301      	adds	r3, #1
 8006a52:	61bb      	str	r3, [r7, #24]
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	2b0f      	cmp	r3, #15
 8006a58:	d9c7      	bls.n	80069ea <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a60:	461a      	mov	r2, r3
 8006a62:	f04f 33ff 	mov.w	r3, #4294967295
 8006a66:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a6e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f7ff f880 	bl	8005b76 <USB_EnableGlobalInt>

  return ret;
 8006a76:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3720      	adds	r7, #32
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8006a84:	4904      	ldr	r1, [pc, #16]	; (8006a98 <MX_FATFS_Init+0x18>)
 8006a86:	4805      	ldr	r0, [pc, #20]	; (8006a9c <MX_FATFS_Init+0x1c>)
 8006a88:	f003 f95e 	bl	8009d48 <FATFS_LinkDriver>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	461a      	mov	r2, r3
 8006a90:	4b03      	ldr	r3, [pc, #12]	; (8006aa0 <MX_FATFS_Init+0x20>)
 8006a92:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006a94:	bf00      	nop
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	20000284 	.word	0x20000284
 8006a9c:	0800a6d0 	.word	0x0800a6d0
 8006aa0:	20000280 	.word	0x20000280

08006aa4 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	4603      	mov	r3, r0
 8006aac:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8006aca:	79fb      	ldrb	r3, [r7, #7]
 8006acc:	4619      	mov	r1, r3
 8006ace:	4808      	ldr	r0, [pc, #32]	; (8006af0 <USBH_status+0x34>)
 8006ad0:	f000 fe32 	bl	8007738 <USBH_MSC_UnitIsReady>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d002      	beq.n	8006ae0 <USBH_status+0x24>
  {
    res = RES_OK;
 8006ada:	2300      	movs	r3, #0
 8006adc:	73fb      	strb	r3, [r7, #15]
 8006ade:	e001      	b.n	8006ae4 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8006ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3710      	adds	r7, #16
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	20000294 	.word	0x20000294

08006af4 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b094      	sub	sp, #80	; 0x50
 8006af8:	af02      	add	r7, sp, #8
 8006afa:	60b9      	str	r1, [r7, #8]
 8006afc:	607a      	str	r2, [r7, #4]
 8006afe:	603b      	str	r3, [r7, #0]
 8006b00:	4603      	mov	r3, r0
 8006b02:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8006b0a:	7bf9      	ldrb	r1, [r7, #15]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	9300      	str	r3, [sp, #0]
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	4813      	ldr	r0, [pc, #76]	; (8006b64 <USBH_read+0x70>)
 8006b16:	f000 fe59 	bl	80077cc <USBH_MSC_Read>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d103      	bne.n	8006b28 <USBH_read+0x34>
  {
    res = RES_OK;
 8006b20:	2300      	movs	r3, #0
 8006b22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006b26:	e017      	b.n	8006b58 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8006b28:	f107 0210 	add.w	r2, r7, #16
 8006b2c:	7bfb      	ldrb	r3, [r7, #15]
 8006b2e:	4619      	mov	r1, r3
 8006b30:	480c      	ldr	r0, [pc, #48]	; (8006b64 <USBH_read+0x70>)
 8006b32:	f000 fe27 	bl	8007784 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8006b36:	7f7b      	ldrb	r3, [r7, #29]
 8006b38:	2b3a      	cmp	r3, #58	; 0x3a
 8006b3a:	d005      	beq.n	8006b48 <USBH_read+0x54>
 8006b3c:	2b3a      	cmp	r3, #58	; 0x3a
 8006b3e:	dc07      	bgt.n	8006b50 <USBH_read+0x5c>
 8006b40:	2b04      	cmp	r3, #4
 8006b42:	d001      	beq.n	8006b48 <USBH_read+0x54>
 8006b44:	2b28      	cmp	r3, #40	; 0x28
 8006b46:	d103      	bne.n	8006b50 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006b4e:	e003      	b.n	8006b58 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006b56:	bf00      	nop
    }
  }

  return res;
 8006b58:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3748      	adds	r7, #72	; 0x48
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	20000294 	.word	0x20000294

08006b68 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b094      	sub	sp, #80	; 0x50
 8006b6c:	af02      	add	r7, sp, #8
 8006b6e:	60b9      	str	r1, [r7, #8]
 8006b70:	607a      	str	r2, [r7, #4]
 8006b72:	603b      	str	r3, [r7, #0]
 8006b74:	4603      	mov	r3, r0
 8006b76:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8006b7e:	7bf9      	ldrb	r1, [r7, #15]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	9300      	str	r3, [sp, #0]
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	4817      	ldr	r0, [pc, #92]	; (8006be8 <USBH_write+0x80>)
 8006b8a:	f000 fe88 	bl	800789e <USBH_MSC_Write>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d103      	bne.n	8006b9c <USBH_write+0x34>
  {
    res = RES_OK;
 8006b94:	2300      	movs	r3, #0
 8006b96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006b9a:	e01f      	b.n	8006bdc <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8006b9c:	f107 0210 	add.w	r2, r7, #16
 8006ba0:	7bfb      	ldrb	r3, [r7, #15]
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	4810      	ldr	r0, [pc, #64]	; (8006be8 <USBH_write+0x80>)
 8006ba6:	f000 fded 	bl	8007784 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8006baa:	7f7b      	ldrb	r3, [r7, #29]
 8006bac:	2b3a      	cmp	r3, #58	; 0x3a
 8006bae:	d00d      	beq.n	8006bcc <USBH_write+0x64>
 8006bb0:	2b3a      	cmp	r3, #58	; 0x3a
 8006bb2:	dc0f      	bgt.n	8006bd4 <USBH_write+0x6c>
 8006bb4:	2b28      	cmp	r3, #40	; 0x28
 8006bb6:	d009      	beq.n	8006bcc <USBH_write+0x64>
 8006bb8:	2b28      	cmp	r3, #40	; 0x28
 8006bba:	dc0b      	bgt.n	8006bd4 <USBH_write+0x6c>
 8006bbc:	2b04      	cmp	r3, #4
 8006bbe:	d005      	beq.n	8006bcc <USBH_write+0x64>
 8006bc0:	2b27      	cmp	r3, #39	; 0x27
 8006bc2:	d107      	bne.n	8006bd4 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006bca:	e007      	b.n	8006bdc <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006bd2:	e003      	b.n	8006bdc <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006bda:	bf00      	nop
    }
  }

  return res;
 8006bdc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3748      	adds	r7, #72	; 0x48
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	20000294 	.word	0x20000294

08006bec <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b090      	sub	sp, #64	; 0x40
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	603a      	str	r2, [r7, #0]
 8006bf6:	71fb      	strb	r3, [r7, #7]
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8006c02:	79bb      	ldrb	r3, [r7, #6]
 8006c04:	2b03      	cmp	r3, #3
 8006c06:	d852      	bhi.n	8006cae <USBH_ioctl+0xc2>
 8006c08:	a201      	add	r2, pc, #4	; (adr r2, 8006c10 <USBH_ioctl+0x24>)
 8006c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c0e:	bf00      	nop
 8006c10:	08006c21 	.word	0x08006c21
 8006c14:	08006c29 	.word	0x08006c29
 8006c18:	08006c53 	.word	0x08006c53
 8006c1c:	08006c7f 	.word	0x08006c7f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8006c20:	2300      	movs	r3, #0
 8006c22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006c26:	e045      	b.n	8006cb4 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006c28:	f107 0208 	add.w	r2, r7, #8
 8006c2c:	79fb      	ldrb	r3, [r7, #7]
 8006c2e:	4619      	mov	r1, r3
 8006c30:	4823      	ldr	r0, [pc, #140]	; (8006cc0 <USBH_ioctl+0xd4>)
 8006c32:	f000 fda7 	bl	8007784 <USBH_MSC_GetLUNInfo>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d106      	bne.n	8006c4a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006c42:	2300      	movs	r3, #0
 8006c44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006c48:	e034      	b.n	8006cb4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006c50:	e030      	b.n	8006cb4 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006c52:	f107 0208 	add.w	r2, r7, #8
 8006c56:	79fb      	ldrb	r3, [r7, #7]
 8006c58:	4619      	mov	r1, r3
 8006c5a:	4819      	ldr	r0, [pc, #100]	; (8006cc0 <USBH_ioctl+0xd4>)
 8006c5c:	f000 fd92 	bl	8007784 <USBH_MSC_GetLUNInfo>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d107      	bne.n	8006c76 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8006c66:	8a3b      	ldrh	r3, [r7, #16]
 8006c68:	461a      	mov	r2, r3
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006c74:	e01e      	b.n	8006cb4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006c7c:	e01a      	b.n	8006cb4 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006c7e:	f107 0208 	add.w	r2, r7, #8
 8006c82:	79fb      	ldrb	r3, [r7, #7]
 8006c84:	4619      	mov	r1, r3
 8006c86:	480e      	ldr	r0, [pc, #56]	; (8006cc0 <USBH_ioctl+0xd4>)
 8006c88:	f000 fd7c 	bl	8007784 <USBH_MSC_GetLUNInfo>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d109      	bne.n	8006ca6 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8006c92:	8a3b      	ldrh	r3, [r7, #16]
 8006c94:	0a5b      	lsrs	r3, r3, #9
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	461a      	mov	r2, r3
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006ca4:	e006      	b.n	8006cb4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006cac:	e002      	b.n	8006cb4 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8006cae:	2304      	movs	r3, #4
 8006cb0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8006cb4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3740      	adds	r7, #64	; 0x40
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	20000294 	.word	0x20000294

08006cc4 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006cc4:	b590      	push	{r4, r7, lr}
 8006cc6:	b089      	sub	sp, #36	; 0x24
 8006cc8:	af04      	add	r7, sp, #16
 8006cca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cd2:	7919      	ldrb	r1, [r3, #4]
 8006cd4:	2350      	movs	r3, #80	; 0x50
 8006cd6:	2206      	movs	r2, #6
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f001 fc6b 	bl	80085b4 <USBH_FindInterface>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8006ce2:	7bfb      	ldrb	r3, [r7, #15]
 8006ce4:	2bff      	cmp	r3, #255	; 0xff
 8006ce6:	d002      	beq.n	8006cee <USBH_MSC_InterfaceInit+0x2a>
 8006ce8:	7bfb      	ldrb	r3, [r7, #15]
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d901      	bls.n	8006cf2 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006cee:	2302      	movs	r3, #2
 8006cf0:	e106      	b.n	8006f00 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8006cf2:	7bfb      	ldrb	r3, [r7, #15]
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f001 fc40 	bl	800857c <USBH_SelectInterface>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006d00:	7bbb      	ldrb	r3, [r7, #14]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d001      	beq.n	8006d0a <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8006d06:	2302      	movs	r3, #2
 8006d08:	e0fa      	b.n	8006f00 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006d10:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006d14:	f003 fb9a 	bl	800a44c <malloc>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d22:	69db      	ldr	r3, [r3, #28]
 8006d24:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d101      	bne.n	8006d30 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8006d2c:	2302      	movs	r3, #2
 8006d2e:	e0e7      	b.n	8006f00 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8006d30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d34:	2100      	movs	r1, #0
 8006d36:	68b8      	ldr	r0, [r7, #8]
 8006d38:	f003 fba6 	bl	800a488 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006d3c:	7bfb      	ldrb	r3, [r7, #15]
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	211a      	movs	r1, #26
 8006d42:	fb01 f303 	mul.w	r3, r1, r3
 8006d46:	4413      	add	r3, r2
 8006d48:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	b25b      	sxtb	r3, r3
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	da16      	bge.n	8006d82 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8006d54:	7bfb      	ldrb	r3, [r7, #15]
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	211a      	movs	r1, #26
 8006d5a:	fb01 f303 	mul.w	r3, r1, r3
 8006d5e:	4413      	add	r3, r2
 8006d60:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006d64:	781a      	ldrb	r2, [r3, #0]
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006d6a:	7bfb      	ldrb	r3, [r7, #15]
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	211a      	movs	r1, #26
 8006d70:	fb01 f303 	mul.w	r3, r1, r3
 8006d74:	4413      	add	r3, r2
 8006d76:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006d7a:	881a      	ldrh	r2, [r3, #0]
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	815a      	strh	r2, [r3, #10]
 8006d80:	e015      	b.n	8006dae <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8006d82:	7bfb      	ldrb	r3, [r7, #15]
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	211a      	movs	r1, #26
 8006d88:	fb01 f303 	mul.w	r3, r1, r3
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006d92:	781a      	ldrb	r2, [r3, #0]
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006d98:	7bfb      	ldrb	r3, [r7, #15]
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	211a      	movs	r1, #26
 8006d9e:	fb01 f303 	mul.w	r3, r1, r3
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006da8:	881a      	ldrh	r2, [r3, #0]
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006dae:	7bfb      	ldrb	r3, [r7, #15]
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	211a      	movs	r1, #26
 8006db4:	fb01 f303 	mul.w	r3, r1, r3
 8006db8:	4413      	add	r3, r2
 8006dba:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	b25b      	sxtb	r3, r3
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	da16      	bge.n	8006df4 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8006dc6:	7bfb      	ldrb	r3, [r7, #15]
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	211a      	movs	r1, #26
 8006dcc:	fb01 f303 	mul.w	r3, r1, r3
 8006dd0:	4413      	add	r3, r2
 8006dd2:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006dd6:	781a      	ldrb	r2, [r3, #0]
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006ddc:	7bfb      	ldrb	r3, [r7, #15]
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	211a      	movs	r1, #26
 8006de2:	fb01 f303 	mul.w	r3, r1, r3
 8006de6:	4413      	add	r3, r2
 8006de8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006dec:	881a      	ldrh	r2, [r3, #0]
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	815a      	strh	r2, [r3, #10]
 8006df2:	e015      	b.n	8006e20 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8006df4:	7bfb      	ldrb	r3, [r7, #15]
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	211a      	movs	r1, #26
 8006dfa:	fb01 f303 	mul.w	r3, r1, r3
 8006dfe:	4413      	add	r3, r2
 8006e00:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006e04:	781a      	ldrb	r2, [r3, #0]
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006e0a:	7bfb      	ldrb	r3, [r7, #15]
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	211a      	movs	r1, #26
 8006e10:	fb01 f303 	mul.w	r3, r1, r3
 8006e14:	4413      	add	r3, r2
 8006e16:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006e1a:	881a      	ldrh	r2, [r3, #0]
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	2200      	movs	r2, #0
 8006e24:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	799b      	ldrb	r3, [r3, #6]
 8006e36:	4619      	mov	r1, r3
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f002 fed6 	bl	8009bea <USBH_AllocPipe>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	461a      	mov	r2, r3
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	79db      	ldrb	r3, [r3, #7]
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f002 fecc 	bl	8009bea <USBH_AllocPipe>
 8006e52:	4603      	mov	r3, r0
 8006e54:	461a      	mov	r2, r3
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 fdc4 	bl	80079e8 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	799b      	ldrb	r3, [r3, #6]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d01e      	beq.n	8006ea6 <USBH_MSC_InterfaceInit+0x1e2>
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	891b      	ldrh	r3, [r3, #8]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d01a      	beq.n	8006ea6 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	7959      	ldrb	r1, [r3, #5]
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	7998      	ldrb	r0, [r3, #6]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006e84:	68ba      	ldr	r2, [r7, #8]
 8006e86:	8912      	ldrh	r2, [r2, #8]
 8006e88:	9202      	str	r2, [sp, #8]
 8006e8a:	2202      	movs	r2, #2
 8006e8c:	9201      	str	r2, [sp, #4]
 8006e8e:	9300      	str	r3, [sp, #0]
 8006e90:	4623      	mov	r3, r4
 8006e92:	4602      	mov	r2, r0
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f002 fe79 	bl	8009b8c <USBH_OpenPipe>
 8006e9a:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	79db      	ldrb	r3, [r3, #7]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d02c      	beq.n	8006efe <USBH_MSC_InterfaceInit+0x23a>
 8006ea4:	e001      	b.n	8006eaa <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	e02a      	b.n	8006f00 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	895b      	ldrh	r3, [r3, #10]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d025      	beq.n	8006efe <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	7919      	ldrb	r1, [r3, #4]
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	79d8      	ldrb	r0, [r3, #7]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006ec6:	68ba      	ldr	r2, [r7, #8]
 8006ec8:	8952      	ldrh	r2, [r2, #10]
 8006eca:	9202      	str	r2, [sp, #8]
 8006ecc:	2202      	movs	r2, #2
 8006ece:	9201      	str	r2, [sp, #4]
 8006ed0:	9300      	str	r3, [sp, #0]
 8006ed2:	4623      	mov	r3, r4
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f002 fe58 	bl	8009b8c <USBH_OpenPipe>
 8006edc:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	791b      	ldrb	r3, [r3, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f003 f9d2 	bl	800a290 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	795b      	ldrb	r3, [r3, #5]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f003 f9cb 	bl	800a290 <USBH_LL_SetToggle>

  return USBH_OK;
 8006efa:	2300      	movs	r3, #0
 8006efc:	e000      	b.n	8006f00 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 8006efe:	2303      	movs	r3, #3
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3714      	adds	r7, #20
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd90      	pop	{r4, r7, pc}

08006f08 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f16:	69db      	ldr	r3, [r3, #28]
 8006f18:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	795b      	ldrb	r3, [r3, #5]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00e      	beq.n	8006f40 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	795b      	ldrb	r3, [r3, #5]
 8006f26:	4619      	mov	r1, r3
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f002 fe4e 	bl	8009bca <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	795b      	ldrb	r3, [r3, #5]
 8006f32:	4619      	mov	r1, r3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f002 fe79 	bl	8009c2c <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	791b      	ldrb	r3, [r3, #4]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00e      	beq.n	8006f66 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	791b      	ldrb	r3, [r3, #4]
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f002 fe3b 	bl	8009bca <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	791b      	ldrb	r3, [r3, #4]
 8006f58:	4619      	mov	r1, r3
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f002 fe66 	bl	8009c2c <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2200      	movs	r2, #0
 8006f64:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f6c:	69db      	ldr	r3, [r3, #28]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00b      	beq.n	8006f8a <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f78:	69db      	ldr	r3, [r3, #28]
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f003 fa6e 	bl	800a45c <free>
    phost->pActiveClass->pData = 0U;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f86:	2200      	movs	r2, #0
 8006f88:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3710      	adds	r7, #16
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fa2:	69db      	ldr	r3, [r3, #28]
 8006fa4:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	7b9b      	ldrb	r3, [r3, #14]
 8006fae:	2b03      	cmp	r3, #3
 8006fb0:	d041      	beq.n	8007036 <USBH_MSC_ClassRequest+0xa2>
 8006fb2:	2b03      	cmp	r3, #3
 8006fb4:	dc4b      	bgt.n	800704e <USBH_MSC_ClassRequest+0xba>
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d001      	beq.n	8006fbe <USBH_MSC_ClassRequest+0x2a>
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	d147      	bne.n	800704e <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 fcf1 	bl	80079aa <USBH_MSC_BOT_REQ_GetMaxLUN>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8006fcc:	7bfb      	ldrb	r3, [r7, #15]
 8006fce:	2b03      	cmp	r3, #3
 8006fd0:	d104      	bne.n	8006fdc <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8006fdc:	7bfb      	ldrb	r3, [r7, #15]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d137      	bne.n	8007052 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d804      	bhi.n	8006ff4 <USBH_MSC_ClassRequest+0x60>
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	b2da      	uxtb	r2, r3
 8006ff2:	e000      	b.n	8006ff6 <USBH_MSC_ClassRequest+0x62>
 8006ff4:	2202      	movs	r2, #2
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	73bb      	strb	r3, [r7, #14]
 8006ffe:	e014      	b.n	800702a <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8007000:	7bbb      	ldrb	r3, [r7, #14]
 8007002:	68ba      	ldr	r2, [r7, #8]
 8007004:	2134      	movs	r1, #52	; 0x34
 8007006:	fb01 f303 	mul.w	r3, r1, r3
 800700a:	4413      	add	r3, r2
 800700c:	3392      	adds	r3, #146	; 0x92
 800700e:	2202      	movs	r2, #2
 8007010:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8007012:	7bbb      	ldrb	r3, [r7, #14]
 8007014:	68ba      	ldr	r2, [r7, #8]
 8007016:	2134      	movs	r1, #52	; 0x34
 8007018:	fb01 f303 	mul.w	r3, r1, r3
 800701c:	4413      	add	r3, r2
 800701e:	33c1      	adds	r3, #193	; 0xc1
 8007020:	2200      	movs	r2, #0
 8007022:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8007024:	7bbb      	ldrb	r3, [r7, #14]
 8007026:	3301      	adds	r3, #1
 8007028:	73bb      	strb	r3, [r7, #14]
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	7bba      	ldrb	r2, [r7, #14]
 8007030:	429a      	cmp	r2, r3
 8007032:	d3e5      	bcc.n	8007000 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8007034:	e00d      	b.n	8007052 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8007036:	2100      	movs	r1, #0
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f002 f888 	bl	800914e <USBH_ClrFeature>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d108      	bne.n	8007056 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	7bda      	ldrb	r2, [r3, #15]
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	739a      	strb	r2, [r3, #14]
      }
      break;
 800704c:	e003      	b.n	8007056 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800704e:	bf00      	nop
 8007050:	e002      	b.n	8007058 <USBH_MSC_ClassRequest+0xc4>
      break;
 8007052:	bf00      	nop
 8007054:	e000      	b.n	8007058 <USBH_MSC_ClassRequest+0xc4>
      break;
 8007056:	bf00      	nop
  }

  return status;
 8007058:	7bfb      	ldrb	r3, [r7, #15]
}
 800705a:	4618      	mov	r0, r3
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
	...

08007064 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b086      	sub	sp, #24
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007072:	69db      	ldr	r3, [r3, #28]
 8007074:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8007076:	2301      	movs	r3, #1
 8007078:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800707a:	2301      	movs	r3, #1
 800707c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800707e:	2301      	movs	r3, #1
 8007080:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	7b1b      	ldrb	r3, [r3, #12]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d003      	beq.n	8007092 <USBH_MSC_Process+0x2e>
 800708a:	2b01      	cmp	r3, #1
 800708c:	f000 8271 	beq.w	8007572 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8007090:	e272      	b.n	8007578 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	b29b      	uxth	r3, r3
 800709e:	429a      	cmp	r2, r3
 80070a0:	f080 824f 	bcs.w	8007542 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80070aa:	4619      	mov	r1, r3
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	2334      	movs	r3, #52	; 0x34
 80070b0:	fb01 f303 	mul.w	r3, r1, r3
 80070b4:	4413      	add	r3, r2
 80070b6:	3391      	adds	r3, #145	; 0x91
 80070b8:	2201      	movs	r2, #1
 80070ba:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80070c2:	4619      	mov	r1, r3
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	2334      	movs	r3, #52	; 0x34
 80070c8:	fb01 f303 	mul.w	r3, r1, r3
 80070cc:	4413      	add	r3, r2
 80070ce:	3390      	adds	r3, #144	; 0x90
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	2b08      	cmp	r3, #8
 80070d4:	f200 8243 	bhi.w	800755e <USBH_MSC_Process+0x4fa>
 80070d8:	a201      	add	r2, pc, #4	; (adr r2, 80070e0 <USBH_MSC_Process+0x7c>)
 80070da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070de:	bf00      	nop
 80070e0:	08007105 	.word	0x08007105
 80070e4:	0800755f 	.word	0x0800755f
 80070e8:	080071cd 	.word	0x080071cd
 80070ec:	08007351 	.word	0x08007351
 80070f0:	0800712b 	.word	0x0800712b
 80070f4:	0800741d 	.word	0x0800741d
 80070f8:	0800755f 	.word	0x0800755f
 80070fc:	0800755f 	.word	0x0800755f
 8007100:	08007531 	.word	0x08007531
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800710a:	4619      	mov	r1, r3
 800710c:	693a      	ldr	r2, [r7, #16]
 800710e:	2334      	movs	r3, #52	; 0x34
 8007110:	fb01 f303 	mul.w	r3, r1, r3
 8007114:	4413      	add	r3, r2
 8007116:	3390      	adds	r3, #144	; 0x90
 8007118:	2204      	movs	r2, #4
 800711a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8007128:	e222      	b.n	8007570 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007130:	b2d9      	uxtb	r1, r3
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007138:	461a      	mov	r2, r3
 800713a:	2334      	movs	r3, #52	; 0x34
 800713c:	fb02 f303 	mul.w	r3, r2, r3
 8007140:	3398      	adds	r3, #152	; 0x98
 8007142:	693a      	ldr	r2, [r7, #16]
 8007144:	4413      	add	r3, r2
 8007146:	3307      	adds	r3, #7
 8007148:	461a      	mov	r2, r3
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 ff6a 	bl	8008024 <USBH_MSC_SCSI_Inquiry>
 8007150:	4603      	mov	r3, r0
 8007152:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8007154:	7bfb      	ldrb	r3, [r7, #15]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10b      	bne.n	8007172 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007160:	4619      	mov	r1, r3
 8007162:	693a      	ldr	r2, [r7, #16]
 8007164:	2334      	movs	r3, #52	; 0x34
 8007166:	fb01 f303 	mul.w	r3, r1, r3
 800716a:	4413      	add	r3, r2
 800716c:	3390      	adds	r3, #144	; 0x90
 800716e:	2202      	movs	r2, #2
 8007170:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8007172:	7bfb      	ldrb	r3, [r7, #15]
 8007174:	2b02      	cmp	r3, #2
 8007176:	d10c      	bne.n	8007192 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800717e:	4619      	mov	r1, r3
 8007180:	693a      	ldr	r2, [r7, #16]
 8007182:	2334      	movs	r3, #52	; 0x34
 8007184:	fb01 f303 	mul.w	r3, r1, r3
 8007188:	4413      	add	r3, r2
 800718a:	3390      	adds	r3, #144	; 0x90
 800718c:	2205      	movs	r2, #5
 800718e:	701a      	strb	r2, [r3, #0]
            break;
 8007190:	e1e7      	b.n	8007562 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007192:	7bfb      	ldrb	r3, [r7, #15]
 8007194:	2b04      	cmp	r3, #4
 8007196:	f040 81e4 	bne.w	8007562 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80071a0:	4619      	mov	r1, r3
 80071a2:	693a      	ldr	r2, [r7, #16]
 80071a4:	2334      	movs	r3, #52	; 0x34
 80071a6:	fb01 f303 	mul.w	r3, r1, r3
 80071aa:	4413      	add	r3, r2
 80071ac:	3390      	adds	r3, #144	; 0x90
 80071ae:	2201      	movs	r2, #1
 80071b0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80071b8:	4619      	mov	r1, r3
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	2334      	movs	r3, #52	; 0x34
 80071be:	fb01 f303 	mul.w	r3, r1, r3
 80071c2:	4413      	add	r3, r2
 80071c4:	3391      	adds	r3, #145	; 0x91
 80071c6:	2202      	movs	r2, #2
 80071c8:	701a      	strb	r2, [r3, #0]
            break;
 80071ca:	e1ca      	b.n	8007562 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	4619      	mov	r1, r3
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fe66 	bl	8007ea8 <USBH_MSC_SCSI_TestUnitReady>
 80071dc:	4603      	mov	r3, r0
 80071de:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 80071e0:	7bbb      	ldrb	r3, [r7, #14]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d149      	bne.n	800727a <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80071ec:	4619      	mov	r1, r3
 80071ee:	693a      	ldr	r2, [r7, #16]
 80071f0:	2334      	movs	r3, #52	; 0x34
 80071f2:	fb01 f303 	mul.w	r3, r1, r3
 80071f6:	4413      	add	r3, r2
 80071f8:	3392      	adds	r3, #146	; 0x92
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d00c      	beq.n	800721a <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007206:	4619      	mov	r1, r3
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	2334      	movs	r3, #52	; 0x34
 800720c:	fb01 f303 	mul.w	r3, r1, r3
 8007210:	4413      	add	r3, r2
 8007212:	33c1      	adds	r3, #193	; 0xc1
 8007214:	2201      	movs	r2, #1
 8007216:	701a      	strb	r2, [r3, #0]
 8007218:	e00b      	b.n	8007232 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007220:	4619      	mov	r1, r3
 8007222:	693a      	ldr	r2, [r7, #16]
 8007224:	2334      	movs	r3, #52	; 0x34
 8007226:	fb01 f303 	mul.w	r3, r1, r3
 800722a:	4413      	add	r3, r2
 800722c:	33c1      	adds	r3, #193	; 0xc1
 800722e:	2200      	movs	r2, #0
 8007230:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007238:	4619      	mov	r1, r3
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	2334      	movs	r3, #52	; 0x34
 800723e:	fb01 f303 	mul.w	r3, r1, r3
 8007242:	4413      	add	r3, r2
 8007244:	3390      	adds	r3, #144	; 0x90
 8007246:	2203      	movs	r2, #3
 8007248:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007250:	4619      	mov	r1, r3
 8007252:	693a      	ldr	r2, [r7, #16]
 8007254:	2334      	movs	r3, #52	; 0x34
 8007256:	fb01 f303 	mul.w	r3, r1, r3
 800725a:	4413      	add	r3, r2
 800725c:	3391      	adds	r3, #145	; 0x91
 800725e:	2200      	movs	r2, #0
 8007260:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007268:	4619      	mov	r1, r3
 800726a:	693a      	ldr	r2, [r7, #16]
 800726c:	2334      	movs	r3, #52	; 0x34
 800726e:	fb01 f303 	mul.w	r3, r1, r3
 8007272:	4413      	add	r3, r2
 8007274:	3392      	adds	r3, #146	; 0x92
 8007276:	2200      	movs	r2, #0
 8007278:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800727a:	7bbb      	ldrb	r3, [r7, #14]
 800727c:	2b02      	cmp	r3, #2
 800727e:	d14a      	bne.n	8007316 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007286:	4619      	mov	r1, r3
 8007288:	693a      	ldr	r2, [r7, #16]
 800728a:	2334      	movs	r3, #52	; 0x34
 800728c:	fb01 f303 	mul.w	r3, r1, r3
 8007290:	4413      	add	r3, r2
 8007292:	3392      	adds	r3, #146	; 0x92
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	2b02      	cmp	r3, #2
 8007298:	d00c      	beq.n	80072b4 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80072a0:	4619      	mov	r1, r3
 80072a2:	693a      	ldr	r2, [r7, #16]
 80072a4:	2334      	movs	r3, #52	; 0x34
 80072a6:	fb01 f303 	mul.w	r3, r1, r3
 80072aa:	4413      	add	r3, r2
 80072ac:	33c1      	adds	r3, #193	; 0xc1
 80072ae:	2201      	movs	r2, #1
 80072b0:	701a      	strb	r2, [r3, #0]
 80072b2:	e00b      	b.n	80072cc <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80072ba:	4619      	mov	r1, r3
 80072bc:	693a      	ldr	r2, [r7, #16]
 80072be:	2334      	movs	r3, #52	; 0x34
 80072c0:	fb01 f303 	mul.w	r3, r1, r3
 80072c4:	4413      	add	r3, r2
 80072c6:	33c1      	adds	r3, #193	; 0xc1
 80072c8:	2200      	movs	r2, #0
 80072ca:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80072d2:	4619      	mov	r1, r3
 80072d4:	693a      	ldr	r2, [r7, #16]
 80072d6:	2334      	movs	r3, #52	; 0x34
 80072d8:	fb01 f303 	mul.w	r3, r1, r3
 80072dc:	4413      	add	r3, r2
 80072de:	3390      	adds	r3, #144	; 0x90
 80072e0:	2205      	movs	r2, #5
 80072e2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80072ea:	4619      	mov	r1, r3
 80072ec:	693a      	ldr	r2, [r7, #16]
 80072ee:	2334      	movs	r3, #52	; 0x34
 80072f0:	fb01 f303 	mul.w	r3, r1, r3
 80072f4:	4413      	add	r3, r2
 80072f6:	3391      	adds	r3, #145	; 0x91
 80072f8:	2201      	movs	r2, #1
 80072fa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007302:	4619      	mov	r1, r3
 8007304:	693a      	ldr	r2, [r7, #16]
 8007306:	2334      	movs	r3, #52	; 0x34
 8007308:	fb01 f303 	mul.w	r3, r1, r3
 800730c:	4413      	add	r3, r2
 800730e:	3392      	adds	r3, #146	; 0x92
 8007310:	2202      	movs	r2, #2
 8007312:	701a      	strb	r2, [r3, #0]
            break;
 8007314:	e127      	b.n	8007566 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8007316:	7bbb      	ldrb	r3, [r7, #14]
 8007318:	2b04      	cmp	r3, #4
 800731a:	f040 8124 	bne.w	8007566 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007324:	4619      	mov	r1, r3
 8007326:	693a      	ldr	r2, [r7, #16]
 8007328:	2334      	movs	r3, #52	; 0x34
 800732a:	fb01 f303 	mul.w	r3, r1, r3
 800732e:	4413      	add	r3, r2
 8007330:	3390      	adds	r3, #144	; 0x90
 8007332:	2201      	movs	r2, #1
 8007334:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800733c:	4619      	mov	r1, r3
 800733e:	693a      	ldr	r2, [r7, #16]
 8007340:	2334      	movs	r3, #52	; 0x34
 8007342:	fb01 f303 	mul.w	r3, r1, r3
 8007346:	4413      	add	r3, r2
 8007348:	3391      	adds	r3, #145	; 0x91
 800734a:	2202      	movs	r2, #2
 800734c:	701a      	strb	r2, [r3, #0]
            break;
 800734e:	e10a      	b.n	8007566 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007356:	b2d9      	uxtb	r1, r3
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800735e:	461a      	mov	r2, r3
 8007360:	2334      	movs	r3, #52	; 0x34
 8007362:	fb02 f303 	mul.w	r3, r2, r3
 8007366:	3390      	adds	r3, #144	; 0x90
 8007368:	693a      	ldr	r2, [r7, #16]
 800736a:	4413      	add	r3, r2
 800736c:	3304      	adds	r3, #4
 800736e:	461a      	mov	r2, r3
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 fddc 	bl	8007f2e <USBH_MSC_SCSI_ReadCapacity>
 8007376:	4603      	mov	r3, r0
 8007378:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800737a:	7bfb      	ldrb	r3, [r7, #15]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d120      	bne.n	80073c2 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007386:	4619      	mov	r1, r3
 8007388:	693a      	ldr	r2, [r7, #16]
 800738a:	2334      	movs	r3, #52	; 0x34
 800738c:	fb01 f303 	mul.w	r3, r1, r3
 8007390:	4413      	add	r3, r2
 8007392:	3390      	adds	r3, #144	; 0x90
 8007394:	2201      	movs	r2, #1
 8007396:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800739e:	4619      	mov	r1, r3
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	2334      	movs	r3, #52	; 0x34
 80073a4:	fb01 f303 	mul.w	r3, r1, r3
 80073a8:	4413      	add	r3, r2
 80073aa:	3391      	adds	r3, #145	; 0x91
 80073ac:	2200      	movs	r2, #0
 80073ae:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80073b6:	3301      	adds	r3, #1
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80073c0:	e0d3      	b.n	800756a <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 80073c2:	7bfb      	ldrb	r3, [r7, #15]
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d10c      	bne.n	80073e2 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80073ce:	4619      	mov	r1, r3
 80073d0:	693a      	ldr	r2, [r7, #16]
 80073d2:	2334      	movs	r3, #52	; 0x34
 80073d4:	fb01 f303 	mul.w	r3, r1, r3
 80073d8:	4413      	add	r3, r2
 80073da:	3390      	adds	r3, #144	; 0x90
 80073dc:	2205      	movs	r2, #5
 80073de:	701a      	strb	r2, [r3, #0]
            break;
 80073e0:	e0c3      	b.n	800756a <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80073e2:	7bfb      	ldrb	r3, [r7, #15]
 80073e4:	2b04      	cmp	r3, #4
 80073e6:	f040 80c0 	bne.w	800756a <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80073f0:	4619      	mov	r1, r3
 80073f2:	693a      	ldr	r2, [r7, #16]
 80073f4:	2334      	movs	r3, #52	; 0x34
 80073f6:	fb01 f303 	mul.w	r3, r1, r3
 80073fa:	4413      	add	r3, r2
 80073fc:	3390      	adds	r3, #144	; 0x90
 80073fe:	2201      	movs	r2, #1
 8007400:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007408:	4619      	mov	r1, r3
 800740a:	693a      	ldr	r2, [r7, #16]
 800740c:	2334      	movs	r3, #52	; 0x34
 800740e:	fb01 f303 	mul.w	r3, r1, r3
 8007412:	4413      	add	r3, r2
 8007414:	3391      	adds	r3, #145	; 0x91
 8007416:	2202      	movs	r2, #2
 8007418:	701a      	strb	r2, [r3, #0]
            break;
 800741a:	e0a6      	b.n	800756a <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007422:	b2d9      	uxtb	r1, r3
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800742a:	461a      	mov	r2, r3
 800742c:	2334      	movs	r3, #52	; 0x34
 800742e:	fb02 f303 	mul.w	r3, r2, r3
 8007432:	3398      	adds	r3, #152	; 0x98
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	4413      	add	r3, r2
 8007438:	3304      	adds	r3, #4
 800743a:	461a      	mov	r2, r3
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 fe96 	bl	800816e <USBH_MSC_SCSI_RequestSense>
 8007442:	4603      	mov	r3, r0
 8007444:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8007446:	7bfb      	ldrb	r3, [r7, #15]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d145      	bne.n	80074d8 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007452:	4619      	mov	r1, r3
 8007454:	693a      	ldr	r2, [r7, #16]
 8007456:	2334      	movs	r3, #52	; 0x34
 8007458:	fb01 f303 	mul.w	r3, r1, r3
 800745c:	4413      	add	r3, r2
 800745e:	339c      	adds	r3, #156	; 0x9c
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	2b06      	cmp	r3, #6
 8007464:	d00c      	beq.n	8007480 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800746c:	4619      	mov	r1, r3
 800746e:	693a      	ldr	r2, [r7, #16]
 8007470:	2334      	movs	r3, #52	; 0x34
 8007472:	fb01 f303 	mul.w	r3, r1, r3
 8007476:	4413      	add	r3, r2
 8007478:	339c      	adds	r3, #156	; 0x9c
 800747a:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800747c:	2b02      	cmp	r3, #2
 800747e:	d117      	bne.n	80074b0 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800748c:	1ad3      	subs	r3, r2, r3
 800748e:	f242 720f 	movw	r2, #9999	; 0x270f
 8007492:	4293      	cmp	r3, r2
 8007494:	d80c      	bhi.n	80074b0 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800749c:	4619      	mov	r1, r3
 800749e:	693a      	ldr	r2, [r7, #16]
 80074a0:	2334      	movs	r3, #52	; 0x34
 80074a2:	fb01 f303 	mul.w	r3, r1, r3
 80074a6:	4413      	add	r3, r2
 80074a8:	3390      	adds	r3, #144	; 0x90
 80074aa:	2202      	movs	r2, #2
 80074ac:	701a      	strb	r2, [r3, #0]
                  break;
 80074ae:	e05f      	b.n	8007570 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80074b6:	4619      	mov	r1, r3
 80074b8:	693a      	ldr	r2, [r7, #16]
 80074ba:	2334      	movs	r3, #52	; 0x34
 80074bc:	fb01 f303 	mul.w	r3, r1, r3
 80074c0:	4413      	add	r3, r2
 80074c2:	3390      	adds	r3, #144	; 0x90
 80074c4:	2201      	movs	r2, #1
 80074c6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80074ce:	3301      	adds	r3, #1
 80074d0:	b29a      	uxth	r2, r3
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 80074d8:	7bfb      	ldrb	r3, [r7, #15]
 80074da:	2b02      	cmp	r3, #2
 80074dc:	d10c      	bne.n	80074f8 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80074e4:	4619      	mov	r1, r3
 80074e6:	693a      	ldr	r2, [r7, #16]
 80074e8:	2334      	movs	r3, #52	; 0x34
 80074ea:	fb01 f303 	mul.w	r3, r1, r3
 80074ee:	4413      	add	r3, r2
 80074f0:	3390      	adds	r3, #144	; 0x90
 80074f2:	2208      	movs	r2, #8
 80074f4:	701a      	strb	r2, [r3, #0]
            break;
 80074f6:	e03a      	b.n	800756e <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80074f8:	7bfb      	ldrb	r3, [r7, #15]
 80074fa:	2b04      	cmp	r3, #4
 80074fc:	d137      	bne.n	800756e <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007504:	4619      	mov	r1, r3
 8007506:	693a      	ldr	r2, [r7, #16]
 8007508:	2334      	movs	r3, #52	; 0x34
 800750a:	fb01 f303 	mul.w	r3, r1, r3
 800750e:	4413      	add	r3, r2
 8007510:	3390      	adds	r3, #144	; 0x90
 8007512:	2201      	movs	r2, #1
 8007514:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800751c:	4619      	mov	r1, r3
 800751e:	693a      	ldr	r2, [r7, #16]
 8007520:	2334      	movs	r3, #52	; 0x34
 8007522:	fb01 f303 	mul.w	r3, r1, r3
 8007526:	4413      	add	r3, r2
 8007528:	3391      	adds	r3, #145	; 0x91
 800752a:	2202      	movs	r2, #2
 800752c:	701a      	strb	r2, [r3, #0]
            break;
 800752e:	e01e      	b.n	800756e <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007536:	3301      	adds	r3, #1
 8007538:	b29a      	uxth	r2, r3
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8007540:	e016      	b.n	8007570 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	2200      	movs	r2, #0
 8007546:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	2201      	movs	r2, #1
 800754e:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007556:	2102      	movs	r1, #2
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	4798      	blx	r3
      break;
 800755c:	e00c      	b.n	8007578 <USBH_MSC_Process+0x514>
            break;
 800755e:	bf00      	nop
 8007560:	e00a      	b.n	8007578 <USBH_MSC_Process+0x514>
            break;
 8007562:	bf00      	nop
 8007564:	e008      	b.n	8007578 <USBH_MSC_Process+0x514>
            break;
 8007566:	bf00      	nop
 8007568:	e006      	b.n	8007578 <USBH_MSC_Process+0x514>
            break;
 800756a:	bf00      	nop
 800756c:	e004      	b.n	8007578 <USBH_MSC_Process+0x514>
            break;
 800756e:	bf00      	nop
      break;
 8007570:	e002      	b.n	8007578 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8007572:	2300      	movs	r3, #0
 8007574:	75fb      	strb	r3, [r7, #23]
      break;
 8007576:	bf00      	nop
  }
  return error;
 8007578:	7dfb      	ldrb	r3, [r7, #23]
}
 800757a:	4618      	mov	r0, r3
 800757c:	3718      	adds	r7, #24
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop

08007584 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	370c      	adds	r7, #12
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr

0800759a <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	b088      	sub	sp, #32
 800759e:	af02      	add	r7, sp, #8
 80075a0:	6078      	str	r0, [r7, #4]
 80075a2:	460b      	mov	r3, r1
 80075a4:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075ac:	69db      	ldr	r3, [r3, #28]
 80075ae:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 80075b0:	2301      	movs	r3, #1
 80075b2:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 80075b4:	2301      	movs	r3, #1
 80075b6:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 80075b8:	78fb      	ldrb	r3, [r7, #3]
 80075ba:	693a      	ldr	r2, [r7, #16]
 80075bc:	2134      	movs	r1, #52	; 0x34
 80075be:	fb01 f303 	mul.w	r3, r1, r3
 80075c2:	4413      	add	r3, r2
 80075c4:	3390      	adds	r3, #144	; 0x90
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	2b07      	cmp	r3, #7
 80075ca:	d03c      	beq.n	8007646 <USBH_MSC_RdWrProcess+0xac>
 80075cc:	2b07      	cmp	r3, #7
 80075ce:	f300 80a7 	bgt.w	8007720 <USBH_MSC_RdWrProcess+0x186>
 80075d2:	2b05      	cmp	r3, #5
 80075d4:	d06c      	beq.n	80076b0 <USBH_MSC_RdWrProcess+0x116>
 80075d6:	2b06      	cmp	r3, #6
 80075d8:	f040 80a2 	bne.w	8007720 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80075dc:	78f9      	ldrb	r1, [r7, #3]
 80075de:	2300      	movs	r3, #0
 80075e0:	9300      	str	r3, [sp, #0]
 80075e2:	2300      	movs	r3, #0
 80075e4:	2200      	movs	r2, #0
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 fea5 	bl	8008336 <USBH_MSC_SCSI_Read>
 80075ec:	4603      	mov	r3, r0
 80075ee:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80075f0:	7bfb      	ldrb	r3, [r7, #15]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d10b      	bne.n	800760e <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80075f6:	78fb      	ldrb	r3, [r7, #3]
 80075f8:	693a      	ldr	r2, [r7, #16]
 80075fa:	2134      	movs	r1, #52	; 0x34
 80075fc:	fb01 f303 	mul.w	r3, r1, r3
 8007600:	4413      	add	r3, r2
 8007602:	3390      	adds	r3, #144	; 0x90
 8007604:	2201      	movs	r2, #1
 8007606:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8007608:	2300      	movs	r3, #0
 800760a:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800760c:	e08a      	b.n	8007724 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800760e:	7bfb      	ldrb	r3, [r7, #15]
 8007610:	2b02      	cmp	r3, #2
 8007612:	d109      	bne.n	8007628 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8007614:	78fb      	ldrb	r3, [r7, #3]
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	2134      	movs	r1, #52	; 0x34
 800761a:	fb01 f303 	mul.w	r3, r1, r3
 800761e:	4413      	add	r3, r2
 8007620:	3390      	adds	r3, #144	; 0x90
 8007622:	2205      	movs	r2, #5
 8007624:	701a      	strb	r2, [r3, #0]
      break;
 8007626:	e07d      	b.n	8007724 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007628:	7bfb      	ldrb	r3, [r7, #15]
 800762a:	2b04      	cmp	r3, #4
 800762c:	d17a      	bne.n	8007724 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800762e:	78fb      	ldrb	r3, [r7, #3]
 8007630:	693a      	ldr	r2, [r7, #16]
 8007632:	2134      	movs	r1, #52	; 0x34
 8007634:	fb01 f303 	mul.w	r3, r1, r3
 8007638:	4413      	add	r3, r2
 800763a:	3390      	adds	r3, #144	; 0x90
 800763c:	2208      	movs	r2, #8
 800763e:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007640:	2302      	movs	r3, #2
 8007642:	75fb      	strb	r3, [r7, #23]
      break;
 8007644:	e06e      	b.n	8007724 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8007646:	78f9      	ldrb	r1, [r7, #3]
 8007648:	2300      	movs	r3, #0
 800764a:	9300      	str	r3, [sp, #0]
 800764c:	2300      	movs	r3, #0
 800764e:	2200      	movs	r2, #0
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 fe05 	bl	8008260 <USBH_MSC_SCSI_Write>
 8007656:	4603      	mov	r3, r0
 8007658:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800765a:	7bfb      	ldrb	r3, [r7, #15]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d10b      	bne.n	8007678 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007660:	78fb      	ldrb	r3, [r7, #3]
 8007662:	693a      	ldr	r2, [r7, #16]
 8007664:	2134      	movs	r1, #52	; 0x34
 8007666:	fb01 f303 	mul.w	r3, r1, r3
 800766a:	4413      	add	r3, r2
 800766c:	3390      	adds	r3, #144	; 0x90
 800766e:	2201      	movs	r2, #1
 8007670:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8007672:	2300      	movs	r3, #0
 8007674:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007676:	e057      	b.n	8007728 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8007678:	7bfb      	ldrb	r3, [r7, #15]
 800767a:	2b02      	cmp	r3, #2
 800767c:	d109      	bne.n	8007692 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800767e:	78fb      	ldrb	r3, [r7, #3]
 8007680:	693a      	ldr	r2, [r7, #16]
 8007682:	2134      	movs	r1, #52	; 0x34
 8007684:	fb01 f303 	mul.w	r3, r1, r3
 8007688:	4413      	add	r3, r2
 800768a:	3390      	adds	r3, #144	; 0x90
 800768c:	2205      	movs	r2, #5
 800768e:	701a      	strb	r2, [r3, #0]
      break;
 8007690:	e04a      	b.n	8007728 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007692:	7bfb      	ldrb	r3, [r7, #15]
 8007694:	2b04      	cmp	r3, #4
 8007696:	d147      	bne.n	8007728 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007698:	78fb      	ldrb	r3, [r7, #3]
 800769a:	693a      	ldr	r2, [r7, #16]
 800769c:	2134      	movs	r1, #52	; 0x34
 800769e:	fb01 f303 	mul.w	r3, r1, r3
 80076a2:	4413      	add	r3, r2
 80076a4:	3390      	adds	r3, #144	; 0x90
 80076a6:	2208      	movs	r2, #8
 80076a8:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80076aa:	2302      	movs	r3, #2
 80076ac:	75fb      	strb	r3, [r7, #23]
      break;
 80076ae:	e03b      	b.n	8007728 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80076b0:	78fb      	ldrb	r3, [r7, #3]
 80076b2:	2234      	movs	r2, #52	; 0x34
 80076b4:	fb02 f303 	mul.w	r3, r2, r3
 80076b8:	3398      	adds	r3, #152	; 0x98
 80076ba:	693a      	ldr	r2, [r7, #16]
 80076bc:	4413      	add	r3, r2
 80076be:	1d1a      	adds	r2, r3, #4
 80076c0:	78fb      	ldrb	r3, [r7, #3]
 80076c2:	4619      	mov	r1, r3
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 fd52 	bl	800816e <USBH_MSC_SCSI_RequestSense>
 80076ca:	4603      	mov	r3, r0
 80076cc:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80076ce:	7bfb      	ldrb	r3, [r7, #15]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d113      	bne.n	80076fc <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80076d4:	78fb      	ldrb	r3, [r7, #3]
 80076d6:	693a      	ldr	r2, [r7, #16]
 80076d8:	2134      	movs	r1, #52	; 0x34
 80076da:	fb01 f303 	mul.w	r3, r1, r3
 80076de:	4413      	add	r3, r2
 80076e0:	3390      	adds	r3, #144	; 0x90
 80076e2:	2201      	movs	r2, #1
 80076e4:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 80076e6:	78fb      	ldrb	r3, [r7, #3]
 80076e8:	693a      	ldr	r2, [r7, #16]
 80076ea:	2134      	movs	r1, #52	; 0x34
 80076ec:	fb01 f303 	mul.w	r3, r1, r3
 80076f0:	4413      	add	r3, r2
 80076f2:	3391      	adds	r3, #145	; 0x91
 80076f4:	2202      	movs	r2, #2
 80076f6:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 80076f8:	2302      	movs	r3, #2
 80076fa:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 80076fc:	7bfb      	ldrb	r3, [r7, #15]
 80076fe:	2b02      	cmp	r3, #2
 8007700:	d014      	beq.n	800772c <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007702:	7bfb      	ldrb	r3, [r7, #15]
 8007704:	2b04      	cmp	r3, #4
 8007706:	d111      	bne.n	800772c <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007708:	78fb      	ldrb	r3, [r7, #3]
 800770a:	693a      	ldr	r2, [r7, #16]
 800770c:	2134      	movs	r1, #52	; 0x34
 800770e:	fb01 f303 	mul.w	r3, r1, r3
 8007712:	4413      	add	r3, r2
 8007714:	3390      	adds	r3, #144	; 0x90
 8007716:	2208      	movs	r2, #8
 8007718:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800771a:	2302      	movs	r3, #2
 800771c:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800771e:	e005      	b.n	800772c <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8007720:	bf00      	nop
 8007722:	e004      	b.n	800772e <USBH_MSC_RdWrProcess+0x194>
      break;
 8007724:	bf00      	nop
 8007726:	e002      	b.n	800772e <USBH_MSC_RdWrProcess+0x194>
      break;
 8007728:	bf00      	nop
 800772a:	e000      	b.n	800772e <USBH_MSC_RdWrProcess+0x194>
      break;
 800772c:	bf00      	nop

  }
  return error;
 800772e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007730:	4618      	mov	r0, r3
 8007732:	3718      	adds	r7, #24
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007738:	b480      	push	{r7}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	460b      	mov	r3, r1
 8007742:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800774a:	69db      	ldr	r3, [r3, #28]
 800774c:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	b2db      	uxtb	r3, r3
 8007754:	2b0b      	cmp	r3, #11
 8007756:	d10c      	bne.n	8007772 <USBH_MSC_UnitIsReady+0x3a>
 8007758:	78fb      	ldrb	r3, [r7, #3]
 800775a:	68ba      	ldr	r2, [r7, #8]
 800775c:	2134      	movs	r1, #52	; 0x34
 800775e:	fb01 f303 	mul.w	r3, r1, r3
 8007762:	4413      	add	r3, r2
 8007764:	3391      	adds	r3, #145	; 0x91
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d102      	bne.n	8007772 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800776c:	2301      	movs	r3, #1
 800776e:	73fb      	strb	r3, [r7, #15]
 8007770:	e001      	b.n	8007776 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8007772:	2300      	movs	r3, #0
 8007774:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8007776:	7bfb      	ldrb	r3, [r7, #15]
}
 8007778:	4618      	mov	r0, r3
 800777a:	3714      	adds	r7, #20
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b086      	sub	sp, #24
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	460b      	mov	r3, r1
 800778e:	607a      	str	r2, [r7, #4]
 8007790:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007798:	69db      	ldr	r3, [r3, #28]
 800779a:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	2b0b      	cmp	r3, #11
 80077a4:	d10d      	bne.n	80077c2 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80077a6:	7afb      	ldrb	r3, [r7, #11]
 80077a8:	2234      	movs	r2, #52	; 0x34
 80077aa:	fb02 f303 	mul.w	r3, r2, r3
 80077ae:	3390      	adds	r3, #144	; 0x90
 80077b0:	697a      	ldr	r2, [r7, #20]
 80077b2:	4413      	add	r3, r2
 80077b4:	2234      	movs	r2, #52	; 0x34
 80077b6:	4619      	mov	r1, r3
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f002 fe57 	bl	800a46c <memcpy>
    return USBH_OK;
 80077be:	2300      	movs	r3, #0
 80077c0:	e000      	b.n	80077c4 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 80077c2:	2302      	movs	r3, #2
  }
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3718      	adds	r7, #24
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b088      	sub	sp, #32
 80077d0:	af02      	add	r7, sp, #8
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	607a      	str	r2, [r7, #4]
 80077d6:	603b      	str	r3, [r7, #0]
 80077d8:	460b      	mov	r3, r1
 80077da:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077e2:	69db      	ldr	r3, [r3, #28]
 80077e4:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d00e      	beq.n	8007810 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80077f8:	2b0b      	cmp	r3, #11
 80077fa:	d109      	bne.n	8007810 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80077fc:	7afb      	ldrb	r3, [r7, #11]
 80077fe:	697a      	ldr	r2, [r7, #20]
 8007800:	2134      	movs	r1, #52	; 0x34
 8007802:	fb01 f303 	mul.w	r3, r1, r3
 8007806:	4413      	add	r3, r2
 8007808:	3390      	adds	r3, #144	; 0x90
 800780a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800780c:	2b01      	cmp	r3, #1
 800780e:	d001      	beq.n	8007814 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8007810:	2302      	movs	r3, #2
 8007812:	e040      	b.n	8007896 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	2206      	movs	r2, #6
 8007818:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800781a:	7afb      	ldrb	r3, [r7, #11]
 800781c:	697a      	ldr	r2, [r7, #20]
 800781e:	2134      	movs	r1, #52	; 0x34
 8007820:	fb01 f303 	mul.w	r3, r1, r3
 8007824:	4413      	add	r3, r2
 8007826:	3390      	adds	r3, #144	; 0x90
 8007828:	2206      	movs	r2, #6
 800782a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800782c:	7afb      	ldrb	r3, [r7, #11]
 800782e:	b29a      	uxth	r2, r3
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8007836:	7af9      	ldrb	r1, [r7, #11]
 8007838:	6a3b      	ldr	r3, [r7, #32]
 800783a:	9300      	str	r3, [sp, #0]
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	68f8      	ldr	r0, [r7, #12]
 8007842:	f000 fd78 	bl	8008336 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800784c:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800784e:	e016      	b.n	800787e <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	1ad2      	subs	r2, r2, r3
 800785a:	6a3b      	ldr	r3, [r7, #32]
 800785c:	f242 7110 	movw	r1, #10000	; 0x2710
 8007860:	fb01 f303 	mul.w	r3, r1, r3
 8007864:	429a      	cmp	r2, r3
 8007866:	d805      	bhi.n	8007874 <USBH_MSC_Read+0xa8>
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800786e:	b2db      	uxtb	r3, r3
 8007870:	2b00      	cmp	r3, #0
 8007872:	d104      	bne.n	800787e <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	2201      	movs	r2, #1
 8007878:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800787a:	2302      	movs	r3, #2
 800787c:	e00b      	b.n	8007896 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800787e:	7afb      	ldrb	r3, [r7, #11]
 8007880:	4619      	mov	r1, r3
 8007882:	68f8      	ldr	r0, [r7, #12]
 8007884:	f7ff fe89 	bl	800759a <USBH_MSC_RdWrProcess>
 8007888:	4603      	mov	r3, r0
 800788a:	2b01      	cmp	r3, #1
 800788c:	d0e0      	beq.n	8007850 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	2201      	movs	r2, #1
 8007892:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3718      	adds	r7, #24
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b088      	sub	sp, #32
 80078a2:	af02      	add	r7, sp, #8
 80078a4:	60f8      	str	r0, [r7, #12]
 80078a6:	607a      	str	r2, [r7, #4]
 80078a8:	603b      	str	r3, [r7, #0]
 80078aa:	460b      	mov	r3, r1
 80078ac:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078b4:	69db      	ldr	r3, [r3, #28]
 80078b6:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d00e      	beq.n	80078e2 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80078ca:	2b0b      	cmp	r3, #11
 80078cc:	d109      	bne.n	80078e2 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80078ce:	7afb      	ldrb	r3, [r7, #11]
 80078d0:	697a      	ldr	r2, [r7, #20]
 80078d2:	2134      	movs	r1, #52	; 0x34
 80078d4:	fb01 f303 	mul.w	r3, r1, r3
 80078d8:	4413      	add	r3, r2
 80078da:	3390      	adds	r3, #144	; 0x90
 80078dc:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d001      	beq.n	80078e6 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 80078e2:	2302      	movs	r3, #2
 80078e4:	e040      	b.n	8007968 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	2207      	movs	r2, #7
 80078ea:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 80078ec:	7afb      	ldrb	r3, [r7, #11]
 80078ee:	697a      	ldr	r2, [r7, #20]
 80078f0:	2134      	movs	r1, #52	; 0x34
 80078f2:	fb01 f303 	mul.w	r3, r1, r3
 80078f6:	4413      	add	r3, r2
 80078f8:	3390      	adds	r3, #144	; 0x90
 80078fa:	2207      	movs	r2, #7
 80078fc:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80078fe:	7afb      	ldrb	r3, [r7, #11]
 8007900:	b29a      	uxth	r2, r3
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8007908:	7af9      	ldrb	r1, [r7, #11]
 800790a:	6a3b      	ldr	r3, [r7, #32]
 800790c:	9300      	str	r3, [sp, #0]
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	68f8      	ldr	r0, [r7, #12]
 8007914:	f000 fca4 	bl	8008260 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800791e:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007920:	e016      	b.n	8007950 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	1ad2      	subs	r2, r2, r3
 800792c:	6a3b      	ldr	r3, [r7, #32]
 800792e:	f242 7110 	movw	r1, #10000	; 0x2710
 8007932:	fb01 f303 	mul.w	r3, r1, r3
 8007936:	429a      	cmp	r2, r3
 8007938:	d805      	bhi.n	8007946 <USBH_MSC_Write+0xa8>
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007940:	b2db      	uxtb	r3, r3
 8007942:	2b00      	cmp	r3, #0
 8007944:	d104      	bne.n	8007950 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	2201      	movs	r2, #1
 800794a:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800794c:	2302      	movs	r3, #2
 800794e:	e00b      	b.n	8007968 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007950:	7afb      	ldrb	r3, [r7, #11]
 8007952:	4619      	mov	r1, r3
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f7ff fe20 	bl	800759a <USBH_MSC_RdWrProcess>
 800795a:	4603      	mov	r3, r0
 800795c:	2b01      	cmp	r3, #1
 800795e:	d0e0      	beq.n	8007922 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	2201      	movs	r2, #1
 8007964:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8007966:	2300      	movs	r3, #0
}
 8007968:	4618      	mov	r0, r3
 800796a:	3718      	adds	r7, #24
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2221      	movs	r2, #33	; 0x21
 800797c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	22ff      	movs	r2, #255	; 0xff
 8007982:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8007996:	2200      	movs	r2, #0
 8007998:	2100      	movs	r1, #0
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f001 fea4 	bl	80096e8 <USBH_CtlReq>
 80079a0:	4603      	mov	r3, r0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3708      	adds	r7, #8
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b082      	sub	sp, #8
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
 80079b2:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	22a1      	movs	r2, #161	; 0xa1
 80079b8:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	22fe      	movs	r2, #254	; 0xfe
 80079be:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 80079d2:	2201      	movs	r2, #1
 80079d4:	6839      	ldr	r1, [r7, #0]
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f001 fe86 	bl	80096e8 <USBH_CtlReq>
 80079dc:	4603      	mov	r3, r0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3708      	adds	r7, #8
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
	...

080079e8 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079f6:	69db      	ldr	r3, [r3, #28]
 80079f8:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	4a09      	ldr	r2, [pc, #36]	; (8007a24 <USBH_MSC_BOT_Init+0x3c>)
 80079fe:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	4a09      	ldr	r2, [pc, #36]	; (8007a28 <USBH_MSC_BOT_Init+0x40>)
 8007a04:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2201      	movs	r2, #1
 8007a12:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8007a16:	2300      	movs	r3, #0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3714      	adds	r7, #20
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr
 8007a24:	43425355 	.word	0x43425355
 8007a28:	20304050 	.word	0x20304050

08007a2c <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b088      	sub	sp, #32
 8007a30:	af02      	add	r7, sp, #8
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	460b      	mov	r3, r1
 8007a36:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8007a40:	2301      	movs	r3, #1
 8007a42:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007a44:	2300      	movs	r3, #0
 8007a46:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a4e:	69db      	ldr	r3, [r3, #28]
 8007a50:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8007a52:	2300      	movs	r3, #0
 8007a54:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007a5c:	3b01      	subs	r3, #1
 8007a5e:	2b0a      	cmp	r3, #10
 8007a60:	f200 819e 	bhi.w	8007da0 <USBH_MSC_BOT_Process+0x374>
 8007a64:	a201      	add	r2, pc, #4	; (adr r2, 8007a6c <USBH_MSC_BOT_Process+0x40>)
 8007a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a6a:	bf00      	nop
 8007a6c:	08007a99 	.word	0x08007a99
 8007a70:	08007ac1 	.word	0x08007ac1
 8007a74:	08007b2b 	.word	0x08007b2b
 8007a78:	08007b49 	.word	0x08007b49
 8007a7c:	08007bcd 	.word	0x08007bcd
 8007a80:	08007bef 	.word	0x08007bef
 8007a84:	08007c87 	.word	0x08007c87
 8007a88:	08007ca3 	.word	0x08007ca3
 8007a8c:	08007cf5 	.word	0x08007cf5
 8007a90:	08007d25 	.word	0x08007d25
 8007a94:	08007d87 	.word	0x08007d87
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	78fa      	ldrb	r2, [r7, #3]
 8007a9c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	795b      	ldrb	r3, [r3, #5]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	9200      	str	r2, [sp, #0]
 8007ab6:	221f      	movs	r2, #31
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f002 f824 	bl	8009b06 <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8007abe:	e17e      	b.n	8007dbe <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	795b      	ldrb	r3, [r3, #5]
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f002 fbb8 	bl	800a23c <USBH_LL_GetURBState>
 8007acc:	4603      	mov	r3, r0
 8007ace:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8007ad0:	7d3b      	ldrb	r3, [r7, #20]
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d118      	bne.n	8007b08 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00f      	beq.n	8007afe <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007ae4:	b25b      	sxtb	r3, r3
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	da04      	bge.n	8007af4 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	2203      	movs	r2, #3
 8007aee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007af2:	e157      	b.n	8007da4 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	2205      	movs	r2, #5
 8007af8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007afc:	e152      	b.n	8007da4 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	2207      	movs	r2, #7
 8007b02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007b06:	e14d      	b.n	8007da4 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007b08:	7d3b      	ldrb	r3, [r7, #20]
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	d104      	bne.n	8007b18 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	2201      	movs	r2, #1
 8007b12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007b16:	e145      	b.n	8007da4 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8007b18:	7d3b      	ldrb	r3, [r7, #20]
 8007b1a:	2b05      	cmp	r3, #5
 8007b1c:	f040 8142 	bne.w	8007da4 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	220a      	movs	r2, #10
 8007b24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007b28:	e13c      	b.n	8007da4 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	895a      	ldrh	r2, [r3, #10]
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	791b      	ldrb	r3, [r3, #4]
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f002 f809 	bl	8009b50 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	2204      	movs	r2, #4
 8007b42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8007b46:	e13a      	b.n	8007dbe <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	791b      	ldrb	r3, [r3, #4]
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f002 fb74 	bl	800a23c <USBH_LL_GetURBState>
 8007b54:	4603      	mov	r3, r0
 8007b56:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8007b58:	7d3b      	ldrb	r3, [r7, #20]
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d12d      	bne.n	8007bba <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b62:	693a      	ldr	r2, [r7, #16]
 8007b64:	8952      	ldrh	r2, [r2, #10]
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d910      	bls.n	8007b8c <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b70:	693a      	ldr	r2, [r7, #16]
 8007b72:	8952      	ldrh	r2, [r2, #10]
 8007b74:	441a      	add	r2, r3
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b80:	693a      	ldr	r2, [r7, #16]
 8007b82:	8952      	ldrh	r2, [r2, #10]
 8007b84:	1a9a      	subs	r2, r3, r2
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	65da      	str	r2, [r3, #92]	; 0x5c
 8007b8a:	e002      	b.n	8007b92 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00a      	beq.n	8007bb0 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	895a      	ldrh	r2, [r3, #10]
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	791b      	ldrb	r3, [r3, #4]
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f001 ffd1 	bl	8009b50 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8007bae:	e0fb      	b.n	8007da8 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	2207      	movs	r2, #7
 8007bb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007bb8:	e0f6      	b.n	8007da8 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8007bba:	7d3b      	ldrb	r3, [r7, #20]
 8007bbc:	2b05      	cmp	r3, #5
 8007bbe:	f040 80f3 	bne.w	8007da8 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	2209      	movs	r2, #9
 8007bc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007bca:	e0ed      	b.n	8007da8 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	891a      	ldrh	r2, [r3, #8]
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	795b      	ldrb	r3, [r3, #5]
 8007bda:	2001      	movs	r0, #1
 8007bdc:	9000      	str	r0, [sp, #0]
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f001 ff91 	bl	8009b06 <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	2206      	movs	r2, #6
 8007be8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007bec:	e0e7      	b.n	8007dbe <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	795b      	ldrb	r3, [r3, #5]
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f002 fb21 	bl	800a23c <USBH_LL_GetURBState>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8007bfe:	7d3b      	ldrb	r3, [r7, #20]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d12f      	bne.n	8007c64 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c08:	693a      	ldr	r2, [r7, #16]
 8007c0a:	8912      	ldrh	r2, [r2, #8]
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d910      	bls.n	8007c32 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c16:	693a      	ldr	r2, [r7, #16]
 8007c18:	8912      	ldrh	r2, [r2, #8]
 8007c1a:	441a      	add	r2, r3
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c26:	693a      	ldr	r2, [r7, #16]
 8007c28:	8912      	ldrh	r2, [r2, #8]
 8007c2a:	1a9a      	subs	r2, r3, r2
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	65da      	str	r2, [r3, #92]	; 0x5c
 8007c30:	e002      	b.n	8007c38 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	2200      	movs	r2, #0
 8007c36:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00c      	beq.n	8007c5a <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	891a      	ldrh	r2, [r3, #8]
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	795b      	ldrb	r3, [r3, #5]
 8007c4e:	2001      	movs	r0, #1
 8007c50:	9000      	str	r0, [sp, #0]
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f001 ff57 	bl	8009b06 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8007c58:	e0a8      	b.n	8007dac <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	2207      	movs	r2, #7
 8007c5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007c62:	e0a3      	b.n	8007dac <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007c64:	7d3b      	ldrb	r3, [r7, #20]
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	d104      	bne.n	8007c74 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	2205      	movs	r2, #5
 8007c6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007c72:	e09b      	b.n	8007dac <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8007c74:	7d3b      	ldrb	r3, [r7, #20]
 8007c76:	2b05      	cmp	r3, #5
 8007c78:	f040 8098 	bne.w	8007dac <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	220a      	movs	r2, #10
 8007c80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007c84:	e092      	b.n	8007dac <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	791b      	ldrb	r3, [r3, #4]
 8007c90:	220d      	movs	r2, #13
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f001 ff5c 	bl	8009b50 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	2208      	movs	r2, #8
 8007c9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007ca0:	e08d      	b.n	8007dbe <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	791b      	ldrb	r3, [r3, #4]
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f002 fac7 	bl	800a23c <USBH_LL_GetURBState>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8007cb2:	7d3b      	ldrb	r3, [r7, #20]
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d115      	bne.n	8007ce4 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 f8a9 	bl	8007e20 <USBH_MSC_DecodeCSW>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8007cd2:	7d7b      	ldrb	r3, [r7, #21]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d102      	bne.n	8007cde <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8007cdc:	e068      	b.n	8007db0 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8007cde:	2302      	movs	r3, #2
 8007ce0:	75fb      	strb	r3, [r7, #23]
      break;
 8007ce2:	e065      	b.n	8007db0 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8007ce4:	7d3b      	ldrb	r3, [r7, #20]
 8007ce6:	2b05      	cmp	r3, #5
 8007ce8:	d162      	bne.n	8007db0 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	2209      	movs	r2, #9
 8007cee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007cf2:	e05d      	b.n	8007db0 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8007cf4:	78fb      	ldrb	r3, [r7, #3]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 f864 	bl	8007dc8 <USBH_MSC_BOT_Abort>
 8007d00:	4603      	mov	r3, r0
 8007d02:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8007d04:	7dbb      	ldrb	r3, [r7, #22]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d104      	bne.n	8007d14 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	2207      	movs	r2, #7
 8007d0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8007d12:	e04f      	b.n	8007db4 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8007d14:	7dbb      	ldrb	r3, [r7, #22]
 8007d16:	2b04      	cmp	r3, #4
 8007d18:	d14c      	bne.n	8007db4 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	220b      	movs	r2, #11
 8007d1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007d22:	e047      	b.n	8007db4 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8007d24:	78fb      	ldrb	r3, [r7, #3]
 8007d26:	2201      	movs	r2, #1
 8007d28:	4619      	mov	r1, r3
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f84c 	bl	8007dc8 <USBH_MSC_BOT_Abort>
 8007d30:	4603      	mov	r3, r0
 8007d32:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8007d34:	7dbb      	ldrb	r3, [r7, #22]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d11d      	bne.n	8007d76 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	795b      	ldrb	r3, [r3, #5]
 8007d3e:	4619      	mov	r1, r3
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f002 fad5 	bl	800a2f0 <USBH_LL_GetToggle>
 8007d46:	4603      	mov	r3, r0
 8007d48:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	7959      	ldrb	r1, [r3, #5]
 8007d4e:	7bfb      	ldrb	r3, [r7, #15]
 8007d50:	f1c3 0301 	rsb	r3, r3, #1
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	461a      	mov	r2, r3
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f002 fa99 	bl	800a290 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	791b      	ldrb	r3, [r3, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	4619      	mov	r1, r3
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f002 fa92 	bl	800a290 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	2209      	movs	r2, #9
 8007d70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8007d74:	e020      	b.n	8007db8 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8007d76:	7dbb      	ldrb	r3, [r7, #22]
 8007d78:	2b04      	cmp	r3, #4
 8007d7a:	d11d      	bne.n	8007db8 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	220b      	movs	r2, #11
 8007d80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007d84:	e018      	b.n	8007db8 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f7ff fdf2 	bl	8007970 <USBH_MSC_BOT_REQ_Reset>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8007d90:	7dfb      	ldrb	r3, [r7, #23]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d112      	bne.n	8007dbc <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8007d9e:	e00d      	b.n	8007dbc <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8007da0:	bf00      	nop
 8007da2:	e00c      	b.n	8007dbe <USBH_MSC_BOT_Process+0x392>
      break;
 8007da4:	bf00      	nop
 8007da6:	e00a      	b.n	8007dbe <USBH_MSC_BOT_Process+0x392>
      break;
 8007da8:	bf00      	nop
 8007daa:	e008      	b.n	8007dbe <USBH_MSC_BOT_Process+0x392>
      break;
 8007dac:	bf00      	nop
 8007dae:	e006      	b.n	8007dbe <USBH_MSC_BOT_Process+0x392>
      break;
 8007db0:	bf00      	nop
 8007db2:	e004      	b.n	8007dbe <USBH_MSC_BOT_Process+0x392>
      break;
 8007db4:	bf00      	nop
 8007db6:	e002      	b.n	8007dbe <USBH_MSC_BOT_Process+0x392>
      break;
 8007db8:	bf00      	nop
 8007dba:	e000      	b.n	8007dbe <USBH_MSC_BOT_Process+0x392>
      break;
 8007dbc:	bf00      	nop
  }
  return status;
 8007dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3718      	adds	r7, #24
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	70fb      	strb	r3, [r7, #3]
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8007dd8:	2302      	movs	r3, #2
 8007dda:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007de2:	69db      	ldr	r3, [r3, #28]
 8007de4:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8007de6:	78bb      	ldrb	r3, [r7, #2]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d002      	beq.n	8007df2 <USBH_MSC_BOT_Abort+0x2a>
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d009      	beq.n	8007e04 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8007df0:	e011      	b.n	8007e16 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	79db      	ldrb	r3, [r3, #7]
 8007df6:	4619      	mov	r1, r3
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f001 f9a8 	bl	800914e <USBH_ClrFeature>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	73fb      	strb	r3, [r7, #15]
      break;
 8007e02:	e008      	b.n	8007e16 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	799b      	ldrb	r3, [r3, #6]
 8007e08:	4619      	mov	r1, r3
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f001 f99f 	bl	800914e <USBH_ClrFeature>
 8007e10:	4603      	mov	r3, r0
 8007e12:	73fb      	strb	r3, [r7, #15]
      break;
 8007e14:	bf00      	nop
  }
  return status;
 8007e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3710      	adds	r7, #16
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e2e:	69db      	ldr	r3, [r3, #28]
 8007e30:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8007e32:	2301      	movs	r3, #1
 8007e34:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	791b      	ldrb	r3, [r3, #4]
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f002 f96b 	bl	800a118 <USBH_LL_GetLastXferSize>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b0d      	cmp	r3, #13
 8007e46:	d002      	beq.n	8007e4e <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8007e48:	2302      	movs	r3, #2
 8007e4a:	73fb      	strb	r3, [r7, #15]
 8007e4c:	e024      	b.n	8007e98 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e52:	4a14      	ldr	r2, [pc, #80]	; (8007ea4 <USBH_MSC_DecodeCSW+0x84>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d11d      	bne.n	8007e94 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d119      	bne.n	8007e98 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d102      	bne.n	8007e74 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	73fb      	strb	r3, [r7, #15]
 8007e72:	e011      	b.n	8007e98 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d102      	bne.n	8007e84 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	73fb      	strb	r3, [r7, #15]
 8007e82:	e009      	b.n	8007e98 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d104      	bne.n	8007e98 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8007e8e:	2302      	movs	r3, #2
 8007e90:	73fb      	strb	r3, [r7, #15]
 8007e92:	e001      	b.n	8007e98 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8007e94:	2302      	movs	r3, #2
 8007e96:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8007e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	53425355 	.word	0x53425355

08007ea8 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8007eb4:	2302      	movs	r3, #2
 8007eb6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ebe:	69db      	ldr	r3, [r3, #28]
 8007ec0:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d002      	beq.n	8007ed2 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d021      	beq.n	8007f14 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8007ed0:	e028      	b.n	8007f24 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	220a      	movs	r2, #10
 8007ee4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	3363      	adds	r3, #99	; 0x63
 8007eec:	2210      	movs	r2, #16
 8007eee:	2100      	movs	r1, #0
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f002 fac9 	bl	800a488 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	2201      	movs	r2, #1
 8007f02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	2202      	movs	r2, #2
 8007f0a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	73fb      	strb	r3, [r7, #15]
      break;
 8007f12:	e007      	b.n	8007f24 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007f14:	78fb      	ldrb	r3, [r7, #3]
 8007f16:	4619      	mov	r1, r3
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f7ff fd87 	bl	8007a2c <USBH_MSC_BOT_Process>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	73fb      	strb	r3, [r7, #15]
      break;
 8007f22:	bf00      	nop
  }

  return error;
 8007f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3710      	adds	r7, #16
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}

08007f2e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8007f2e:	b580      	push	{r7, lr}
 8007f30:	b086      	sub	sp, #24
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	60f8      	str	r0, [r7, #12]
 8007f36:	460b      	mov	r3, r1
 8007f38:	607a      	str	r2, [r7, #4]
 8007f3a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f46:	69db      	ldr	r3, [r3, #28]
 8007f48:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d002      	beq.n	8007f5a <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d027      	beq.n	8007fa8 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8007f58:	e05f      	b.n	800801a <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	2208      	movs	r2, #8
 8007f5e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	2280      	movs	r2, #128	; 0x80
 8007f64:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	220a      	movs	r2, #10
 8007f6c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	3363      	adds	r3, #99	; 0x63
 8007f74:	2210      	movs	r2, #16
 8007f76:	2100      	movs	r1, #0
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f002 fa85 	bl	800a488 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	2225      	movs	r2, #37	; 0x25
 8007f82:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	2202      	movs	r2, #2
 8007f92:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	f103 0210 	add.w	r2, r3, #16
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	75fb      	strb	r3, [r7, #23]
      break;
 8007fa6:	e038      	b.n	800801a <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007fa8:	7afb      	ldrb	r3, [r7, #11]
 8007faa:	4619      	mov	r1, r3
 8007fac:	68f8      	ldr	r0, [r7, #12]
 8007fae:	f7ff fd3d 	bl	8007a2c <USBH_MSC_BOT_Process>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8007fb6:	7dfb      	ldrb	r3, [r7, #23]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d12d      	bne.n	8008018 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fc2:	3303      	adds	r3, #3
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fce:	3302      	adds	r3, #2
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	021b      	lsls	r3, r3, #8
 8007fd4:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fdc:	3301      	adds	r3, #1
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007fe2:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	061b      	lsls	r3, r3, #24
 8007fee:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ffa:	3307      	adds	r3, #7
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	b29a      	uxth	r2, r3
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008006:	3306      	adds	r3, #6
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	b29b      	uxth	r3, r3
 800800c:	021b      	lsls	r3, r3, #8
 800800e:	b29b      	uxth	r3, r3
 8008010:	4313      	orrs	r3, r2
 8008012:	b29a      	uxth	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	809a      	strh	r2, [r3, #4]
      break;
 8008018:	bf00      	nop
  }

  return error;
 800801a:	7dfb      	ldrb	r3, [r7, #23]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3718      	adds	r7, #24
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b086      	sub	sp, #24
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	460b      	mov	r3, r1
 800802e:	607a      	str	r2, [r7, #4]
 8008030:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8008032:	2302      	movs	r3, #2
 8008034:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800803c:	69db      	ldr	r3, [r3, #28]
 800803e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008046:	2b01      	cmp	r3, #1
 8008048:	d002      	beq.n	8008050 <USBH_MSC_SCSI_Inquiry+0x2c>
 800804a:	2b02      	cmp	r3, #2
 800804c:	d03d      	beq.n	80080ca <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800804e:	e089      	b.n	8008164 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	2224      	movs	r2, #36	; 0x24
 8008054:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	2280      	movs	r2, #128	; 0x80
 800805a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	220a      	movs	r2, #10
 8008062:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	3363      	adds	r3, #99	; 0x63
 800806a:	220a      	movs	r2, #10
 800806c:	2100      	movs	r1, #0
 800806e:	4618      	mov	r0, r3
 8008070:	f002 fa0a 	bl	800a488 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	2212      	movs	r2, #18
 8008078:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800807c:	7afb      	ldrb	r3, [r7, #11]
 800807e:	015b      	lsls	r3, r3, #5
 8008080:	b2da      	uxtb	r2, r3
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	2200      	movs	r2, #0
 800808c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	2200      	movs	r2, #0
 8008094:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	2224      	movs	r2, #36	; 0x24
 800809c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	2202      	movs	r2, #2
 80080b4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	f103 0210 	add.w	r2, r3, #16
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80080c4:	2301      	movs	r3, #1
 80080c6:	75fb      	strb	r3, [r7, #23]
      break;
 80080c8:	e04c      	b.n	8008164 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 80080ca:	7afb      	ldrb	r3, [r7, #11]
 80080cc:	4619      	mov	r1, r3
 80080ce:	68f8      	ldr	r0, [r7, #12]
 80080d0:	f7ff fcac 	bl	8007a2c <USBH_MSC_BOT_Process>
 80080d4:	4603      	mov	r3, r0
 80080d6:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80080d8:	7dfb      	ldrb	r3, [r7, #23]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d141      	bne.n	8008162 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 80080de:	2222      	movs	r2, #34	; 0x22
 80080e0:	2100      	movs	r1, #0
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f002 f9d0 	bl	800a488 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	f003 031f 	and.w	r3, r3, #31
 80080f4:	b2da      	uxtb	r2, r3
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	095b      	lsrs	r3, r3, #5
 8008104:	b2da      	uxtb	r2, r3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008110:	3301      	adds	r3, #1
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	b25b      	sxtb	r3, r3
 8008116:	2b00      	cmp	r3, #0
 8008118:	da03      	bge.n	8008122 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2201      	movs	r2, #1
 800811e:	709a      	strb	r2, [r3, #2]
 8008120:	e002      	b.n	8008128 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	1cd8      	adds	r0, r3, #3
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008132:	3308      	adds	r3, #8
 8008134:	2208      	movs	r2, #8
 8008136:	4619      	mov	r1, r3
 8008138:	f002 f998 	bl	800a46c <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f103 000c 	add.w	r0, r3, #12
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008148:	3310      	adds	r3, #16
 800814a:	2210      	movs	r2, #16
 800814c:	4619      	mov	r1, r3
 800814e:	f002 f98d 	bl	800a46c <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	331d      	adds	r3, #29
 8008156:	693a      	ldr	r2, [r7, #16]
 8008158:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800815c:	3220      	adds	r2, #32
 800815e:	6812      	ldr	r2, [r2, #0]
 8008160:	601a      	str	r2, [r3, #0]
      break;
 8008162:	bf00      	nop
  }

  return error;
 8008164:	7dfb      	ldrb	r3, [r7, #23]
}
 8008166:	4618      	mov	r0, r3
 8008168:	3718      	adds	r7, #24
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b086      	sub	sp, #24
 8008172:	af00      	add	r7, sp, #0
 8008174:	60f8      	str	r0, [r7, #12]
 8008176:	460b      	mov	r3, r1
 8008178:	607a      	str	r2, [r7, #4]
 800817a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800817c:	2302      	movs	r3, #2
 800817e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008186:	69db      	ldr	r3, [r3, #28]
 8008188:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008190:	2b01      	cmp	r3, #1
 8008192:	d002      	beq.n	800819a <USBH_MSC_SCSI_RequestSense+0x2c>
 8008194:	2b02      	cmp	r3, #2
 8008196:	d03d      	beq.n	8008214 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8008198:	e05d      	b.n	8008256 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	220e      	movs	r2, #14
 800819e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	2280      	movs	r2, #128	; 0x80
 80081a4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	220a      	movs	r2, #10
 80081ac:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	3363      	adds	r3, #99	; 0x63
 80081b4:	2210      	movs	r2, #16
 80081b6:	2100      	movs	r1, #0
 80081b8:	4618      	mov	r0, r3
 80081ba:	f002 f965 	bl	800a488 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	2203      	movs	r2, #3
 80081c2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80081c6:	7afb      	ldrb	r3, [r7, #11]
 80081c8:	015b      	lsls	r3, r3, #5
 80081ca:	b2da      	uxtb	r2, r3
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	2200      	movs	r2, #0
 80081de:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	220e      	movs	r2, #14
 80081e6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	2201      	movs	r2, #1
 80081f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	2202      	movs	r2, #2
 80081fe:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	f103 0210 	add.w	r2, r3, #16
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800820e:	2301      	movs	r3, #1
 8008210:	75fb      	strb	r3, [r7, #23]
      break;
 8008212:	e020      	b.n	8008256 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008214:	7afb      	ldrb	r3, [r7, #11]
 8008216:	4619      	mov	r1, r3
 8008218:	68f8      	ldr	r0, [r7, #12]
 800821a:	f7ff fc07 	bl	8007a2c <USBH_MSC_BOT_Process>
 800821e:	4603      	mov	r3, r0
 8008220:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8008222:	7dfb      	ldrb	r3, [r7, #23]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d115      	bne.n	8008254 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800822e:	3302      	adds	r3, #2
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	f003 030f 	and.w	r3, r3, #15
 8008236:	b2da      	uxtb	r2, r3
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008242:	7b1a      	ldrb	r2, [r3, #12]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800824e:	7b5a      	ldrb	r2, [r3, #13]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	709a      	strb	r2, [r3, #2]
      break;
 8008254:	bf00      	nop
  }

  return error;
 8008256:	7dfb      	ldrb	r3, [r7, #23]
}
 8008258:	4618      	mov	r0, r3
 800825a:	3718      	adds	r7, #24
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b086      	sub	sp, #24
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	607a      	str	r2, [r7, #4]
 800826a:	603b      	str	r3, [r7, #0]
 800826c:	460b      	mov	r3, r1
 800826e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008270:	2302      	movs	r3, #2
 8008272:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800827a:	69db      	ldr	r3, [r3, #28]
 800827c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008284:	2b01      	cmp	r3, #1
 8008286:	d002      	beq.n	800828e <USBH_MSC_SCSI_Write+0x2e>
 8008288:	2b02      	cmp	r3, #2
 800828a:	d047      	beq.n	800831c <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800828c:	e04e      	b.n	800832c <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8008294:	461a      	mov	r2, r3
 8008296:	6a3b      	ldr	r3, [r7, #32]
 8008298:	fb03 f202 	mul.w	r2, r3, r2
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	220a      	movs	r2, #10
 80082ac:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	3363      	adds	r3, #99	; 0x63
 80082b4:	2210      	movs	r2, #16
 80082b6:	2100      	movs	r1, #0
 80082b8:	4618      	mov	r0, r3
 80082ba:	f002 f8e5 	bl	800a488 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	222a      	movs	r2, #42	; 0x2a
 80082c2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80082c6:	79fa      	ldrb	r2, [r7, #7]
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80082ce:	79ba      	ldrb	r2, [r7, #6]
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80082d6:	797a      	ldrb	r2, [r7, #5]
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80082de:	1d3b      	adds	r3, r7, #4
 80082e0:	781a      	ldrb	r2, [r3, #0]
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80082e8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 80082f2:	f107 0320 	add.w	r3, r7, #32
 80082f6:	781a      	ldrb	r2, [r3, #0]
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	2201      	movs	r2, #1
 8008302:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	2202      	movs	r2, #2
 800830a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	683a      	ldr	r2, [r7, #0]
 8008312:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008316:	2301      	movs	r3, #1
 8008318:	75fb      	strb	r3, [r7, #23]
      break;
 800831a:	e007      	b.n	800832c <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800831c:	7afb      	ldrb	r3, [r7, #11]
 800831e:	4619      	mov	r1, r3
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	f7ff fb83 	bl	8007a2c <USBH_MSC_BOT_Process>
 8008326:	4603      	mov	r3, r0
 8008328:	75fb      	strb	r3, [r7, #23]
      break;
 800832a:	bf00      	nop
  }

  return error;
 800832c:	7dfb      	ldrb	r3, [r7, #23]
}
 800832e:	4618      	mov	r0, r3
 8008330:	3718      	adds	r7, #24
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b086      	sub	sp, #24
 800833a:	af00      	add	r7, sp, #0
 800833c:	60f8      	str	r0, [r7, #12]
 800833e:	607a      	str	r2, [r7, #4]
 8008340:	603b      	str	r3, [r7, #0]
 8008342:	460b      	mov	r3, r1
 8008344:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008346:	2302      	movs	r3, #2
 8008348:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008350:	69db      	ldr	r3, [r3, #28]
 8008352:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800835a:	2b01      	cmp	r3, #1
 800835c:	d002      	beq.n	8008364 <USBH_MSC_SCSI_Read+0x2e>
 800835e:	2b02      	cmp	r3, #2
 8008360:	d047      	beq.n	80083f2 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8008362:	e04e      	b.n	8008402 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800836a:	461a      	mov	r2, r3
 800836c:	6a3b      	ldr	r3, [r7, #32]
 800836e:	fb03 f202 	mul.w	r2, r3, r2
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	2280      	movs	r2, #128	; 0x80
 800837a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	220a      	movs	r2, #10
 8008382:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	3363      	adds	r3, #99	; 0x63
 800838a:	2210      	movs	r2, #16
 800838c:	2100      	movs	r1, #0
 800838e:	4618      	mov	r0, r3
 8008390:	f002 f87a 	bl	800a488 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	2228      	movs	r2, #40	; 0x28
 8008398:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800839c:	79fa      	ldrb	r2, [r7, #7]
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80083a4:	79ba      	ldrb	r2, [r7, #6]
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80083ac:	797a      	ldrb	r2, [r7, #5]
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80083b4:	1d3b      	adds	r3, r7, #4
 80083b6:	781a      	ldrb	r2, [r3, #0]
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80083be:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 80083c8:	f107 0320 	add.w	r3, r7, #32
 80083cc:	781a      	ldrb	r2, [r3, #0]
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	2202      	movs	r2, #2
 80083e0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	683a      	ldr	r2, [r7, #0]
 80083e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80083ec:	2301      	movs	r3, #1
 80083ee:	75fb      	strb	r3, [r7, #23]
      break;
 80083f0:	e007      	b.n	8008402 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 80083f2:	7afb      	ldrb	r3, [r7, #11]
 80083f4:	4619      	mov	r1, r3
 80083f6:	68f8      	ldr	r0, [r7, #12]
 80083f8:	f7ff fb18 	bl	8007a2c <USBH_MSC_BOT_Process>
 80083fc:	4603      	mov	r3, r0
 80083fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008400:	bf00      	nop
  }

  return error;
 8008402:	7dfb      	ldrb	r3, [r7, #23]
}
 8008404:	4618      	mov	r0, r3
 8008406:	3718      	adds	r7, #24
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	4613      	mov	r3, r2
 8008418:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d101      	bne.n	8008424 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008420:	2302      	movs	r3, #2
 8008422:	e029      	b.n	8008478 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	79fa      	ldrb	r2, [r7, #7]
 8008428:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2200      	movs	r2, #0
 8008430:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2200      	movs	r2, #0
 8008438:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800843c:	68f8      	ldr	r0, [r7, #12]
 800843e:	f000 f81f 	bl	8008480 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2200      	movs	r2, #0
 800844e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2200      	movs	r2, #0
 8008456:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2200      	movs	r2, #0
 800845e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d003      	beq.n	8008470 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	68ba      	ldr	r2, [r7, #8]
 800846c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008470:	68f8      	ldr	r0, [r7, #12]
 8008472:	f001 fd9d 	bl	8009fb0 <USBH_LL_Init>

  return USBH_OK;
 8008476:	2300      	movs	r3, #0
}
 8008478:	4618      	mov	r0, r3
 800847a:	3710      	adds	r7, #16
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008480:	b480      	push	{r7}
 8008482:	b085      	sub	sp, #20
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008488:	2300      	movs	r3, #0
 800848a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800848c:	2300      	movs	r3, #0
 800848e:	60fb      	str	r3, [r7, #12]
 8008490:	e009      	b.n	80084a6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	33e0      	adds	r3, #224	; 0xe0
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	4413      	add	r3, r2
 800849c:	2200      	movs	r2, #0
 800849e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	3301      	adds	r3, #1
 80084a4:	60fb      	str	r3, [r7, #12]
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2b0f      	cmp	r3, #15
 80084aa:	d9f2      	bls.n	8008492 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80084ac:	2300      	movs	r3, #0
 80084ae:	60fb      	str	r3, [r7, #12]
 80084b0:	e009      	b.n	80084c6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	4413      	add	r3, r2
 80084b8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80084bc:	2200      	movs	r2, #0
 80084be:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	3301      	adds	r3, #1
 80084c4:	60fb      	str	r3, [r7, #12]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084cc:	d3f1      	bcc.n	80084b2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2201      	movs	r2, #1
 80084de:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2240      	movs	r2, #64	; 0x40
 80084f2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2201      	movs	r2, #1
 8008506:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800851a:	2300      	movs	r3, #0
}
 800851c:	4618      	mov	r0, r3
 800851e:	3714      	adds	r7, #20
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008532:	2300      	movs	r3, #0
 8008534:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d016      	beq.n	800856a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008542:	2b00      	cmp	r3, #0
 8008544:	d10e      	bne.n	8008564 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800854c:	1c59      	adds	r1, r3, #1
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	33de      	adds	r3, #222	; 0xde
 8008558:	6839      	ldr	r1, [r7, #0]
 800855a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800855e:	2300      	movs	r3, #0
 8008560:	73fb      	strb	r3, [r7, #15]
 8008562:	e004      	b.n	800856e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008564:	2302      	movs	r3, #2
 8008566:	73fb      	strb	r3, [r7, #15]
 8008568:	e001      	b.n	800856e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800856a:	2302      	movs	r3, #2
 800856c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800856e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008570:	4618      	mov	r0, r3
 8008572:	3714      	adds	r7, #20
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800857c:	b480      	push	{r7}
 800857e:	b085      	sub	sp, #20
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	460b      	mov	r3, r1
 8008586:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008588:	2300      	movs	r3, #0
 800858a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008592:	78fa      	ldrb	r2, [r7, #3]
 8008594:	429a      	cmp	r2, r3
 8008596:	d204      	bcs.n	80085a2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	78fa      	ldrb	r2, [r7, #3]
 800859c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80085a0:	e001      	b.n	80085a6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80085a2:	2302      	movs	r3, #2
 80085a4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80085a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3714      	adds	r7, #20
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b087      	sub	sp, #28
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	4608      	mov	r0, r1
 80085be:	4611      	mov	r1, r2
 80085c0:	461a      	mov	r2, r3
 80085c2:	4603      	mov	r3, r0
 80085c4:	70fb      	strb	r3, [r7, #3]
 80085c6:	460b      	mov	r3, r1
 80085c8:	70bb      	strb	r3, [r7, #2]
 80085ca:	4613      	mov	r3, r2
 80085cc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80085ce:	2300      	movs	r3, #0
 80085d0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80085d2:	2300      	movs	r3, #0
 80085d4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80085dc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80085de:	e025      	b.n	800862c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80085e0:	7dfb      	ldrb	r3, [r7, #23]
 80085e2:	221a      	movs	r2, #26
 80085e4:	fb02 f303 	mul.w	r3, r2, r3
 80085e8:	3308      	adds	r3, #8
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	4413      	add	r3, r2
 80085ee:	3302      	adds	r3, #2
 80085f0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	795b      	ldrb	r3, [r3, #5]
 80085f6:	78fa      	ldrb	r2, [r7, #3]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d002      	beq.n	8008602 <USBH_FindInterface+0x4e>
 80085fc:	78fb      	ldrb	r3, [r7, #3]
 80085fe:	2bff      	cmp	r3, #255	; 0xff
 8008600:	d111      	bne.n	8008626 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008606:	78ba      	ldrb	r2, [r7, #2]
 8008608:	429a      	cmp	r2, r3
 800860a:	d002      	beq.n	8008612 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800860c:	78bb      	ldrb	r3, [r7, #2]
 800860e:	2bff      	cmp	r3, #255	; 0xff
 8008610:	d109      	bne.n	8008626 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008616:	787a      	ldrb	r2, [r7, #1]
 8008618:	429a      	cmp	r2, r3
 800861a:	d002      	beq.n	8008622 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800861c:	787b      	ldrb	r3, [r7, #1]
 800861e:	2bff      	cmp	r3, #255	; 0xff
 8008620:	d101      	bne.n	8008626 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008622:	7dfb      	ldrb	r3, [r7, #23]
 8008624:	e006      	b.n	8008634 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008626:	7dfb      	ldrb	r3, [r7, #23]
 8008628:	3301      	adds	r3, #1
 800862a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800862c:	7dfb      	ldrb	r3, [r7, #23]
 800862e:	2b01      	cmp	r3, #1
 8008630:	d9d6      	bls.n	80085e0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008632:	23ff      	movs	r3, #255	; 0xff
}
 8008634:	4618      	mov	r0, r3
 8008636:	371c      	adds	r7, #28
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f001 fced 	bl	800a028 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800864e:	2101      	movs	r1, #1
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f001 fe06 	bl	800a262 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008656:	2300      	movs	r3, #0
}
 8008658:	4618      	mov	r0, r3
 800865a:	3708      	adds	r7, #8
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b088      	sub	sp, #32
 8008664:	af04      	add	r7, sp, #16
 8008666:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008668:	2302      	movs	r3, #2
 800866a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800866c:	2300      	movs	r3, #0
 800866e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008676:	b2db      	uxtb	r3, r3
 8008678:	2b01      	cmp	r3, #1
 800867a:	d102      	bne.n	8008682 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2203      	movs	r2, #3
 8008680:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	b2db      	uxtb	r3, r3
 8008688:	2b0b      	cmp	r3, #11
 800868a:	f200 81be 	bhi.w	8008a0a <USBH_Process+0x3aa>
 800868e:	a201      	add	r2, pc, #4	; (adr r2, 8008694 <USBH_Process+0x34>)
 8008690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008694:	080086c5 	.word	0x080086c5
 8008698:	080086f7 	.word	0x080086f7
 800869c:	0800875f 	.word	0x0800875f
 80086a0:	080089a5 	.word	0x080089a5
 80086a4:	08008a0b 	.word	0x08008a0b
 80086a8:	08008803 	.word	0x08008803
 80086ac:	0800894b 	.word	0x0800894b
 80086b0:	08008839 	.word	0x08008839
 80086b4:	08008859 	.word	0x08008859
 80086b8:	08008879 	.word	0x08008879
 80086bc:	080088bd 	.word	0x080088bd
 80086c0:	0800898d 	.word	0x0800898d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f000 819e 	beq.w	8008a0e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2201      	movs	r2, #1
 80086d6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80086d8:	20c8      	movs	r0, #200	; 0xc8
 80086da:	f001 fe39 	bl	800a350 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f001 fcff 	bl	800a0e2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80086f4:	e18b      	b.n	8008a0e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d107      	bne.n	8008710 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2202      	movs	r2, #2
 800870c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800870e:	e18d      	b.n	8008a2c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008716:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800871a:	d914      	bls.n	8008746 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008722:	3301      	adds	r3, #1
 8008724:	b2da      	uxtb	r2, r3
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008732:	2b03      	cmp	r3, #3
 8008734:	d903      	bls.n	800873e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	220d      	movs	r2, #13
 800873a:	701a      	strb	r2, [r3, #0]
      break;
 800873c:	e176      	b.n	8008a2c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	701a      	strb	r2, [r3, #0]
      break;
 8008744:	e172      	b.n	8008a2c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800874c:	f103 020a 	add.w	r2, r3, #10
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008756:	200a      	movs	r0, #10
 8008758:	f001 fdfa 	bl	800a350 <USBH_Delay>
      break;
 800875c:	e166      	b.n	8008a2c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008764:	2b00      	cmp	r3, #0
 8008766:	d005      	beq.n	8008774 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800876e:	2104      	movs	r1, #4
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008774:	2064      	movs	r0, #100	; 0x64
 8008776:	f001 fdeb 	bl	800a350 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f001 fc8a 	bl	800a094 <USBH_LL_GetSpeed>
 8008780:	4603      	mov	r3, r0
 8008782:	461a      	mov	r2, r3
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2205      	movs	r2, #5
 800878e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008790:	2100      	movs	r1, #0
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f001 fa29 	bl	8009bea <USBH_AllocPipe>
 8008798:	4603      	mov	r3, r0
 800879a:	461a      	mov	r2, r3
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80087a0:	2180      	movs	r1, #128	; 0x80
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f001 fa21 	bl	8009bea <USBH_AllocPipe>
 80087a8:	4603      	mov	r3, r0
 80087aa:	461a      	mov	r2, r3
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	7919      	ldrb	r1, [r3, #4]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80087c4:	b292      	uxth	r2, r2
 80087c6:	9202      	str	r2, [sp, #8]
 80087c8:	2200      	movs	r2, #0
 80087ca:	9201      	str	r2, [sp, #4]
 80087cc:	9300      	str	r3, [sp, #0]
 80087ce:	4603      	mov	r3, r0
 80087d0:	2280      	movs	r2, #128	; 0x80
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f001 f9da 	bl	8009b8c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	7959      	ldrb	r1, [r3, #5]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80087ec:	b292      	uxth	r2, r2
 80087ee:	9202      	str	r2, [sp, #8]
 80087f0:	2200      	movs	r2, #0
 80087f2:	9201      	str	r2, [sp, #4]
 80087f4:	9300      	str	r3, [sp, #0]
 80087f6:	4603      	mov	r3, r0
 80087f8:	2200      	movs	r2, #0
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f001 f9c6 	bl	8009b8c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008800:	e114      	b.n	8008a2c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 f918 	bl	8008a38 <USBH_HandleEnum>
 8008808:	4603      	mov	r3, r0
 800880a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800880c:	7bbb      	ldrb	r3, [r7, #14]
 800880e:	b2db      	uxtb	r3, r3
 8008810:	2b00      	cmp	r3, #0
 8008812:	f040 80fe 	bne.w	8008a12 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008824:	2b01      	cmp	r3, #1
 8008826:	d103      	bne.n	8008830 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2208      	movs	r2, #8
 800882c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800882e:	e0f0      	b.n	8008a12 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2207      	movs	r2, #7
 8008834:	701a      	strb	r2, [r3, #0]
      break;
 8008836:	e0ec      	b.n	8008a12 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800883e:	2b00      	cmp	r3, #0
 8008840:	f000 80e9 	beq.w	8008a16 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800884a:	2101      	movs	r1, #1
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2208      	movs	r2, #8
 8008854:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008856:	e0de      	b.n	8008a16 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800885e:	b29b      	uxth	r3, r3
 8008860:	4619      	mov	r1, r3
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 fc2c 	bl	80090c0 <USBH_SetCfg>
 8008868:	4603      	mov	r3, r0
 800886a:	2b00      	cmp	r3, #0
 800886c:	f040 80d5 	bne.w	8008a1a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2209      	movs	r2, #9
 8008874:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008876:	e0d0      	b.n	8008a1a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800887e:	f003 0320 	and.w	r3, r3, #32
 8008882:	2b00      	cmp	r3, #0
 8008884:	d016      	beq.n	80088b4 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008886:	2101      	movs	r1, #1
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 fc3c 	bl	8009106 <USBH_SetFeature>
 800888e:	4603      	mov	r3, r0
 8008890:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008892:	7bbb      	ldrb	r3, [r7, #14]
 8008894:	b2db      	uxtb	r3, r3
 8008896:	2b00      	cmp	r3, #0
 8008898:	d103      	bne.n	80088a2 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	220a      	movs	r2, #10
 800889e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80088a0:	e0bd      	b.n	8008a1e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80088a2:	7bbb      	ldrb	r3, [r7, #14]
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	2b03      	cmp	r3, #3
 80088a8:	f040 80b9 	bne.w	8008a1e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	220a      	movs	r2, #10
 80088b0:	701a      	strb	r2, [r3, #0]
      break;
 80088b2:	e0b4      	b.n	8008a1e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	220a      	movs	r2, #10
 80088b8:	701a      	strb	r2, [r3, #0]
      break;
 80088ba:	e0b0      	b.n	8008a1e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	f000 80ad 	beq.w	8008a22 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80088d0:	2300      	movs	r3, #0
 80088d2:	73fb      	strb	r3, [r7, #15]
 80088d4:	e016      	b.n	8008904 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80088d6:	7bfa      	ldrb	r2, [r7, #15]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	32de      	adds	r2, #222	; 0xde
 80088dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088e0:	791a      	ldrb	r2, [r3, #4]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d108      	bne.n	80088fe <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80088ec:	7bfa      	ldrb	r2, [r7, #15]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	32de      	adds	r2, #222	; 0xde
 80088f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80088fc:	e005      	b.n	800890a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80088fe:	7bfb      	ldrb	r3, [r7, #15]
 8008900:	3301      	adds	r3, #1
 8008902:	73fb      	strb	r3, [r7, #15]
 8008904:	7bfb      	ldrb	r3, [r7, #15]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d0e5      	beq.n	80088d6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008910:	2b00      	cmp	r3, #0
 8008912:	d016      	beq.n	8008942 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800891a:	689b      	ldr	r3, [r3, #8]
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	4798      	blx	r3
 8008920:	4603      	mov	r3, r0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d109      	bne.n	800893a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2206      	movs	r2, #6
 800892a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008932:	2103      	movs	r1, #3
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008938:	e073      	b.n	8008a22 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	220d      	movs	r2, #13
 800893e:	701a      	strb	r2, [r3, #0]
      break;
 8008940:	e06f      	b.n	8008a22 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	220d      	movs	r2, #13
 8008946:	701a      	strb	r2, [r3, #0]
      break;
 8008948:	e06b      	b.n	8008a22 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008950:	2b00      	cmp	r3, #0
 8008952:	d017      	beq.n	8008984 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800895a:	691b      	ldr	r3, [r3, #16]
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	4798      	blx	r3
 8008960:	4603      	mov	r3, r0
 8008962:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008964:	7bbb      	ldrb	r3, [r7, #14]
 8008966:	b2db      	uxtb	r3, r3
 8008968:	2b00      	cmp	r3, #0
 800896a:	d103      	bne.n	8008974 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	220b      	movs	r2, #11
 8008970:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008972:	e058      	b.n	8008a26 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8008974:	7bbb      	ldrb	r3, [r7, #14]
 8008976:	b2db      	uxtb	r3, r3
 8008978:	2b02      	cmp	r3, #2
 800897a:	d154      	bne.n	8008a26 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	220d      	movs	r2, #13
 8008980:	701a      	strb	r2, [r3, #0]
      break;
 8008982:	e050      	b.n	8008a26 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	220d      	movs	r2, #13
 8008988:	701a      	strb	r2, [r3, #0]
      break;
 800898a:	e04c      	b.n	8008a26 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008992:	2b00      	cmp	r3, #0
 8008994:	d049      	beq.n	8008a2a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800899c:	695b      	ldr	r3, [r3, #20]
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	4798      	blx	r3
      }
      break;
 80089a2:	e042      	b.n	8008a2a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f7ff fd67 	bl	8008480 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d009      	beq.n	80089d0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d005      	beq.n	80089e6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80089e0:	2105      	movs	r1, #5
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d107      	bne.n	8008a02 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f7ff fe20 	bl	8008640 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008a00:	e014      	b.n	8008a2c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f001 fb10 	bl	800a028 <USBH_LL_Start>
      break;
 8008a08:	e010      	b.n	8008a2c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8008a0a:	bf00      	nop
 8008a0c:	e00e      	b.n	8008a2c <USBH_Process+0x3cc>
      break;
 8008a0e:	bf00      	nop
 8008a10:	e00c      	b.n	8008a2c <USBH_Process+0x3cc>
      break;
 8008a12:	bf00      	nop
 8008a14:	e00a      	b.n	8008a2c <USBH_Process+0x3cc>
    break;
 8008a16:	bf00      	nop
 8008a18:	e008      	b.n	8008a2c <USBH_Process+0x3cc>
      break;
 8008a1a:	bf00      	nop
 8008a1c:	e006      	b.n	8008a2c <USBH_Process+0x3cc>
      break;
 8008a1e:	bf00      	nop
 8008a20:	e004      	b.n	8008a2c <USBH_Process+0x3cc>
      break;
 8008a22:	bf00      	nop
 8008a24:	e002      	b.n	8008a2c <USBH_Process+0x3cc>
      break;
 8008a26:	bf00      	nop
 8008a28:	e000      	b.n	8008a2c <USBH_Process+0x3cc>
      break;
 8008a2a:	bf00      	nop
  }
  return USBH_OK;
 8008a2c:	2300      	movs	r3, #0
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop

08008a38 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b088      	sub	sp, #32
 8008a3c:	af04      	add	r7, sp, #16
 8008a3e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008a40:	2301      	movs	r3, #1
 8008a42:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008a44:	2301      	movs	r3, #1
 8008a46:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	785b      	ldrb	r3, [r3, #1]
 8008a4c:	2b07      	cmp	r3, #7
 8008a4e:	f200 81c1 	bhi.w	8008dd4 <USBH_HandleEnum+0x39c>
 8008a52:	a201      	add	r2, pc, #4	; (adr r2, 8008a58 <USBH_HandleEnum+0x20>)
 8008a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a58:	08008a79 	.word	0x08008a79
 8008a5c:	08008b37 	.word	0x08008b37
 8008a60:	08008ba1 	.word	0x08008ba1
 8008a64:	08008c2f 	.word	0x08008c2f
 8008a68:	08008c99 	.word	0x08008c99
 8008a6c:	08008d09 	.word	0x08008d09
 8008a70:	08008d4f 	.word	0x08008d4f
 8008a74:	08008d95 	.word	0x08008d95
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008a78:	2108      	movs	r1, #8
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 fa50 	bl	8008f20 <USBH_Get_DevDesc>
 8008a80:	4603      	mov	r3, r0
 8008a82:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008a84:	7bbb      	ldrb	r3, [r7, #14]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d130      	bne.n	8008aec <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2201      	movs	r2, #1
 8008a98:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	7919      	ldrb	r1, [r3, #4]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008aae:	b292      	uxth	r2, r2
 8008ab0:	9202      	str	r2, [sp, #8]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	9201      	str	r2, [sp, #4]
 8008ab6:	9300      	str	r3, [sp, #0]
 8008ab8:	4603      	mov	r3, r0
 8008aba:	2280      	movs	r2, #128	; 0x80
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f001 f865 	bl	8009b8c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	7959      	ldrb	r1, [r3, #5]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008ad6:	b292      	uxth	r2, r2
 8008ad8:	9202      	str	r2, [sp, #8]
 8008ada:	2200      	movs	r2, #0
 8008adc:	9201      	str	r2, [sp, #4]
 8008ade:	9300      	str	r3, [sp, #0]
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f001 f851 	bl	8009b8c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008aea:	e175      	b.n	8008dd8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008aec:	7bbb      	ldrb	r3, [r7, #14]
 8008aee:	2b03      	cmp	r3, #3
 8008af0:	f040 8172 	bne.w	8008dd8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008afa:	3301      	adds	r3, #1
 8008afc:	b2da      	uxtb	r2, r3
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008b0a:	2b03      	cmp	r3, #3
 8008b0c:	d903      	bls.n	8008b16 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	220d      	movs	r2, #13
 8008b12:	701a      	strb	r2, [r3, #0]
      break;
 8008b14:	e160      	b.n	8008dd8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	795b      	ldrb	r3, [r3, #5]
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f001 f885 	bl	8009c2c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	791b      	ldrb	r3, [r3, #4]
 8008b26:	4619      	mov	r1, r3
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f001 f87f 	bl	8009c2c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	701a      	strb	r2, [r3, #0]
      break;
 8008b34:	e150      	b.n	8008dd8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008b36:	2112      	movs	r1, #18
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 f9f1 	bl	8008f20 <USBH_Get_DevDesc>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008b42:	7bbb      	ldrb	r3, [r7, #14]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d103      	bne.n	8008b50 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2202      	movs	r2, #2
 8008b4c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008b4e:	e145      	b.n	8008ddc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b50:	7bbb      	ldrb	r3, [r7, #14]
 8008b52:	2b03      	cmp	r3, #3
 8008b54:	f040 8142 	bne.w	8008ddc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008b5e:	3301      	adds	r3, #1
 8008b60:	b2da      	uxtb	r2, r3
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008b6e:	2b03      	cmp	r3, #3
 8008b70:	d903      	bls.n	8008b7a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	220d      	movs	r2, #13
 8008b76:	701a      	strb	r2, [r3, #0]
      break;
 8008b78:	e130      	b.n	8008ddc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	795b      	ldrb	r3, [r3, #5]
 8008b7e:	4619      	mov	r1, r3
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f001 f853 	bl	8009c2c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	791b      	ldrb	r3, [r3, #4]
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f001 f84d 	bl	8009c2c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2200      	movs	r2, #0
 8008b96:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	701a      	strb	r2, [r3, #0]
      break;
 8008b9e:	e11d      	b.n	8008ddc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008ba0:	2101      	movs	r1, #1
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 fa68 	bl	8009078 <USBH_SetAddress>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008bac:	7bbb      	ldrb	r3, [r7, #14]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d132      	bne.n	8008c18 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008bb2:	2002      	movs	r0, #2
 8008bb4:	f001 fbcc 	bl	800a350 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2203      	movs	r2, #3
 8008bc4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	7919      	ldrb	r1, [r3, #4]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008bda:	b292      	uxth	r2, r2
 8008bdc:	9202      	str	r2, [sp, #8]
 8008bde:	2200      	movs	r2, #0
 8008be0:	9201      	str	r2, [sp, #4]
 8008be2:	9300      	str	r3, [sp, #0]
 8008be4:	4603      	mov	r3, r0
 8008be6:	2280      	movs	r2, #128	; 0x80
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 ffcf 	bl	8009b8c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	7959      	ldrb	r1, [r3, #5]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008c02:	b292      	uxth	r2, r2
 8008c04:	9202      	str	r2, [sp, #8]
 8008c06:	2200      	movs	r2, #0
 8008c08:	9201      	str	r2, [sp, #4]
 8008c0a:	9300      	str	r3, [sp, #0]
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2200      	movs	r2, #0
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 ffbb 	bl	8009b8c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008c16:	e0e3      	b.n	8008de0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c18:	7bbb      	ldrb	r3, [r7, #14]
 8008c1a:	2b03      	cmp	r3, #3
 8008c1c:	f040 80e0 	bne.w	8008de0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	220d      	movs	r2, #13
 8008c24:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	705a      	strb	r2, [r3, #1]
      break;
 8008c2c:	e0d8      	b.n	8008de0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008c2e:	2109      	movs	r1, #9
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 f99d 	bl	8008f70 <USBH_Get_CfgDesc>
 8008c36:	4603      	mov	r3, r0
 8008c38:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008c3a:	7bbb      	ldrb	r3, [r7, #14]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d103      	bne.n	8008c48 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2204      	movs	r2, #4
 8008c44:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008c46:	e0cd      	b.n	8008de4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c48:	7bbb      	ldrb	r3, [r7, #14]
 8008c4a:	2b03      	cmp	r3, #3
 8008c4c:	f040 80ca 	bne.w	8008de4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008c56:	3301      	adds	r3, #1
 8008c58:	b2da      	uxtb	r2, r3
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008c66:	2b03      	cmp	r3, #3
 8008c68:	d903      	bls.n	8008c72 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	220d      	movs	r2, #13
 8008c6e:	701a      	strb	r2, [r3, #0]
      break;
 8008c70:	e0b8      	b.n	8008de4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	795b      	ldrb	r3, [r3, #5]
 8008c76:	4619      	mov	r1, r3
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 ffd7 	bl	8009c2c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	791b      	ldrb	r3, [r3, #4]
 8008c82:	4619      	mov	r1, r3
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 ffd1 	bl	8009c2c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	701a      	strb	r2, [r3, #0]
      break;
 8008c96:	e0a5      	b.n	8008de4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 f965 	bl	8008f70 <USBH_Get_CfgDesc>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008caa:	7bbb      	ldrb	r3, [r7, #14]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d103      	bne.n	8008cb8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2205      	movs	r2, #5
 8008cb4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008cb6:	e097      	b.n	8008de8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008cb8:	7bbb      	ldrb	r3, [r7, #14]
 8008cba:	2b03      	cmp	r3, #3
 8008cbc:	f040 8094 	bne.w	8008de8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	b2da      	uxtb	r2, r3
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008cd6:	2b03      	cmp	r3, #3
 8008cd8:	d903      	bls.n	8008ce2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	220d      	movs	r2, #13
 8008cde:	701a      	strb	r2, [r3, #0]
      break;
 8008ce0:	e082      	b.n	8008de8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	795b      	ldrb	r3, [r3, #5]
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 ff9f 	bl	8009c2c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	791b      	ldrb	r3, [r3, #4]
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 ff99 	bl	8009c2c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2200      	movs	r2, #0
 8008d04:	701a      	strb	r2, [r3, #0]
      break;
 8008d06:	e06f      	b.n	8008de8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d019      	beq.n	8008d46 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008d1e:	23ff      	movs	r3, #255	; 0xff
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 f949 	bl	8008fb8 <USBH_Get_StringDesc>
 8008d26:	4603      	mov	r3, r0
 8008d28:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008d2a:	7bbb      	ldrb	r3, [r7, #14]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d103      	bne.n	8008d38 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2206      	movs	r2, #6
 8008d34:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008d36:	e059      	b.n	8008dec <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008d38:	7bbb      	ldrb	r3, [r7, #14]
 8008d3a:	2b03      	cmp	r3, #3
 8008d3c:	d156      	bne.n	8008dec <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2206      	movs	r2, #6
 8008d42:	705a      	strb	r2, [r3, #1]
      break;
 8008d44:	e052      	b.n	8008dec <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2206      	movs	r2, #6
 8008d4a:	705a      	strb	r2, [r3, #1]
      break;
 8008d4c:	e04e      	b.n	8008dec <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d019      	beq.n	8008d8c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008d64:	23ff      	movs	r3, #255	; 0xff
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 f926 	bl	8008fb8 <USBH_Get_StringDesc>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008d70:	7bbb      	ldrb	r3, [r7, #14]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d103      	bne.n	8008d7e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2207      	movs	r2, #7
 8008d7a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008d7c:	e038      	b.n	8008df0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008d7e:	7bbb      	ldrb	r3, [r7, #14]
 8008d80:	2b03      	cmp	r3, #3
 8008d82:	d135      	bne.n	8008df0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2207      	movs	r2, #7
 8008d88:	705a      	strb	r2, [r3, #1]
      break;
 8008d8a:	e031      	b.n	8008df0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2207      	movs	r2, #7
 8008d90:	705a      	strb	r2, [r3, #1]
      break;
 8008d92:	e02d      	b.n	8008df0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d017      	beq.n	8008dce <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008daa:	23ff      	movs	r3, #255	; 0xff
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 f903 	bl	8008fb8 <USBH_Get_StringDesc>
 8008db2:	4603      	mov	r3, r0
 8008db4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008db6:	7bbb      	ldrb	r3, [r7, #14]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d102      	bne.n	8008dc2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008dc0:	e018      	b.n	8008df4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008dc2:	7bbb      	ldrb	r3, [r7, #14]
 8008dc4:	2b03      	cmp	r3, #3
 8008dc6:	d115      	bne.n	8008df4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	73fb      	strb	r3, [r7, #15]
      break;
 8008dcc:	e012      	b.n	8008df4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	73fb      	strb	r3, [r7, #15]
      break;
 8008dd2:	e00f      	b.n	8008df4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008dd4:	bf00      	nop
 8008dd6:	e00e      	b.n	8008df6 <USBH_HandleEnum+0x3be>
      break;
 8008dd8:	bf00      	nop
 8008dda:	e00c      	b.n	8008df6 <USBH_HandleEnum+0x3be>
      break;
 8008ddc:	bf00      	nop
 8008dde:	e00a      	b.n	8008df6 <USBH_HandleEnum+0x3be>
      break;
 8008de0:	bf00      	nop
 8008de2:	e008      	b.n	8008df6 <USBH_HandleEnum+0x3be>
      break;
 8008de4:	bf00      	nop
 8008de6:	e006      	b.n	8008df6 <USBH_HandleEnum+0x3be>
      break;
 8008de8:	bf00      	nop
 8008dea:	e004      	b.n	8008df6 <USBH_HandleEnum+0x3be>
      break;
 8008dec:	bf00      	nop
 8008dee:	e002      	b.n	8008df6 <USBH_HandleEnum+0x3be>
      break;
 8008df0:	bf00      	nop
 8008df2:	e000      	b.n	8008df6 <USBH_HandleEnum+0x3be>
      break;
 8008df4:	bf00      	nop
  }
  return Status;
 8008df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3710      	adds	r7, #16
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b083      	sub	sp, #12
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	683a      	ldr	r2, [r7, #0]
 8008e0e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008e12:	bf00      	nop
 8008e14:	370c      	adds	r7, #12
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr

08008e1e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b082      	sub	sp, #8
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008e2c:	1c5a      	adds	r2, r3, #1
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 f804 	bl	8008e42 <USBH_HandleSof>
}
 8008e3a:	bf00      	nop
 8008e3c:	3708      	adds	r7, #8
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008e42:	b580      	push	{r7, lr}
 8008e44:	b082      	sub	sp, #8
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	781b      	ldrb	r3, [r3, #0]
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	2b0b      	cmp	r3, #11
 8008e52:	d10a      	bne.n	8008e6a <USBH_HandleSof+0x28>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d005      	beq.n	8008e6a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e64:	699b      	ldr	r3, [r3, #24]
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	4798      	blx	r3
  }
}
 8008e6a:	bf00      	nop
 8008e6c:	3708      	adds	r7, #8
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008e72:	b480      	push	{r7}
 8008e74:	b083      	sub	sp, #12
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008e82:	bf00      	nop
}
 8008e84:	370c      	adds	r7, #12
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr

08008e8e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008e8e:	b480      	push	{r7}
 8008e90:	b083      	sub	sp, #12
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008e9e:	bf00      	nop
}
 8008ea0:	370c      	adds	r7, #12
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr

08008eaa <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008eaa:	b480      	push	{r7}
 8008eac:	b083      	sub	sp, #12
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008eca:	2300      	movs	r3, #0
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2200      	movs	r2, #0
 8008eec:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f001 f8b0 	bl	800a05e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	791b      	ldrb	r3, [r3, #4]
 8008f02:	4619      	mov	r1, r3
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 fe91 	bl	8009c2c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	795b      	ldrb	r3, [r3, #5]
 8008f0e:	4619      	mov	r1, r3
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 fe8b 	bl	8009c2c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008f16:	2300      	movs	r3, #0
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3708      	adds	r7, #8
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b086      	sub	sp, #24
 8008f24:	af02      	add	r7, sp, #8
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	460b      	mov	r3, r1
 8008f2a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008f32:	78fb      	ldrb	r3, [r7, #3]
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	9300      	str	r3, [sp, #0]
 8008f38:	4613      	mov	r3, r2
 8008f3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f3e:	2100      	movs	r1, #0
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 f864 	bl	800900e <USBH_GetDescriptor>
 8008f46:	4603      	mov	r3, r0
 8008f48:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8008f4a:	7bfb      	ldrb	r3, [r7, #15]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d10a      	bne.n	8008f66 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008f5c:	78fa      	ldrb	r2, [r7, #3]
 8008f5e:	b292      	uxth	r2, r2
 8008f60:	4619      	mov	r1, r3
 8008f62:	f000 f918 	bl	8009196 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3710      	adds	r7, #16
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b086      	sub	sp, #24
 8008f74:	af02      	add	r7, sp, #8
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	460b      	mov	r3, r1
 8008f7a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	331c      	adds	r3, #28
 8008f80:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008f82:	887b      	ldrh	r3, [r7, #2]
 8008f84:	9300      	str	r3, [sp, #0]
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f8c:	2100      	movs	r1, #0
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 f83d 	bl	800900e <USBH_GetDescriptor>
 8008f94:	4603      	mov	r3, r0
 8008f96:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008f98:	7bfb      	ldrb	r3, [r7, #15]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d107      	bne.n	8008fae <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008f9e:	887b      	ldrh	r3, [r7, #2]
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	68b9      	ldr	r1, [r7, #8]
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 f987 	bl	80092b8 <USBH_ParseCfgDesc>
 8008faa:	4603      	mov	r3, r0
 8008fac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3710      	adds	r7, #16
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b088      	sub	sp, #32
 8008fbc:	af02      	add	r7, sp, #8
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	607a      	str	r2, [r7, #4]
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	72fb      	strb	r3, [r7, #11]
 8008fc8:	4613      	mov	r3, r2
 8008fca:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8008fcc:	7afb      	ldrb	r3, [r7, #11]
 8008fce:	b29b      	uxth	r3, r3
 8008fd0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008fd4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008fdc:	893b      	ldrh	r3, [r7, #8]
 8008fde:	9300      	str	r3, [sp, #0]
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	2100      	movs	r1, #0
 8008fe4:	68f8      	ldr	r0, [r7, #12]
 8008fe6:	f000 f812 	bl	800900e <USBH_GetDescriptor>
 8008fea:	4603      	mov	r3, r0
 8008fec:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008fee:	7dfb      	ldrb	r3, [r7, #23]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d107      	bne.n	8009004 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008ffa:	893a      	ldrh	r2, [r7, #8]
 8008ffc:	6879      	ldr	r1, [r7, #4]
 8008ffe:	4618      	mov	r0, r3
 8009000:	f000 fb24 	bl	800964c <USBH_ParseStringDesc>
  }

  return status;
 8009004:	7dfb      	ldrb	r3, [r7, #23]
}
 8009006:	4618      	mov	r0, r3
 8009008:	3718      	adds	r7, #24
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b084      	sub	sp, #16
 8009012:	af00      	add	r7, sp, #0
 8009014:	60f8      	str	r0, [r7, #12]
 8009016:	607b      	str	r3, [r7, #4]
 8009018:	460b      	mov	r3, r1
 800901a:	72fb      	strb	r3, [r7, #11]
 800901c:	4613      	mov	r3, r2
 800901e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	789b      	ldrb	r3, [r3, #2]
 8009024:	2b01      	cmp	r3, #1
 8009026:	d11c      	bne.n	8009062 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009028:	7afb      	ldrb	r3, [r7, #11]
 800902a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800902e:	b2da      	uxtb	r2, r3
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2206      	movs	r2, #6
 8009038:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	893a      	ldrh	r2, [r7, #8]
 800903e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009040:	893b      	ldrh	r3, [r7, #8]
 8009042:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009046:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800904a:	d104      	bne.n	8009056 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f240 4209 	movw	r2, #1033	; 0x409
 8009052:	829a      	strh	r2, [r3, #20]
 8009054:	e002      	b.n	800905c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2200      	movs	r2, #0
 800905a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	8b3a      	ldrh	r2, [r7, #24]
 8009060:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009062:	8b3b      	ldrh	r3, [r7, #24]
 8009064:	461a      	mov	r2, r3
 8009066:	6879      	ldr	r1, [r7, #4]
 8009068:	68f8      	ldr	r0, [r7, #12]
 800906a:	f000 fb3d 	bl	80096e8 <USBH_CtlReq>
 800906e:	4603      	mov	r3, r0
}
 8009070:	4618      	mov	r0, r3
 8009072:	3710      	adds	r7, #16
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	460b      	mov	r3, r1
 8009082:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	789b      	ldrb	r3, [r3, #2]
 8009088:	2b01      	cmp	r3, #1
 800908a:	d10f      	bne.n	80090ac <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2205      	movs	r2, #5
 8009096:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009098:	78fb      	ldrb	r3, [r7, #3]
 800909a:	b29a      	uxth	r2, r3
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80090ac:	2200      	movs	r2, #0
 80090ae:	2100      	movs	r1, #0
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 fb19 	bl	80096e8 <USBH_CtlReq>
 80090b6:	4603      	mov	r3, r0
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3708      	adds	r7, #8
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b082      	sub	sp, #8
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	460b      	mov	r3, r1
 80090ca:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	789b      	ldrb	r3, [r3, #2]
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d10e      	bne.n	80090f2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2209      	movs	r2, #9
 80090de:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	887a      	ldrh	r2, [r7, #2]
 80090e4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2200      	movs	r2, #0
 80090ea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80090f2:	2200      	movs	r2, #0
 80090f4:	2100      	movs	r1, #0
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 faf6 	bl	80096e8 <USBH_CtlReq>
 80090fc:	4603      	mov	r3, r0
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3708      	adds	r7, #8
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}

08009106 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009106:	b580      	push	{r7, lr}
 8009108:	b082      	sub	sp, #8
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
 800910e:	460b      	mov	r3, r1
 8009110:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	789b      	ldrb	r3, [r3, #2]
 8009116:	2b01      	cmp	r3, #1
 8009118:	d10f      	bne.n	800913a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2203      	movs	r2, #3
 8009124:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009126:	78fb      	ldrb	r3, [r7, #3]
 8009128:	b29a      	uxth	r2, r3
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2200      	movs	r2, #0
 8009132:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800913a:	2200      	movs	r2, #0
 800913c:	2100      	movs	r1, #0
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 fad2 	bl	80096e8 <USBH_CtlReq>
 8009144:	4603      	mov	r3, r0
}
 8009146:	4618      	mov	r0, r3
 8009148:	3708      	adds	r7, #8
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800914e:	b580      	push	{r7, lr}
 8009150:	b082      	sub	sp, #8
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
 8009156:	460b      	mov	r3, r1
 8009158:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	789b      	ldrb	r3, [r3, #2]
 800915e:	2b01      	cmp	r3, #1
 8009160:	d10f      	bne.n	8009182 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2202      	movs	r2, #2
 8009166:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2201      	movs	r2, #1
 800916c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2200      	movs	r2, #0
 8009172:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009174:	78fb      	ldrb	r3, [r7, #3]
 8009176:	b29a      	uxth	r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8009182:	2200      	movs	r2, #0
 8009184:	2100      	movs	r1, #0
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 faae 	bl	80096e8 <USBH_CtlReq>
 800918c:	4603      	mov	r3, r0
}
 800918e:	4618      	mov	r0, r3
 8009190:	3708      	adds	r7, #8
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}

08009196 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009196:	b480      	push	{r7}
 8009198:	b085      	sub	sp, #20
 800919a:	af00      	add	r7, sp, #0
 800919c:	60f8      	str	r0, [r7, #12]
 800919e:	60b9      	str	r1, [r7, #8]
 80091a0:	4613      	mov	r3, r2
 80091a2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	781a      	ldrb	r2, [r3, #0]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	785a      	ldrb	r2, [r3, #1]
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	3302      	adds	r3, #2
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	b29a      	uxth	r2, r3
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	3303      	adds	r3, #3
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	021b      	lsls	r3, r3, #8
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	4313      	orrs	r3, r2
 80091ca:	b29a      	uxth	r2, r3
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	791a      	ldrb	r2, [r3, #4]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	795a      	ldrb	r2, [r3, #5]
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	799a      	ldrb	r2, [r3, #6]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	79da      	ldrb	r2, [r3, #7]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	79db      	ldrb	r3, [r3, #7]
 80091f4:	2b20      	cmp	r3, #32
 80091f6:	dc11      	bgt.n	800921c <USBH_ParseDevDesc+0x86>
 80091f8:	2b08      	cmp	r3, #8
 80091fa:	db16      	blt.n	800922a <USBH_ParseDevDesc+0x94>
 80091fc:	3b08      	subs	r3, #8
 80091fe:	2201      	movs	r2, #1
 8009200:	fa02 f303 	lsl.w	r3, r2, r3
 8009204:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8009208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800920c:	2b00      	cmp	r3, #0
 800920e:	bf14      	ite	ne
 8009210:	2301      	movne	r3, #1
 8009212:	2300      	moveq	r3, #0
 8009214:	b2db      	uxtb	r3, r3
 8009216:	2b00      	cmp	r3, #0
 8009218:	d102      	bne.n	8009220 <USBH_ParseDevDesc+0x8a>
 800921a:	e006      	b.n	800922a <USBH_ParseDevDesc+0x94>
 800921c:	2b40      	cmp	r3, #64	; 0x40
 800921e:	d104      	bne.n	800922a <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	79da      	ldrb	r2, [r3, #7]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	71da      	strb	r2, [r3, #7]
      break;
 8009228:	e003      	b.n	8009232 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2240      	movs	r2, #64	; 0x40
 800922e:	71da      	strb	r2, [r3, #7]
      break;
 8009230:	bf00      	nop
  }

  if (length > 8U)
 8009232:	88fb      	ldrh	r3, [r7, #6]
 8009234:	2b08      	cmp	r3, #8
 8009236:	d939      	bls.n	80092ac <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	3308      	adds	r3, #8
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	b29a      	uxth	r2, r3
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	3309      	adds	r3, #9
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	b29b      	uxth	r3, r3
 8009248:	021b      	lsls	r3, r3, #8
 800924a:	b29b      	uxth	r3, r3
 800924c:	4313      	orrs	r3, r2
 800924e:	b29a      	uxth	r2, r3
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	330a      	adds	r3, #10
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	b29a      	uxth	r2, r3
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	330b      	adds	r3, #11
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	b29b      	uxth	r3, r3
 8009264:	021b      	lsls	r3, r3, #8
 8009266:	b29b      	uxth	r3, r3
 8009268:	4313      	orrs	r3, r2
 800926a:	b29a      	uxth	r2, r3
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	330c      	adds	r3, #12
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	b29a      	uxth	r2, r3
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	330d      	adds	r3, #13
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	b29b      	uxth	r3, r3
 8009280:	021b      	lsls	r3, r3, #8
 8009282:	b29b      	uxth	r3, r3
 8009284:	4313      	orrs	r3, r2
 8009286:	b29a      	uxth	r2, r3
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	7b9a      	ldrb	r2, [r3, #14]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	7bda      	ldrb	r2, [r3, #15]
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	7c1a      	ldrb	r2, [r3, #16]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	7c5a      	ldrb	r2, [r3, #17]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	745a      	strb	r2, [r3, #17]
  }
}
 80092ac:	bf00      	nop
 80092ae:	3714      	adds	r7, #20
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b08c      	sub	sp, #48	; 0x30
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	4613      	mov	r3, r2
 80092c4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80092cc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80092ce:	2300      	movs	r3, #0
 80092d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80092d8:	2300      	movs	r3, #0
 80092da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80092de:	2300      	movs	r3, #0
 80092e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	781a      	ldrb	r2, [r3, #0]
 80092ec:	6a3b      	ldr	r3, [r7, #32]
 80092ee:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	785a      	ldrb	r2, [r3, #1]
 80092f4:	6a3b      	ldr	r3, [r7, #32]
 80092f6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	3302      	adds	r3, #2
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	b29a      	uxth	r2, r3
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	3303      	adds	r3, #3
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	b29b      	uxth	r3, r3
 8009308:	021b      	lsls	r3, r3, #8
 800930a:	b29b      	uxth	r3, r3
 800930c:	4313      	orrs	r3, r2
 800930e:	b29b      	uxth	r3, r3
 8009310:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009314:	bf28      	it	cs
 8009316:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800931a:	b29a      	uxth	r2, r3
 800931c:	6a3b      	ldr	r3, [r7, #32]
 800931e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	791a      	ldrb	r2, [r3, #4]
 8009324:	6a3b      	ldr	r3, [r7, #32]
 8009326:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	795a      	ldrb	r2, [r3, #5]
 800932c:	6a3b      	ldr	r3, [r7, #32]
 800932e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	799a      	ldrb	r2, [r3, #6]
 8009334:	6a3b      	ldr	r3, [r7, #32]
 8009336:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	79da      	ldrb	r2, [r3, #7]
 800933c:	6a3b      	ldr	r3, [r7, #32]
 800933e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	7a1a      	ldrb	r2, [r3, #8]
 8009344:	6a3b      	ldr	r3, [r7, #32]
 8009346:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8009348:	6a3b      	ldr	r3, [r7, #32]
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	2b09      	cmp	r3, #9
 800934e:	d002      	beq.n	8009356 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009350:	6a3b      	ldr	r3, [r7, #32]
 8009352:	2209      	movs	r2, #9
 8009354:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009356:	88fb      	ldrh	r3, [r7, #6]
 8009358:	2b09      	cmp	r3, #9
 800935a:	f240 809d 	bls.w	8009498 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800935e:	2309      	movs	r3, #9
 8009360:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009362:	2300      	movs	r3, #0
 8009364:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009366:	e081      	b.n	800946c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009368:	f107 0316 	add.w	r3, r7, #22
 800936c:	4619      	mov	r1, r3
 800936e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009370:	f000 f99f 	bl	80096b2 <USBH_GetNextDesc>
 8009374:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009378:	785b      	ldrb	r3, [r3, #1]
 800937a:	2b04      	cmp	r3, #4
 800937c:	d176      	bne.n	800946c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800937e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	2b09      	cmp	r3, #9
 8009384:	d002      	beq.n	800938c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009388:	2209      	movs	r2, #9
 800938a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800938c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009390:	221a      	movs	r2, #26
 8009392:	fb02 f303 	mul.w	r3, r2, r3
 8009396:	3308      	adds	r3, #8
 8009398:	6a3a      	ldr	r2, [r7, #32]
 800939a:	4413      	add	r3, r2
 800939c:	3302      	adds	r3, #2
 800939e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80093a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093a2:	69f8      	ldr	r0, [r7, #28]
 80093a4:	f000 f87e 	bl	80094a4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80093a8:	2300      	movs	r3, #0
 80093aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80093ae:	2300      	movs	r3, #0
 80093b0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80093b2:	e043      	b.n	800943c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80093b4:	f107 0316 	add.w	r3, r7, #22
 80093b8:	4619      	mov	r1, r3
 80093ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093bc:	f000 f979 	bl	80096b2 <USBH_GetNextDesc>
 80093c0:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80093c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c4:	785b      	ldrb	r3, [r3, #1]
 80093c6:	2b05      	cmp	r3, #5
 80093c8:	d138      	bne.n	800943c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	795b      	ldrb	r3, [r3, #5]
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d10f      	bne.n	80093f2 <USBH_ParseCfgDesc+0x13a>
 80093d2:	69fb      	ldr	r3, [r7, #28]
 80093d4:	799b      	ldrb	r3, [r3, #6]
 80093d6:	2b02      	cmp	r3, #2
 80093d8:	d10b      	bne.n	80093f2 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80093da:	69fb      	ldr	r3, [r7, #28]
 80093dc:	79db      	ldrb	r3, [r3, #7]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d10f      	bne.n	8009402 <USBH_ParseCfgDesc+0x14a>
 80093e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	2b09      	cmp	r3, #9
 80093e8:	d00b      	beq.n	8009402 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80093ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ec:	2209      	movs	r2, #9
 80093ee:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80093f0:	e007      	b.n	8009402 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80093f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	2b07      	cmp	r3, #7
 80093f8:	d004      	beq.n	8009404 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80093fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093fc:	2207      	movs	r2, #7
 80093fe:	701a      	strb	r2, [r3, #0]
 8009400:	e000      	b.n	8009404 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009402:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009404:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009408:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800940c:	3201      	adds	r2, #1
 800940e:	00d2      	lsls	r2, r2, #3
 8009410:	211a      	movs	r1, #26
 8009412:	fb01 f303 	mul.w	r3, r1, r3
 8009416:	4413      	add	r3, r2
 8009418:	3308      	adds	r3, #8
 800941a:	6a3a      	ldr	r2, [r7, #32]
 800941c:	4413      	add	r3, r2
 800941e:	3304      	adds	r3, #4
 8009420:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009422:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009424:	69b9      	ldr	r1, [r7, #24]
 8009426:	68f8      	ldr	r0, [r7, #12]
 8009428:	f000 f86b 	bl	8009502 <USBH_ParseEPDesc>
 800942c:	4603      	mov	r3, r0
 800942e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8009432:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009436:	3301      	adds	r3, #1
 8009438:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800943c:	69fb      	ldr	r3, [r7, #28]
 800943e:	791b      	ldrb	r3, [r3, #4]
 8009440:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009444:	429a      	cmp	r2, r3
 8009446:	d204      	bcs.n	8009452 <USBH_ParseCfgDesc+0x19a>
 8009448:	6a3b      	ldr	r3, [r7, #32]
 800944a:	885a      	ldrh	r2, [r3, #2]
 800944c:	8afb      	ldrh	r3, [r7, #22]
 800944e:	429a      	cmp	r2, r3
 8009450:	d8b0      	bhi.n	80093b4 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009452:	69fb      	ldr	r3, [r7, #28]
 8009454:	791b      	ldrb	r3, [r3, #4]
 8009456:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800945a:	429a      	cmp	r2, r3
 800945c:	d201      	bcs.n	8009462 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800945e:	2303      	movs	r3, #3
 8009460:	e01c      	b.n	800949c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8009462:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009466:	3301      	adds	r3, #1
 8009468:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800946c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009470:	2b01      	cmp	r3, #1
 8009472:	d805      	bhi.n	8009480 <USBH_ParseCfgDesc+0x1c8>
 8009474:	6a3b      	ldr	r3, [r7, #32]
 8009476:	885a      	ldrh	r2, [r3, #2]
 8009478:	8afb      	ldrh	r3, [r7, #22]
 800947a:	429a      	cmp	r2, r3
 800947c:	f63f af74 	bhi.w	8009368 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009480:	6a3b      	ldr	r3, [r7, #32]
 8009482:	791b      	ldrb	r3, [r3, #4]
 8009484:	2b02      	cmp	r3, #2
 8009486:	bf28      	it	cs
 8009488:	2302      	movcs	r3, #2
 800948a:	b2db      	uxtb	r3, r3
 800948c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009490:	429a      	cmp	r2, r3
 8009492:	d201      	bcs.n	8009498 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8009494:	2303      	movs	r3, #3
 8009496:	e001      	b.n	800949c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8009498:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800949c:	4618      	mov	r0, r3
 800949e:	3730      	adds	r7, #48	; 0x30
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	781a      	ldrb	r2, [r3, #0]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	785a      	ldrb	r2, [r3, #1]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	789a      	ldrb	r2, [r3, #2]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	78da      	ldrb	r2, [r3, #3]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	791a      	ldrb	r2, [r3, #4]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	795a      	ldrb	r2, [r3, #5]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	799a      	ldrb	r2, [r3, #6]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	79da      	ldrb	r2, [r3, #7]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	7a1a      	ldrb	r2, [r3, #8]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	721a      	strb	r2, [r3, #8]
}
 80094f6:	bf00      	nop
 80094f8:	370c      	adds	r7, #12
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr

08009502 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8009502:	b480      	push	{r7}
 8009504:	b087      	sub	sp, #28
 8009506:	af00      	add	r7, sp, #0
 8009508:	60f8      	str	r0, [r7, #12]
 800950a:	60b9      	str	r1, [r7, #8]
 800950c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800950e:	2300      	movs	r3, #0
 8009510:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	781a      	ldrb	r2, [r3, #0]
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	785a      	ldrb	r2, [r3, #1]
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	789a      	ldrb	r2, [r3, #2]
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	78da      	ldrb	r2, [r3, #3]
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	3304      	adds	r3, #4
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	b29a      	uxth	r2, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	3305      	adds	r3, #5
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	b29b      	uxth	r3, r3
 8009542:	021b      	lsls	r3, r3, #8
 8009544:	b29b      	uxth	r3, r3
 8009546:	4313      	orrs	r3, r2
 8009548:	b29a      	uxth	r2, r3
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	799a      	ldrb	r2, [r3, #6]
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	889b      	ldrh	r3, [r3, #4]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d102      	bne.n	8009564 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800955e:	2303      	movs	r3, #3
 8009560:	75fb      	strb	r3, [r7, #23]
 8009562:	e033      	b.n	80095cc <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	889b      	ldrh	r3, [r3, #4]
 8009568:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800956c:	f023 0307 	bic.w	r3, r3, #7
 8009570:	b29a      	uxth	r2, r3
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	889b      	ldrh	r3, [r3, #4]
 800957a:	b21a      	sxth	r2, r3
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	3304      	adds	r3, #4
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	b299      	uxth	r1, r3
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	3305      	adds	r3, #5
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	b29b      	uxth	r3, r3
 800958c:	021b      	lsls	r3, r3, #8
 800958e:	b29b      	uxth	r3, r3
 8009590:	430b      	orrs	r3, r1
 8009592:	b29b      	uxth	r3, r3
 8009594:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009598:	2b00      	cmp	r3, #0
 800959a:	d110      	bne.n	80095be <USBH_ParseEPDesc+0xbc>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	3304      	adds	r3, #4
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	b299      	uxth	r1, r3
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	3305      	adds	r3, #5
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	021b      	lsls	r3, r3, #8
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	430b      	orrs	r3, r1
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	b21b      	sxth	r3, r3
 80095b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80095ba:	b21b      	sxth	r3, r3
 80095bc:	e001      	b.n	80095c2 <USBH_ParseEPDesc+0xc0>
 80095be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80095c2:	4313      	orrs	r3, r2
 80095c4:	b21b      	sxth	r3, r3
 80095c6:	b29a      	uxth	r2, r3
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d116      	bne.n	8009604 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	78db      	ldrb	r3, [r3, #3]
 80095da:	f003 0303 	and.w	r3, r3, #3
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d005      	beq.n	80095ee <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	78db      	ldrb	r3, [r3, #3]
 80095e6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80095ea:	2b03      	cmp	r3, #3
 80095ec:	d127      	bne.n	800963e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	799b      	ldrb	r3, [r3, #6]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d003      	beq.n	80095fe <USBH_ParseEPDesc+0xfc>
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	799b      	ldrb	r3, [r3, #6]
 80095fa:	2b10      	cmp	r3, #16
 80095fc:	d91f      	bls.n	800963e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80095fe:	2303      	movs	r3, #3
 8009600:	75fb      	strb	r3, [r7, #23]
 8009602:	e01c      	b.n	800963e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	78db      	ldrb	r3, [r3, #3]
 8009608:	f003 0303 	and.w	r3, r3, #3
 800960c:	2b01      	cmp	r3, #1
 800960e:	d10a      	bne.n	8009626 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	799b      	ldrb	r3, [r3, #6]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d003      	beq.n	8009620 <USBH_ParseEPDesc+0x11e>
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	799b      	ldrb	r3, [r3, #6]
 800961c:	2b10      	cmp	r3, #16
 800961e:	d90e      	bls.n	800963e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009620:	2303      	movs	r3, #3
 8009622:	75fb      	strb	r3, [r7, #23]
 8009624:	e00b      	b.n	800963e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	78db      	ldrb	r3, [r3, #3]
 800962a:	f003 0303 	and.w	r3, r3, #3
 800962e:	2b03      	cmp	r3, #3
 8009630:	d105      	bne.n	800963e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	799b      	ldrb	r3, [r3, #6]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d101      	bne.n	800963e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800963a:	2303      	movs	r3, #3
 800963c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800963e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009640:	4618      	mov	r0, r3
 8009642:	371c      	adds	r7, #28
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800964c:	b480      	push	{r7}
 800964e:	b087      	sub	sp, #28
 8009650:	af00      	add	r7, sp, #0
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	60b9      	str	r1, [r7, #8]
 8009656:	4613      	mov	r3, r2
 8009658:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	3301      	adds	r3, #1
 800965e:	781b      	ldrb	r3, [r3, #0]
 8009660:	2b03      	cmp	r3, #3
 8009662:	d120      	bne.n	80096a6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	1e9a      	subs	r2, r3, #2
 800966a:	88fb      	ldrh	r3, [r7, #6]
 800966c:	4293      	cmp	r3, r2
 800966e:	bf28      	it	cs
 8009670:	4613      	movcs	r3, r2
 8009672:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	3302      	adds	r3, #2
 8009678:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800967a:	2300      	movs	r3, #0
 800967c:	82fb      	strh	r3, [r7, #22]
 800967e:	e00b      	b.n	8009698 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009680:	8afb      	ldrh	r3, [r7, #22]
 8009682:	68fa      	ldr	r2, [r7, #12]
 8009684:	4413      	add	r3, r2
 8009686:	781a      	ldrb	r2, [r3, #0]
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	3301      	adds	r3, #1
 8009690:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009692:	8afb      	ldrh	r3, [r7, #22]
 8009694:	3302      	adds	r3, #2
 8009696:	82fb      	strh	r3, [r7, #22]
 8009698:	8afa      	ldrh	r2, [r7, #22]
 800969a:	8abb      	ldrh	r3, [r7, #20]
 800969c:	429a      	cmp	r2, r3
 800969e:	d3ef      	bcc.n	8009680 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	2200      	movs	r2, #0
 80096a4:	701a      	strb	r2, [r3, #0]
  }
}
 80096a6:	bf00      	nop
 80096a8:	371c      	adds	r7, #28
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr

080096b2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80096b2:	b480      	push	{r7}
 80096b4:	b085      	sub	sp, #20
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
 80096ba:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	881a      	ldrh	r2, [r3, #0]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	4413      	add	r3, r2
 80096c8:	b29a      	uxth	r2, r3
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	4413      	add	r3, r2
 80096d8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80096da:	68fb      	ldr	r3, [r7, #12]
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3714      	adds	r7, #20
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr

080096e8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b086      	sub	sp, #24
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	60f8      	str	r0, [r7, #12]
 80096f0:	60b9      	str	r1, [r7, #8]
 80096f2:	4613      	mov	r3, r2
 80096f4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80096f6:	2301      	movs	r3, #1
 80096f8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	789b      	ldrb	r3, [r3, #2]
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d002      	beq.n	8009708 <USBH_CtlReq+0x20>
 8009702:	2b02      	cmp	r3, #2
 8009704:	d00f      	beq.n	8009726 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009706:	e027      	b.n	8009758 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	68ba      	ldr	r2, [r7, #8]
 800970c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	88fa      	ldrh	r2, [r7, #6]
 8009712:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2201      	movs	r2, #1
 8009718:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2202      	movs	r2, #2
 800971e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009720:	2301      	movs	r3, #1
 8009722:	75fb      	strb	r3, [r7, #23]
      break;
 8009724:	e018      	b.n	8009758 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009726:	68f8      	ldr	r0, [r7, #12]
 8009728:	f000 f81c 	bl	8009764 <USBH_HandleControl>
 800972c:	4603      	mov	r3, r0
 800972e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009730:	7dfb      	ldrb	r3, [r7, #23]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d002      	beq.n	800973c <USBH_CtlReq+0x54>
 8009736:	7dfb      	ldrb	r3, [r7, #23]
 8009738:	2b03      	cmp	r3, #3
 800973a:	d106      	bne.n	800974a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2201      	movs	r2, #1
 8009740:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2200      	movs	r2, #0
 8009746:	761a      	strb	r2, [r3, #24]
      break;
 8009748:	e005      	b.n	8009756 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800974a:	7dfb      	ldrb	r3, [r7, #23]
 800974c:	2b02      	cmp	r3, #2
 800974e:	d102      	bne.n	8009756 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2201      	movs	r2, #1
 8009754:	709a      	strb	r2, [r3, #2]
      break;
 8009756:	bf00      	nop
  }
  return status;
 8009758:	7dfb      	ldrb	r3, [r7, #23]
}
 800975a:	4618      	mov	r0, r3
 800975c:	3718      	adds	r7, #24
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
	...

08009764 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b086      	sub	sp, #24
 8009768:	af02      	add	r7, sp, #8
 800976a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800976c:	2301      	movs	r3, #1
 800976e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009770:	2300      	movs	r3, #0
 8009772:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	7e1b      	ldrb	r3, [r3, #24]
 8009778:	3b01      	subs	r3, #1
 800977a:	2b0a      	cmp	r3, #10
 800977c:	f200 8156 	bhi.w	8009a2c <USBH_HandleControl+0x2c8>
 8009780:	a201      	add	r2, pc, #4	; (adr r2, 8009788 <USBH_HandleControl+0x24>)
 8009782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009786:	bf00      	nop
 8009788:	080097b5 	.word	0x080097b5
 800978c:	080097cf 	.word	0x080097cf
 8009790:	08009839 	.word	0x08009839
 8009794:	0800985f 	.word	0x0800985f
 8009798:	08009897 	.word	0x08009897
 800979c:	080098c1 	.word	0x080098c1
 80097a0:	08009913 	.word	0x08009913
 80097a4:	08009935 	.word	0x08009935
 80097a8:	08009971 	.word	0x08009971
 80097ac:	08009997 	.word	0x08009997
 80097b0:	080099d5 	.word	0x080099d5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f103 0110 	add.w	r1, r3, #16
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	795b      	ldrb	r3, [r3, #5]
 80097be:	461a      	mov	r2, r3
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 f943 	bl	8009a4c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2202      	movs	r2, #2
 80097ca:	761a      	strb	r2, [r3, #24]
      break;
 80097cc:	e139      	b.n	8009a42 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	795b      	ldrb	r3, [r3, #5]
 80097d2:	4619      	mov	r1, r3
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 fd31 	bl	800a23c <USBH_LL_GetURBState>
 80097da:	4603      	mov	r3, r0
 80097dc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80097de:	7bbb      	ldrb	r3, [r7, #14]
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d11e      	bne.n	8009822 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	7c1b      	ldrb	r3, [r3, #16]
 80097e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80097ec:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	8adb      	ldrh	r3, [r3, #22]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d00a      	beq.n	800980c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80097f6:	7b7b      	ldrb	r3, [r7, #13]
 80097f8:	2b80      	cmp	r3, #128	; 0x80
 80097fa:	d103      	bne.n	8009804 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2203      	movs	r2, #3
 8009800:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009802:	e115      	b.n	8009a30 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2205      	movs	r2, #5
 8009808:	761a      	strb	r2, [r3, #24]
      break;
 800980a:	e111      	b.n	8009a30 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800980c:	7b7b      	ldrb	r3, [r7, #13]
 800980e:	2b80      	cmp	r3, #128	; 0x80
 8009810:	d103      	bne.n	800981a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2209      	movs	r2, #9
 8009816:	761a      	strb	r2, [r3, #24]
      break;
 8009818:	e10a      	b.n	8009a30 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2207      	movs	r2, #7
 800981e:	761a      	strb	r2, [r3, #24]
      break;
 8009820:	e106      	b.n	8009a30 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009822:	7bbb      	ldrb	r3, [r7, #14]
 8009824:	2b04      	cmp	r3, #4
 8009826:	d003      	beq.n	8009830 <USBH_HandleControl+0xcc>
 8009828:	7bbb      	ldrb	r3, [r7, #14]
 800982a:	2b02      	cmp	r3, #2
 800982c:	f040 8100 	bne.w	8009a30 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	220b      	movs	r2, #11
 8009834:	761a      	strb	r2, [r3, #24]
      break;
 8009836:	e0fb      	b.n	8009a30 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800983e:	b29a      	uxth	r2, r3
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6899      	ldr	r1, [r3, #8]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	899a      	ldrh	r2, [r3, #12]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	791b      	ldrb	r3, [r3, #4]
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 f93a 	bl	8009aca <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2204      	movs	r2, #4
 800985a:	761a      	strb	r2, [r3, #24]
      break;
 800985c:	e0f1      	b.n	8009a42 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	791b      	ldrb	r3, [r3, #4]
 8009862:	4619      	mov	r1, r3
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f000 fce9 	bl	800a23c <USBH_LL_GetURBState>
 800986a:	4603      	mov	r3, r0
 800986c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800986e:	7bbb      	ldrb	r3, [r7, #14]
 8009870:	2b01      	cmp	r3, #1
 8009872:	d102      	bne.n	800987a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2209      	movs	r2, #9
 8009878:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800987a:	7bbb      	ldrb	r3, [r7, #14]
 800987c:	2b05      	cmp	r3, #5
 800987e:	d102      	bne.n	8009886 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009880:	2303      	movs	r3, #3
 8009882:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009884:	e0d6      	b.n	8009a34 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009886:	7bbb      	ldrb	r3, [r7, #14]
 8009888:	2b04      	cmp	r3, #4
 800988a:	f040 80d3 	bne.w	8009a34 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	220b      	movs	r2, #11
 8009892:	761a      	strb	r2, [r3, #24]
      break;
 8009894:	e0ce      	b.n	8009a34 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6899      	ldr	r1, [r3, #8]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	899a      	ldrh	r2, [r3, #12]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	795b      	ldrb	r3, [r3, #5]
 80098a2:	2001      	movs	r0, #1
 80098a4:	9000      	str	r0, [sp, #0]
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 f8ea 	bl	8009a80 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80098b2:	b29a      	uxth	r2, r3
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2206      	movs	r2, #6
 80098bc:	761a      	strb	r2, [r3, #24]
      break;
 80098be:	e0c0      	b.n	8009a42 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	795b      	ldrb	r3, [r3, #5]
 80098c4:	4619      	mov	r1, r3
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 fcb8 	bl	800a23c <USBH_LL_GetURBState>
 80098cc:	4603      	mov	r3, r0
 80098ce:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80098d0:	7bbb      	ldrb	r3, [r7, #14]
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d103      	bne.n	80098de <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2207      	movs	r2, #7
 80098da:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80098dc:	e0ac      	b.n	8009a38 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80098de:	7bbb      	ldrb	r3, [r7, #14]
 80098e0:	2b05      	cmp	r3, #5
 80098e2:	d105      	bne.n	80098f0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	220c      	movs	r2, #12
 80098e8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80098ea:	2303      	movs	r3, #3
 80098ec:	73fb      	strb	r3, [r7, #15]
      break;
 80098ee:	e0a3      	b.n	8009a38 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80098f0:	7bbb      	ldrb	r3, [r7, #14]
 80098f2:	2b02      	cmp	r3, #2
 80098f4:	d103      	bne.n	80098fe <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2205      	movs	r2, #5
 80098fa:	761a      	strb	r2, [r3, #24]
      break;
 80098fc:	e09c      	b.n	8009a38 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80098fe:	7bbb      	ldrb	r3, [r7, #14]
 8009900:	2b04      	cmp	r3, #4
 8009902:	f040 8099 	bne.w	8009a38 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	220b      	movs	r2, #11
 800990a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800990c:	2302      	movs	r3, #2
 800990e:	73fb      	strb	r3, [r7, #15]
      break;
 8009910:	e092      	b.n	8009a38 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	791b      	ldrb	r3, [r3, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	2100      	movs	r1, #0
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 f8d5 	bl	8009aca <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009926:	b29a      	uxth	r2, r3
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2208      	movs	r2, #8
 8009930:	761a      	strb	r2, [r3, #24]

      break;
 8009932:	e086      	b.n	8009a42 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	791b      	ldrb	r3, [r3, #4]
 8009938:	4619      	mov	r1, r3
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 fc7e 	bl	800a23c <USBH_LL_GetURBState>
 8009940:	4603      	mov	r3, r0
 8009942:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009944:	7bbb      	ldrb	r3, [r7, #14]
 8009946:	2b01      	cmp	r3, #1
 8009948:	d105      	bne.n	8009956 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	220d      	movs	r2, #13
 800994e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009950:	2300      	movs	r3, #0
 8009952:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009954:	e072      	b.n	8009a3c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009956:	7bbb      	ldrb	r3, [r7, #14]
 8009958:	2b04      	cmp	r3, #4
 800995a:	d103      	bne.n	8009964 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	220b      	movs	r2, #11
 8009960:	761a      	strb	r2, [r3, #24]
      break;
 8009962:	e06b      	b.n	8009a3c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009964:	7bbb      	ldrb	r3, [r7, #14]
 8009966:	2b05      	cmp	r3, #5
 8009968:	d168      	bne.n	8009a3c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800996a:	2303      	movs	r3, #3
 800996c:	73fb      	strb	r3, [r7, #15]
      break;
 800996e:	e065      	b.n	8009a3c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	795b      	ldrb	r3, [r3, #5]
 8009974:	2201      	movs	r2, #1
 8009976:	9200      	str	r2, [sp, #0]
 8009978:	2200      	movs	r2, #0
 800997a:	2100      	movs	r1, #0
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 f87f 	bl	8009a80 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009988:	b29a      	uxth	r2, r3
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	220a      	movs	r2, #10
 8009992:	761a      	strb	r2, [r3, #24]
      break;
 8009994:	e055      	b.n	8009a42 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	795b      	ldrb	r3, [r3, #5]
 800999a:	4619      	mov	r1, r3
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 fc4d 	bl	800a23c <USBH_LL_GetURBState>
 80099a2:	4603      	mov	r3, r0
 80099a4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80099a6:	7bbb      	ldrb	r3, [r7, #14]
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d105      	bne.n	80099b8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80099ac:	2300      	movs	r3, #0
 80099ae:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	220d      	movs	r2, #13
 80099b4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80099b6:	e043      	b.n	8009a40 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80099b8:	7bbb      	ldrb	r3, [r7, #14]
 80099ba:	2b02      	cmp	r3, #2
 80099bc:	d103      	bne.n	80099c6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2209      	movs	r2, #9
 80099c2:	761a      	strb	r2, [r3, #24]
      break;
 80099c4:	e03c      	b.n	8009a40 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80099c6:	7bbb      	ldrb	r3, [r7, #14]
 80099c8:	2b04      	cmp	r3, #4
 80099ca:	d139      	bne.n	8009a40 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	220b      	movs	r2, #11
 80099d0:	761a      	strb	r2, [r3, #24]
      break;
 80099d2:	e035      	b.n	8009a40 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	7e5b      	ldrb	r3, [r3, #25]
 80099d8:	3301      	adds	r3, #1
 80099da:	b2da      	uxtb	r2, r3
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	765a      	strb	r2, [r3, #25]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	7e5b      	ldrb	r3, [r3, #25]
 80099e4:	2b02      	cmp	r3, #2
 80099e6:	d806      	bhi.n	80099f6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2201      	movs	r2, #1
 80099ec:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2201      	movs	r2, #1
 80099f2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80099f4:	e025      	b.n	8009a42 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80099fc:	2106      	movs	r1, #6
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2200      	movs	r2, #0
 8009a06:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	795b      	ldrb	r3, [r3, #5]
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 f90c 	bl	8009c2c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	791b      	ldrb	r3, [r3, #4]
 8009a18:	4619      	mov	r1, r3
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 f906 	bl	8009c2c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2200      	movs	r2, #0
 8009a24:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009a26:	2302      	movs	r3, #2
 8009a28:	73fb      	strb	r3, [r7, #15]
      break;
 8009a2a:	e00a      	b.n	8009a42 <USBH_HandleControl+0x2de>

    default:
      break;
 8009a2c:	bf00      	nop
 8009a2e:	e008      	b.n	8009a42 <USBH_HandleControl+0x2de>
      break;
 8009a30:	bf00      	nop
 8009a32:	e006      	b.n	8009a42 <USBH_HandleControl+0x2de>
      break;
 8009a34:	bf00      	nop
 8009a36:	e004      	b.n	8009a42 <USBH_HandleControl+0x2de>
      break;
 8009a38:	bf00      	nop
 8009a3a:	e002      	b.n	8009a42 <USBH_HandleControl+0x2de>
      break;
 8009a3c:	bf00      	nop
 8009a3e:	e000      	b.n	8009a42 <USBH_HandleControl+0x2de>
      break;
 8009a40:	bf00      	nop
  }

  return status;
 8009a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3710      	adds	r7, #16
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b088      	sub	sp, #32
 8009a50:	af04      	add	r7, sp, #16
 8009a52:	60f8      	str	r0, [r7, #12]
 8009a54:	60b9      	str	r1, [r7, #8]
 8009a56:	4613      	mov	r3, r2
 8009a58:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009a5a:	79f9      	ldrb	r1, [r7, #7]
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	9303      	str	r3, [sp, #12]
 8009a60:	2308      	movs	r3, #8
 8009a62:	9302      	str	r3, [sp, #8]
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	9301      	str	r3, [sp, #4]
 8009a68:	2300      	movs	r3, #0
 8009a6a:	9300      	str	r3, [sp, #0]
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	2200      	movs	r2, #0
 8009a70:	68f8      	ldr	r0, [r7, #12]
 8009a72:	f000 fbb2 	bl	800a1da <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009a76:	2300      	movs	r3, #0
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3710      	adds	r7, #16
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b088      	sub	sp, #32
 8009a84:	af04      	add	r7, sp, #16
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	60b9      	str	r1, [r7, #8]
 8009a8a:	4611      	mov	r1, r2
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	460b      	mov	r3, r1
 8009a90:	80fb      	strh	r3, [r7, #6]
 8009a92:	4613      	mov	r3, r2
 8009a94:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d001      	beq.n	8009aa4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009aa4:	7979      	ldrb	r1, [r7, #5]
 8009aa6:	7e3b      	ldrb	r3, [r7, #24]
 8009aa8:	9303      	str	r3, [sp, #12]
 8009aaa:	88fb      	ldrh	r3, [r7, #6]
 8009aac:	9302      	str	r3, [sp, #8]
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	9301      	str	r3, [sp, #4]
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	9300      	str	r3, [sp, #0]
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	2200      	movs	r2, #0
 8009aba:	68f8      	ldr	r0, [r7, #12]
 8009abc:	f000 fb8d 	bl	800a1da <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009ac0:	2300      	movs	r3, #0
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3710      	adds	r7, #16
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009aca:	b580      	push	{r7, lr}
 8009acc:	b088      	sub	sp, #32
 8009ace:	af04      	add	r7, sp, #16
 8009ad0:	60f8      	str	r0, [r7, #12]
 8009ad2:	60b9      	str	r1, [r7, #8]
 8009ad4:	4611      	mov	r1, r2
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	460b      	mov	r3, r1
 8009ada:	80fb      	strh	r3, [r7, #6]
 8009adc:	4613      	mov	r3, r2
 8009ade:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009ae0:	7979      	ldrb	r1, [r7, #5]
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	9303      	str	r3, [sp, #12]
 8009ae6:	88fb      	ldrh	r3, [r7, #6]
 8009ae8:	9302      	str	r3, [sp, #8]
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	9301      	str	r3, [sp, #4]
 8009aee:	2301      	movs	r3, #1
 8009af0:	9300      	str	r3, [sp, #0]
 8009af2:	2300      	movs	r3, #0
 8009af4:	2201      	movs	r2, #1
 8009af6:	68f8      	ldr	r0, [r7, #12]
 8009af8:	f000 fb6f 	bl	800a1da <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009afc:	2300      	movs	r3, #0

}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009b06:	b580      	push	{r7, lr}
 8009b08:	b088      	sub	sp, #32
 8009b0a:	af04      	add	r7, sp, #16
 8009b0c:	60f8      	str	r0, [r7, #12]
 8009b0e:	60b9      	str	r1, [r7, #8]
 8009b10:	4611      	mov	r1, r2
 8009b12:	461a      	mov	r2, r3
 8009b14:	460b      	mov	r3, r1
 8009b16:	80fb      	strh	r3, [r7, #6]
 8009b18:	4613      	mov	r3, r2
 8009b1a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d001      	beq.n	8009b2a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009b26:	2300      	movs	r3, #0
 8009b28:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009b2a:	7979      	ldrb	r1, [r7, #5]
 8009b2c:	7e3b      	ldrb	r3, [r7, #24]
 8009b2e:	9303      	str	r3, [sp, #12]
 8009b30:	88fb      	ldrh	r3, [r7, #6]
 8009b32:	9302      	str	r3, [sp, #8]
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	9301      	str	r3, [sp, #4]
 8009b38:	2301      	movs	r3, #1
 8009b3a:	9300      	str	r3, [sp, #0]
 8009b3c:	2302      	movs	r3, #2
 8009b3e:	2200      	movs	r2, #0
 8009b40:	68f8      	ldr	r0, [r7, #12]
 8009b42:	f000 fb4a 	bl	800a1da <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009b46:	2300      	movs	r3, #0
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3710      	adds	r7, #16
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b088      	sub	sp, #32
 8009b54:	af04      	add	r7, sp, #16
 8009b56:	60f8      	str	r0, [r7, #12]
 8009b58:	60b9      	str	r1, [r7, #8]
 8009b5a:	4611      	mov	r1, r2
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	460b      	mov	r3, r1
 8009b60:	80fb      	strh	r3, [r7, #6]
 8009b62:	4613      	mov	r3, r2
 8009b64:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009b66:	7979      	ldrb	r1, [r7, #5]
 8009b68:	2300      	movs	r3, #0
 8009b6a:	9303      	str	r3, [sp, #12]
 8009b6c:	88fb      	ldrh	r3, [r7, #6]
 8009b6e:	9302      	str	r3, [sp, #8]
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	9301      	str	r3, [sp, #4]
 8009b74:	2301      	movs	r3, #1
 8009b76:	9300      	str	r3, [sp, #0]
 8009b78:	2302      	movs	r3, #2
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	68f8      	ldr	r0, [r7, #12]
 8009b7e:	f000 fb2c 	bl	800a1da <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009b82:	2300      	movs	r3, #0
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3710      	adds	r7, #16
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b086      	sub	sp, #24
 8009b90:	af04      	add	r7, sp, #16
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	4608      	mov	r0, r1
 8009b96:	4611      	mov	r1, r2
 8009b98:	461a      	mov	r2, r3
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	70fb      	strb	r3, [r7, #3]
 8009b9e:	460b      	mov	r3, r1
 8009ba0:	70bb      	strb	r3, [r7, #2]
 8009ba2:	4613      	mov	r3, r2
 8009ba4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009ba6:	7878      	ldrb	r0, [r7, #1]
 8009ba8:	78ba      	ldrb	r2, [r7, #2]
 8009baa:	78f9      	ldrb	r1, [r7, #3]
 8009bac:	8b3b      	ldrh	r3, [r7, #24]
 8009bae:	9302      	str	r3, [sp, #8]
 8009bb0:	7d3b      	ldrb	r3, [r7, #20]
 8009bb2:	9301      	str	r3, [sp, #4]
 8009bb4:	7c3b      	ldrb	r3, [r7, #16]
 8009bb6:	9300      	str	r3, [sp, #0]
 8009bb8:	4603      	mov	r3, r0
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 fabf 	bl	800a13e <USBH_LL_OpenPipe>

  return USBH_OK;
 8009bc0:	2300      	movs	r3, #0
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3708      	adds	r7, #8
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}

08009bca <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009bca:	b580      	push	{r7, lr}
 8009bcc:	b082      	sub	sp, #8
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	6078      	str	r0, [r7, #4]
 8009bd2:	460b      	mov	r3, r1
 8009bd4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009bd6:	78fb      	ldrb	r3, [r7, #3]
 8009bd8:	4619      	mov	r1, r3
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 fade 	bl	800a19c <USBH_LL_ClosePipe>

  return USBH_OK;
 8009be0:	2300      	movs	r3, #0
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3708      	adds	r7, #8
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}

08009bea <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009bea:	b580      	push	{r7, lr}
 8009bec:	b084      	sub	sp, #16
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
 8009bf2:	460b      	mov	r3, r1
 8009bf4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 f836 	bl	8009c68 <USBH_GetFreePipe>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009c00:	89fb      	ldrh	r3, [r7, #14]
 8009c02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d00a      	beq.n	8009c20 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009c0a:	78fa      	ldrb	r2, [r7, #3]
 8009c0c:	89fb      	ldrh	r3, [r7, #14]
 8009c0e:	f003 030f 	and.w	r3, r3, #15
 8009c12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c16:	6879      	ldr	r1, [r7, #4]
 8009c18:	33e0      	adds	r3, #224	; 0xe0
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	440b      	add	r3, r1
 8009c1e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009c20:	89fb      	ldrh	r3, [r7, #14]
 8009c22:	b2db      	uxtb	r3, r3
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3710      	adds	r7, #16
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b083      	sub	sp, #12
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	460b      	mov	r3, r1
 8009c36:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009c38:	78fb      	ldrb	r3, [r7, #3]
 8009c3a:	2b0f      	cmp	r3, #15
 8009c3c:	d80d      	bhi.n	8009c5a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009c3e:	78fb      	ldrb	r3, [r7, #3]
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	33e0      	adds	r3, #224	; 0xe0
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	4413      	add	r3, r2
 8009c48:	685a      	ldr	r2, [r3, #4]
 8009c4a:	78fb      	ldrb	r3, [r7, #3]
 8009c4c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009c50:	6879      	ldr	r1, [r7, #4]
 8009c52:	33e0      	adds	r3, #224	; 0xe0
 8009c54:	009b      	lsls	r3, r3, #2
 8009c56:	440b      	add	r3, r1
 8009c58:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009c5a:	2300      	movs	r3, #0
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	370c      	adds	r7, #12
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr

08009c68 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b085      	sub	sp, #20
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009c70:	2300      	movs	r3, #0
 8009c72:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009c74:	2300      	movs	r3, #0
 8009c76:	73fb      	strb	r3, [r7, #15]
 8009c78:	e00f      	b.n	8009c9a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009c7a:	7bfb      	ldrb	r3, [r7, #15]
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	33e0      	adds	r3, #224	; 0xe0
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	4413      	add	r3, r2
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d102      	bne.n	8009c94 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009c8e:	7bfb      	ldrb	r3, [r7, #15]
 8009c90:	b29b      	uxth	r3, r3
 8009c92:	e007      	b.n	8009ca4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009c94:	7bfb      	ldrb	r3, [r7, #15]
 8009c96:	3301      	adds	r3, #1
 8009c98:	73fb      	strb	r3, [r7, #15]
 8009c9a:	7bfb      	ldrb	r3, [r7, #15]
 8009c9c:	2b0f      	cmp	r3, #15
 8009c9e:	d9ec      	bls.n	8009c7a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009ca0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3714      	adds	r7, #20
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr

08009cb0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b087      	sub	sp, #28
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	4613      	mov	r3, r2
 8009cbc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009cc6:	4b1f      	ldr	r3, [pc, #124]	; (8009d44 <FATFS_LinkDriverEx+0x94>)
 8009cc8:	7a5b      	ldrb	r3, [r3, #9]
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d131      	bne.n	8009d34 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009cd0:	4b1c      	ldr	r3, [pc, #112]	; (8009d44 <FATFS_LinkDriverEx+0x94>)
 8009cd2:	7a5b      	ldrb	r3, [r3, #9]
 8009cd4:	b2db      	uxtb	r3, r3
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	4b1a      	ldr	r3, [pc, #104]	; (8009d44 <FATFS_LinkDriverEx+0x94>)
 8009cda:	2100      	movs	r1, #0
 8009cdc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009cde:	4b19      	ldr	r3, [pc, #100]	; (8009d44 <FATFS_LinkDriverEx+0x94>)
 8009ce0:	7a5b      	ldrb	r3, [r3, #9]
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	4a17      	ldr	r2, [pc, #92]	; (8009d44 <FATFS_LinkDriverEx+0x94>)
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	4413      	add	r3, r2
 8009cea:	68fa      	ldr	r2, [r7, #12]
 8009cec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009cee:	4b15      	ldr	r3, [pc, #84]	; (8009d44 <FATFS_LinkDriverEx+0x94>)
 8009cf0:	7a5b      	ldrb	r3, [r3, #9]
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	4b13      	ldr	r3, [pc, #76]	; (8009d44 <FATFS_LinkDriverEx+0x94>)
 8009cf8:	4413      	add	r3, r2
 8009cfa:	79fa      	ldrb	r2, [r7, #7]
 8009cfc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009cfe:	4b11      	ldr	r3, [pc, #68]	; (8009d44 <FATFS_LinkDriverEx+0x94>)
 8009d00:	7a5b      	ldrb	r3, [r3, #9]
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	1c5a      	adds	r2, r3, #1
 8009d06:	b2d1      	uxtb	r1, r2
 8009d08:	4a0e      	ldr	r2, [pc, #56]	; (8009d44 <FATFS_LinkDriverEx+0x94>)
 8009d0a:	7251      	strb	r1, [r2, #9]
 8009d0c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009d0e:	7dbb      	ldrb	r3, [r7, #22]
 8009d10:	3330      	adds	r3, #48	; 0x30
 8009d12:	b2da      	uxtb	r2, r3
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	223a      	movs	r2, #58	; 0x3a
 8009d1e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	3302      	adds	r3, #2
 8009d24:	222f      	movs	r2, #47	; 0x2f
 8009d26:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	3303      	adds	r3, #3
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009d30:	2300      	movs	r3, #0
 8009d32:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	371c      	adds	r7, #28
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr
 8009d42:	bf00      	nop
 8009d44:	20000288 	.word	0x20000288

08009d48 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b082      	sub	sp, #8
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009d52:	2200      	movs	r2, #0
 8009d54:	6839      	ldr	r1, [r7, #0]
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f7ff ffaa 	bl	8009cb0 <FATFS_LinkDriverEx>
 8009d5c:	4603      	mov	r3, r0
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3708      	adds	r7, #8
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
	...

08009d68 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	490e      	ldr	r1, [pc, #56]	; (8009da8 <MX_USB_HOST_Init+0x40>)
 8009d70:	480e      	ldr	r0, [pc, #56]	; (8009dac <MX_USB_HOST_Init+0x44>)
 8009d72:	f7fe fb4b 	bl	800840c <USBH_Init>
 8009d76:	4603      	mov	r3, r0
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d001      	beq.n	8009d80 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009d7c:	f7f7 f956 	bl	800102c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8009d80:	490b      	ldr	r1, [pc, #44]	; (8009db0 <MX_USB_HOST_Init+0x48>)
 8009d82:	480a      	ldr	r0, [pc, #40]	; (8009dac <MX_USB_HOST_Init+0x44>)
 8009d84:	f7fe fbd0 	bl	8008528 <USBH_RegisterClass>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d001      	beq.n	8009d92 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009d8e:	f7f7 f94d 	bl	800102c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009d92:	4806      	ldr	r0, [pc, #24]	; (8009dac <MX_USB_HOST_Init+0x44>)
 8009d94:	f7fe fc54 	bl	8008640 <USBH_Start>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d001      	beq.n	8009da2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009d9e:	f7f7 f945 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009da2:	bf00      	nop
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	08009dc9 	.word	0x08009dc9
 8009dac:	20000294 	.word	0x20000294
 8009db0:	20000010 	.word	0x20000010

08009db4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009db8:	4802      	ldr	r0, [pc, #8]	; (8009dc4 <MX_USB_HOST_Process+0x10>)
 8009dba:	f7fe fc51 	bl	8008660 <USBH_Process>
}
 8009dbe:	bf00      	nop
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	20000294 	.word	0x20000294

08009dc8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b083      	sub	sp, #12
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009dd4:	78fb      	ldrb	r3, [r7, #3]
 8009dd6:	3b01      	subs	r3, #1
 8009dd8:	2b04      	cmp	r3, #4
 8009dda:	d819      	bhi.n	8009e10 <USBH_UserProcess+0x48>
 8009ddc:	a201      	add	r2, pc, #4	; (adr r2, 8009de4 <USBH_UserProcess+0x1c>)
 8009dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009de2:	bf00      	nop
 8009de4:	08009e11 	.word	0x08009e11
 8009de8:	08009e01 	.word	0x08009e01
 8009dec:	08009e11 	.word	0x08009e11
 8009df0:	08009e09 	.word	0x08009e09
 8009df4:	08009df9 	.word	0x08009df9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009df8:	4b09      	ldr	r3, [pc, #36]	; (8009e20 <USBH_UserProcess+0x58>)
 8009dfa:	2203      	movs	r2, #3
 8009dfc:	701a      	strb	r2, [r3, #0]
  break;
 8009dfe:	e008      	b.n	8009e12 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009e00:	4b07      	ldr	r3, [pc, #28]	; (8009e20 <USBH_UserProcess+0x58>)
 8009e02:	2202      	movs	r2, #2
 8009e04:	701a      	strb	r2, [r3, #0]
  break;
 8009e06:	e004      	b.n	8009e12 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009e08:	4b05      	ldr	r3, [pc, #20]	; (8009e20 <USBH_UserProcess+0x58>)
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	701a      	strb	r2, [r3, #0]
  break;
 8009e0e:	e000      	b.n	8009e12 <USBH_UserProcess+0x4a>

  default:
  break;
 8009e10:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009e12:	bf00      	nop
 8009e14:	370c      	adds	r7, #12
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr
 8009e1e:	bf00      	nop
 8009e20:	2000066c 	.word	0x2000066c

08009e24 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b08a      	sub	sp, #40	; 0x28
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e2c:	f107 0314 	add.w	r3, r7, #20
 8009e30:	2200      	movs	r2, #0
 8009e32:	601a      	str	r2, [r3, #0]
 8009e34:	605a      	str	r2, [r3, #4]
 8009e36:	609a      	str	r2, [r3, #8]
 8009e38:	60da      	str	r2, [r3, #12]
 8009e3a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e44:	d158      	bne.n	8009ef8 <HAL_HCD_MspInit+0xd4>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e46:	2300      	movs	r3, #0
 8009e48:	613b      	str	r3, [r7, #16]
 8009e4a:	4b2d      	ldr	r3, [pc, #180]	; (8009f00 <HAL_HCD_MspInit+0xdc>)
 8009e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e4e:	4a2c      	ldr	r2, [pc, #176]	; (8009f00 <HAL_HCD_MspInit+0xdc>)
 8009e50:	f043 0301 	orr.w	r3, r3, #1
 8009e54:	6313      	str	r3, [r2, #48]	; 0x30
 8009e56:	4b2a      	ldr	r3, [pc, #168]	; (8009f00 <HAL_HCD_MspInit+0xdc>)
 8009e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e5a:	f003 0301 	and.w	r3, r3, #1
 8009e5e:	613b      	str	r3, [r7, #16]
 8009e60:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009e62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009e70:	f107 0314 	add.w	r3, r7, #20
 8009e74:	4619      	mov	r1, r3
 8009e76:	4823      	ldr	r0, [pc, #140]	; (8009f04 <HAL_HCD_MspInit+0xe0>)
 8009e78:	f7f7 fece 	bl	8001c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin;
 8009e7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e82:	2302      	movs	r3, #2
 8009e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e86:	2300      	movs	r3, #0
 8009e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009e8e:	230a      	movs	r3, #10
 8009e90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(OTG_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8009e92:	f107 0314 	add.w	r3, r7, #20
 8009e96:	4619      	mov	r1, r3
 8009e98:	481a      	ldr	r0, [pc, #104]	; (8009f04 <HAL_HCD_MspInit+0xe0>)
 8009e9a:	f7f7 febd 	bl	8001c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009e9e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ea4:	2302      	movs	r3, #2
 8009ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009eac:	2303      	movs	r3, #3
 8009eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009eb0:	230a      	movs	r3, #10
 8009eb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009eb4:	f107 0314 	add.w	r3, r7, #20
 8009eb8:	4619      	mov	r1, r3
 8009eba:	4812      	ldr	r0, [pc, #72]	; (8009f04 <HAL_HCD_MspInit+0xe0>)
 8009ebc:	f7f7 feac 	bl	8001c18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009ec0:	4b0f      	ldr	r3, [pc, #60]	; (8009f00 <HAL_HCD_MspInit+0xdc>)
 8009ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ec4:	4a0e      	ldr	r2, [pc, #56]	; (8009f00 <HAL_HCD_MspInit+0xdc>)
 8009ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eca:	6353      	str	r3, [r2, #52]	; 0x34
 8009ecc:	2300      	movs	r3, #0
 8009ece:	60fb      	str	r3, [r7, #12]
 8009ed0:	4b0b      	ldr	r3, [pc, #44]	; (8009f00 <HAL_HCD_MspInit+0xdc>)
 8009ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ed4:	4a0a      	ldr	r2, [pc, #40]	; (8009f00 <HAL_HCD_MspInit+0xdc>)
 8009ed6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009eda:	6453      	str	r3, [r2, #68]	; 0x44
 8009edc:	4b08      	ldr	r3, [pc, #32]	; (8009f00 <HAL_HCD_MspInit+0xdc>)
 8009ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ee4:	60fb      	str	r3, [r7, #12]
 8009ee6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009ee8:	2200      	movs	r2, #0
 8009eea:	2100      	movs	r1, #0
 8009eec:	2043      	movs	r0, #67	; 0x43
 8009eee:	f7f7 fb72 	bl	80015d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009ef2:	2043      	movs	r0, #67	; 0x43
 8009ef4:	f7f7 fb8b 	bl	800160e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009ef8:	bf00      	nop
 8009efa:	3728      	adds	r7, #40	; 0x28
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}
 8009f00:	40023800 	.word	0x40023800
 8009f04:	40020000 	.word	0x40020000

08009f08 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b082      	sub	sp, #8
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009f16:	4618      	mov	r0, r3
 8009f18:	f7fe ff81 	bl	8008e1e <USBH_LL_IncTimer>
}
 8009f1c:	bf00      	nop
 8009f1e:	3708      	adds	r7, #8
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7fe ffb9 	bl	8008eaa <USBH_LL_Connect>
}
 8009f38:	bf00      	nop
 8009f3a:	3708      	adds	r7, #8
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b082      	sub	sp, #8
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7fe ffc2 	bl	8008ed8 <USBH_LL_Disconnect>
}
 8009f54:	bf00      	nop
 8009f56:	3708      	adds	r7, #8
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b083      	sub	sp, #12
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	460b      	mov	r3, r1
 8009f66:	70fb      	strb	r3, [r7, #3]
 8009f68:	4613      	mov	r3, r2
 8009f6a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009f6c:	bf00      	nop
 8009f6e:	370c      	adds	r7, #12
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr

08009f78 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b082      	sub	sp, #8
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009f86:	4618      	mov	r0, r3
 8009f88:	f7fe ff73 	bl	8008e72 <USBH_LL_PortEnabled>
}
 8009f8c:	bf00      	nop
 8009f8e:	3708      	adds	r7, #8
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7fe ff73 	bl	8008e8e <USBH_LL_PortDisabled>
}
 8009fa8:	bf00      	nop
 8009faa:	3708      	adds	r7, #8
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b082      	sub	sp, #8
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d12a      	bne.n	800a018 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009fc2:	4a18      	ldr	r2, [pc, #96]	; (800a024 <USBH_LL_Init+0x74>)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	4a15      	ldr	r2, [pc, #84]	; (800a024 <USBH_LL_Init+0x74>)
 8009fce:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009fd2:	4b14      	ldr	r3, [pc, #80]	; (800a024 <USBH_LL_Init+0x74>)
 8009fd4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009fd8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009fda:	4b12      	ldr	r3, [pc, #72]	; (800a024 <USBH_LL_Init+0x74>)
 8009fdc:	2208      	movs	r2, #8
 8009fde:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009fe0:	4b10      	ldr	r3, [pc, #64]	; (800a024 <USBH_LL_Init+0x74>)
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009fe6:	4b0f      	ldr	r3, [pc, #60]	; (800a024 <USBH_LL_Init+0x74>)
 8009fe8:	2200      	movs	r2, #0
 8009fea:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009fec:	4b0d      	ldr	r3, [pc, #52]	; (800a024 <USBH_LL_Init+0x74>)
 8009fee:	2202      	movs	r2, #2
 8009ff0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009ff2:	4b0c      	ldr	r3, [pc, #48]	; (800a024 <USBH_LL_Init+0x74>)
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009ff8:	480a      	ldr	r0, [pc, #40]	; (800a024 <USBH_LL_Init+0x74>)
 8009ffa:	f7f8 f800 	bl	8001ffe <HAL_HCD_Init>
 8009ffe:	4603      	mov	r3, r0
 800a000:	2b00      	cmp	r3, #0
 800a002:	d001      	beq.n	800a008 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a004:	f7f7 f812 	bl	800102c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a008:	4806      	ldr	r0, [pc, #24]	; (800a024 <USBH_LL_Init+0x74>)
 800a00a:	f7f8 fbe4 	bl	80027d6 <HAL_HCD_GetCurrentFrame>
 800a00e:	4603      	mov	r3, r0
 800a010:	4619      	mov	r1, r3
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f7fe fef4 	bl	8008e00 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a018:	2300      	movs	r3, #0
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3708      	adds	r7, #8
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
 800a022:	bf00      	nop
 800a024:	20000670 	.word	0x20000670

0800a028 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b084      	sub	sp, #16
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a030:	2300      	movs	r3, #0
 800a032:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a034:	2300      	movs	r3, #0
 800a036:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a03e:	4618      	mov	r0, r3
 800a040:	f7f8 fb53 	bl	80026ea <HAL_HCD_Start>
 800a044:	4603      	mov	r3, r0
 800a046:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a048:	7bfb      	ldrb	r3, [r7, #15]
 800a04a:	4618      	mov	r0, r3
 800a04c:	f000 f98c 	bl	800a368 <USBH_Get_USB_Status>
 800a050:	4603      	mov	r3, r0
 800a052:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a054:	7bbb      	ldrb	r3, [r7, #14]
}
 800a056:	4618      	mov	r0, r3
 800a058:	3710      	adds	r7, #16
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a05e:	b580      	push	{r7, lr}
 800a060:	b084      	sub	sp, #16
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a066:	2300      	movs	r3, #0
 800a068:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a06a:	2300      	movs	r3, #0
 800a06c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a074:	4618      	mov	r0, r3
 800a076:	f7f8 fb5b 	bl	8002730 <HAL_HCD_Stop>
 800a07a:	4603      	mov	r3, r0
 800a07c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a07e:	7bfb      	ldrb	r3, [r7, #15]
 800a080:	4618      	mov	r0, r3
 800a082:	f000 f971 	bl	800a368 <USBH_Get_USB_Status>
 800a086:	4603      	mov	r3, r0
 800a088:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a08a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3710      	adds	r7, #16
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a09c:	2301      	movs	r3, #1
 800a09e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7f8 fba3 	bl	80027f2 <HAL_HCD_GetCurrentSpeed>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	2b02      	cmp	r3, #2
 800a0b0:	d00c      	beq.n	800a0cc <USBH_LL_GetSpeed+0x38>
 800a0b2:	2b02      	cmp	r3, #2
 800a0b4:	d80d      	bhi.n	800a0d2 <USBH_LL_GetSpeed+0x3e>
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d002      	beq.n	800a0c0 <USBH_LL_GetSpeed+0x2c>
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	d003      	beq.n	800a0c6 <USBH_LL_GetSpeed+0x32>
 800a0be:	e008      	b.n	800a0d2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	73fb      	strb	r3, [r7, #15]
    break;
 800a0c4:	e008      	b.n	800a0d8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	73fb      	strb	r3, [r7, #15]
    break;
 800a0ca:	e005      	b.n	800a0d8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a0cc:	2302      	movs	r3, #2
 800a0ce:	73fb      	strb	r3, [r7, #15]
    break;
 800a0d0:	e002      	b.n	800a0d8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	73fb      	strb	r3, [r7, #15]
    break;
 800a0d6:	bf00      	nop
  }
  return  speed;
 800a0d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3710      	adds	r7, #16
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}

0800a0e2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a0e2:	b580      	push	{r7, lr}
 800a0e4:	b084      	sub	sp, #16
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f7f8 fb36 	bl	800276a <HAL_HCD_ResetPort>
 800a0fe:	4603      	mov	r3, r0
 800a100:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a102:	7bfb      	ldrb	r3, [r7, #15]
 800a104:	4618      	mov	r0, r3
 800a106:	f000 f92f 	bl	800a368 <USBH_Get_USB_Status>
 800a10a:	4603      	mov	r3, r0
 800a10c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a10e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a110:	4618      	mov	r0, r3
 800a112:	3710      	adds	r7, #16
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}

0800a118 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b082      	sub	sp, #8
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	460b      	mov	r3, r1
 800a122:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a12a:	78fa      	ldrb	r2, [r7, #3]
 800a12c:	4611      	mov	r1, r2
 800a12e:	4618      	mov	r0, r3
 800a130:	f7f8 fb3d 	bl	80027ae <HAL_HCD_HC_GetXferCount>
 800a134:	4603      	mov	r3, r0
}
 800a136:	4618      	mov	r0, r3
 800a138:	3708      	adds	r7, #8
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}

0800a13e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a13e:	b590      	push	{r4, r7, lr}
 800a140:	b089      	sub	sp, #36	; 0x24
 800a142:	af04      	add	r7, sp, #16
 800a144:	6078      	str	r0, [r7, #4]
 800a146:	4608      	mov	r0, r1
 800a148:	4611      	mov	r1, r2
 800a14a:	461a      	mov	r2, r3
 800a14c:	4603      	mov	r3, r0
 800a14e:	70fb      	strb	r3, [r7, #3]
 800a150:	460b      	mov	r3, r1
 800a152:	70bb      	strb	r3, [r7, #2]
 800a154:	4613      	mov	r3, r2
 800a156:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a158:	2300      	movs	r3, #0
 800a15a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a15c:	2300      	movs	r3, #0
 800a15e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a166:	787c      	ldrb	r4, [r7, #1]
 800a168:	78ba      	ldrb	r2, [r7, #2]
 800a16a:	78f9      	ldrb	r1, [r7, #3]
 800a16c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a16e:	9302      	str	r3, [sp, #8]
 800a170:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a174:	9301      	str	r3, [sp, #4]
 800a176:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a17a:	9300      	str	r3, [sp, #0]
 800a17c:	4623      	mov	r3, r4
 800a17e:	f7f7 ffa0 	bl	80020c2 <HAL_HCD_HC_Init>
 800a182:	4603      	mov	r3, r0
 800a184:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a186:	7bfb      	ldrb	r3, [r7, #15]
 800a188:	4618      	mov	r0, r3
 800a18a:	f000 f8ed 	bl	800a368 <USBH_Get_USB_Status>
 800a18e:	4603      	mov	r3, r0
 800a190:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a192:	7bbb      	ldrb	r3, [r7, #14]
}
 800a194:	4618      	mov	r0, r3
 800a196:	3714      	adds	r7, #20
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd90      	pop	{r4, r7, pc}

0800a19c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	460b      	mov	r3, r1
 800a1a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a1b6:	78fa      	ldrb	r2, [r7, #3]
 800a1b8:	4611      	mov	r1, r2
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f7f8 f810 	bl	80021e0 <HAL_HCD_HC_Halt>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a1c4:	7bfb      	ldrb	r3, [r7, #15]
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f000 f8ce 	bl	800a368 <USBH_Get_USB_Status>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3710      	adds	r7, #16
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}

0800a1da <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a1da:	b590      	push	{r4, r7, lr}
 800a1dc:	b089      	sub	sp, #36	; 0x24
 800a1de:	af04      	add	r7, sp, #16
 800a1e0:	6078      	str	r0, [r7, #4]
 800a1e2:	4608      	mov	r0, r1
 800a1e4:	4611      	mov	r1, r2
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	70fb      	strb	r3, [r7, #3]
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	70bb      	strb	r3, [r7, #2]
 800a1f0:	4613      	mov	r3, r2
 800a1f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a202:	787c      	ldrb	r4, [r7, #1]
 800a204:	78ba      	ldrb	r2, [r7, #2]
 800a206:	78f9      	ldrb	r1, [r7, #3]
 800a208:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a20c:	9303      	str	r3, [sp, #12]
 800a20e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a210:	9302      	str	r3, [sp, #8]
 800a212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a214:	9301      	str	r3, [sp, #4]
 800a216:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a21a:	9300      	str	r3, [sp, #0]
 800a21c:	4623      	mov	r3, r4
 800a21e:	f7f8 f803 	bl	8002228 <HAL_HCD_HC_SubmitRequest>
 800a222:	4603      	mov	r3, r0
 800a224:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a226:	7bfb      	ldrb	r3, [r7, #15]
 800a228:	4618      	mov	r0, r3
 800a22a:	f000 f89d 	bl	800a368 <USBH_Get_USB_Status>
 800a22e:	4603      	mov	r3, r0
 800a230:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a232:	7bbb      	ldrb	r3, [r7, #14]
}
 800a234:	4618      	mov	r0, r3
 800a236:	3714      	adds	r7, #20
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd90      	pop	{r4, r7, pc}

0800a23c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b082      	sub	sp, #8
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	460b      	mov	r3, r1
 800a246:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a24e:	78fa      	ldrb	r2, [r7, #3]
 800a250:	4611      	mov	r1, r2
 800a252:	4618      	mov	r0, r3
 800a254:	f7f8 fa97 	bl	8002786 <HAL_HCD_HC_GetURBState>
 800a258:	4603      	mov	r3, r0
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3708      	adds	r7, #8
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}

0800a262 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a262:	b580      	push	{r7, lr}
 800a264:	b082      	sub	sp, #8
 800a266:	af00      	add	r7, sp, #0
 800a268:	6078      	str	r0, [r7, #4]
 800a26a:	460b      	mov	r3, r1
 800a26c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a274:	2b01      	cmp	r3, #1
 800a276:	d103      	bne.n	800a280 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a278:	78fb      	ldrb	r3, [r7, #3]
 800a27a:	4618      	mov	r0, r3
 800a27c:	f000 f8a0 	bl	800a3c0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a280:	20c8      	movs	r0, #200	; 0xc8
 800a282:	f7f7 f8a9 	bl	80013d8 <HAL_Delay>
  return USBH_OK;
 800a286:	2300      	movs	r3, #0
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3708      	adds	r7, #8
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a290:	b480      	push	{r7}
 800a292:	b085      	sub	sp, #20
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	460b      	mov	r3, r1
 800a29a:	70fb      	strb	r3, [r7, #3]
 800a29c:	4613      	mov	r3, r2
 800a29e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a2a6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a2a8:	78fb      	ldrb	r3, [r7, #3]
 800a2aa:	68fa      	ldr	r2, [r7, #12]
 800a2ac:	212c      	movs	r1, #44	; 0x2c
 800a2ae:	fb01 f303 	mul.w	r3, r1, r3
 800a2b2:	4413      	add	r3, r2
 800a2b4:	333b      	adds	r3, #59	; 0x3b
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d009      	beq.n	800a2d0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a2bc:	78fb      	ldrb	r3, [r7, #3]
 800a2be:	68fa      	ldr	r2, [r7, #12]
 800a2c0:	212c      	movs	r1, #44	; 0x2c
 800a2c2:	fb01 f303 	mul.w	r3, r1, r3
 800a2c6:	4413      	add	r3, r2
 800a2c8:	3354      	adds	r3, #84	; 0x54
 800a2ca:	78ba      	ldrb	r2, [r7, #2]
 800a2cc:	701a      	strb	r2, [r3, #0]
 800a2ce:	e008      	b.n	800a2e2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a2d0:	78fb      	ldrb	r3, [r7, #3]
 800a2d2:	68fa      	ldr	r2, [r7, #12]
 800a2d4:	212c      	movs	r1, #44	; 0x2c
 800a2d6:	fb01 f303 	mul.w	r3, r1, r3
 800a2da:	4413      	add	r3, r2
 800a2dc:	3355      	adds	r3, #85	; 0x55
 800a2de:	78ba      	ldrb	r2, [r7, #2]
 800a2e0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a2e2:	2300      	movs	r3, #0
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3714      	adds	r7, #20
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr

0800a2f0 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b085      	sub	sp, #20
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a306:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800a308:	78fb      	ldrb	r3, [r7, #3]
 800a30a:	68ba      	ldr	r2, [r7, #8]
 800a30c:	212c      	movs	r1, #44	; 0x2c
 800a30e:	fb01 f303 	mul.w	r3, r1, r3
 800a312:	4413      	add	r3, r2
 800a314:	333b      	adds	r3, #59	; 0x3b
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d009      	beq.n	800a330 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800a31c:	78fb      	ldrb	r3, [r7, #3]
 800a31e:	68ba      	ldr	r2, [r7, #8]
 800a320:	212c      	movs	r1, #44	; 0x2c
 800a322:	fb01 f303 	mul.w	r3, r1, r3
 800a326:	4413      	add	r3, r2
 800a328:	3354      	adds	r3, #84	; 0x54
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	73fb      	strb	r3, [r7, #15]
 800a32e:	e008      	b.n	800a342 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800a330:	78fb      	ldrb	r3, [r7, #3]
 800a332:	68ba      	ldr	r2, [r7, #8]
 800a334:	212c      	movs	r1, #44	; 0x2c
 800a336:	fb01 f303 	mul.w	r3, r1, r3
 800a33a:	4413      	add	r3, r2
 800a33c:	3355      	adds	r3, #85	; 0x55
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800a342:	7bfb      	ldrb	r3, [r7, #15]
}
 800a344:	4618      	mov	r0, r3
 800a346:	3714      	adds	r7, #20
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr

0800a350 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b082      	sub	sp, #8
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f7f7 f83d 	bl	80013d8 <HAL_Delay>
}
 800a35e:	bf00      	nop
 800a360:	3708      	adds	r7, #8
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
	...

0800a368 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a368:	b480      	push	{r7}
 800a36a:	b085      	sub	sp, #20
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	4603      	mov	r3, r0
 800a370:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a372:	2300      	movs	r3, #0
 800a374:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a376:	79fb      	ldrb	r3, [r7, #7]
 800a378:	2b03      	cmp	r3, #3
 800a37a:	d817      	bhi.n	800a3ac <USBH_Get_USB_Status+0x44>
 800a37c:	a201      	add	r2, pc, #4	; (adr r2, 800a384 <USBH_Get_USB_Status+0x1c>)
 800a37e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a382:	bf00      	nop
 800a384:	0800a395 	.word	0x0800a395
 800a388:	0800a39b 	.word	0x0800a39b
 800a38c:	0800a3a1 	.word	0x0800a3a1
 800a390:	0800a3a7 	.word	0x0800a3a7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a394:	2300      	movs	r3, #0
 800a396:	73fb      	strb	r3, [r7, #15]
    break;
 800a398:	e00b      	b.n	800a3b2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a39a:	2302      	movs	r3, #2
 800a39c:	73fb      	strb	r3, [r7, #15]
    break;
 800a39e:	e008      	b.n	800a3b2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	73fb      	strb	r3, [r7, #15]
    break;
 800a3a4:	e005      	b.n	800a3b2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a3a6:	2302      	movs	r3, #2
 800a3a8:	73fb      	strb	r3, [r7, #15]
    break;
 800a3aa:	e002      	b.n	800a3b2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a3ac:	2302      	movs	r3, #2
 800a3ae:	73fb      	strb	r3, [r7, #15]
    break;
 800a3b0:	bf00      	nop
  }
  return usb_status;
 800a3b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3714      	adds	r7, #20
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr

0800a3c0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b084      	sub	sp, #16
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a3ca:	79fb      	ldrb	r3, [r7, #7]
 800a3cc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a3ce:	79fb      	ldrb	r3, [r7, #7]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d102      	bne.n	800a3da <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	73fb      	strb	r3, [r7, #15]
 800a3d8:	e001      	b.n	800a3de <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a3da:	2301      	movs	r3, #1
 800a3dc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a3de:	7bfb      	ldrb	r3, [r7, #15]
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	2101      	movs	r1, #1
 800a3e4:	4803      	ldr	r0, [pc, #12]	; (800a3f4 <MX_DriverVbusFS+0x34>)
 800a3e6:	f7f7 fdb3 	bl	8001f50 <HAL_GPIO_WritePin>
}
 800a3ea:	bf00      	nop
 800a3ec:	3710      	adds	r7, #16
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
 800a3f2:	bf00      	nop
 800a3f4:	40020800 	.word	0x40020800

0800a3f8 <__errno>:
 800a3f8:	4b01      	ldr	r3, [pc, #4]	; (800a400 <__errno+0x8>)
 800a3fa:	6818      	ldr	r0, [r3, #0]
 800a3fc:	4770      	bx	lr
 800a3fe:	bf00      	nop
 800a400:	20000030 	.word	0x20000030

0800a404 <__libc_init_array>:
 800a404:	b570      	push	{r4, r5, r6, lr}
 800a406:	4d0d      	ldr	r5, [pc, #52]	; (800a43c <__libc_init_array+0x38>)
 800a408:	4c0d      	ldr	r4, [pc, #52]	; (800a440 <__libc_init_array+0x3c>)
 800a40a:	1b64      	subs	r4, r4, r5
 800a40c:	10a4      	asrs	r4, r4, #2
 800a40e:	2600      	movs	r6, #0
 800a410:	42a6      	cmp	r6, r4
 800a412:	d109      	bne.n	800a428 <__libc_init_array+0x24>
 800a414:	4d0b      	ldr	r5, [pc, #44]	; (800a444 <__libc_init_array+0x40>)
 800a416:	4c0c      	ldr	r4, [pc, #48]	; (800a448 <__libc_init_array+0x44>)
 800a418:	f000 f93c 	bl	800a694 <_init>
 800a41c:	1b64      	subs	r4, r4, r5
 800a41e:	10a4      	asrs	r4, r4, #2
 800a420:	2600      	movs	r6, #0
 800a422:	42a6      	cmp	r6, r4
 800a424:	d105      	bne.n	800a432 <__libc_init_array+0x2e>
 800a426:	bd70      	pop	{r4, r5, r6, pc}
 800a428:	f855 3b04 	ldr.w	r3, [r5], #4
 800a42c:	4798      	blx	r3
 800a42e:	3601      	adds	r6, #1
 800a430:	e7ee      	b.n	800a410 <__libc_init_array+0xc>
 800a432:	f855 3b04 	ldr.w	r3, [r5], #4
 800a436:	4798      	blx	r3
 800a438:	3601      	adds	r6, #1
 800a43a:	e7f2      	b.n	800a422 <__libc_init_array+0x1e>
 800a43c:	0800a6ec 	.word	0x0800a6ec
 800a440:	0800a6ec 	.word	0x0800a6ec
 800a444:	0800a6ec 	.word	0x0800a6ec
 800a448:	0800a6f0 	.word	0x0800a6f0

0800a44c <malloc>:
 800a44c:	4b02      	ldr	r3, [pc, #8]	; (800a458 <malloc+0xc>)
 800a44e:	4601      	mov	r1, r0
 800a450:	6818      	ldr	r0, [r3, #0]
 800a452:	f000 b88d 	b.w	800a570 <_malloc_r>
 800a456:	bf00      	nop
 800a458:	20000030 	.word	0x20000030

0800a45c <free>:
 800a45c:	4b02      	ldr	r3, [pc, #8]	; (800a468 <free+0xc>)
 800a45e:	4601      	mov	r1, r0
 800a460:	6818      	ldr	r0, [r3, #0]
 800a462:	f000 b819 	b.w	800a498 <_free_r>
 800a466:	bf00      	nop
 800a468:	20000030 	.word	0x20000030

0800a46c <memcpy>:
 800a46c:	440a      	add	r2, r1
 800a46e:	4291      	cmp	r1, r2
 800a470:	f100 33ff 	add.w	r3, r0, #4294967295
 800a474:	d100      	bne.n	800a478 <memcpy+0xc>
 800a476:	4770      	bx	lr
 800a478:	b510      	push	{r4, lr}
 800a47a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a47e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a482:	4291      	cmp	r1, r2
 800a484:	d1f9      	bne.n	800a47a <memcpy+0xe>
 800a486:	bd10      	pop	{r4, pc}

0800a488 <memset>:
 800a488:	4402      	add	r2, r0
 800a48a:	4603      	mov	r3, r0
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d100      	bne.n	800a492 <memset+0xa>
 800a490:	4770      	bx	lr
 800a492:	f803 1b01 	strb.w	r1, [r3], #1
 800a496:	e7f9      	b.n	800a48c <memset+0x4>

0800a498 <_free_r>:
 800a498:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a49a:	2900      	cmp	r1, #0
 800a49c:	d044      	beq.n	800a528 <_free_r+0x90>
 800a49e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4a2:	9001      	str	r0, [sp, #4]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	f1a1 0404 	sub.w	r4, r1, #4
 800a4aa:	bfb8      	it	lt
 800a4ac:	18e4      	addlt	r4, r4, r3
 800a4ae:	f000 f8e3 	bl	800a678 <__malloc_lock>
 800a4b2:	4a1e      	ldr	r2, [pc, #120]	; (800a52c <_free_r+0x94>)
 800a4b4:	9801      	ldr	r0, [sp, #4]
 800a4b6:	6813      	ldr	r3, [r2, #0]
 800a4b8:	b933      	cbnz	r3, 800a4c8 <_free_r+0x30>
 800a4ba:	6063      	str	r3, [r4, #4]
 800a4bc:	6014      	str	r4, [r2, #0]
 800a4be:	b003      	add	sp, #12
 800a4c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4c4:	f000 b8de 	b.w	800a684 <__malloc_unlock>
 800a4c8:	42a3      	cmp	r3, r4
 800a4ca:	d908      	bls.n	800a4de <_free_r+0x46>
 800a4cc:	6825      	ldr	r5, [r4, #0]
 800a4ce:	1961      	adds	r1, r4, r5
 800a4d0:	428b      	cmp	r3, r1
 800a4d2:	bf01      	itttt	eq
 800a4d4:	6819      	ldreq	r1, [r3, #0]
 800a4d6:	685b      	ldreq	r3, [r3, #4]
 800a4d8:	1949      	addeq	r1, r1, r5
 800a4da:	6021      	streq	r1, [r4, #0]
 800a4dc:	e7ed      	b.n	800a4ba <_free_r+0x22>
 800a4de:	461a      	mov	r2, r3
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	b10b      	cbz	r3, 800a4e8 <_free_r+0x50>
 800a4e4:	42a3      	cmp	r3, r4
 800a4e6:	d9fa      	bls.n	800a4de <_free_r+0x46>
 800a4e8:	6811      	ldr	r1, [r2, #0]
 800a4ea:	1855      	adds	r5, r2, r1
 800a4ec:	42a5      	cmp	r5, r4
 800a4ee:	d10b      	bne.n	800a508 <_free_r+0x70>
 800a4f0:	6824      	ldr	r4, [r4, #0]
 800a4f2:	4421      	add	r1, r4
 800a4f4:	1854      	adds	r4, r2, r1
 800a4f6:	42a3      	cmp	r3, r4
 800a4f8:	6011      	str	r1, [r2, #0]
 800a4fa:	d1e0      	bne.n	800a4be <_free_r+0x26>
 800a4fc:	681c      	ldr	r4, [r3, #0]
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	6053      	str	r3, [r2, #4]
 800a502:	4421      	add	r1, r4
 800a504:	6011      	str	r1, [r2, #0]
 800a506:	e7da      	b.n	800a4be <_free_r+0x26>
 800a508:	d902      	bls.n	800a510 <_free_r+0x78>
 800a50a:	230c      	movs	r3, #12
 800a50c:	6003      	str	r3, [r0, #0]
 800a50e:	e7d6      	b.n	800a4be <_free_r+0x26>
 800a510:	6825      	ldr	r5, [r4, #0]
 800a512:	1961      	adds	r1, r4, r5
 800a514:	428b      	cmp	r3, r1
 800a516:	bf04      	itt	eq
 800a518:	6819      	ldreq	r1, [r3, #0]
 800a51a:	685b      	ldreq	r3, [r3, #4]
 800a51c:	6063      	str	r3, [r4, #4]
 800a51e:	bf04      	itt	eq
 800a520:	1949      	addeq	r1, r1, r5
 800a522:	6021      	streq	r1, [r4, #0]
 800a524:	6054      	str	r4, [r2, #4]
 800a526:	e7ca      	b.n	800a4be <_free_r+0x26>
 800a528:	b003      	add	sp, #12
 800a52a:	bd30      	pop	{r4, r5, pc}
 800a52c:	20000974 	.word	0x20000974

0800a530 <sbrk_aligned>:
 800a530:	b570      	push	{r4, r5, r6, lr}
 800a532:	4e0e      	ldr	r6, [pc, #56]	; (800a56c <sbrk_aligned+0x3c>)
 800a534:	460c      	mov	r4, r1
 800a536:	6831      	ldr	r1, [r6, #0]
 800a538:	4605      	mov	r5, r0
 800a53a:	b911      	cbnz	r1, 800a542 <sbrk_aligned+0x12>
 800a53c:	f000 f88c 	bl	800a658 <_sbrk_r>
 800a540:	6030      	str	r0, [r6, #0]
 800a542:	4621      	mov	r1, r4
 800a544:	4628      	mov	r0, r5
 800a546:	f000 f887 	bl	800a658 <_sbrk_r>
 800a54a:	1c43      	adds	r3, r0, #1
 800a54c:	d00a      	beq.n	800a564 <sbrk_aligned+0x34>
 800a54e:	1cc4      	adds	r4, r0, #3
 800a550:	f024 0403 	bic.w	r4, r4, #3
 800a554:	42a0      	cmp	r0, r4
 800a556:	d007      	beq.n	800a568 <sbrk_aligned+0x38>
 800a558:	1a21      	subs	r1, r4, r0
 800a55a:	4628      	mov	r0, r5
 800a55c:	f000 f87c 	bl	800a658 <_sbrk_r>
 800a560:	3001      	adds	r0, #1
 800a562:	d101      	bne.n	800a568 <sbrk_aligned+0x38>
 800a564:	f04f 34ff 	mov.w	r4, #4294967295
 800a568:	4620      	mov	r0, r4
 800a56a:	bd70      	pop	{r4, r5, r6, pc}
 800a56c:	20000978 	.word	0x20000978

0800a570 <_malloc_r>:
 800a570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a574:	1ccd      	adds	r5, r1, #3
 800a576:	f025 0503 	bic.w	r5, r5, #3
 800a57a:	3508      	adds	r5, #8
 800a57c:	2d0c      	cmp	r5, #12
 800a57e:	bf38      	it	cc
 800a580:	250c      	movcc	r5, #12
 800a582:	2d00      	cmp	r5, #0
 800a584:	4607      	mov	r7, r0
 800a586:	db01      	blt.n	800a58c <_malloc_r+0x1c>
 800a588:	42a9      	cmp	r1, r5
 800a58a:	d905      	bls.n	800a598 <_malloc_r+0x28>
 800a58c:	230c      	movs	r3, #12
 800a58e:	603b      	str	r3, [r7, #0]
 800a590:	2600      	movs	r6, #0
 800a592:	4630      	mov	r0, r6
 800a594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a598:	4e2e      	ldr	r6, [pc, #184]	; (800a654 <_malloc_r+0xe4>)
 800a59a:	f000 f86d 	bl	800a678 <__malloc_lock>
 800a59e:	6833      	ldr	r3, [r6, #0]
 800a5a0:	461c      	mov	r4, r3
 800a5a2:	bb34      	cbnz	r4, 800a5f2 <_malloc_r+0x82>
 800a5a4:	4629      	mov	r1, r5
 800a5a6:	4638      	mov	r0, r7
 800a5a8:	f7ff ffc2 	bl	800a530 <sbrk_aligned>
 800a5ac:	1c43      	adds	r3, r0, #1
 800a5ae:	4604      	mov	r4, r0
 800a5b0:	d14d      	bne.n	800a64e <_malloc_r+0xde>
 800a5b2:	6834      	ldr	r4, [r6, #0]
 800a5b4:	4626      	mov	r6, r4
 800a5b6:	2e00      	cmp	r6, #0
 800a5b8:	d140      	bne.n	800a63c <_malloc_r+0xcc>
 800a5ba:	6823      	ldr	r3, [r4, #0]
 800a5bc:	4631      	mov	r1, r6
 800a5be:	4638      	mov	r0, r7
 800a5c0:	eb04 0803 	add.w	r8, r4, r3
 800a5c4:	f000 f848 	bl	800a658 <_sbrk_r>
 800a5c8:	4580      	cmp	r8, r0
 800a5ca:	d13a      	bne.n	800a642 <_malloc_r+0xd2>
 800a5cc:	6821      	ldr	r1, [r4, #0]
 800a5ce:	3503      	adds	r5, #3
 800a5d0:	1a6d      	subs	r5, r5, r1
 800a5d2:	f025 0503 	bic.w	r5, r5, #3
 800a5d6:	3508      	adds	r5, #8
 800a5d8:	2d0c      	cmp	r5, #12
 800a5da:	bf38      	it	cc
 800a5dc:	250c      	movcc	r5, #12
 800a5de:	4629      	mov	r1, r5
 800a5e0:	4638      	mov	r0, r7
 800a5e2:	f7ff ffa5 	bl	800a530 <sbrk_aligned>
 800a5e6:	3001      	adds	r0, #1
 800a5e8:	d02b      	beq.n	800a642 <_malloc_r+0xd2>
 800a5ea:	6823      	ldr	r3, [r4, #0]
 800a5ec:	442b      	add	r3, r5
 800a5ee:	6023      	str	r3, [r4, #0]
 800a5f0:	e00e      	b.n	800a610 <_malloc_r+0xa0>
 800a5f2:	6822      	ldr	r2, [r4, #0]
 800a5f4:	1b52      	subs	r2, r2, r5
 800a5f6:	d41e      	bmi.n	800a636 <_malloc_r+0xc6>
 800a5f8:	2a0b      	cmp	r2, #11
 800a5fa:	d916      	bls.n	800a62a <_malloc_r+0xba>
 800a5fc:	1961      	adds	r1, r4, r5
 800a5fe:	42a3      	cmp	r3, r4
 800a600:	6025      	str	r5, [r4, #0]
 800a602:	bf18      	it	ne
 800a604:	6059      	strne	r1, [r3, #4]
 800a606:	6863      	ldr	r3, [r4, #4]
 800a608:	bf08      	it	eq
 800a60a:	6031      	streq	r1, [r6, #0]
 800a60c:	5162      	str	r2, [r4, r5]
 800a60e:	604b      	str	r3, [r1, #4]
 800a610:	4638      	mov	r0, r7
 800a612:	f104 060b 	add.w	r6, r4, #11
 800a616:	f000 f835 	bl	800a684 <__malloc_unlock>
 800a61a:	f026 0607 	bic.w	r6, r6, #7
 800a61e:	1d23      	adds	r3, r4, #4
 800a620:	1af2      	subs	r2, r6, r3
 800a622:	d0b6      	beq.n	800a592 <_malloc_r+0x22>
 800a624:	1b9b      	subs	r3, r3, r6
 800a626:	50a3      	str	r3, [r4, r2]
 800a628:	e7b3      	b.n	800a592 <_malloc_r+0x22>
 800a62a:	6862      	ldr	r2, [r4, #4]
 800a62c:	42a3      	cmp	r3, r4
 800a62e:	bf0c      	ite	eq
 800a630:	6032      	streq	r2, [r6, #0]
 800a632:	605a      	strne	r2, [r3, #4]
 800a634:	e7ec      	b.n	800a610 <_malloc_r+0xa0>
 800a636:	4623      	mov	r3, r4
 800a638:	6864      	ldr	r4, [r4, #4]
 800a63a:	e7b2      	b.n	800a5a2 <_malloc_r+0x32>
 800a63c:	4634      	mov	r4, r6
 800a63e:	6876      	ldr	r6, [r6, #4]
 800a640:	e7b9      	b.n	800a5b6 <_malloc_r+0x46>
 800a642:	230c      	movs	r3, #12
 800a644:	603b      	str	r3, [r7, #0]
 800a646:	4638      	mov	r0, r7
 800a648:	f000 f81c 	bl	800a684 <__malloc_unlock>
 800a64c:	e7a1      	b.n	800a592 <_malloc_r+0x22>
 800a64e:	6025      	str	r5, [r4, #0]
 800a650:	e7de      	b.n	800a610 <_malloc_r+0xa0>
 800a652:	bf00      	nop
 800a654:	20000974 	.word	0x20000974

0800a658 <_sbrk_r>:
 800a658:	b538      	push	{r3, r4, r5, lr}
 800a65a:	4d06      	ldr	r5, [pc, #24]	; (800a674 <_sbrk_r+0x1c>)
 800a65c:	2300      	movs	r3, #0
 800a65e:	4604      	mov	r4, r0
 800a660:	4608      	mov	r0, r1
 800a662:	602b      	str	r3, [r5, #0]
 800a664:	f7f6 fdd4 	bl	8001210 <_sbrk>
 800a668:	1c43      	adds	r3, r0, #1
 800a66a:	d102      	bne.n	800a672 <_sbrk_r+0x1a>
 800a66c:	682b      	ldr	r3, [r5, #0]
 800a66e:	b103      	cbz	r3, 800a672 <_sbrk_r+0x1a>
 800a670:	6023      	str	r3, [r4, #0]
 800a672:	bd38      	pop	{r3, r4, r5, pc}
 800a674:	2000097c 	.word	0x2000097c

0800a678 <__malloc_lock>:
 800a678:	4801      	ldr	r0, [pc, #4]	; (800a680 <__malloc_lock+0x8>)
 800a67a:	f000 b809 	b.w	800a690 <__retarget_lock_acquire_recursive>
 800a67e:	bf00      	nop
 800a680:	20000980 	.word	0x20000980

0800a684 <__malloc_unlock>:
 800a684:	4801      	ldr	r0, [pc, #4]	; (800a68c <__malloc_unlock+0x8>)
 800a686:	f000 b804 	b.w	800a692 <__retarget_lock_release_recursive>
 800a68a:	bf00      	nop
 800a68c:	20000980 	.word	0x20000980

0800a690 <__retarget_lock_acquire_recursive>:
 800a690:	4770      	bx	lr

0800a692 <__retarget_lock_release_recursive>:
 800a692:	4770      	bx	lr

0800a694 <_init>:
 800a694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a696:	bf00      	nop
 800a698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a69a:	bc08      	pop	{r3}
 800a69c:	469e      	mov	lr, r3
 800a69e:	4770      	bx	lr

0800a6a0 <_fini>:
 800a6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6a2:	bf00      	nop
 800a6a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6a6:	bc08      	pop	{r3}
 800a6a8:	469e      	mov	lr, r3
 800a6aa:	4770      	bx	lr
