
PMPS_Projekat_AjlaPuskarevic_EdinMustafic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000108e8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  08010a70  08010a70  00020a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010f98  08010f98  000300d0  2**0
                  CONTENTS
  4 .ARM          00000008  08010f98  08010f98  00020f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010fa0  08010fa0  000300d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010fa0  08010fa0  00020fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010fa4  08010fa4  00020fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08010fa8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300d0  2**0
                  CONTENTS
 10 .bss          0000249c  200000d0  200000d0  000300d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000256c  2000256c  000300d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000235bc  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005edd  00000000  00000000  000536bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001868  00000000  00000000  000595a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015b8  00000000  00000000  0005ae08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029340  00000000  00000000  0005c3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027cfa  00000000  00000000  00085700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf6a3  00000000  00000000  000ad3fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017ca9d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006390  00000000  00000000  0017caf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000d0 	.word	0x200000d0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08010a58 	.word	0x08010a58

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000d4 	.word	0x200000d4
 80001c4:	08010a58 	.word	0x08010a58

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <AUDIO_OUT_Init>:

static uint8_t I2S3_Init(uint32_t AudioFreq);
extern AUDIO_DrvTypeDef cs43l22_drv;

uint8_t AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	603a      	str	r2, [r7, #0]
 80004d6:	80fb      	strh	r3, [r7, #6]
 80004d8:	460b      	mov	r3, r1
 80004da:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_OK;
 80004dc:	2300      	movs	r3, #0
 80004de:	73fb      	strb	r3, [r7, #15]
  
  AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 80004e0:	2200      	movs	r2, #0
 80004e2:	6839      	ldr	r1, [r7, #0]
 80004e4:	481c      	ldr	r0, [pc, #112]	; (8000558 <AUDIO_OUT_Init+0x8c>)
 80004e6:	f000 f8f9 	bl	80006dc <AUDIO_OUT_ClockConfig>
  
  hAudioOutI2s.Instance = I2S3;
 80004ea:	4b1b      	ldr	r3, [pc, #108]	; (8000558 <AUDIO_OUT_Init+0x8c>)
 80004ec:	4a1b      	ldr	r2, [pc, #108]	; (800055c <AUDIO_OUT_Init+0x90>)
 80004ee:	601a      	str	r2, [r3, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 80004f0:	4819      	ldr	r0, [pc, #100]	; (8000558 <AUDIO_OUT_Init+0x8c>)
 80004f2:	f006 fa83 	bl	80069fc <HAL_I2S_GetState>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d103      	bne.n	8000504 <AUDIO_OUT_Init+0x38>
  {
    AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 80004fc:	2100      	movs	r1, #0
 80004fe:	4816      	ldr	r0, [pc, #88]	; (8000558 <AUDIO_OUT_Init+0x8c>)
 8000500:	f000 f946 	bl	8000790 <AUDIO_OUT_MspInit>
  }

  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 8000504:	6838      	ldr	r0, [r7, #0]
 8000506:	f000 fa0b 	bl	8000920 <I2S3_Init>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <AUDIO_OUT_Init+0x48>
  {
    ret = AUDIO_ERROR;
 8000510:	2301      	movs	r3, #1
 8000512:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 8000514:	7bfb      	ldrb	r3, [r7, #15]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d10e      	bne.n	8000538 <AUDIO_OUT_Init+0x6c>
  {
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 800051a:	4b11      	ldr	r3, [pc, #68]	; (8000560 <AUDIO_OUT_Init+0x94>)
 800051c:	689b      	ldr	r3, [r3, #8]
 800051e:	2094      	movs	r0, #148	; 0x94
 8000520:	4798      	blx	r3
 8000522:	4603      	mov	r3, r0
 8000524:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8000528:	2be0      	cmp	r3, #224	; 0xe0
 800052a:	d103      	bne.n	8000534 <AUDIO_OUT_Init+0x68>
    {  
      pAudioDrv = &cs43l22_drv; 
 800052c:	4b0d      	ldr	r3, [pc, #52]	; (8000564 <AUDIO_OUT_Init+0x98>)
 800052e:	4a0c      	ldr	r2, [pc, #48]	; (8000560 <AUDIO_OUT_Init+0x94>)
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	e001      	b.n	8000538 <AUDIO_OUT_Init+0x6c>
    }
    else
    {
      ret = AUDIO_ERROR;
 8000534:	2301      	movs	r3, #1
 8000536:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  if(ret == AUDIO_OK)
 8000538:	7bfb      	ldrb	r3, [r7, #15]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d107      	bne.n	800054e <AUDIO_OUT_Init+0x82>
  {
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 800053e:	4b09      	ldr	r3, [pc, #36]	; (8000564 <AUDIO_OUT_Init+0x98>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	681c      	ldr	r4, [r3, #0]
 8000544:	797a      	ldrb	r2, [r7, #5]
 8000546:	88f9      	ldrh	r1, [r7, #6]
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	2094      	movs	r0, #148	; 0x94
 800054c:	47a0      	blx	r4
  }
  
  return ret;
 800054e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000550:	4618      	mov	r0, r3
 8000552:	3714      	adds	r7, #20
 8000554:	46bd      	mov	sp, r7
 8000556:	bd90      	pop	{r4, r7, pc}
 8000558:	200000f0 	.word	0x200000f0
 800055c:	40003c00 	.word	0x40003c00
 8000560:	20000008 	.word	0x20000008
 8000564:	200000ec 	.word	0x200000ec

08000568 <AUDIO_OUT_Play>:

uint8_t AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8000572:	4b10      	ldr	r3, [pc, #64]	; (80005b4 <AUDIO_OUT_Play+0x4c>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	68db      	ldr	r3, [r3, #12]
 8000578:	683a      	ldr	r2, [r7, #0]
 800057a:	b292      	uxth	r2, r2
 800057c:	6879      	ldr	r1, [r7, #4]
 800057e:	2094      	movs	r0, #148	; 0x94
 8000580:	4798      	blx	r3
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <AUDIO_OUT_Play+0x24>
  {
    return AUDIO_ERROR;
 8000588:	2301      	movs	r3, #1
 800058a:	e00f      	b.n	80005ac <AUDIO_OUT_Play+0x44>
  }
  else 
  {
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE)); 
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000592:	d203      	bcs.n	800059c <AUDIO_OUT_Play+0x34>
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	085b      	lsrs	r3, r3, #1
 8000598:	b29b      	uxth	r3, r3
 800059a:	e001      	b.n	80005a0 <AUDIO_OUT_Play+0x38>
 800059c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005a0:	461a      	mov	r2, r3
 80005a2:	6879      	ldr	r1, [r7, #4]
 80005a4:	4804      	ldr	r0, [pc, #16]	; (80005b8 <AUDIO_OUT_Play+0x50>)
 80005a6:	f005 fea7 	bl	80062f8 <HAL_I2S_Transmit_DMA>
    
    return AUDIO_OK;
 80005aa:	2300      	movs	r3, #0
  }
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	200000ec 	.word	0x200000ec
 80005b8:	200000f0 	.word	0x200000f0

080005bc <AUDIO_OUT_Pause>:
{
  HAL_I2S_Transmit_DMA(&hAudioOutI2s, pData, Size); 
}

uint8_t AUDIO_OUT_Pause(void)
{    
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  if(pAudioDrv->Pause(AUDIO_I2C_ADDRESS) != 0)
 80005c0:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <AUDIO_OUT_Pause+0x24>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	691b      	ldr	r3, [r3, #16]
 80005c6:	2094      	movs	r0, #148	; 0x94
 80005c8:	4798      	blx	r3
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <AUDIO_OUT_Pause+0x18>
  {
    return AUDIO_ERROR;
 80005d0:	2301      	movs	r3, #1
 80005d2:	e003      	b.n	80005dc <AUDIO_OUT_Pause+0x20>
  }
  else
  {
    HAL_I2S_DMAPause(&hAudioOutI2s);
 80005d4:	4803      	ldr	r0, [pc, #12]	; (80005e4 <AUDIO_OUT_Pause+0x28>)
 80005d6:	f005 ff37 	bl	8006448 <HAL_I2S_DMAPause>
    
    return AUDIO_OK;
 80005da:	2300      	movs	r3, #0
  }
}
 80005dc:	4618      	mov	r0, r3
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	200000ec 	.word	0x200000ec
 80005e4:	200000f0 	.word	0x200000f0

080005e8 <AUDIO_OUT_Resume>:

uint8_t AUDIO_OUT_Resume(void)
{    
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  if(pAudioDrv->Resume(AUDIO_I2C_ADDRESS) != 0)
 80005ec:	4b07      	ldr	r3, [pc, #28]	; (800060c <AUDIO_OUT_Resume+0x24>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	2094      	movs	r0, #148	; 0x94
 80005f4:	4798      	blx	r3
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <AUDIO_OUT_Resume+0x18>
  {
    return AUDIO_ERROR;
 80005fc:	2301      	movs	r3, #1
 80005fe:	e003      	b.n	8000608 <AUDIO_OUT_Resume+0x20>
  }
  else
  {
    HAL_I2S_DMAResume(&hAudioOutI2s);
 8000600:	4803      	ldr	r0, [pc, #12]	; (8000610 <AUDIO_OUT_Resume+0x28>)
 8000602:	f005 ff83 	bl	800650c <HAL_I2S_DMAResume>
    
    return AUDIO_OK;
 8000606:	2300      	movs	r3, #0
  }
}
 8000608:	4618      	mov	r0, r3
 800060a:	bd80      	pop	{r7, pc}
 800060c:	200000ec 	.word	0x200000ec
 8000610:	200000f0 	.word	0x200000f0

08000614 <AUDIO_OUT_Stop>:

uint8_t AUDIO_OUT_Stop(uint32_t Option)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  HAL_I2S_DMAStop(&hAudioOutI2s);
 800061c:	480e      	ldr	r0, [pc, #56]	; (8000658 <AUDIO_OUT_Stop+0x44>)
 800061e:	f006 f809 	bl	8006634 <HAL_I2S_DMAStop>
  
  if(pAudioDrv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <AUDIO_OUT_Stop+0x48>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	6879      	ldr	r1, [r7, #4]
 800062a:	2094      	movs	r0, #148	; 0x94
 800062c:	4798      	blx	r3
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <AUDIO_OUT_Stop+0x24>
  {
    return AUDIO_ERROR;
 8000634:	2301      	movs	r3, #1
 8000636:	e00b      	b.n	8000650 <AUDIO_OUT_Stop+0x3c>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2b01      	cmp	r3, #1
 800063c:	d107      	bne.n	800064e <AUDIO_OUT_Stop+0x3a>
    { 
      HAL_Delay(1);
 800063e:	2001      	movs	r0, #1
 8000640:	f002 f8ba 	bl	80027b8 <HAL_Delay>
      
      HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	2110      	movs	r1, #16
 8000648:	4805      	ldr	r0, [pc, #20]	; (8000660 <AUDIO_OUT_Stop+0x4c>)
 800064a:	f003 f8c1 	bl	80037d0 <HAL_GPIO_WritePin>
    }
    
    return AUDIO_OK;
 800064e:	2300      	movs	r3, #0
  }
}
 8000650:	4618      	mov	r0, r3
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	200000f0 	.word	0x200000f0
 800065c:	200000ec 	.word	0x200000ec
 8000660:	40020c00 	.word	0x40020c00

08000664 <AUDIO_OUT_SetVolume>:

uint8_t AUDIO_OUT_SetVolume(uint8_t Volume)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
  if(pAudioDrv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <AUDIO_OUT_SetVolume+0x2c>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	6a1b      	ldr	r3, [r3, #32]
 8000674:	79fa      	ldrb	r2, [r7, #7]
 8000676:	4611      	mov	r1, r2
 8000678:	2094      	movs	r0, #148	; 0x94
 800067a:	4798      	blx	r3
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <AUDIO_OUT_SetVolume+0x22>
  {
    return AUDIO_ERROR;
 8000682:	2301      	movs	r3, #1
 8000684:	e000      	b.n	8000688 <AUDIO_OUT_SetVolume+0x24>
  }
  else
  {
    return AUDIO_OK;
 8000686:	2300      	movs	r3, #0
  }
}
 8000688:	4618      	mov	r0, r3
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	200000ec 	.word	0x200000ec

08000694 <HAL_I2S_TxCpltCallback>:
  
  I2S3_Init(AudioFreq);
}

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a04      	ldr	r2, [pc, #16]	; (80006b4 <HAL_I2S_TxCpltCallback+0x20>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d101      	bne.n	80006aa <HAL_I2S_TxCpltCallback+0x16>
  {
    AUDIO_OUT_TransferComplete_CallBack();
 80006a6:	f001 ffc3 	bl	8002630 <AUDIO_OUT_TransferComplete_CallBack>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40003c00 	.word	0x40003c00

080006b8 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a04      	ldr	r2, [pc, #16]	; (80006d8 <HAL_I2S_TxHalfCpltCallback+0x20>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d101      	bne.n	80006ce <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    AUDIO_OUT_HalfTransfer_CallBack();
 80006ca:	f001 ffc5 	bl	8002658 <AUDIO_OUT_HalfTransfer_CallBack>
  }
}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40003c00 	.word	0x40003c00

080006dc <AUDIO_OUT_ClockConfig>:

__weak void AUDIO_OUT_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{ 
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	; 0x28
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 80006e8:	2300      	movs	r3, #0
 80006ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80006ee:	23ff      	movs	r3, #255	; 0xff
 80006f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  
  for(index = 0; index < 8; index++)
 80006f4:	2300      	movs	r3, #0
 80006f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80006fa:	e010      	b.n	800071e <AUDIO_OUT_ClockConfig+0x42>
  {
    if(I2SFreq[index] == AudioFreq)
 80006fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000700:	4a20      	ldr	r2, [pc, #128]	; (8000784 <AUDIO_OUT_ClockConfig+0xa8>)
 8000702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000706:	68ba      	ldr	r2, [r7, #8]
 8000708:	429a      	cmp	r2, r3
 800070a:	d103      	bne.n	8000714 <AUDIO_OUT_ClockConfig+0x38>
    {
      freqindex = index;
 800070c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000710:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  for(index = 0; index < 8; index++)
 8000714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000718:	3301      	adds	r3, #1
 800071a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800071e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000722:	2b07      	cmp	r3, #7
 8000724:	d9ea      	bls.n	80006fc <AUDIO_OUT_ClockConfig+0x20>
    }
  }
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4618      	mov	r0, r3
 800072c:	f007 faaa 	bl	8007c84 <HAL_RCCEx_GetPeriphCLKConfig>
  if ((freqindex & 0x7) == 0)
 8000730:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000734:	f003 0307 	and.w	r3, r3, #7
 8000738:	2b00      	cmp	r3, #0
 800073a:	d113      	bne.n	8000764 <AUDIO_OUT_ClockConfig+0x88>
  {
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800073c:	2301      	movs	r3, #1
 800073e:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8000740:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000744:	4a10      	ldr	r2, [pc, #64]	; (8000788 <AUDIO_OUT_ClockConfig+0xac>)
 8000746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800074a:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 800074c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000750:	4a0e      	ldr	r2, [pc, #56]	; (800078c <AUDIO_OUT_ClockConfig+0xb0>)
 8000752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000756:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	4618      	mov	r0, r3
 800075e:	f007 f9af 	bl	8007ac0 <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 8000762:	e00b      	b.n	800077c <AUDIO_OUT_ClockConfig+0xa0>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000764:	2301      	movs	r3, #1
 8000766:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8000768:	f44f 7381 	mov.w	r3, #258	; 0x102
 800076c:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 800076e:	2303      	movs	r3, #3
 8000770:	61fb      	str	r3, [r7, #28]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4618      	mov	r0, r3
 8000778:	f007 f9a2 	bl	8007ac0 <HAL_RCCEx_PeriphCLKConfig>
}
 800077c:	bf00      	nop
 800077e:	3728      	adds	r7, #40	; 0x28
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	08010ac4 	.word	0x08010ac4
 8000788:	08010ae4 	.word	0x08010ae4
 800078c:	08010b04 	.word	0x08010b04

08000790 <AUDIO_OUT_MspInit>:

__weak void AUDIO_OUT_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08c      	sub	sp, #48	; 0x30
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_i2sTx;
  GPIO_InitTypeDef  GPIO_InitStruct;

  I2S3_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	61bb      	str	r3, [r7, #24]
 800079e:	4b56      	ldr	r3, [pc, #344]	; (80008f8 <AUDIO_OUT_MspInit+0x168>)
 80007a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a2:	4a55      	ldr	r2, [pc, #340]	; (80008f8 <AUDIO_OUT_MspInit+0x168>)
 80007a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007a8:	6413      	str	r3, [r2, #64]	; 0x40
 80007aa:	4b53      	ldr	r3, [pc, #332]	; (80008f8 <AUDIO_OUT_MspInit+0x168>)
 80007ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007b2:	61bb      	str	r3, [r7, #24]
 80007b4:	69bb      	ldr	r3, [r7, #24]

  I2S3_SCK_SD_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
 80007ba:	4b4f      	ldr	r3, [pc, #316]	; (80008f8 <AUDIO_OUT_MspInit+0x168>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a4e      	ldr	r2, [pc, #312]	; (80008f8 <AUDIO_OUT_MspInit+0x168>)
 80007c0:	f043 0304 	orr.w	r3, r3, #4
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b4c      	ldr	r3, [pc, #304]	; (80008f8 <AUDIO_OUT_MspInit+0x168>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0304 	and.w	r3, r3, #4
 80007ce:	617b      	str	r3, [r7, #20]
 80007d0:	697b      	ldr	r3, [r7, #20]
  I2S3_WS_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	4b48      	ldr	r3, [pc, #288]	; (80008f8 <AUDIO_OUT_MspInit+0x168>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a47      	ldr	r2, [pc, #284]	; (80008f8 <AUDIO_OUT_MspInit+0x168>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b45      	ldr	r3, [pc, #276]	; (80008f8 <AUDIO_OUT_MspInit+0x168>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]

  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 80007ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 80007f4:	2302      	movs	r3, #2
 80007f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull        = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 80007fc:	2302      	movs	r3, #2
 80007fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 8000800:	2306      	movs	r3, #6
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8000804:	f107 031c 	add.w	r3, r7, #28
 8000808:	4619      	mov	r1, r3
 800080a:	483c      	ldr	r0, [pc, #240]	; (80008fc <AUDIO_OUT_MspInit+0x16c>)
 800080c:	f002 fd48 	bl	80032a0 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 8000810:	2310      	movs	r3, #16
 8000812:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4619      	mov	r1, r3
 800081a:	4839      	ldr	r0, [pc, #228]	; (8000900 <AUDIO_OUT_MspInit+0x170>)
 800081c:	f002 fd40 	bl	80032a0 <HAL_GPIO_Init>

  I2S3_MCK_CLK_ENABLE();
 8000820:	2300      	movs	r3, #0
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	4b34      	ldr	r3, [pc, #208]	; (80008f8 <AUDIO_OUT_MspInit+0x168>)
 8000826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000828:	4a33      	ldr	r2, [pc, #204]	; (80008f8 <AUDIO_OUT_MspInit+0x168>)
 800082a:	f043 0304 	orr.w	r3, r3, #4
 800082e:	6313      	str	r3, [r2, #48]	; 0x30
 8000830:	4b31      	ldr	r3, [pc, #196]	; (80008f8 <AUDIO_OUT_MspInit+0x168>)
 8000832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000834:	f003 0304 	and.w	r3, r3, #4
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 800083c:	2380      	movs	r3, #128	; 0x80
 800083e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	4619      	mov	r1, r3
 8000846:	482d      	ldr	r0, [pc, #180]	; (80008fc <AUDIO_OUT_MspInit+0x16c>)
 8000848:	f002 fd2a 	bl	80032a0 <HAL_GPIO_Init>

  I2S3_DMAx_CLK_ENABLE(); 
 800084c:	2300      	movs	r3, #0
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <AUDIO_OUT_MspInit+0x168>)
 8000852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000854:	4a28      	ldr	r2, [pc, #160]	; (80008f8 <AUDIO_OUT_MspInit+0x168>)
 8000856:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800085a:	6313      	str	r3, [r2, #48]	; 0x30
 800085c:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <AUDIO_OUT_MspInit+0x168>)
 800085e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	68bb      	ldr	r3, [r7, #8]
  
  if(hi2s->Instance == I2S3)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a25      	ldr	r2, [pc, #148]	; (8000904 <AUDIO_OUT_MspInit+0x174>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d136      	bne.n	80008e0 <AUDIO_OUT_MspInit+0x150>
  {
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 8000872:	4b25      	ldr	r3, [pc, #148]	; (8000908 <AUDIO_OUT_MspInit+0x178>)
 8000874:	2200      	movs	r2, #0
 8000876:	605a      	str	r2, [r3, #4]
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000878:	4b23      	ldr	r3, [pc, #140]	; (8000908 <AUDIO_OUT_MspInit+0x178>)
 800087a:	2240      	movs	r2, #64	; 0x40
 800087c:	609a      	str	r2, [r3, #8]
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800087e:	4b22      	ldr	r3, [pc, #136]	; (8000908 <AUDIO_OUT_MspInit+0x178>)
 8000880:	2200      	movs	r2, #0
 8000882:	60da      	str	r2, [r3, #12]
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 8000884:	4b20      	ldr	r3, [pc, #128]	; (8000908 <AUDIO_OUT_MspInit+0x178>)
 8000886:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800088a:	611a      	str	r2, [r3, #16]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 800088c:	4b1e      	ldr	r3, [pc, #120]	; (8000908 <AUDIO_OUT_MspInit+0x178>)
 800088e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000892:	615a      	str	r2, [r3, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 8000894:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <AUDIO_OUT_MspInit+0x178>)
 8000896:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800089a:	619a      	str	r2, [r3, #24]
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 800089c:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <AUDIO_OUT_MspInit+0x178>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
    hdma_i2sTx.Init.Priority            = DMA_PRIORITY_HIGH;
 80008a2:	4b19      	ldr	r3, [pc, #100]	; (8000908 <AUDIO_OUT_MspInit+0x178>)
 80008a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80008a8:	621a      	str	r2, [r3, #32]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 80008aa:	4b17      	ldr	r3, [pc, #92]	; (8000908 <AUDIO_OUT_MspInit+0x178>)
 80008ac:	2204      	movs	r2, #4
 80008ae:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80008b0:	4b15      	ldr	r3, [pc, #84]	; (8000908 <AUDIO_OUT_MspInit+0x178>)
 80008b2:	2203      	movs	r2, #3
 80008b4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80008b6:	4b14      	ldr	r3, [pc, #80]	; (8000908 <AUDIO_OUT_MspInit+0x178>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <AUDIO_OUT_MspInit+0x178>)
 80008be:	2200      	movs	r2, #0
 80008c0:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <AUDIO_OUT_MspInit+0x178>)
 80008c4:	4a11      	ldr	r2, [pc, #68]	; (800090c <AUDIO_OUT_MspInit+0x17c>)
 80008c6:	601a      	str	r2, [r3, #0]

    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4a0f      	ldr	r2, [pc, #60]	; (8000908 <AUDIO_OUT_MspInit+0x178>)
 80008cc:	639a      	str	r2, [r3, #56]	; 0x38
 80008ce:	4a0e      	ldr	r2, [pc, #56]	; (8000908 <AUDIO_OUT_MspInit+0x178>)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	6393      	str	r3, [r2, #56]	; 0x38
    
    HAL_DMA_DeInit(&hdma_i2sTx);
 80008d4:	480c      	ldr	r0, [pc, #48]	; (8000908 <AUDIO_OUT_MspInit+0x178>)
 80008d6:	f002 f953 	bl	8002b80 <HAL_DMA_DeInit>
    
    HAL_DMA_Init(&hdma_i2sTx);
 80008da:	480b      	ldr	r0, [pc, #44]	; (8000908 <AUDIO_OUT_MspInit+0x178>)
 80008dc:	f002 f8a2 	bl	8002a24 <HAL_DMA_Init>
  }
  
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80008e0:	2200      	movs	r2, #0
 80008e2:	210e      	movs	r1, #14
 80008e4:	202f      	movs	r0, #47	; 0x2f
 80008e6:	f002 f866 	bl	80029b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ);  
 80008ea:	202f      	movs	r0, #47	; 0x2f
 80008ec:	f002 f87f 	bl	80029ee <HAL_NVIC_EnableIRQ>
}
 80008f0:	bf00      	nop
 80008f2:	3730      	adds	r7, #48	; 0x30
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40020800 	.word	0x40020800
 8000900:	40020000 	.word	0x40020000
 8000904:	40003c00 	.word	0x40003c00
 8000908:	20000138 	.word	0x20000138
 800090c:	400260b8 	.word	0x400260b8

08000910 <AUDIO_OUT_Error_CallBack>:
__weak void AUDIO_OUT_HalfTransfer_CallBack(void)
{
}

__weak void AUDIO_OUT_Error_CallBack(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
	...

08000920 <I2S3_Init>:

static uint8_t I2S3_Init(uint32_t AudioFreq)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  hAudioOutI2s.Instance         = I2S3;
 8000928:	4b17      	ldr	r3, [pc, #92]	; (8000988 <I2S3_Init+0x68>)
 800092a:	4a18      	ldr	r2, [pc, #96]	; (800098c <I2S3_Init+0x6c>)
 800092c:	601a      	str	r2, [r3, #0]
  
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 800092e:	4b16      	ldr	r3, [pc, #88]	; (8000988 <I2S3_Init+0x68>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	69da      	ldr	r2, [r3, #28]
 8000934:	4b14      	ldr	r3, [pc, #80]	; (8000988 <I2S3_Init+0x68>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800093c:	61da      	str	r2, [r3, #28]
  
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 800093e:	4a12      	ldr	r2, [pc, #72]	; (8000988 <I2S3_Init+0x68>)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	6153      	str	r3, [r2, #20]
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 8000944:	4b10      	ldr	r3, [pc, #64]	; (8000988 <I2S3_Init+0x68>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <I2S3_Init+0x68>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000950:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <I2S3_Init+0x68>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <I2S3_Init+0x68>)
 8000958:	f44f 7200 	mov.w	r2, #512	; 0x200
 800095c:	611a      	str	r2, [r3, #16]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
 800095e:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <I2S3_Init+0x68>)
 8000960:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000964:	605a      	str	r2, [r3, #4]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <I2S3_Init+0x68>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]

  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 800096c:	4806      	ldr	r0, [pc, #24]	; (8000988 <I2S3_Init+0x68>)
 800096e:	f005 fb83 	bl	8006078 <HAL_I2S_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <I2S3_Init+0x5c>
  {
    return AUDIO_ERROR;
 8000978:	2301      	movs	r3, #1
 800097a:	e000      	b.n	800097e <I2S3_Init+0x5e>
  }
  else
  {
    return AUDIO_OK;
 800097c:	2300      	movs	r3, #0
  }
}
 800097e:	4618      	mov	r0, r3
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200000f0 	.word	0x200000f0
 800098c:	40003c00 	.word	0x40003c00

08000990 <HAL_I2S_ErrorCallback>:
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a04      	ldr	r2, [pc, #16]	; (80009b0 <HAL_I2S_ErrorCallback+0x20>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d101      	bne.n	80009a6 <HAL_I2S_ErrorCallback+0x16>
  {
    AUDIO_OUT_Error_CallBack();
 80009a2:	f7ff ffb5 	bl	8000910 <AUDIO_OUT_Error_CallBack>
  }
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40003c00 	.word	0x40003c00

080009b4 <I2Cx_Init>:
void    AUDIO_IO_DeInit(void);
void    AUDIO_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value);
uint8_t AUDIO_IO_Read(uint8_t Addr, uint8_t Reg);

static void I2Cx_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80009b8:	4814      	ldr	r0, [pc, #80]	; (8000a0c <I2Cx_Init+0x58>)
 80009ba:	f004 fff3 	bl	80059a4 <HAL_I2C_GetState>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d121      	bne.n	8000a08 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = AUDIO_I2Cx;
 80009c4:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <I2Cx_Init+0x58>)
 80009c6:	4a12      	ldr	r2, [pc, #72]	; (8000a10 <I2Cx_Init+0x5c>)
 80009c8:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <I2Cx_Init+0x58>)
 80009cc:	2243      	movs	r2, #67	; 0x43
 80009ce:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 80009d0:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <I2Cx_Init+0x58>)
 80009d2:	4a10      	ldr	r2, [pc, #64]	; (8000a14 <I2Cx_Init+0x60>)
 80009d4:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009d6:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <I2Cx_Init+0x58>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009dc:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <I2Cx_Init+0x58>)
 80009de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009e2:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 80009e4:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <I2Cx_Init+0x58>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 80009ea:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <I2Cx_Init+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <I2Cx_Init+0x58>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 80009f6:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <I2Cx_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	621a      	str	r2, [r3, #32]

    I2Cx_MspInit(&I2cHandle);
 80009fc:	4803      	ldr	r0, [pc, #12]	; (8000a0c <I2Cx_Init+0x58>)
 80009fe:	f000 f86b 	bl	8000ad8 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8000a02:	4802      	ldr	r0, [pc, #8]	; (8000a0c <I2Cx_Init+0x58>)
 8000a04:	f004 fb3a 	bl	800507c <HAL_I2C_Init>
  }
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000198 	.word	0x20000198
 8000a10:	40005400 	.word	0x40005400
 8000a14:	000186a0 	.word	0x000186a0

08000a18 <I2Cx_WriteData>:

static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b088      	sub	sp, #32
 8000a1c:	af04      	add	r7, sp, #16
 8000a1e:	4603      	mov	r3, r0
 8000a20:	80fb      	strh	r3, [r7, #6]
 8000a22:	460b      	mov	r3, r1
 8000a24:	717b      	strb	r3, [r7, #5]
 8000a26:	4613      	mov	r3, r2
 8000a28:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8000a2e:	797b      	ldrb	r3, [r7, #5]
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <I2Cx_WriteData+0x48>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	88f9      	ldrh	r1, [r7, #6]
 8000a38:	9302      	str	r3, [sp, #8]
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	9301      	str	r3, [sp, #4]
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	2301      	movs	r3, #1
 8000a44:	4807      	ldr	r0, [pc, #28]	; (8000a64 <I2Cx_WriteData+0x4c>)
 8000a46:	f004 fc8d 	bl	8005364 <HAL_I2C_Mem_Write>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	73fb      	strb	r3, [r7, #15]
  
  if(status != HAL_OK)
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <I2Cx_WriteData+0x40>
  {
    I2Cx_Error();
 8000a54:	f000 f834 	bl	8000ac0 <I2Cx_Error>
  }
}
 8000a58:	bf00      	nop
 8000a5a:	3710      	adds	r7, #16
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000000 	.word	0x20000000
 8000a64:	20000198 	.word	0x20000198

08000a68 <I2Cx_ReadData>:

static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b088      	sub	sp, #32
 8000a6c:	af04      	add	r7, sp, #16
 8000a6e:	4603      	mov	r3, r0
 8000a70:	460a      	mov	r2, r1
 8000a72:	80fb      	strh	r3, [r7, #6]
 8000a74:	4613      	mov	r3, r2
 8000a76:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8000a80:	797b      	ldrb	r3, [r7, #5]
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <I2Cx_ReadData+0x50>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	88f9      	ldrh	r1, [r7, #6]
 8000a8a:	9302      	str	r3, [sp, #8]
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	9301      	str	r3, [sp, #4]
 8000a90:	f107 030e 	add.w	r3, r7, #14
 8000a94:	9300      	str	r3, [sp, #0]
 8000a96:	2301      	movs	r3, #1
 8000a98:	4808      	ldr	r0, [pc, #32]	; (8000abc <I2Cx_ReadData+0x54>)
 8000a9a:	f004 fd5d 	bl	8005558 <HAL_I2C_Mem_Read>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	73fb      	strb	r3, [r7, #15]
  
  if(status != HAL_OK)
 8000aa2:	7bfb      	ldrb	r3, [r7, #15]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <I2Cx_ReadData+0x44>
  {
    I2Cx_Error();
 8000aa8:	f000 f80a 	bl	8000ac0 <I2Cx_Error>
  }
  return value;
 8000aac:	7bbb      	ldrb	r3, [r7, #14]
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3710      	adds	r7, #16
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000000 	.word	0x20000000
 8000abc:	20000198 	.word	0x20000198

08000ac0 <I2Cx_Error>:

static void I2Cx_Error(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  HAL_I2C_DeInit(&I2cHandle);
 8000ac4:	4803      	ldr	r0, [pc, #12]	; (8000ad4 <I2Cx_Error+0x14>)
 8000ac6:	f004 fc1d 	bl	8005304 <HAL_I2C_DeInit>
  
  I2Cx_Init();
 8000aca:	f7ff ff73 	bl	80009b4 <I2Cx_Init>
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000198 	.word	0x20000198

08000ad8 <I2Cx_MspInit>:

static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	; 0x28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  AUDIO_I2Cx_CLOCK_ENABLE();
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	4b25      	ldr	r3, [pc, #148]	; (8000b7c <I2Cx_MspInit+0xa4>)
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae8:	4a24      	ldr	r2, [pc, #144]	; (8000b7c <I2Cx_MspInit+0xa4>)
 8000aea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aee:	6413      	str	r3, [r2, #64]	; 0x40
 8000af0:	4b22      	ldr	r3, [pc, #136]	; (8000b7c <I2Cx_MspInit+0xa4>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000af8:	613b      	str	r3, [r7, #16]
 8000afa:	693b      	ldr	r3, [r7, #16]

  AUDIO_I2Cx_GPIO_CLK_ENABLE();
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	4b1e      	ldr	r3, [pc, #120]	; (8000b7c <I2Cx_MspInit+0xa4>)
 8000b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b04:	4a1d      	ldr	r2, [pc, #116]	; (8000b7c <I2Cx_MspInit+0xa4>)
 8000b06:	f043 0302 	orr.w	r3, r3, #2
 8000b0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0c:	4b1b      	ldr	r3, [pc, #108]	; (8000b7c <I2Cx_MspInit+0xa4>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b10:	f003 0302 	and.w	r3, r3, #2
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	68fb      	ldr	r3, [r7, #12]

  GPIO_InitStructure.Pin = AUDIO_I2Cx_SDA_PIN | AUDIO_I2Cx_SCL_PIN;
 8000b18:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8000b1e:	2312      	movs	r3, #18
 8000b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000b26:	2302      	movs	r3, #2
 8000b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = AUDIO_I2Cx_AF;
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(AUDIO_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	4619      	mov	r1, r3
 8000b34:	4812      	ldr	r0, [pc, #72]	; (8000b80 <I2Cx_MspInit+0xa8>)
 8000b36:	f002 fbb3 	bl	80032a0 <HAL_GPIO_Init>

  AUDIO_I2Cx_FORCE_RESET();
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <I2Cx_MspInit+0xa4>)
 8000b3c:	6a1b      	ldr	r3, [r3, #32]
 8000b3e:	4a0f      	ldr	r2, [pc, #60]	; (8000b7c <I2Cx_MspInit+0xa4>)
 8000b40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b44:	6213      	str	r3, [r2, #32]

  AUDIO_I2Cx_RELEASE_RESET();
 8000b46:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <I2Cx_MspInit+0xa4>)
 8000b48:	6a1b      	ldr	r3, [r3, #32]
 8000b4a:	4a0c      	ldr	r2, [pc, #48]	; (8000b7c <I2Cx_MspInit+0xa4>)
 8000b4c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000b50:	6213      	str	r3, [r2, #32]

  HAL_NVIC_SetPriority(AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	210f      	movs	r1, #15
 8000b56:	201f      	movs	r0, #31
 8000b58:	f001 ff2d 	bl	80029b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_EV_IRQn);
 8000b5c:	201f      	movs	r0, #31
 8000b5e:	f001 ff46 	bl	80029ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000b62:	2200      	movs	r2, #0
 8000b64:	210f      	movs	r1, #15
 8000b66:	2020      	movs	r0, #32
 8000b68:	f001 ff25 	bl	80029b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_ER_IRQn);
 8000b6c:	2020      	movs	r0, #32
 8000b6e:	f001 ff3e 	bl	80029ee <HAL_NVIC_EnableIRQ>
}
 8000b72:	bf00      	nop
 8000b74:	3728      	adds	r7, #40	; 0x28
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020400 	.word	0x40020400

08000b84 <AUDIO_IO_Init>:

void AUDIO_IO_Init(void) 
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	603b      	str	r3, [r7, #0]
 8000b8e:	4b17      	ldr	r3, [pc, #92]	; (8000bec <AUDIO_IO_Init+0x68>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a16      	ldr	r2, [pc, #88]	; (8000bec <AUDIO_IO_Init+0x68>)
 8000b94:	f043 0308 	orr.w	r3, r3, #8
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b14      	ldr	r3, [pc, #80]	; (8000bec <AUDIO_IO_Init+0x68>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0308 	and.w	r3, r3, #8
 8000ba2:	603b      	str	r3, [r7, #0]
 8000ba4:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8000ba6:	2310      	movs	r3, #16
 8000ba8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000baa:	2301      	movs	r3, #1
 8000bac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480d      	ldr	r0, [pc, #52]	; (8000bf0 <AUDIO_IO_Init+0x6c>)
 8000bbc:	f002 fb70 	bl	80032a0 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8000bc0:	f7ff fef8 	bl	80009b4 <I2Cx_Init>
  
  CODEC_AUDIO_POWER_OFF();
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2110      	movs	r1, #16
 8000bc8:	4809      	ldr	r0, [pc, #36]	; (8000bf0 <AUDIO_IO_Init+0x6c>)
 8000bca:	f002 fe01 	bl	80037d0 <HAL_GPIO_WritePin>
  
  HAL_Delay(5); 
 8000bce:	2005      	movs	r0, #5
 8000bd0:	f001 fdf2 	bl	80027b8 <HAL_Delay>
  
  CODEC_AUDIO_POWER_ON();
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	2110      	movs	r1, #16
 8000bd8:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <AUDIO_IO_Init+0x6c>)
 8000bda:	f002 fdf9 	bl	80037d0 <HAL_GPIO_WritePin>
  
  HAL_Delay(5); 
 8000bde:	2005      	movs	r0, #5
 8000be0:	f001 fdea 	bl	80027b8 <HAL_Delay>
}
 8000be4:	bf00      	nop
 8000be6:	3718      	adds	r7, #24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40020c00 	.word	0x40020c00

08000bf4 <AUDIO_IO_DeInit>:

void AUDIO_IO_DeInit(void) 
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <AUDIO_IO_Write>:

void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b082      	sub	sp, #8
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	4603      	mov	r3, r0
 8000c0a:	71fb      	strb	r3, [r7, #7]
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	71bb      	strb	r3, [r7, #6]
 8000c10:	4613      	mov	r3, r2
 8000c12:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	797a      	ldrb	r2, [r7, #5]
 8000c1a:	79b9      	ldrb	r1, [r7, #6]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fefb 	bl	8000a18 <I2Cx_WriteData>
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <AUDIO_IO_Read>:

uint8_t AUDIO_IO_Read (uint8_t Addr, uint8_t Reg)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	4603      	mov	r3, r0
 8000c32:	460a      	mov	r2, r1
 8000c34:	71fb      	strb	r3, [r7, #7]
 8000c36:	4613      	mov	r3, r2
 8000c38:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	79ba      	ldrb	r2, [r7, #6]
 8000c40:	4611      	mov	r1, r2
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff ff10 	bl	8000a68 <I2Cx_ReadData>
 8000c48:	4603      	mov	r3, r0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <AUDIO_StorageParse>:

USBH_HandleTypeDef hUSBHost;
uint16_t NumObs = 0;

FRESULT AUDIO_StorageParse(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b0d6      	sub	sp, #344	; 0x158
 8000c58:	af00      	add	r7, sp, #0
  FRESULT res = FR_OK;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  FILINFO fno;
  DIR dir;
  char *fn;


  res = f_opendir(&dir, USBHPath);
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	4945      	ldr	r1, [pc, #276]	; (8000d78 <AUDIO_StorageParse+0x124>)
 8000c64:	4618      	mov	r0, r3
 8000c66:	f00f f83f 	bl	800fce8 <f_opendir>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  FileList.ptr = 0;
 8000c70:	4b42      	ldr	r3, [pc, #264]	; (8000d7c <AUDIO_StorageParse+0x128>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8

  if(res == FR_OK)
 8000c78:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d16b      	bne.n	8000d58 <AUDIO_StorageParse+0x104>
  {
    while(Appli_state == APPLICATION_READY)
 8000c80:	e066      	b.n	8000d50 <AUDIO_StorageParse+0xfc>
    {
      res = f_readdir(&dir, &fno);
 8000c82:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	4611      	mov	r1, r2
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f00f f8c5 	bl	800fe1a <f_readdir>
 8000c90:	4603      	mov	r3, r0
 8000c92:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
      if(res != FR_OK || fno.fname[0] == 0)
 8000c96:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d15c      	bne.n	8000d58 <AUDIO_StorageParse+0x104>
 8000c9e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000ca2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000ca6:	7d9b      	ldrb	r3, [r3, #22]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d055      	beq.n	8000d58 <AUDIO_StorageParse+0x104>
      {
        break;
      }
      if(fno.fname[0] == '.')
 8000cac:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000cb0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000cb4:	7d9b      	ldrb	r3, [r3, #22]
 8000cb6:	2b2e      	cmp	r3, #46	; 0x2e
 8000cb8:	d100      	bne.n	8000cbc <AUDIO_StorageParse+0x68>
      {
        continue;
 8000cba:	e049      	b.n	8000d50 <AUDIO_StorageParse+0xfc>
      }

      fn = fno.fname;
 8000cbc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cc0:	3316      	adds	r3, #22
 8000cc2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

      if(FileList.ptr < FILEMGR_LIST_DEPDTH)
 8000cc6:	4b2d      	ldr	r3, [pc, #180]	; (8000d7c <AUDIO_StorageParse+0x128>)
 8000cc8:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000ccc:	2b17      	cmp	r3, #23
 8000cce:	d83f      	bhi.n	8000d50 <AUDIO_StorageParse+0xfc>
      {
        if((fno.fattrib & AM_DIR) == 0)
 8000cd0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000cd4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000cd8:	7a1b      	ldrb	r3, [r3, #8]
 8000cda:	f003 0310 	and.w	r3, r3, #16
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d136      	bne.n	8000d50 <AUDIO_StorageParse+0xfc>
        {
          if((strstr(fn, "wav")) || (strstr(fn, "WAV")))
 8000ce2:	4927      	ldr	r1, [pc, #156]	; (8000d80 <AUDIO_StorageParse+0x12c>)
 8000ce4:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8000ce8:	f00f fe91 	bl	8010a0e <strstr>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d107      	bne.n	8000d02 <AUDIO_StorageParse+0xae>
 8000cf2:	4924      	ldr	r1, [pc, #144]	; (8000d84 <AUDIO_StorageParse+0x130>)
 8000cf4:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8000cf8:	f00f fe89 	bl	8010a0e <strstr>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d026      	beq.n	8000d50 <AUDIO_StorageParse+0xfc>
          {
            strncpy((char *)FileList.file[FileList.ptr].name, (char *)fn, FILEMGR_FILE_NAME_SIZE);
 8000d02:	4b1e      	ldr	r3, [pc, #120]	; (8000d7c <AUDIO_StorageParse+0x128>)
 8000d04:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	4413      	add	r3, r2
 8000d10:	00db      	lsls	r3, r3, #3
 8000d12:	4413      	add	r3, r2
 8000d14:	4a19      	ldr	r2, [pc, #100]	; (8000d7c <AUDIO_StorageParse+0x128>)
 8000d16:	4413      	add	r3, r2
 8000d18:	3301      	adds	r3, #1
 8000d1a:	2228      	movs	r2, #40	; 0x28
 8000d1c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8000d20:	4618      	mov	r0, r3
 8000d22:	f00f fe61 	bl	80109e8 <strncpy>
            FileList.file[FileList.ptr].type = FILETYPE_FILE;
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <AUDIO_StorageParse+0x128>)
 8000d28:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4913      	ldr	r1, [pc, #76]	; (8000d7c <AUDIO_StorageParse+0x128>)
 8000d30:	4613      	mov	r3, r2
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	4413      	add	r3, r2
 8000d36:	00db      	lsls	r3, r3, #3
 8000d38:	4413      	add	r3, r2
 8000d3a:	440b      	add	r3, r1
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	701a      	strb	r2, [r3, #0]
            FileList.ptr++;
 8000d40:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <AUDIO_StorageParse+0x128>)
 8000d42:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000d46:	3301      	adds	r3, #1
 8000d48:	b29a      	uxth	r2, r3
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <AUDIO_StorageParse+0x128>)
 8000d4c:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8
    while(Appli_state == APPLICATION_READY)
 8000d50:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <AUDIO_StorageParse+0x134>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d094      	beq.n	8000c82 <AUDIO_StorageParse+0x2e>
          }
        }
      }
    }
  }
  NumObs = FileList.ptr;
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <AUDIO_StorageParse+0x128>)
 8000d5a:	f8b3 23d8 	ldrh.w	r2, [r3, #984]	; 0x3d8
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <AUDIO_StorageParse+0x138>)
 8000d60:	801a      	strh	r2, [r3, #0]
  f_closedir(&dir);
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	4618      	mov	r0, r3
 8000d66:	f00f f832 	bl	800fdce <f_closedir>
  return res;
 8000d6a:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20001a10 	.word	0x20001a10
 8000d7c:	200013d0 	.word	0x200013d0
 8000d80:	08010a70 	.word	0x08010a70
 8000d84:	08010a74 	.word	0x08010a74
 8000d88:	20002254 	.word	0x20002254
 8000d8c:	200001ee 	.word	0x200001ee

08000d90 <AUDIO_GetWavObjectNumber>:

uint16_t AUDIO_GetWavObjectNumber(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
	if (AUDIO_StorageParse() == FR_OK) return NumObs;
 8000d94:	f7ff ff5e 	bl	8000c54 <AUDIO_StorageParse>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d102      	bne.n	8000da4 <AUDIO_GetWavObjectNumber+0x14>
 8000d9e:	4b02      	ldr	r3, [pc, #8]	; (8000da8 <AUDIO_GetWavObjectNumber+0x18>)
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	e7ff      	b.n	8000da4 <AUDIO_GetWavObjectNumber+0x14>
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	200001ee 	.word	0x200001ee

08000dac <Mount_USB>:

void Mount_USB (void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000db0:	2201      	movs	r2, #1
 8000db2:	4905      	ldr	r1, [pc, #20]	; (8000dc8 <Mount_USB+0x1c>)
 8000db4:	4805      	ldr	r0, [pc, #20]	; (8000dcc <Mount_USB+0x20>)
 8000db6:	f00e f9a3 	bl	800f100 <f_mount>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <Mount_USB+0x24>)
 8000dc0:	701a      	strb	r2, [r3, #0]
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20001a10 	.word	0x20001a10
 8000dcc:	20001a14 	.word	0x20001a14
 8000dd0:	200001ec 	.word	0x200001ec

08000dd4 <LIS3DSH_WriteIO>:
static float __X_Scale = 1.0f;
static float __Y_Scale = 1.0f;
static float __Z_Scale = 1.0f;

void LIS3DSH_WriteIO(uint8_t reg, uint8_t *dataW, uint8_t size)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	6039      	str	r1, [r7, #0]
 8000dde:	71fb      	strb	r3, [r7, #7]
 8000de0:	4613      	mov	r3, r2
 8000de2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = reg;
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	73fb      	strb	r3, [r7, #15]
	_LIS3DHS_CS_ENBALE;
 8000de8:	2200      	movs	r2, #0
 8000dea:	2108      	movs	r1, #8
 8000dec:	480c      	ldr	r0, [pc, #48]	; (8000e20 <LIS3DSH_WriteIO+0x4c>)
 8000dee:	f002 fcef 	bl	80037d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&accSPI_Handle, &spiReg, 1, 10);
 8000df2:	f107 010f 	add.w	r1, r7, #15
 8000df6:	230a      	movs	r3, #10
 8000df8:	2201      	movs	r2, #1
 8000dfa:	480a      	ldr	r0, [pc, #40]	; (8000e24 <LIS3DSH_WriteIO+0x50>)
 8000dfc:	f007 f855 	bl	8007eaa <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&accSPI_Handle, dataW, size, 10);
 8000e00:	79bb      	ldrb	r3, [r7, #6]
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	230a      	movs	r3, #10
 8000e06:	6839      	ldr	r1, [r7, #0]
 8000e08:	4806      	ldr	r0, [pc, #24]	; (8000e24 <LIS3DSH_WriteIO+0x50>)
 8000e0a:	f007 f84e 	bl	8007eaa <HAL_SPI_Transmit>
	_LIS3DHS_CS_DISABLE;
 8000e0e:	2201      	movs	r2, #1
 8000e10:	2108      	movs	r1, #8
 8000e12:	4803      	ldr	r0, [pc, #12]	; (8000e20 <LIS3DSH_WriteIO+0x4c>)
 8000e14:	f002 fcdc 	bl	80037d0 <HAL_GPIO_WritePin>
}
 8000e18:	bf00      	nop
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40021000 	.word	0x40021000
 8000e24:	200001f0 	.word	0x200001f0

08000e28 <LIS3DSH_ReadIO>:

void LIS3DSH_ReadIO(uint8_t reg, uint8_t *dataR, uint8_t size)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	6039      	str	r1, [r7, #0]
 8000e32:	71fb      	strb	r3, [r7, #7]
 8000e34:	4613      	mov	r3, r2
 8000e36:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[4];
	spiBuf[0] = reg | 0x80;
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	723b      	strb	r3, [r7, #8]
	_LIS3DHS_CS_ENBALE;
 8000e42:	2200      	movs	r2, #0
 8000e44:	2108      	movs	r1, #8
 8000e46:	4818      	ldr	r0, [pc, #96]	; (8000ea8 <LIS3DSH_ReadIO+0x80>)
 8000e48:	f002 fcc2 	bl	80037d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&accSPI_Handle, spiBuf, 1, 10);
 8000e4c:	f107 0108 	add.w	r1, r7, #8
 8000e50:	230a      	movs	r3, #10
 8000e52:	2201      	movs	r2, #1
 8000e54:	4815      	ldr	r0, [pc, #84]	; (8000eac <LIS3DSH_ReadIO+0x84>)
 8000e56:	f007 f828 	bl	8007eaa <HAL_SPI_Transmit>
	HAL_SPI_Receive(&accSPI_Handle, spiBuf, size, 10);
 8000e5a:	79bb      	ldrb	r3, [r7, #6]
 8000e5c:	b29a      	uxth	r2, r3
 8000e5e:	f107 0108 	add.w	r1, r7, #8
 8000e62:	230a      	movs	r3, #10
 8000e64:	4811      	ldr	r0, [pc, #68]	; (8000eac <LIS3DSH_ReadIO+0x84>)
 8000e66:	f007 f95c 	bl	8008122 <HAL_SPI_Receive>
	_LIS3DHS_CS_DISABLE;
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	2108      	movs	r1, #8
 8000e6e:	480e      	ldr	r0, [pc, #56]	; (8000ea8 <LIS3DSH_ReadIO+0x80>)
 8000e70:	f002 fcae 	bl	80037d0 <HAL_GPIO_WritePin>

	for(uint8_t i=0; i<(size&0x3); i++)
 8000e74:	2300      	movs	r3, #0
 8000e76:	73fb      	strb	r3, [r7, #15]
 8000e78:	e00b      	b.n	8000e92 <LIS3DSH_ReadIO+0x6a>
	{
		dataR[i] = spiBuf[i];
 8000e7a:	7bfa      	ldrb	r2, [r7, #15]
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
 8000e7e:	6839      	ldr	r1, [r7, #0]
 8000e80:	440b      	add	r3, r1
 8000e82:	3210      	adds	r2, #16
 8000e84:	443a      	add	r2, r7
 8000e86:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000e8a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<(size&0x3); i++)
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	73fb      	strb	r3, [r7, #15]
 8000e92:	7bfa      	ldrb	r2, [r7, #15]
 8000e94:	79bb      	ldrb	r3, [r7, #6]
 8000e96:	f003 0303 	and.w	r3, r3, #3
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	dbed      	blt.n	8000e7a <LIS3DSH_ReadIO+0x52>
	}
}
 8000e9e:	bf00      	nop
 8000ea0:	bf00      	nop
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	200001f0 	.word	0x200001f0

08000eb0 <LIS3DSH_Init>:


void LIS3DSH_Init(SPI_HandleTypeDef *accSPI, LIS3DSH_InitTypeDef *accInitDef)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
	uint8_t spiData = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	73fb      	strb	r3, [r7, #15]

	memcpy(&accSPI_Handle, accSPI, sizeof(*accSPI));
 8000ebe:	2258      	movs	r2, #88	; 0x58
 8000ec0:	6879      	ldr	r1, [r7, #4]
 8000ec2:	485b      	ldr	r0, [pc, #364]	; (8001030 <LIS3DSH_Init+0x180>)
 8000ec4:	f00f fc8a 	bl	80107dc <memcpy>
	spiData |= (accInitDef->enableAxes & 0x07);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	78db      	ldrb	r3, [r3, #3]
 8000ecc:	b25b      	sxtb	r3, r3
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	b25a      	sxtb	r2, r3
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	b25b      	sxtb	r3, r3
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	b25b      	sxtb	r3, r3
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->dataRate & 0xF0);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	b25b      	sxtb	r3, r3
 8000ee6:	f023 030f 	bic.w	r3, r3, #15
 8000eea:	b25a      	sxtb	r2, r3
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
 8000eee:	b25b      	sxtb	r3, r3
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	b25b      	sxtb	r3, r3
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	73fb      	strb	r3, [r7, #15]
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG4_ADDR, &spiData, 1);
 8000ef8:	f107 030f 	add.w	r3, r7, #15
 8000efc:	2201      	movs	r2, #1
 8000efe:	4619      	mov	r1, r3
 8000f00:	2020      	movs	r0, #32
 8000f02:	f7ff ff67 	bl	8000dd4 <LIS3DSH_WriteIO>

	spiData = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->antiAliasingBW & 0xC0);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	789b      	ldrb	r3, [r3, #2]
 8000f0e:	b25b      	sxtb	r3, r3
 8000f10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f14:	b25a      	sxtb	r2, r3
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	b25b      	sxtb	r3, r3
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	b25b      	sxtb	r3, r3
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->fullScale & 0x38);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	785b      	ldrb	r3, [r3, #1]
 8000f26:	b25b      	sxtb	r3, r3
 8000f28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000f2c:	b25a      	sxtb	r2, r3
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	b25b      	sxtb	r3, r3
 8000f32:	4313      	orrs	r3, r2
 8000f34:	b25b      	sxtb	r3, r3
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	73fb      	strb	r3, [r7, #15]
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG5_ADDR, &spiData, 1);
 8000f3a:	f107 030f 	add.w	r3, r7, #15
 8000f3e:	2201      	movs	r2, #1
 8000f40:	4619      	mov	r1, r3
 8000f42:	2024      	movs	r0, #36	; 0x24
 8000f44:	f7ff ff46 	bl	8000dd4 <LIS3DSH_WriteIO>

	if(accInitDef->interruptEnable)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	791b      	ldrb	r3, [r3, #4]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d008      	beq.n	8000f62 <LIS3DSH_Init+0xb2>
	{
		spiData = 0x88;
 8000f50:	2388      	movs	r3, #136	; 0x88
 8000f52:	73fb      	strb	r3, [r7, #15]
		LIS3DSH_WriteIO(LIS3DSH_CTRL_REG3_ADDR, &spiData, 1);
 8000f54:	f107 030f 	add.w	r3, r7, #15
 8000f58:	2201      	movs	r2, #1
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	2023      	movs	r0, #35	; 0x23
 8000f5e:	f7ff ff39 	bl	8000dd4 <LIS3DSH_WriteIO>
	}

	switch(accInitDef->fullScale)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	785b      	ldrb	r3, [r3, #1]
 8000f66:	2b20      	cmp	r3, #32
 8000f68:	d858      	bhi.n	800101c <LIS3DSH_Init+0x16c>
 8000f6a:	a201      	add	r2, pc, #4	; (adr r2, 8000f70 <LIS3DSH_Init+0xc0>)
 8000f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f70:	08000ff5 	.word	0x08000ff5
 8000f74:	0800101d 	.word	0x0800101d
 8000f78:	0800101d 	.word	0x0800101d
 8000f7c:	0800101d 	.word	0x0800101d
 8000f80:	0800101d 	.word	0x0800101d
 8000f84:	0800101d 	.word	0x0800101d
 8000f88:	0800101d 	.word	0x0800101d
 8000f8c:	0800101d 	.word	0x0800101d
 8000f90:	08000ffd 	.word	0x08000ffd
 8000f94:	0800101d 	.word	0x0800101d
 8000f98:	0800101d 	.word	0x0800101d
 8000f9c:	0800101d 	.word	0x0800101d
 8000fa0:	0800101d 	.word	0x0800101d
 8000fa4:	0800101d 	.word	0x0800101d
 8000fa8:	0800101d 	.word	0x0800101d
 8000fac:	0800101d 	.word	0x0800101d
 8000fb0:	08001005 	.word	0x08001005
 8000fb4:	0800101d 	.word	0x0800101d
 8000fb8:	0800101d 	.word	0x0800101d
 8000fbc:	0800101d 	.word	0x0800101d
 8000fc0:	0800101d 	.word	0x0800101d
 8000fc4:	0800101d 	.word	0x0800101d
 8000fc8:	0800101d 	.word	0x0800101d
 8000fcc:	0800101d 	.word	0x0800101d
 8000fd0:	0800100d 	.word	0x0800100d
 8000fd4:	0800101d 	.word	0x0800101d
 8000fd8:	0800101d 	.word	0x0800101d
 8000fdc:	0800101d 	.word	0x0800101d
 8000fe0:	0800101d 	.word	0x0800101d
 8000fe4:	0800101d 	.word	0x0800101d
 8000fe8:	0800101d 	.word	0x0800101d
 8000fec:	0800101d 	.word	0x0800101d
 8000ff0:	08001015 	.word	0x08001015
	{
		case LIS3DSH_FULLSCALE_2:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <LIS3DSH_Init+0x184>)
 8000ff6:	4a10      	ldr	r2, [pc, #64]	; (8001038 <LIS3DSH_Init+0x188>)
 8000ff8:	601a      	str	r2, [r3, #0]
			break;
 8000ffa:	e00f      	b.n	800101c <LIS3DSH_Init+0x16c>

		case LIS3DSH_FULLSCALE_4:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 8000ffc:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <LIS3DSH_Init+0x184>)
 8000ffe:	4a0f      	ldr	r2, [pc, #60]	; (800103c <LIS3DSH_Init+0x18c>)
 8001000:	601a      	str	r2, [r3, #0]
			break;
 8001002:	e00b      	b.n	800101c <LIS3DSH_Init+0x16c>

		case LIS3DSH_FULLSCALE_6:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 8001004:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <LIS3DSH_Init+0x184>)
 8001006:	4a0e      	ldr	r2, [pc, #56]	; (8001040 <LIS3DSH_Init+0x190>)
 8001008:	601a      	str	r2, [r3, #0]
			break;
 800100a:	e007      	b.n	800101c <LIS3DSH_Init+0x16c>

		case LIS3DSH_FULLSCALE_8:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 800100c:	4b09      	ldr	r3, [pc, #36]	; (8001034 <LIS3DSH_Init+0x184>)
 800100e:	4a0d      	ldr	r2, [pc, #52]	; (8001044 <LIS3DSH_Init+0x194>)
 8001010:	601a      	str	r2, [r3, #0]
			break;
 8001012:	e003      	b.n	800101c <LIS3DSH_Init+0x16c>

		case LIS3DSH_FULLSCALE_16:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 8001014:	4b07      	ldr	r3, [pc, #28]	; (8001034 <LIS3DSH_Init+0x184>)
 8001016:	4a0c      	ldr	r2, [pc, #48]	; (8001048 <LIS3DSH_Init+0x198>)
 8001018:	601a      	str	r2, [r3, #0]
			break;
 800101a:	bf00      	nop
	}
	_LIS3DHS_CS_DISABLE;
 800101c:	2201      	movs	r2, #1
 800101e:	2108      	movs	r1, #8
 8001020:	480a      	ldr	r0, [pc, #40]	; (800104c <LIS3DSH_Init+0x19c>)
 8001022:	f002 fbd5 	bl	80037d0 <HAL_GPIO_WritePin>
}
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200001f0 	.word	0x200001f0
 8001034:	20000004 	.word	0x20000004
 8001038:	3d75c28f 	.word	0x3d75c28f
 800103c:	3df5c28f 	.word	0x3df5c28f
 8001040:	3e3851ec 	.word	0x3e3851ec
 8001044:	3e75c28f 	.word	0x3e75c28f
 8001048:	3f3ae148 	.word	0x3f3ae148
 800104c:	40021000 	.word	0x40021000

08001050 <LIS3DSH_GetDataRaw>:

LIS3DSH_DataRaw LIS3DSH_GetDataRaw(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	uint8_t spiBuf[2];
	LIS3DSH_DataRaw tempDataRaw;
	LIS3DSH_ReadIO(LIS3DSH_OUT_X_L_ADDR, spiBuf, 2);
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	2202      	movs	r2, #2
 800105e:	4619      	mov	r1, r3
 8001060:	2028      	movs	r0, #40	; 0x28
 8001062:	f7ff fee1 	bl	8000e28 <LIS3DSH_ReadIO>
	tempDataRaw.x = ((spiBuf[1] << 8) + spiBuf[0]);
 8001066:	7d7b      	ldrb	r3, [r7, #21]
 8001068:	b29b      	uxth	r3, r3
 800106a:	021b      	lsls	r3, r3, #8
 800106c:	b29a      	uxth	r2, r3
 800106e:	7d3b      	ldrb	r3, [r7, #20]
 8001070:	b29b      	uxth	r3, r3
 8001072:	4413      	add	r3, r2
 8001074:	b29b      	uxth	r3, r3
 8001076:	b21b      	sxth	r3, r3
 8001078:	81bb      	strh	r3, [r7, #12]

	LIS3DSH_ReadIO(LIS3DSH_OUT_Y_L_ADDR, spiBuf, 2);
 800107a:	f107 0314 	add.w	r3, r7, #20
 800107e:	2202      	movs	r2, #2
 8001080:	4619      	mov	r1, r3
 8001082:	202a      	movs	r0, #42	; 0x2a
 8001084:	f7ff fed0 	bl	8000e28 <LIS3DSH_ReadIO>
	tempDataRaw.y = ((spiBuf[1] << 8) + spiBuf[0]);
 8001088:	7d7b      	ldrb	r3, [r7, #21]
 800108a:	b29b      	uxth	r3, r3
 800108c:	021b      	lsls	r3, r3, #8
 800108e:	b29a      	uxth	r2, r3
 8001090:	7d3b      	ldrb	r3, [r7, #20]
 8001092:	b29b      	uxth	r3, r3
 8001094:	4413      	add	r3, r2
 8001096:	b29b      	uxth	r3, r3
 8001098:	b21b      	sxth	r3, r3
 800109a:	81fb      	strh	r3, [r7, #14]

	LIS3DSH_ReadIO(LIS3DSH_OUT_Z_L_ADDR, spiBuf, 2);
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	2202      	movs	r2, #2
 80010a2:	4619      	mov	r1, r3
 80010a4:	202c      	movs	r0, #44	; 0x2c
 80010a6:	f7ff febf 	bl	8000e28 <LIS3DSH_ReadIO>
	tempDataRaw.z = ((spiBuf[1] << 8) + spiBuf[0]);
 80010aa:	7d7b      	ldrb	r3, [r7, #21]
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	021b      	lsls	r3, r3, #8
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	7d3b      	ldrb	r3, [r7, #20]
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	4413      	add	r3, r2
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	b21b      	sxth	r3, r3
 80010bc:	823b      	strh	r3, [r7, #16]

	return tempDataRaw;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	461a      	mov	r2, r3
 80010c2:	f107 030c 	add.w	r3, r7, #12
 80010c6:	6818      	ldr	r0, [r3, #0]
 80010c8:	6010      	str	r0, [r2, #0]
 80010ca:	889b      	ldrh	r3, [r3, #4]
 80010cc:	8093      	strh	r3, [r2, #4]

}
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	3718      	adds	r7, #24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	4603      	mov	r3, r0
 80010e2:	81fb      	strh	r3, [r7, #14]
 80010e4:	460b      	mov	r3, r1
 80010e6:	81bb      	strh	r3, [r7, #12]
 80010e8:	4613      	mov	r3, r2
 80010ea:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 80010f0:	f7ff fd48 	bl	8000b84 <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 80010f4:	89fb      	ldrh	r3, [r7, #14]
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	2201      	movs	r2, #1
 80010fa:	2102      	movs	r1, #2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 fb01 	bl	8001704 <CODEC_IO_Write>
 8001102:	4603      	mov	r3, r0
 8001104:	461a      	mov	r2, r3
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	4413      	add	r3, r2
 800110a:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 800110c:	89bb      	ldrh	r3, [r7, #12]
 800110e:	3b01      	subs	r3, #1
 8001110:	2b03      	cmp	r3, #3
 8001112:	d81b      	bhi.n	800114c <cs43l22_Init+0x74>
 8001114:	a201      	add	r2, pc, #4	; (adr r2, 800111c <cs43l22_Init+0x44>)
 8001116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800111a:	bf00      	nop
 800111c:	0800112d 	.word	0x0800112d
 8001120:	08001135 	.word	0x08001135
 8001124:	0800113d 	.word	0x0800113d
 8001128:	08001145 	.word	0x08001145
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 800112c:	4b5b      	ldr	r3, [pc, #364]	; (800129c <cs43l22_Init+0x1c4>)
 800112e:	22fa      	movs	r2, #250	; 0xfa
 8001130:	701a      	strb	r2, [r3, #0]
    break;
 8001132:	e00f      	b.n	8001154 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8001134:	4b59      	ldr	r3, [pc, #356]	; (800129c <cs43l22_Init+0x1c4>)
 8001136:	22af      	movs	r2, #175	; 0xaf
 8001138:	701a      	strb	r2, [r3, #0]
    break;
 800113a:	e00b      	b.n	8001154 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 800113c:	4b57      	ldr	r3, [pc, #348]	; (800129c <cs43l22_Init+0x1c4>)
 800113e:	22aa      	movs	r2, #170	; 0xaa
 8001140:	701a      	strb	r2, [r3, #0]
    break;
 8001142:	e007      	b.n	8001154 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8001144:	4b55      	ldr	r3, [pc, #340]	; (800129c <cs43l22_Init+0x1c4>)
 8001146:	2205      	movs	r2, #5
 8001148:	701a      	strb	r2, [r3, #0]
    break;    
 800114a:	e003      	b.n	8001154 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 800114c:	4b53      	ldr	r3, [pc, #332]	; (800129c <cs43l22_Init+0x1c4>)
 800114e:	2205      	movs	r2, #5
 8001150:	701a      	strb	r2, [r3, #0]
    break;    
 8001152:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001154:	89fb      	ldrh	r3, [r7, #14]
 8001156:	b2db      	uxtb	r3, r3
 8001158:	4a50      	ldr	r2, [pc, #320]	; (800129c <cs43l22_Init+0x1c4>)
 800115a:	7812      	ldrb	r2, [r2, #0]
 800115c:	b2d2      	uxtb	r2, r2
 800115e:	2104      	movs	r1, #4
 8001160:	4618      	mov	r0, r3
 8001162:	f000 facf 	bl	8001704 <CODEC_IO_Write>
 8001166:	4603      	mov	r3, r0
 8001168:	461a      	mov	r2, r3
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	4413      	add	r3, r2
 800116e:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8001170:	89fb      	ldrh	r3, [r7, #14]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2281      	movs	r2, #129	; 0x81
 8001176:	2105      	movs	r1, #5
 8001178:	4618      	mov	r0, r3
 800117a:	f000 fac3 	bl	8001704 <CODEC_IO_Write>
 800117e:	4603      	mov	r3, r0
 8001180:	461a      	mov	r2, r3
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	4413      	add	r3, r2
 8001186:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8001188:	89fb      	ldrh	r3, [r7, #14]
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2204      	movs	r2, #4
 800118e:	2106      	movs	r1, #6
 8001190:	4618      	mov	r0, r3
 8001192:	f000 fab7 	bl	8001704 <CODEC_IO_Write>
 8001196:	4603      	mov	r3, r0
 8001198:	461a      	mov	r2, r3
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	4413      	add	r3, r2
 800119e:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 80011a0:	7afa      	ldrb	r2, [r7, #11]
 80011a2:	89fb      	ldrh	r3, [r7, #14]
 80011a4:	4611      	mov	r1, r2
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 f964 	bl	8001474 <cs43l22_SetVolume>
 80011ac:	4602      	mov	r2, r0
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	4413      	add	r3, r2
 80011b2:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 80011b4:	89bb      	ldrh	r3, [r7, #12]
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d023      	beq.n	8001202 <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 80011ba:	89fb      	ldrh	r3, [r7, #14]
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2206      	movs	r2, #6
 80011c0:	210f      	movs	r1, #15
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 fa9e 	bl	8001704 <CODEC_IO_Write>
 80011c8:	4603      	mov	r3, r0
 80011ca:	461a      	mov	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	4413      	add	r3, r2
 80011d0:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 80011d2:	89fb      	ldrh	r3, [r7, #14]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2200      	movs	r2, #0
 80011d8:	2124      	movs	r1, #36	; 0x24
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 fa92 	bl	8001704 <CODEC_IO_Write>
 80011e0:	4603      	mov	r3, r0
 80011e2:	461a      	mov	r2, r3
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	4413      	add	r3, r2
 80011e8:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 80011ea:	89fb      	ldrh	r3, [r7, #14]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2200      	movs	r2, #0
 80011f0:	2125      	movs	r1, #37	; 0x25
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 fa86 	bl	8001704 <CODEC_IO_Write>
 80011f8:	4603      	mov	r3, r0
 80011fa:	461a      	mov	r2, r3
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	4413      	add	r3, r2
 8001200:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 8001202:	89fb      	ldrh	r3, [r7, #14]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2200      	movs	r2, #0
 8001208:	210a      	movs	r1, #10
 800120a:	4618      	mov	r0, r3
 800120c:	f000 fa7a 	bl	8001704 <CODEC_IO_Write>
 8001210:	4603      	mov	r3, r0
 8001212:	461a      	mov	r2, r3
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	4413      	add	r3, r2
 8001218:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 800121a:	89fb      	ldrh	r3, [r7, #14]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2204      	movs	r2, #4
 8001220:	210e      	movs	r1, #14
 8001222:	4618      	mov	r0, r3
 8001224:	f000 fa6e 	bl	8001704 <CODEC_IO_Write>
 8001228:	4603      	mov	r3, r0
 800122a:	461a      	mov	r2, r3
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	4413      	add	r3, r2
 8001230:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 8001232:	89fb      	ldrh	r3, [r7, #14]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2200      	movs	r2, #0
 8001238:	2127      	movs	r1, #39	; 0x27
 800123a:	4618      	mov	r0, r3
 800123c:	f000 fa62 	bl	8001704 <CODEC_IO_Write>
 8001240:	4603      	mov	r3, r0
 8001242:	461a      	mov	r2, r3
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	4413      	add	r3, r2
 8001248:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 800124a:	89fb      	ldrh	r3, [r7, #14]
 800124c:	b2db      	uxtb	r3, r3
 800124e:	220f      	movs	r2, #15
 8001250:	211f      	movs	r1, #31
 8001252:	4618      	mov	r0, r3
 8001254:	f000 fa56 	bl	8001704 <CODEC_IO_Write>
 8001258:	4603      	mov	r3, r0
 800125a:	461a      	mov	r2, r3
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	4413      	add	r3, r2
 8001260:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 8001262:	89fb      	ldrh	r3, [r7, #14]
 8001264:	b2db      	uxtb	r3, r3
 8001266:	220a      	movs	r2, #10
 8001268:	211a      	movs	r1, #26
 800126a:	4618      	mov	r0, r3
 800126c:	f000 fa4a 	bl	8001704 <CODEC_IO_Write>
 8001270:	4603      	mov	r3, r0
 8001272:	461a      	mov	r2, r3
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	4413      	add	r3, r2
 8001278:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 800127a:	89fb      	ldrh	r3, [r7, #14]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	220a      	movs	r2, #10
 8001280:	211b      	movs	r1, #27
 8001282:	4618      	mov	r0, r3
 8001284:	f000 fa3e 	bl	8001704 <CODEC_IO_Write>
 8001288:	4603      	mov	r3, r0
 800128a:	461a      	mov	r2, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	4413      	add	r3, r2
 8001290:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 8001292:	697b      	ldr	r3, [r7, #20]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000248 	.word	0x20000248

080012a0 <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 80012a4:	f7ff fca6 	bl	8000bf4 <AUDIO_IO_DeInit>
}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}

080012ac <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 80012b6:	f7ff fc65 	bl	8000b84 <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 80012ba:	88fb      	ldrh	r3, [r7, #6]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2101      	movs	r1, #1
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff fcb2 	bl	8000c2a <AUDIO_IO_Read>
 80012c6:	4603      	mov	r3, r0
 80012c8:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	f023 0307 	bic.w	r3, r3, #7
 80012d0:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	6039      	str	r1, [r7, #0]
 80012e6:	80fb      	strh	r3, [r7, #6]
 80012e8:	4613      	mov	r3, r2
 80012ea:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 80012f0:	4b16      	ldr	r3, [pc, #88]	; (800134c <cs43l22_Play+0x70>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d123      	bne.n	8001340 <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 80012f8:	88fb      	ldrh	r3, [r7, #6]
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	2206      	movs	r2, #6
 80012fe:	210e      	movs	r1, #14
 8001300:	4618      	mov	r0, r3
 8001302:	f000 f9ff 	bl	8001704 <CODEC_IO_Write>
 8001306:	4603      	mov	r3, r0
 8001308:	461a      	mov	r2, r3
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	4413      	add	r3, r2
 800130e:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001310:	88fb      	ldrh	r3, [r7, #6]
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f000 f919 	bl	800154c <cs43l22_SetMute>
 800131a:	4602      	mov	r2, r0
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4413      	add	r3, r2
 8001320:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 8001322:	88fb      	ldrh	r3, [r7, #6]
 8001324:	b2db      	uxtb	r3, r3
 8001326:	229e      	movs	r2, #158	; 0x9e
 8001328:	2102      	movs	r1, #2
 800132a:	4618      	mov	r0, r3
 800132c:	f000 f9ea 	bl	8001704 <CODEC_IO_Write>
 8001330:	4603      	mov	r3, r0
 8001332:	461a      	mov	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4413      	add	r3, r2
 8001338:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 800133a:	4b04      	ldr	r3, [pc, #16]	; (800134c <cs43l22_Play+0x70>)
 800133c:	2200      	movs	r2, #0
 800133e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 8001340:	68fb      	ldr	r3, [r7, #12]
}
 8001342:	4618      	mov	r0, r3
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000038 	.word	0x20000038

08001350 <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800135e:	88fb      	ldrh	r3, [r7, #6]
 8001360:	2101      	movs	r1, #1
 8001362:	4618      	mov	r0, r3
 8001364:	f000 f8f2 	bl	800154c <cs43l22_SetMute>
 8001368:	4602      	mov	r2, r0
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	4413      	add	r3, r2
 800136e:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 8001370:	88fb      	ldrh	r3, [r7, #6]
 8001372:	b2db      	uxtb	r3, r3
 8001374:	2201      	movs	r2, #1
 8001376:	2102      	movs	r1, #2
 8001378:	4618      	mov	r0, r3
 800137a:	f000 f9c3 	bl	8001704 <CODEC_IO_Write>
 800137e:	4603      	mov	r3, r0
 8001380:	461a      	mov	r2, r3
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	4413      	add	r3, r2
 8001386:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8001388:	68fb      	ldr	r3, [r7, #12]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80013a6:	88fb      	ldrh	r3, [r7, #6]
 80013a8:	2100      	movs	r1, #0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 f8ce 	bl	800154c <cs43l22_SetMute>
 80013b0:	4602      	mov	r2, r0
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	4413      	add	r3, r2
 80013b6:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 80013b8:	2300      	movs	r3, #0
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	e002      	b.n	80013c4 <cs43l22_Resume+0x30>
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	3301      	adds	r3, #1
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	2bfe      	cmp	r3, #254	; 0xfe
 80013c8:	d9f9      	bls.n	80013be <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	4a0e      	ldr	r2, [pc, #56]	; (8001408 <cs43l22_Resume+0x74>)
 80013d0:	7812      	ldrb	r2, [r2, #0]
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	2104      	movs	r1, #4
 80013d6:	4618      	mov	r0, r3
 80013d8:	f000 f994 	bl	8001704 <CODEC_IO_Write>
 80013dc:	4603      	mov	r3, r0
 80013de:	461a      	mov	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4413      	add	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	229e      	movs	r2, #158	; 0x9e
 80013ec:	2102      	movs	r1, #2
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 f988 	bl	8001704 <CODEC_IO_Write>
 80013f4:	4603      	mov	r3, r0
 80013f6:	461a      	mov	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4413      	add	r3, r2
 80013fc:	60fb      	str	r3, [r7, #12]
  
  return counter;
 80013fe:	68fb      	ldr	r3, [r7, #12]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000248 	.word	0x20000248

0800140c <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	6039      	str	r1, [r7, #0]
 8001416:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800141c:	88fb      	ldrh	r3, [r7, #6]
 800141e:	2101      	movs	r1, #1
 8001420:	4618      	mov	r0, r3
 8001422:	f000 f893 	bl	800154c <cs43l22_SetMute>
 8001426:	4602      	mov	r2, r0
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	4413      	add	r3, r2
 800142c:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 800142e:	88fb      	ldrh	r3, [r7, #6]
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2204      	movs	r2, #4
 8001434:	210e      	movs	r1, #14
 8001436:	4618      	mov	r0, r3
 8001438:	f000 f964 	bl	8001704 <CODEC_IO_Write>
 800143c:	4603      	mov	r3, r0
 800143e:	461a      	mov	r2, r3
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4413      	add	r3, r2
 8001444:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 8001446:	88fb      	ldrh	r3, [r7, #6]
 8001448:	b2db      	uxtb	r3, r3
 800144a:	229f      	movs	r2, #159	; 0x9f
 800144c:	2102      	movs	r1, #2
 800144e:	4618      	mov	r0, r3
 8001450:	f000 f958 	bl	8001704 <CODEC_IO_Write>
 8001454:	4603      	mov	r3, r0
 8001456:	461a      	mov	r2, r3
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	4413      	add	r3, r2
 800145c:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 800145e:	4b04      	ldr	r3, [pc, #16]	; (8001470 <cs43l22_Stop+0x64>)
 8001460:	2201      	movs	r2, #1
 8001462:	701a      	strb	r2, [r3, #0]
  return counter;    
 8001464:	68fb      	ldr	r3, [r7, #12]
}
 8001466:	4618      	mov	r0, r3
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000038 	.word	0x20000038

08001474 <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	460a      	mov	r2, r1
 800147e:	80fb      	strh	r3, [r7, #6]
 8001480:	4613      	mov	r3, r2
 8001482:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001488:	797b      	ldrb	r3, [r7, #5]
 800148a:	2b64      	cmp	r3, #100	; 0x64
 800148c:	d80b      	bhi.n	80014a6 <cs43l22_SetVolume+0x32>
 800148e:	797a      	ldrb	r2, [r7, #5]
 8001490:	4613      	mov	r3, r2
 8001492:	021b      	lsls	r3, r3, #8
 8001494:	1a9b      	subs	r3, r3, r2
 8001496:	4a25      	ldr	r2, [pc, #148]	; (800152c <cs43l22_SetVolume+0xb8>)
 8001498:	fb82 1203 	smull	r1, r2, r2, r3
 800149c:	1152      	asrs	r2, r2, #5
 800149e:	17db      	asrs	r3, r3, #31
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	e000      	b.n	80014a8 <cs43l22_SetVolume+0x34>
 80014a6:	23ff      	movs	r3, #255	; 0xff
 80014a8:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 80014aa:	7afb      	ldrb	r3, [r7, #11]
 80014ac:	2be6      	cmp	r3, #230	; 0xe6
 80014ae:	d91c      	bls.n	80014ea <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 80014b0:	88fb      	ldrh	r3, [r7, #6]
 80014b2:	b2d8      	uxtb	r0, r3
 80014b4:	7afb      	ldrb	r3, [r7, #11]
 80014b6:	3319      	adds	r3, #25
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	461a      	mov	r2, r3
 80014bc:	2120      	movs	r1, #32
 80014be:	f000 f921 	bl	8001704 <CODEC_IO_Write>
 80014c2:	4603      	mov	r3, r0
 80014c4:	461a      	mov	r2, r3
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	4413      	add	r3, r2
 80014ca:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 80014cc:	88fb      	ldrh	r3, [r7, #6]
 80014ce:	b2d8      	uxtb	r0, r3
 80014d0:	7afb      	ldrb	r3, [r7, #11]
 80014d2:	3319      	adds	r3, #25
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	461a      	mov	r2, r3
 80014d8:	2121      	movs	r1, #33	; 0x21
 80014da:	f000 f913 	bl	8001704 <CODEC_IO_Write>
 80014de:	4603      	mov	r3, r0
 80014e0:	461a      	mov	r2, r3
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	4413      	add	r3, r2
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	e01b      	b.n	8001522 <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 80014ea:	88fb      	ldrh	r3, [r7, #6]
 80014ec:	b2d8      	uxtb	r0, r3
 80014ee:	7afb      	ldrb	r3, [r7, #11]
 80014f0:	3319      	adds	r3, #25
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	461a      	mov	r2, r3
 80014f6:	2120      	movs	r1, #32
 80014f8:	f000 f904 	bl	8001704 <CODEC_IO_Write>
 80014fc:	4603      	mov	r3, r0
 80014fe:	461a      	mov	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4413      	add	r3, r2
 8001504:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 8001506:	88fb      	ldrh	r3, [r7, #6]
 8001508:	b2d8      	uxtb	r0, r3
 800150a:	7afb      	ldrb	r3, [r7, #11]
 800150c:	3319      	adds	r3, #25
 800150e:	b2db      	uxtb	r3, r3
 8001510:	461a      	mov	r2, r3
 8001512:	2121      	movs	r1, #33	; 0x21
 8001514:	f000 f8f6 	bl	8001704 <CODEC_IO_Write>
 8001518:	4603      	mov	r3, r0
 800151a:	461a      	mov	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4413      	add	r3, r2
 8001520:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 8001522:	68fb      	ldr	r3, [r7, #12]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	51eb851f 	.word	0x51eb851f

08001530 <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	6039      	str	r1, [r7, #0]
 800153a:	80fb      	strh	r3, [r7, #6]
  return 0;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
	...

0800154c <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	6039      	str	r1, [r7, #0]
 8001556:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d124      	bne.n	80015ac <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 8001562:	88fb      	ldrh	r3, [r7, #6]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	22ff      	movs	r2, #255	; 0xff
 8001568:	2104      	movs	r1, #4
 800156a:	4618      	mov	r0, r3
 800156c:	f000 f8ca 	bl	8001704 <CODEC_IO_Write>
 8001570:	4603      	mov	r3, r0
 8001572:	461a      	mov	r2, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4413      	add	r3, r2
 8001578:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 800157a:	88fb      	ldrh	r3, [r7, #6]
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2201      	movs	r2, #1
 8001580:	2122      	movs	r1, #34	; 0x22
 8001582:	4618      	mov	r0, r3
 8001584:	f000 f8be 	bl	8001704 <CODEC_IO_Write>
 8001588:	4603      	mov	r3, r0
 800158a:	461a      	mov	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4413      	add	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2201      	movs	r2, #1
 8001598:	2123      	movs	r1, #35	; 0x23
 800159a:	4618      	mov	r0, r3
 800159c:	f000 f8b2 	bl	8001704 <CODEC_IO_Write>
 80015a0:	4603      	mov	r3, r0
 80015a2:	461a      	mov	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4413      	add	r3, r2
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	e025      	b.n	80015f8 <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 80015ac:	88fb      	ldrh	r3, [r7, #6]
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2200      	movs	r2, #0
 80015b2:	2122      	movs	r1, #34	; 0x22
 80015b4:	4618      	mov	r0, r3
 80015b6:	f000 f8a5 	bl	8001704 <CODEC_IO_Write>
 80015ba:	4603      	mov	r3, r0
 80015bc:	461a      	mov	r2, r3
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	4413      	add	r3, r2
 80015c2:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 80015c4:	88fb      	ldrh	r3, [r7, #6]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2200      	movs	r2, #0
 80015ca:	2123      	movs	r1, #35	; 0x23
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 f899 	bl	8001704 <CODEC_IO_Write>
 80015d2:	4603      	mov	r3, r0
 80015d4:	461a      	mov	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4413      	add	r3, r2
 80015da:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80015dc:	88fb      	ldrh	r3, [r7, #6]
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	4a08      	ldr	r2, [pc, #32]	; (8001604 <cs43l22_SetMute+0xb8>)
 80015e2:	7812      	ldrb	r2, [r2, #0]
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	2104      	movs	r1, #4
 80015e8:	4618      	mov	r0, r3
 80015ea:	f000 f88b 	bl	8001704 <CODEC_IO_Write>
 80015ee:	4603      	mov	r3, r0
 80015f0:	461a      	mov	r2, r3
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	4413      	add	r3, r2
 80015f6:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80015f8:	68fb      	ldr	r3, [r7, #12]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000248 	.word	0x20000248

08001608 <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	460a      	mov	r2, r1
 8001612:	80fb      	strh	r3, [r7, #6]
 8001614:	4613      	mov	r3, r2
 8001616:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8001618:	2300      	movs	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 800161c:	797b      	ldrb	r3, [r7, #5]
 800161e:	3b01      	subs	r3, #1
 8001620:	2b03      	cmp	r3, #3
 8001622:	d84b      	bhi.n	80016bc <cs43l22_SetOutputMode+0xb4>
 8001624:	a201      	add	r2, pc, #4	; (adr r2, 800162c <cs43l22_SetOutputMode+0x24>)
 8001626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800162a:	bf00      	nop
 800162c:	0800163d 	.word	0x0800163d
 8001630:	0800165d 	.word	0x0800165d
 8001634:	0800167d 	.word	0x0800167d
 8001638:	0800169d 	.word	0x0800169d
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 800163c:	88fb      	ldrh	r3, [r7, #6]
 800163e:	b2db      	uxtb	r3, r3
 8001640:	22fa      	movs	r2, #250	; 0xfa
 8001642:	2104      	movs	r1, #4
 8001644:	4618      	mov	r0, r3
 8001646:	f000 f85d 	bl	8001704 <CODEC_IO_Write>
 800164a:	4603      	mov	r3, r0
 800164c:	461a      	mov	r2, r3
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	4413      	add	r3, r2
 8001652:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 8001654:	4b24      	ldr	r3, [pc, #144]	; (80016e8 <cs43l22_SetOutputMode+0xe0>)
 8001656:	22fa      	movs	r2, #250	; 0xfa
 8001658:	701a      	strb	r2, [r3, #0]
      break;
 800165a:	e03f      	b.n	80016dc <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 800165c:	88fb      	ldrh	r3, [r7, #6]
 800165e:	b2db      	uxtb	r3, r3
 8001660:	22af      	movs	r2, #175	; 0xaf
 8001662:	2104      	movs	r1, #4
 8001664:	4618      	mov	r0, r3
 8001666:	f000 f84d 	bl	8001704 <CODEC_IO_Write>
 800166a:	4603      	mov	r3, r0
 800166c:	461a      	mov	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4413      	add	r3, r2
 8001672:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 8001674:	4b1c      	ldr	r3, [pc, #112]	; (80016e8 <cs43l22_SetOutputMode+0xe0>)
 8001676:	22af      	movs	r2, #175	; 0xaf
 8001678:	701a      	strb	r2, [r3, #0]
      break;
 800167a:	e02f      	b.n	80016dc <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 800167c:	88fb      	ldrh	r3, [r7, #6]
 800167e:	b2db      	uxtb	r3, r3
 8001680:	22aa      	movs	r2, #170	; 0xaa
 8001682:	2104      	movs	r1, #4
 8001684:	4618      	mov	r0, r3
 8001686:	f000 f83d 	bl	8001704 <CODEC_IO_Write>
 800168a:	4603      	mov	r3, r0
 800168c:	461a      	mov	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	4413      	add	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 8001694:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <cs43l22_SetOutputMode+0xe0>)
 8001696:	22aa      	movs	r2, #170	; 0xaa
 8001698:	701a      	strb	r2, [r3, #0]
      break;
 800169a:	e01f      	b.n	80016dc <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 800169c:	88fb      	ldrh	r3, [r7, #6]
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2205      	movs	r2, #5
 80016a2:	2104      	movs	r1, #4
 80016a4:	4618      	mov	r0, r3
 80016a6:	f000 f82d 	bl	8001704 <CODEC_IO_Write>
 80016aa:	4603      	mov	r3, r0
 80016ac:	461a      	mov	r2, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	4413      	add	r3, r2
 80016b2:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <cs43l22_SetOutputMode+0xe0>)
 80016b6:	2205      	movs	r2, #5
 80016b8:	701a      	strb	r2, [r3, #0]
      break;    
 80016ba:	e00f      	b.n	80016dc <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 80016bc:	88fb      	ldrh	r3, [r7, #6]
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2205      	movs	r2, #5
 80016c2:	2104      	movs	r1, #4
 80016c4:	4618      	mov	r0, r3
 80016c6:	f000 f81d 	bl	8001704 <CODEC_IO_Write>
 80016ca:	4603      	mov	r3, r0
 80016cc:	461a      	mov	r2, r3
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	4413      	add	r3, r2
 80016d2:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <cs43l22_SetOutputMode+0xe0>)
 80016d6:	2205      	movs	r2, #5
 80016d8:	701a      	strb	r2, [r3, #0]
      break;
 80016da:	bf00      	nop
  }  
  return counter;
 80016dc:	68fb      	ldr	r3, [r7, #12]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000248 	.word	0x20000248

080016ec <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	80fb      	strh	r3, [r7, #6]
  return 0;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
 800170e:	460b      	mov	r3, r1
 8001710:	71bb      	strb	r3, [r7, #6]
 8001712:	4613      	mov	r3, r2
 8001714:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 800171a:	797a      	ldrb	r2, [r7, #5]
 800171c:	79b9      	ldrb	r1, [r7, #6]
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fa6e 	bl	8000c02 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	b2db      	uxtb	r3, r3
}
 800172a:	4618      	mov	r0, r3
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <MX_DMA_Init+0x3c>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a0b      	ldr	r2, [pc, #44]	; (8001770 <MX_DMA_Init+0x3c>)
 8001744:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <MX_DMA_Init+0x3c>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	2100      	movs	r1, #0
 800175a:	2010      	movs	r0, #16
 800175c:	f001 f92b 	bl	80029b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001760:	2010      	movs	r0, #16
 8001762:	f001 f944 	bl	80029ee <HAL_NVIC_EnableIRQ>

}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800

08001774 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08c      	sub	sp, #48	; 0x30
 8001778:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177a:	f107 031c 	add.w	r3, r7, #28
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	60da      	str	r2, [r3, #12]
 8001788:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	61bb      	str	r3, [r7, #24]
 800178e:	4b7c      	ldr	r3, [pc, #496]	; (8001980 <MX_GPIO_Init+0x20c>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	4a7b      	ldr	r2, [pc, #492]	; (8001980 <MX_GPIO_Init+0x20c>)
 8001794:	f043 0310 	orr.w	r3, r3, #16
 8001798:	6313      	str	r3, [r2, #48]	; 0x30
 800179a:	4b79      	ldr	r3, [pc, #484]	; (8001980 <MX_GPIO_Init+0x20c>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	f003 0310 	and.w	r3, r3, #16
 80017a2:	61bb      	str	r3, [r7, #24]
 80017a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
 80017aa:	4b75      	ldr	r3, [pc, #468]	; (8001980 <MX_GPIO_Init+0x20c>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	4a74      	ldr	r2, [pc, #464]	; (8001980 <MX_GPIO_Init+0x20c>)
 80017b0:	f043 0304 	orr.w	r3, r3, #4
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
 80017b6:	4b72      	ldr	r3, [pc, #456]	; (8001980 <MX_GPIO_Init+0x20c>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	4b6e      	ldr	r3, [pc, #440]	; (8001980 <MX_GPIO_Init+0x20c>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a6d      	ldr	r2, [pc, #436]	; (8001980 <MX_GPIO_Init+0x20c>)
 80017cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b6b      	ldr	r3, [pc, #428]	; (8001980 <MX_GPIO_Init+0x20c>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017da:	613b      	str	r3, [r7, #16]
 80017dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	4b67      	ldr	r3, [pc, #412]	; (8001980 <MX_GPIO_Init+0x20c>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4a66      	ldr	r2, [pc, #408]	; (8001980 <MX_GPIO_Init+0x20c>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4b64      	ldr	r3, [pc, #400]	; (8001980 <MX_GPIO_Init+0x20c>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	4b60      	ldr	r3, [pc, #384]	; (8001980 <MX_GPIO_Init+0x20c>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a5f      	ldr	r2, [pc, #380]	; (8001980 <MX_GPIO_Init+0x20c>)
 8001804:	f043 0302 	orr.w	r3, r3, #2
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b5d      	ldr	r3, [pc, #372]	; (8001980 <MX_GPIO_Init+0x20c>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	607b      	str	r3, [r7, #4]
 800181a:	4b59      	ldr	r3, [pc, #356]	; (8001980 <MX_GPIO_Init+0x20c>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a58      	ldr	r2, [pc, #352]	; (8001980 <MX_GPIO_Init+0x20c>)
 8001820:	f043 0308 	orr.w	r3, r3, #8
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b56      	ldr	r3, [pc, #344]	; (8001980 <MX_GPIO_Init+0x20c>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MEMS_CS_GPIO_Port, MEMS_CS_Pin, GPIO_PIN_RESET);
 8001832:	2200      	movs	r2, #0
 8001834:	2108      	movs	r1, #8
 8001836:	4853      	ldr	r0, [pc, #332]	; (8001984 <MX_GPIO_Init+0x210>)
 8001838:	f001 ffca 	bl	80037d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800183c:	2200      	movs	r2, #0
 800183e:	2101      	movs	r1, #1
 8001840:	4851      	ldr	r0, [pc, #324]	; (8001988 <MX_GPIO_Init+0x214>)
 8001842:	f001 ffc5 	bl	80037d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001846:	2200      	movs	r2, #0
 8001848:	f24f 0110 	movw	r1, #61456	; 0xf010
 800184c:	484f      	ldr	r0, [pc, #316]	; (800198c <MX_GPIO_Init+0x218>)
 800184e:	f001 ffbf 	bl	80037d0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_CS_Pin;
 8001852:	2308      	movs	r3, #8
 8001854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001856:	2301      	movs	r3, #1
 8001858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185e:	2300      	movs	r3, #0
 8001860:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(MEMS_CS_GPIO_Port, &GPIO_InitStruct);
 8001862:	f107 031c 	add.w	r3, r7, #28
 8001866:	4619      	mov	r1, r3
 8001868:	4846      	ldr	r0, [pc, #280]	; (8001984 <MX_GPIO_Init+0x210>)
 800186a:	f001 fd19 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800186e:	2301      	movs	r3, #1
 8001870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001872:	2301      	movs	r3, #1
 8001874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187a:	2300      	movs	r3, #0
 800187c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800187e:	f107 031c 	add.w	r3, r7, #28
 8001882:	4619      	mov	r1, r3
 8001884:	4840      	ldr	r0, [pc, #256]	; (8001988 <MX_GPIO_Init+0x214>)
 8001886:	f001 fd0b 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800188a:	2308      	movs	r3, #8
 800188c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188e:	2302      	movs	r3, #2
 8001890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001896:	2300      	movs	r3, #0
 8001898:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800189a:	2305      	movs	r3, #5
 800189c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800189e:	f107 031c 	add.w	r3, r7, #28
 80018a2:	4619      	mov	r1, r3
 80018a4:	4838      	ldr	r0, [pc, #224]	; (8001988 <MX_GPIO_Init+0x214>)
 80018a6:	f001 fcfb 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018aa:	2301      	movs	r3, #1
 80018ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018ae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018b4:	2302      	movs	r3, #2
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b8:	f107 031c 	add.w	r3, r7, #28
 80018bc:	4619      	mov	r1, r3
 80018be:	4834      	ldr	r0, [pc, #208]	; (8001990 <MX_GPIO_Init+0x21c>)
 80018c0:	f001 fcee 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80018c4:	2304      	movs	r3, #4
 80018c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c8:	2300      	movs	r3, #0
 80018ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80018d0:	f107 031c 	add.w	r3, r7, #28
 80018d4:	4619      	mov	r1, r3
 80018d6:	482f      	ldr	r0, [pc, #188]	; (8001994 <MX_GPIO_Init+0x220>)
 80018d8:	f001 fce2 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80018dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e2:	2302      	movs	r3, #2
 80018e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ea:	2300      	movs	r3, #0
 80018ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018ee:	2305      	movs	r3, #5
 80018f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80018f2:	f107 031c 	add.w	r3, r7, #28
 80018f6:	4619      	mov	r1, r3
 80018f8:	4826      	ldr	r0, [pc, #152]	; (8001994 <MX_GPIO_Init+0x220>)
 80018fa:	f001 fcd1 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80018fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001904:	2303      	movs	r3, #3
 8001906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190c:	f107 031c 	add.w	r3, r7, #28
 8001910:	4619      	mov	r1, r3
 8001912:	4820      	ldr	r0, [pc, #128]	; (8001994 <MX_GPIO_Init+0x220>)
 8001914:	f001 fcc4 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001918:	f24f 0310 	movw	r3, #61456	; 0xf010
 800191c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191e:	2301      	movs	r3, #1
 8001920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001926:	2300      	movs	r3, #0
 8001928:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800192a:	f107 031c 	add.w	r3, r7, #28
 800192e:	4619      	mov	r1, r3
 8001930:	4816      	ldr	r0, [pc, #88]	; (800198c <MX_GPIO_Init+0x218>)
 8001932:	f001 fcb5 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001936:	2320      	movs	r3, #32
 8001938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800193a:	2300      	movs	r3, #0
 800193c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001942:	f107 031c 	add.w	r3, r7, #28
 8001946:	4619      	mov	r1, r3
 8001948:	4810      	ldr	r0, [pc, #64]	; (800198c <MX_GPIO_Init+0x218>)
 800194a:	f001 fca9 	bl	80032a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800194e:	2302      	movs	r3, #2
 8001950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001952:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800195c:	f107 031c 	add.w	r3, r7, #28
 8001960:	4619      	mov	r1, r3
 8001962:	4808      	ldr	r0, [pc, #32]	; (8001984 <MX_GPIO_Init+0x210>)
 8001964:	f001 fc9c 	bl	80032a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001968:	2200      	movs	r2, #0
 800196a:	2100      	movs	r1, #0
 800196c:	2006      	movs	r0, #6
 800196e:	f001 f822 	bl	80029b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001972:	2006      	movs	r0, #6
 8001974:	f001 f83b 	bl	80029ee <HAL_NVIC_EnableIRQ>

}
 8001978:	bf00      	nop
 800197a:	3730      	adds	r7, #48	; 0x30
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40023800 	.word	0x40023800
 8001984:	40021000 	.word	0x40021000
 8001988:	40020800 	.word	0x40020800
 800198c:	40020c00 	.word	0x40020c00
 8001990:	40020000 	.word	0x40020000
 8001994:	40020400 	.word	0x40020400

08001998 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <MX_I2C1_Init+0x50>)
 800199e:	4a13      	ldr	r2, [pc, #76]	; (80019ec <MX_I2C1_Init+0x54>)
 80019a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019a2:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019a4:	4a12      	ldr	r2, [pc, #72]	; (80019f0 <MX_I2C1_Init+0x58>)
 80019a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019a8:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019ae:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019bc:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019be:	2200      	movs	r2, #0
 80019c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019c8:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019d4:	4804      	ldr	r0, [pc, #16]	; (80019e8 <MX_I2C1_Init+0x50>)
 80019d6:	f003 fb51 	bl	800507c <HAL_I2C_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019e0:	f000 fb4e 	bl	8002080 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	2000024c 	.word	0x2000024c
 80019ec:	40005400 	.word	0x40005400
 80019f0:	000186a0 	.word	0x000186a0

080019f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08a      	sub	sp, #40	; 0x28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a19      	ldr	r2, [pc, #100]	; (8001a78 <HAL_I2C_MspInit+0x84>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d12c      	bne.n	8001a70 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <HAL_I2C_MspInit+0x88>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a17      	ldr	r2, [pc, #92]	; (8001a7c <HAL_I2C_MspInit+0x88>)
 8001a20:	f043 0302 	orr.w	r3, r3, #2
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <HAL_I2C_MspInit+0x88>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	613b      	str	r3, [r7, #16]
 8001a30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001a32:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a38:	2312      	movs	r3, #18
 8001a3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a40:	2300      	movs	r3, #0
 8001a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a44:	2304      	movs	r3, #4
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a48:	f107 0314 	add.w	r3, r7, #20
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	480c      	ldr	r0, [pc, #48]	; (8001a80 <HAL_I2C_MspInit+0x8c>)
 8001a50:	f001 fc26 	bl	80032a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a54:	2300      	movs	r3, #0
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <HAL_I2C_MspInit+0x88>)
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	4a07      	ldr	r2, [pc, #28]	; (8001a7c <HAL_I2C_MspInit+0x88>)
 8001a5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a62:	6413      	str	r3, [r2, #64]	; 0x40
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <HAL_I2C_MspInit+0x88>)
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001a70:	bf00      	nop
 8001a72:	3728      	adds	r7, #40	; 0x28
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40005400 	.word	0x40005400
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40020400 	.word	0x40020400

08001a84 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a0a      	ldr	r2, [pc, #40]	; (8001abc <HAL_I2C_MspDeInit+0x38>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d10e      	bne.n	8001ab4 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001a96:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <HAL_I2C_MspDeInit+0x3c>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	4a09      	ldr	r2, [pc, #36]	; (8001ac0 <HAL_I2C_MspDeInit+0x3c>)
 8001a9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001aa0:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(Audio_SCL_GPIO_Port, Audio_SCL_Pin);
 8001aa2:	2140      	movs	r1, #64	; 0x40
 8001aa4:	4807      	ldr	r0, [pc, #28]	; (8001ac4 <HAL_I2C_MspDeInit+0x40>)
 8001aa6:	f001 fd97 	bl	80035d8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(Audio_SDA_GPIO_Port, Audio_SDA_Pin);
 8001aaa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001aae:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <HAL_I2C_MspDeInit+0x40>)
 8001ab0:	f001 fd92 	bl	80035d8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40005400 	.word	0x40005400
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40020400 	.word	0x40020400

08001ac8 <MX_I2S3_Init>:
I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001acc:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <MX_I2S3_Init+0x54>)
 8001ace:	4a14      	ldr	r2, [pc, #80]	; (8001b20 <MX_I2S3_Init+0x58>)
 8001ad0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001ad2:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <MX_I2S3_Init+0x54>)
 8001ad4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ad8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001ada:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <MX_I2S3_Init+0x54>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001ae0:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <MX_I2S3_Init+0x54>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <MX_I2S3_Init+0x54>)
 8001ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aec:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001aee:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <MX_I2S3_Init+0x54>)
 8001af0:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001af4:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001af6:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <MX_I2S3_Init+0x54>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001afc:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <MX_I2S3_Init+0x54>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001b02:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <MX_I2S3_Init+0x54>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001b08:	4804      	ldr	r0, [pc, #16]	; (8001b1c <MX_I2S3_Init+0x54>)
 8001b0a:	f004 fab5 	bl	8006078 <HAL_I2S_Init>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8001b14:	f000 fab4 	bl	8002080 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	200002a0 	.word	0x200002a0
 8001b20:	40003c00 	.word	0x40003c00

08001b24 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08e      	sub	sp, #56	; 0x38
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a4e      	ldr	r2, [pc, #312]	; (8001c88 <HAL_I2S_MspInit+0x164>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	f040 8094 	bne.w	8001c7e <HAL_I2S_MspInit+0x15a>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001b56:	2301      	movs	r3, #1
 8001b58:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 160;
 8001b5a:	23a0      	movs	r3, #160	; 0xa0
 8001b5c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b62:	f107 0314 	add.w	r3, r7, #20
 8001b66:	4618      	mov	r0, r3
 8001b68:	f005 ffaa 	bl	8007ac0 <HAL_RCCEx_PeriphCLKConfig>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8001b72:	f000 fa85 	bl	8002080 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	4b44      	ldr	r3, [pc, #272]	; (8001c8c <HAL_I2S_MspInit+0x168>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	4a43      	ldr	r2, [pc, #268]	; (8001c8c <HAL_I2S_MspInit+0x168>)
 8001b80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b84:	6413      	str	r3, [r2, #64]	; 0x40
 8001b86:	4b41      	ldr	r3, [pc, #260]	; (8001c8c <HAL_I2S_MspInit+0x168>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	4b3d      	ldr	r3, [pc, #244]	; (8001c8c <HAL_I2S_MspInit+0x168>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	4a3c      	ldr	r2, [pc, #240]	; (8001c8c <HAL_I2S_MspInit+0x168>)
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba2:	4b3a      	ldr	r3, [pc, #232]	; (8001c8c <HAL_I2S_MspInit+0x168>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	4b36      	ldr	r3, [pc, #216]	; (8001c8c <HAL_I2S_MspInit+0x168>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	4a35      	ldr	r2, [pc, #212]	; (8001c8c <HAL_I2S_MspInit+0x168>)
 8001bb8:	f043 0304 	orr.w	r3, r3, #4
 8001bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bbe:	4b33      	ldr	r3, [pc, #204]	; (8001c8c <HAL_I2S_MspInit+0x168>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001bca:	2310      	movs	r3, #16
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001bda:	2306      	movs	r3, #6
 8001bdc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be2:	4619      	mov	r1, r3
 8001be4:	482a      	ldr	r0, [pc, #168]	; (8001c90 <HAL_I2S_MspInit+0x16c>)
 8001be6:	f001 fb5b 	bl	80032a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001bea:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001bfc:	2306      	movs	r3, #6
 8001bfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c04:	4619      	mov	r1, r3
 8001c06:	4823      	ldr	r0, [pc, #140]	; (8001c94 <HAL_I2S_MspInit+0x170>)
 8001c08:	f001 fb4a 	bl	80032a0 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001c0c:	4b22      	ldr	r3, [pc, #136]	; (8001c98 <HAL_I2S_MspInit+0x174>)
 8001c0e:	4a23      	ldr	r2, [pc, #140]	; (8001c9c <HAL_I2S_MspInit+0x178>)
 8001c10:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001c12:	4b21      	ldr	r3, [pc, #132]	; (8001c98 <HAL_I2S_MspInit+0x174>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c18:	4b1f      	ldr	r3, [pc, #124]	; (8001c98 <HAL_I2S_MspInit+0x174>)
 8001c1a:	2240      	movs	r2, #64	; 0x40
 8001c1c:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c1e:	4b1e      	ldr	r3, [pc, #120]	; (8001c98 <HAL_I2S_MspInit+0x174>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c24:	4b1c      	ldr	r3, [pc, #112]	; (8001c98 <HAL_I2S_MspInit+0x174>)
 8001c26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c2a:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c2c:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <HAL_I2S_MspInit+0x174>)
 8001c2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c32:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c34:	4b18      	ldr	r3, [pc, #96]	; (8001c98 <HAL_I2S_MspInit+0x174>)
 8001c36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c3a:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001c3c:	4b16      	ldr	r3, [pc, #88]	; (8001c98 <HAL_I2S_MspInit+0x174>)
 8001c3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c42:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c44:	4b14      	ldr	r3, [pc, #80]	; (8001c98 <HAL_I2S_MspInit+0x174>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001c4a:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <HAL_I2S_MspInit+0x174>)
 8001c4c:	2204      	movs	r2, #4
 8001c4e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001c50:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <HAL_I2S_MspInit+0x174>)
 8001c52:	2203      	movs	r2, #3
 8001c54:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001c56:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <HAL_I2S_MspInit+0x174>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001c5c:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <HAL_I2S_MspInit+0x174>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001c62:	480d      	ldr	r0, [pc, #52]	; (8001c98 <HAL_I2S_MspInit+0x174>)
 8001c64:	f000 fede 	bl	8002a24 <HAL_DMA_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_I2S_MspInit+0x14e>
    {
      Error_Handler();
 8001c6e:	f000 fa07 	bl	8002080 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a08      	ldr	r2, [pc, #32]	; (8001c98 <HAL_I2S_MspInit+0x174>)
 8001c76:	639a      	str	r2, [r3, #56]	; 0x38
 8001c78:	4a07      	ldr	r2, [pc, #28]	; (8001c98 <HAL_I2S_MspInit+0x174>)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001c7e:	bf00      	nop
 8001c80:	3738      	adds	r7, #56	; 0x38
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40003c00 	.word	0x40003c00
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40020000 	.word	0x40020000
 8001c94:	40020800 	.word	0x40020800
 8001c98:	200002e8 	.word	0x200002e8
 8001c9c:	40026088 	.word	0x40026088

08001ca0 <HAL_GPIO_EXTI_Callback>:
extern ApplicationTypeDef Appli_state;
extern AUDIO_PLAYBACK_StateTypeDef AudioState;


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_PIN == GPIO_PIN_0)
 8001caa:	88fb      	ldrh	r3, [r7, #6]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d11c      	bne.n	8001cea <HAL_GPIO_EXTI_Callback+0x4a>
	{
		if(AudioState == AUDIO_STATE_PLAY)
 8001cb0:	4b10      	ldr	r3, [pc, #64]	; (8001cf4 <HAL_GPIO_EXTI_Callback+0x54>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b03      	cmp	r3, #3
 8001cb6:	d10c      	bne.n	8001cd2 <HAL_GPIO_EXTI_Callback+0x32>
		{
			lastVolume = GetCurrentVolume();
 8001cb8:	f000 fb34 	bl	8002324 <GetCurrentVolume>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	4b0d      	ldr	r3, [pc, #52]	; (8001cf8 <HAL_GPIO_EXTI_Callback+0x58>)
 8001cc2:	601a      	str	r2, [r3, #0]
			AudioState = AUDIO_STATE_PAUSE;
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <HAL_GPIO_EXTI_Callback+0x54>)
 8001cc6:	220a      	movs	r2, #10
 8001cc8:	701a      	strb	r2, [r3, #0]
			AUDIO_OUT_SetVolume(0);
 8001cca:	2000      	movs	r0, #0
 8001ccc:	f7fe fcca 	bl	8000664 <AUDIO_OUT_SetVolume>
		{
			AudioState = AUDIO_STATE_PLAY;
			AUDIO_OUT_SetVolume(lastVolume);
		}
	}
}
 8001cd0:	e00b      	b.n	8001cea <HAL_GPIO_EXTI_Callback+0x4a>
		else if(AudioState == AUDIO_STATE_PAUSE)
 8001cd2:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <HAL_GPIO_EXTI_Callback+0x54>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b0a      	cmp	r3, #10
 8001cd8:	d107      	bne.n	8001cea <HAL_GPIO_EXTI_Callback+0x4a>
			AudioState = AUDIO_STATE_PLAY;
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <HAL_GPIO_EXTI_Callback+0x54>)
 8001cdc:	2203      	movs	r2, #3
 8001cde:	701a      	strb	r2, [r3, #0]
			AUDIO_OUT_SetVolume(lastVolume);
 8001ce0:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <HAL_GPIO_EXTI_Callback+0x58>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7fe fcbd 	bl	8000664 <AUDIO_OUT_SetVolume>
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	200013cc 	.word	0x200013cc
 8001cf8:	20000364 	.word	0x20000364

08001cfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d02:	f000 fce7 	bl	80026d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d06:	f000 f951 	bl	8001fac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d0a:	f7ff fd33 	bl	8001774 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001d0e:	f7ff fe43 	bl	8001998 <MX_I2C1_Init>
  MX_I2S3_Init();
 8001d12:	f7ff fed9 	bl	8001ac8 <MX_I2S3_Init>
  MX_DMA_Init();
 8001d16:	f7ff fd0d 	bl	8001734 <MX_DMA_Init>
  MX_USB_HOST_Init();
 8001d1a:	f00e f9dd 	bl	80100d8 <MX_USB_HOST_Init>
  MX_FATFS_Init();
 8001d1e:	f007 fdc9 	bl	80098b4 <MX_FATFS_Init>
  MX_SPI1_Init();
 8001d22:	f000 f9b3 	bl	800208c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  MX_DriverVbusFS(0);
 8001d26:	2000      	movs	r0, #0
 8001d28:	f00e fd02 	bl	8010730 <MX_DriverVbusFS>

  myAccConfigDef.dataRate = LIS3DSH_DATARATE_12_5;
 8001d2c:	2330      	movs	r3, #48	; 0x30
 8001d2e:	703b      	strb	r3, [r7, #0]
   myAccConfigDef.fullScale = LIS3DSH_FULLSCALE_4;
 8001d30:	2308      	movs	r3, #8
 8001d32:	707b      	strb	r3, [r7, #1]
   myAccConfigDef.antiAliasingBW = LIS3DSH_FILTER_BW_50;
 8001d34:	23c0      	movs	r3, #192	; 0xc0
 8001d36:	70bb      	strb	r3, [r7, #2]
   myAccConfigDef.enableAxes = LIS3DSH_XYZ_ENABLE;
 8001d38:	2307      	movs	r3, #7
 8001d3a:	70fb      	strb	r3, [r7, #3]
   myAccConfigDef.interruptEnable = false;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	713b      	strb	r3, [r7, #4]

   LIS3DSH_Init(&hspi1, &myAccConfigDef);
 8001d40:	463b      	mov	r3, r7
 8001d42:	4619      	mov	r1, r3
 8001d44:	4811      	ldr	r0, [pc, #68]	; (8001d8c <main+0x90>)
 8001d46:	f7ff f8b3 	bl	8000eb0 <LIS3DSH_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   while (1)
     {
       MX_USB_HOST_Process();
 8001d4a:	f00e f9eb 	bl	8010124 <MX_USB_HOST_Process>

       if(Appli_state == APPLICATION_READY)
 8001d4e:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <main+0x94>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d1f9      	bne.n	8001d4a <main+0x4e>
       {
       	Mount_USB();
 8001d56:	f7ff f829 	bl	8000dac <Mount_USB>
       	AUDIO_PLAYER_Start(0);
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	f000 faee 	bl	800233c <AUDIO_PLAYER_Start>
       	while(!isFinished)
 8001d60:	e00f      	b.n	8001d82 <main+0x86>
       	{

       		if(AudioState != AUDIO_STATE_PAUSE)
 8001d62:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <main+0x98>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b0a      	cmp	r3, #10
 8001d68:	d002      	beq.n	8001d70 <main+0x74>
       		{
       			AUDIO_PLAYER_Process(TRUE);
 8001d6a:	2001      	movs	r0, #1
 8001d6c:	f000 fb46 	bl	80023fc <AUDIO_PLAYER_Process>
       		}
       		HandleTilt();
 8001d70:	f000 f814 	bl	8001d9c <HandleTilt>
       		if(AudioState == AUDIO_STATE_STOP)
 8001d74:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <main+0x98>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b09      	cmp	r3, #9
 8001d7a:	d102      	bne.n	8001d82 <main+0x86>
       		{
       			isFinished = 1;
 8001d7c:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <main+0x9c>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	601a      	str	r2, [r3, #0]
       	while(!isFinished)
 8001d82:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <main+0x9c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0eb      	beq.n	8001d62 <main+0x66>
       MX_USB_HOST_Process();
 8001d8a:	e7de      	b.n	8001d4a <main+0x4e>
 8001d8c:	20000368 	.word	0x20000368
 8001d90:	20002254 	.word	0x20002254
 8001d94:	200013cc 	.word	0x200013cc
 8001d98:	20000360 	.word	0x20000360

08001d9c <HandleTilt>:
  * @brief System Clock Configuration
  * @retval None
  */

void HandleTilt()
{
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
	myData = LIS3DSH_GetDataRaw();
 8001da2:	4c79      	ldr	r4, [pc, #484]	; (8001f88 <HandleTilt+0x1ec>)
 8001da4:	463b      	mov	r3, r7
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff f952 	bl	8001050 <LIS3DSH_GetDataRaw>
 8001dac:	4622      	mov	r2, r4
 8001dae:	463b      	mov	r3, r7
 8001db0:	6818      	ldr	r0, [r3, #0]
 8001db2:	6010      	str	r0, [r2, #0]
 8001db4:	889b      	ldrh	r3, [r3, #4]
 8001db6:	8093      	strh	r3, [r2, #4]
	if(tiltedForward == 0 && tiltedBack == 0)
 8001db8:	4b74      	ldr	r3, [pc, #464]	; (8001f8c <HandleTilt+0x1f0>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d16c      	bne.n	8001e9a <HandleTilt+0xfe>
 8001dc0:	4b73      	ldr	r3, [pc, #460]	; (8001f90 <HandleTilt+0x1f4>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d168      	bne.n	8001e9a <HandleTilt+0xfe>
	{
		if(myData.x > 5000 && tiltedRight == 0)
 8001dc8:	4b6f      	ldr	r3, [pc, #444]	; (8001f88 <HandleTilt+0x1ec>)
 8001dca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	dd1b      	ble.n	8001e0e <HandleTilt+0x72>
 8001dd6:	4b6f      	ldr	r3, [pc, #444]	; (8001f94 <HandleTilt+0x1f8>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d117      	bne.n	8001e0e <HandleTilt+0x72>
		{
			// TITED RIGHT
			tiltedRight = 1;
 8001dde:	4b6d      	ldr	r3, [pc, #436]	; (8001f94 <HandleTilt+0x1f8>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	601a      	str	r2, [r3, #0]
			AudioState = AUDIO_STATE_NEXT;
 8001de4:	4b6c      	ldr	r3, [pc, #432]	; (8001f98 <HandleTilt+0x1fc>)
 8001de6:	2205      	movs	r2, #5
 8001de8:	701a      	strb	r2, [r3, #0]
			if(tiltedLeft == 1)
 8001dea:	4b6c      	ldr	r3, [pc, #432]	; (8001f9c <HandleTilt+0x200>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d107      	bne.n	8001e02 <HandleTilt+0x66>
			{
				HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8001df2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001df6:	486a      	ldr	r0, [pc, #424]	; (8001fa0 <HandleTilt+0x204>)
 8001df8:	f001 fd03 	bl	8003802 <HAL_GPIO_TogglePin>
				tiltedLeft = 0;
 8001dfc:	4b67      	ldr	r3, [pc, #412]	; (8001f9c <HandleTilt+0x200>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
			}
			HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 8001e02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e06:	4866      	ldr	r0, [pc, #408]	; (8001fa0 <HandleTilt+0x204>)
 8001e08:	f001 fcfb 	bl	8003802 <HAL_GPIO_TogglePin>
 8001e0c:	e045      	b.n	8001e9a <HandleTilt+0xfe>
		}
		else if(myData.x < -5000 && tiltedLeft == 0)
 8001e0e:	4b5e      	ldr	r3, [pc, #376]	; (8001f88 <HandleTilt+0x1ec>)
 8001e10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e14:	4a63      	ldr	r2, [pc, #396]	; (8001fa4 <HandleTilt+0x208>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	da1b      	bge.n	8001e52 <HandleTilt+0xb6>
 8001e1a:	4b60      	ldr	r3, [pc, #384]	; (8001f9c <HandleTilt+0x200>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d117      	bne.n	8001e52 <HandleTilt+0xb6>
		{
			// TILTED LEFT
			tiltedLeft = 1;
 8001e22:	4b5e      	ldr	r3, [pc, #376]	; (8001f9c <HandleTilt+0x200>)
 8001e24:	2201      	movs	r2, #1
 8001e26:	601a      	str	r2, [r3, #0]
			AudioState = AUDIO_STATE_PREVIOUS;
 8001e28:	4b5b      	ldr	r3, [pc, #364]	; (8001f98 <HandleTilt+0x1fc>)
 8001e2a:	2206      	movs	r2, #6
 8001e2c:	701a      	strb	r2, [r3, #0]
			if(tiltedRight == 1)
 8001e2e:	4b59      	ldr	r3, [pc, #356]	; (8001f94 <HandleTilt+0x1f8>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d107      	bne.n	8001e46 <HandleTilt+0xaa>
			{
				HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 8001e36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e3a:	4859      	ldr	r0, [pc, #356]	; (8001fa0 <HandleTilt+0x204>)
 8001e3c:	f001 fce1 	bl	8003802 <HAL_GPIO_TogglePin>
				tiltedRight = 0;
 8001e40:	4b54      	ldr	r3, [pc, #336]	; (8001f94 <HandleTilt+0x1f8>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]
			}
			HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8001e46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e4a:	4855      	ldr	r0, [pc, #340]	; (8001fa0 <HandleTilt+0x204>)
 8001e4c:	f001 fcd9 	bl	8003802 <HAL_GPIO_TogglePin>
 8001e50:	e023      	b.n	8001e9a <HandleTilt+0xfe>
		}
		else if(myData.x > -500 && myData.x < 500)
 8001e52:	4b4d      	ldr	r3, [pc, #308]	; (8001f88 <HandleTilt+0x1ec>)
 8001e54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e58:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8001e5c:	dd1d      	ble.n	8001e9a <HandleTilt+0xfe>
 8001e5e:	4b4a      	ldr	r3, [pc, #296]	; (8001f88 <HandleTilt+0x1ec>)
 8001e60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e64:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e68:	da17      	bge.n	8001e9a <HandleTilt+0xfe>
		{
			// NOT TILTED ON X
			if(tiltedRight == 1)
 8001e6a:	4b4a      	ldr	r3, [pc, #296]	; (8001f94 <HandleTilt+0x1f8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d104      	bne.n	8001e7c <HandleTilt+0xe0>
			{
				HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 8001e72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e76:	484a      	ldr	r0, [pc, #296]	; (8001fa0 <HandleTilt+0x204>)
 8001e78:	f001 fcc3 	bl	8003802 <HAL_GPIO_TogglePin>
			}
			if(tiltedLeft == 1)
 8001e7c:	4b47      	ldr	r3, [pc, #284]	; (8001f9c <HandleTilt+0x200>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d104      	bne.n	8001e8e <HandleTilt+0xf2>
			{
				HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8001e84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e88:	4845      	ldr	r0, [pc, #276]	; (8001fa0 <HandleTilt+0x204>)
 8001e8a:	f001 fcba 	bl	8003802 <HAL_GPIO_TogglePin>
			}
			tiltedRight = 0;
 8001e8e:	4b41      	ldr	r3, [pc, #260]	; (8001f94 <HandleTilt+0x1f8>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
			tiltedLeft = 0;
 8001e94:	4b41      	ldr	r3, [pc, #260]	; (8001f9c <HandleTilt+0x200>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
		}
	}
	if(tiltedRight == 0 && tiltedLeft == 0)
 8001e9a:	4b3e      	ldr	r3, [pc, #248]	; (8001f94 <HandleTilt+0x1f8>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d16d      	bne.n	8001f7e <HandleTilt+0x1e2>
 8001ea2:	4b3e      	ldr	r3, [pc, #248]	; (8001f9c <HandleTilt+0x200>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d169      	bne.n	8001f7e <HandleTilt+0x1e2>
	{
		if(myData.y > 4500 && tiltedForward == 0)
 8001eaa:	4b37      	ldr	r3, [pc, #220]	; (8001f88 <HandleTilt+0x1ec>)
 8001eac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001eb0:	f241 1294 	movw	r2, #4500	; 0x1194
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	dd1b      	ble.n	8001ef0 <HandleTilt+0x154>
 8001eb8:	4b34      	ldr	r3, [pc, #208]	; (8001f8c <HandleTilt+0x1f0>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d117      	bne.n	8001ef0 <HandleTilt+0x154>
		{
			// TILTED FORWARD
			tiltedForward = 1;
 8001ec0:	4b32      	ldr	r3, [pc, #200]	; (8001f8c <HandleTilt+0x1f0>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]
			AudioState = AUDIO_STATE_VOLUME_UP;
 8001ec6:	4b34      	ldr	r3, [pc, #208]	; (8001f98 <HandleTilt+0x1fc>)
 8001ec8:	220c      	movs	r2, #12
 8001eca:	701a      	strb	r2, [r3, #0]
			if(tiltedBack == 1)
 8001ecc:	4b30      	ldr	r3, [pc, #192]	; (8001f90 <HandleTilt+0x1f4>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d107      	bne.n	8001ee4 <HandleTilt+0x148>
			{
				HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 8001ed4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ed8:	4831      	ldr	r0, [pc, #196]	; (8001fa0 <HandleTilt+0x204>)
 8001eda:	f001 fc92 	bl	8003802 <HAL_GPIO_TogglePin>
				tiltedBack = 0;
 8001ede:	4b2c      	ldr	r3, [pc, #176]	; (8001f90 <HandleTilt+0x1f4>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
			}
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001ee4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ee8:	482d      	ldr	r0, [pc, #180]	; (8001fa0 <HandleTilt+0x204>)
 8001eea:	f001 fc8a 	bl	8003802 <HAL_GPIO_TogglePin>
 8001eee:	e046      	b.n	8001f7e <HandleTilt+0x1e2>
		}
		else if(myData.y < -4500 && tiltedBack == 0)
 8001ef0:	4b25      	ldr	r3, [pc, #148]	; (8001f88 <HandleTilt+0x1ec>)
 8001ef2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ef6:	4a2c      	ldr	r2, [pc, #176]	; (8001fa8 <HandleTilt+0x20c>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	da1b      	bge.n	8001f34 <HandleTilt+0x198>
 8001efc:	4b24      	ldr	r3, [pc, #144]	; (8001f90 <HandleTilt+0x1f4>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d117      	bne.n	8001f34 <HandleTilt+0x198>
		{
			// TILTED BACK
			tiltedBack = 1;
 8001f04:	4b22      	ldr	r3, [pc, #136]	; (8001f90 <HandleTilt+0x1f4>)
 8001f06:	2201      	movs	r2, #1
 8001f08:	601a      	str	r2, [r3, #0]
			AudioState = AUDIO_STATE_VOLUME_DOWN;
 8001f0a:	4b23      	ldr	r3, [pc, #140]	; (8001f98 <HandleTilt+0x1fc>)
 8001f0c:	220d      	movs	r2, #13
 8001f0e:	701a      	strb	r2, [r3, #0]
			if(tiltedForward == 1)
 8001f10:	4b1e      	ldr	r3, [pc, #120]	; (8001f8c <HandleTilt+0x1f0>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d107      	bne.n	8001f28 <HandleTilt+0x18c>
			{
				HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001f18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f1c:	4820      	ldr	r0, [pc, #128]	; (8001fa0 <HandleTilt+0x204>)
 8001f1e:	f001 fc70 	bl	8003802 <HAL_GPIO_TogglePin>
				tiltedForward = 0;
 8001f22:	4b1a      	ldr	r3, [pc, #104]	; (8001f8c <HandleTilt+0x1f0>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
			}
			HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 8001f28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f2c:	481c      	ldr	r0, [pc, #112]	; (8001fa0 <HandleTilt+0x204>)
 8001f2e:	f001 fc68 	bl	8003802 <HAL_GPIO_TogglePin>
 8001f32:	e024      	b.n	8001f7e <HandleTilt+0x1e2>
		}
		else if(myData.y > -500 && myData.y < 500)
 8001f34:	4b14      	ldr	r3, [pc, #80]	; (8001f88 <HandleTilt+0x1ec>)
 8001f36:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f3a:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8001f3e:	dd1e      	ble.n	8001f7e <HandleTilt+0x1e2>
 8001f40:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <HandleTilt+0x1ec>)
 8001f42:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f46:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f4a:	da18      	bge.n	8001f7e <HandleTilt+0x1e2>
		{
			// NOT TILTED ON Y
			if(tiltedForward == 1)
 8001f4c:	4b0f      	ldr	r3, [pc, #60]	; (8001f8c <HandleTilt+0x1f0>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d104      	bne.n	8001f5e <HandleTilt+0x1c2>
			{
				HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001f54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f58:	4811      	ldr	r0, [pc, #68]	; (8001fa0 <HandleTilt+0x204>)
 8001f5a:	f001 fc52 	bl	8003802 <HAL_GPIO_TogglePin>
			}
			if(tiltedBack == 1)
 8001f5e:	4b0c      	ldr	r3, [pc, #48]	; (8001f90 <HandleTilt+0x1f4>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d104      	bne.n	8001f70 <HandleTilt+0x1d4>
			{
				HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 8001f66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f6a:	480d      	ldr	r0, [pc, #52]	; (8001fa0 <HandleTilt+0x204>)
 8001f6c:	f001 fc49 	bl	8003802 <HAL_GPIO_TogglePin>
			}
			tiltedForward = 0;
 8001f70:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <HandleTilt+0x1f0>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
			tiltedBack = 0;
 8001f76:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <HandleTilt+0x1f4>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001f7c:	e7ff      	b.n	8001f7e <HandleTilt+0x1e2>
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd90      	pop	{r4, r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000348 	.word	0x20000348
 8001f8c:	20000358 	.word	0x20000358
 8001f90:	2000035c 	.word	0x2000035c
 8001f94:	20000354 	.word	0x20000354
 8001f98:	200013cc 	.word	0x200013cc
 8001f9c:	20000350 	.word	0x20000350
 8001fa0:	40020c00 	.word	0x40020c00
 8001fa4:	ffffec78 	.word	0xffffec78
 8001fa8:	ffffee6c 	.word	0xffffee6c

08001fac <SystemClock_Config>:

void SystemClock_Config(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b094      	sub	sp, #80	; 0x50
 8001fb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fb2:	f107 0320 	add.w	r3, r7, #32
 8001fb6:	2230      	movs	r2, #48	; 0x30
 8001fb8:	2100      	movs	r1, #0
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f00e fc1c 	bl	80107f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fc0:	f107 030c 	add.w	r3, r7, #12
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	4b28      	ldr	r3, [pc, #160]	; (8002078 <SystemClock_Config+0xcc>)
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd8:	4a27      	ldr	r2, [pc, #156]	; (8002078 <SystemClock_Config+0xcc>)
 8001fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fde:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe0:	4b25      	ldr	r3, [pc, #148]	; (8002078 <SystemClock_Config+0xcc>)
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fec:	2300      	movs	r3, #0
 8001fee:	607b      	str	r3, [r7, #4]
 8001ff0:	4b22      	ldr	r3, [pc, #136]	; (800207c <SystemClock_Config+0xd0>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a21      	ldr	r2, [pc, #132]	; (800207c <SystemClock_Config+0xd0>)
 8001ff6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ffa:	6013      	str	r3, [r2, #0]
 8001ffc:	4b1f      	ldr	r3, [pc, #124]	; (800207c <SystemClock_Config+0xd0>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002004:	607b      	str	r3, [r7, #4]
 8002006:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002008:	2301      	movs	r3, #1
 800200a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800200c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002012:	2302      	movs	r3, #2
 8002014:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002016:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800201a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800201c:	2304      	movs	r3, #4
 800201e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002020:	23c0      	movs	r3, #192	; 0xc0
 8002022:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002024:	2304      	movs	r3, #4
 8002026:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002028:	2308      	movs	r3, #8
 800202a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800202c:	f107 0320 	add.w	r3, r7, #32
 8002030:	4618      	mov	r0, r3
 8002032:	f005 f8c1 	bl	80071b8 <HAL_RCC_OscConfig>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800203c:	f000 f820 	bl	8002080 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002040:	230f      	movs	r3, #15
 8002042:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002044:	2302      	movs	r3, #2
 8002046:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800204c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002050:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002052:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002056:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002058:	f107 030c 	add.w	r3, r7, #12
 800205c:	2103      	movs	r1, #3
 800205e:	4618      	mov	r0, r3
 8002060:	f005 fb22 	bl	80076a8 <HAL_RCC_ClockConfig>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800206a:	f000 f809 	bl	8002080 <Error_Handler>
  }
}
 800206e:	bf00      	nop
 8002070:	3750      	adds	r7, #80	; 0x50
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40023800 	.word	0x40023800
 800207c:	40007000 	.word	0x40007000

08002080 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002084:	b672      	cpsid	i
}
 8002086:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002088:	e7fe      	b.n	8002088 <Error_Handler+0x8>
	...

0800208c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002090:	4b17      	ldr	r3, [pc, #92]	; (80020f0 <MX_SPI1_Init+0x64>)
 8002092:	4a18      	ldr	r2, [pc, #96]	; (80020f4 <MX_SPI1_Init+0x68>)
 8002094:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002096:	4b16      	ldr	r3, [pc, #88]	; (80020f0 <MX_SPI1_Init+0x64>)
 8002098:	f44f 7282 	mov.w	r2, #260	; 0x104
 800209c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800209e:	4b14      	ldr	r3, [pc, #80]	; (80020f0 <MX_SPI1_Init+0x64>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80020a4:	4b12      	ldr	r3, [pc, #72]	; (80020f0 <MX_SPI1_Init+0x64>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020aa:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <MX_SPI1_Init+0x64>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020b0:	4b0f      	ldr	r3, [pc, #60]	; (80020f0 <MX_SPI1_Init+0x64>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020b6:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <MX_SPI1_Init+0x64>)
 80020b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80020be:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <MX_SPI1_Init+0x64>)
 80020c0:	2230      	movs	r2, #48	; 0x30
 80020c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020c4:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <MX_SPI1_Init+0x64>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020ca:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <MX_SPI1_Init+0x64>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020d0:	4b07      	ldr	r3, [pc, #28]	; (80020f0 <MX_SPI1_Init+0x64>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80020d6:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <MX_SPI1_Init+0x64>)
 80020d8:	220a      	movs	r2, #10
 80020da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80020dc:	4804      	ldr	r0, [pc, #16]	; (80020f0 <MX_SPI1_Init+0x64>)
 80020de:	f005 fe5b 	bl	8007d98 <HAL_SPI_Init>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80020e8:	f7ff ffca 	bl	8002080 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80020ec:	bf00      	nop
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	20000368 	.word	0x20000368
 80020f4:	40013000 	.word	0x40013000

080020f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08a      	sub	sp, #40	; 0x28
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002100:	f107 0314 	add.w	r3, r7, #20
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	60da      	str	r2, [r3, #12]
 800210e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a19      	ldr	r2, [pc, #100]	; (800217c <HAL_SPI_MspInit+0x84>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d12b      	bne.n	8002172 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	613b      	str	r3, [r7, #16]
 800211e:	4b18      	ldr	r3, [pc, #96]	; (8002180 <HAL_SPI_MspInit+0x88>)
 8002120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002122:	4a17      	ldr	r2, [pc, #92]	; (8002180 <HAL_SPI_MspInit+0x88>)
 8002124:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002128:	6453      	str	r3, [r2, #68]	; 0x44
 800212a:	4b15      	ldr	r3, [pc, #84]	; (8002180 <HAL_SPI_MspInit+0x88>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	4b11      	ldr	r3, [pc, #68]	; (8002180 <HAL_SPI_MspInit+0x88>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	4a10      	ldr	r2, [pc, #64]	; (8002180 <HAL_SPI_MspInit+0x88>)
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	6313      	str	r3, [r2, #48]	; 0x30
 8002146:	4b0e      	ldr	r3, [pc, #56]	; (8002180 <HAL_SPI_MspInit+0x88>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002152:	23e0      	movs	r3, #224	; 0xe0
 8002154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002156:	2302      	movs	r3, #2
 8002158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215a:	2300      	movs	r3, #0
 800215c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215e:	2300      	movs	r3, #0
 8002160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002162:	2305      	movs	r3, #5
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002166:	f107 0314 	add.w	r3, r7, #20
 800216a:	4619      	mov	r1, r3
 800216c:	4805      	ldr	r0, [pc, #20]	; (8002184 <HAL_SPI_MspInit+0x8c>)
 800216e:	f001 f897 	bl	80032a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002172:	bf00      	nop
 8002174:	3728      	adds	r7, #40	; 0x28
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40013000 	.word	0x40013000
 8002180:	40023800 	.word	0x40023800
 8002184:	40020000 	.word	0x40020000

08002188 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	607b      	str	r3, [r7, #4]
 8002192:	4b10      	ldr	r3, [pc, #64]	; (80021d4 <HAL_MspInit+0x4c>)
 8002194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002196:	4a0f      	ldr	r2, [pc, #60]	; (80021d4 <HAL_MspInit+0x4c>)
 8002198:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800219c:	6453      	str	r3, [r2, #68]	; 0x44
 800219e:	4b0d      	ldr	r3, [pc, #52]	; (80021d4 <HAL_MspInit+0x4c>)
 80021a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021a6:	607b      	str	r3, [r7, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	603b      	str	r3, [r7, #0]
 80021ae:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <HAL_MspInit+0x4c>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	4a08      	ldr	r2, [pc, #32]	; (80021d4 <HAL_MspInit+0x4c>)
 80021b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ba:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <HAL_MspInit+0x4c>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c2:	603b      	str	r3, [r7, #0]
 80021c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80021c6:	2007      	movs	r0, #7
 80021c8:	f000 fbea 	bl	80029a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021cc:	bf00      	nop
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40023800 	.word	0x40023800

080021d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021dc:	e7fe      	b.n	80021dc <NMI_Handler+0x4>

080021de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021de:	b480      	push	{r7}
 80021e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021e2:	e7fe      	b.n	80021e2 <HardFault_Handler+0x4>

080021e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021e8:	e7fe      	b.n	80021e8 <MemManage_Handler+0x4>

080021ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ea:	b480      	push	{r7}
 80021ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ee:	e7fe      	b.n	80021ee <BusFault_Handler+0x4>

080021f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021f4:	e7fe      	b.n	80021f4 <UsageFault_Handler+0x4>

080021f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021f6:	b480      	push	{r7}
 80021f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021fa:	bf00      	nop
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002212:	b480      	push	{r7}
 8002214:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002224:	f000 faa8 	bl	8002778 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002228:	bf00      	nop
 800222a:	bd80      	pop	{r7, pc}

0800222c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002230:	2001      	movs	r0, #1
 8002232:	f001 fb01 	bl	8003838 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8002240:	4802      	ldr	r0, [pc, #8]	; (800224c <DMA1_Stream5_IRQHandler+0x10>)
 8002242:	f000 fdc3 	bl	8002dcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	200002e8 	.word	0x200002e8

08002250 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002254:	4802      	ldr	r0, [pc, #8]	; (8002260 <OTG_FS_IRQHandler+0x10>)
 8002256:	f001 fd71 	bl	8003d3c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20002258 	.word	0x20002258

08002264 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800226c:	4a14      	ldr	r2, [pc, #80]	; (80022c0 <_sbrk+0x5c>)
 800226e:	4b15      	ldr	r3, [pc, #84]	; (80022c4 <_sbrk+0x60>)
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002278:	4b13      	ldr	r3, [pc, #76]	; (80022c8 <_sbrk+0x64>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d102      	bne.n	8002286 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002280:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <_sbrk+0x64>)
 8002282:	4a12      	ldr	r2, [pc, #72]	; (80022cc <_sbrk+0x68>)
 8002284:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002286:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <_sbrk+0x64>)
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4413      	add	r3, r2
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	429a      	cmp	r2, r3
 8002292:	d207      	bcs.n	80022a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002294:	f00e fa68 	bl	8010768 <__errno>
 8002298:	4603      	mov	r3, r0
 800229a:	220c      	movs	r2, #12
 800229c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800229e:	f04f 33ff 	mov.w	r3, #4294967295
 80022a2:	e009      	b.n	80022b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022a4:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <_sbrk+0x64>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022aa:	4b07      	ldr	r3, [pc, #28]	; (80022c8 <_sbrk+0x64>)
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4413      	add	r3, r2
 80022b2:	4a05      	ldr	r2, [pc, #20]	; (80022c8 <_sbrk+0x64>)
 80022b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022b6:	68fb      	ldr	r3, [r7, #12]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20020000 	.word	0x20020000
 80022c4:	00000400 	.word	0x00000400
 80022c8:	200003c0 	.word	0x200003c0
 80022cc:	20002570 	.word	0x20002570

080022d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022d4:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <SystemInit+0x20>)
 80022d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022da:	4a05      	ldr	r2, [pc, #20]	; (80022f0 <SystemInit+0x20>)
 80022dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022e4:	bf00      	nop
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	e000ed00 	.word	0xe000ed00

080022f4 <PlayerInit>:
WAVE_FormatTypeDef WaveFormat;

FIL WavFile;

uint8_t PlayerInit(uint32_t AudioFreq)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
	if(AUDIO_OUT_Init(OUTPUT_DEVICE_BOTH, uwVolume, AudioFreq) != 0)
 80022fc:	4b08      	ldr	r3, [pc, #32]	; (8002320 <PlayerInit+0x2c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	b2db      	uxtb	r3, r3
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	4619      	mov	r1, r3
 8002306:	2003      	movs	r0, #3
 8002308:	f7fe f8e0 	bl	80004cc <AUDIO_OUT_Init>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <PlayerInit+0x22>
	{
		return 1;
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <PlayerInit+0x24>
	}
	else
	{
		return 0;
 8002316:	2300      	movs	r3, #0
	}
}
 8002318:	4618      	mov	r0, r3
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000040 	.word	0x20000040

08002324 <GetCurrentVolume>:

uint32_t GetCurrentVolume()
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
	return uwVolume;
 8002328:	4b03      	ldr	r3, [pc, #12]	; (8002338 <GetCurrentVolume+0x14>)
 800232a:	681b      	ldr	r3, [r3, #0]
}
 800232c:	4618      	mov	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	20000040 	.word	0x20000040

0800233c <AUDIO_PLAYER_Start>:

AUDIO_ErrorTypeDef AUDIO_PLAYER_Start(uint8_t idx)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	71fb      	strb	r3, [r7, #7]
  uint bytesread;

  f_close(&WavFile);
 8002346:	4828      	ldr	r0, [pc, #160]	; (80023e8 <AUDIO_PLAYER_Start+0xac>)
 8002348:	f00d fa9b 	bl	800f882 <f_close>
  if(AUDIO_GetWavObjectNumber() > idx)
 800234c:	f7fe fd20 	bl	8000d90 <AUDIO_GetWavObjectNumber>
 8002350:	4603      	mov	r3, r0
 8002352:	461a      	mov	r2, r3
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	b29b      	uxth	r3, r3
 8002358:	429a      	cmp	r2, r3
 800235a:	d93f      	bls.n	80023dc <AUDIO_PLAYER_Start+0xa0>
  {
    f_open(&WavFile, (char *)FileList.file[idx].name, FA_READ);
 800235c:	79fa      	ldrb	r2, [r7, #7]
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4413      	add	r3, r2
 8002368:	4a20      	ldr	r2, [pc, #128]	; (80023ec <AUDIO_PLAYER_Start+0xb0>)
 800236a:	4413      	add	r3, r2
 800236c:	3301      	adds	r3, #1
 800236e:	2201      	movs	r2, #1
 8002370:	4619      	mov	r1, r3
 8002372:	481d      	ldr	r0, [pc, #116]	; (80023e8 <AUDIO_PLAYER_Start+0xac>)
 8002374:	f00c ff0a 	bl	800f18c <f_open>
    f_read(&WavFile, &WaveFormat, sizeof(WaveFormat), &bytesread);
 8002378:	f107 030c 	add.w	r3, r7, #12
 800237c:	222c      	movs	r2, #44	; 0x2c
 800237e:	491c      	ldr	r1, [pc, #112]	; (80023f0 <AUDIO_PLAYER_Start+0xb4>)
 8002380:	4819      	ldr	r0, [pc, #100]	; (80023e8 <AUDIO_PLAYER_Start+0xac>)
 8002382:	f00d f8c1 	bl	800f508 <f_read>
    
    PlayerInit(WaveFormat.SampleRate);
 8002386:	4b1a      	ldr	r3, [pc, #104]	; (80023f0 <AUDIO_PLAYER_Start+0xb4>)
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff ffb2 	bl	80022f4 <PlayerInit>
    
    BufferCtl.state = BUFFER_OFFSET_NONE;
 8002390:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <AUDIO_PLAYER_Start+0xb8>)
 8002392:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002396:	2200      	movs	r2, #0
 8002398:	701a      	strb	r2, [r3, #0]
    
    f_lseek(&WavFile, 0);
 800239a:	2100      	movs	r1, #0
 800239c:	4812      	ldr	r0, [pc, #72]	; (80023e8 <AUDIO_PLAYER_Start+0xac>)
 800239e:	f00d fa9a 	bl	800f8d6 <f_lseek>
    
    if(f_read(&WavFile,&BufferCtl.buff[0],AUDIO_OUT_BUFFER_SIZE,(void *)&bytesread) == FR_OK)
 80023a2:	f107 030c 	add.w	r3, r7, #12
 80023a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023aa:	4912      	ldr	r1, [pc, #72]	; (80023f4 <AUDIO_PLAYER_Start+0xb8>)
 80023ac:	480e      	ldr	r0, [pc, #56]	; (80023e8 <AUDIO_PLAYER_Start+0xac>)
 80023ae:	f00d f8ab 	bl	800f508 <f_read>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d111      	bne.n	80023dc <AUDIO_PLAYER_Start+0xa0>
    {
      AudioState = AUDIO_STATE_PLAY;
 80023b8:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <AUDIO_PLAYER_Start+0xbc>)
 80023ba:	2203      	movs	r2, #3
 80023bc:	701a      	strb	r2, [r3, #0]
        if(bytesread != 0)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00b      	beq.n	80023dc <AUDIO_PLAYER_Start+0xa0>
        {
          AUDIO_OUT_Play((uint16_t*)&BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE);
 80023c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023c8:	480a      	ldr	r0, [pc, #40]	; (80023f4 <AUDIO_PLAYER_Start+0xb8>)
 80023ca:	f7fe f8cd 	bl	8000568 <AUDIO_OUT_Play>
          BufferCtl.fptr = bytesread;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	4a08      	ldr	r2, [pc, #32]	; (80023f4 <AUDIO_PLAYER_Start+0xb8>)
 80023d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023d6:	6053      	str	r3, [r2, #4]
          return AUDIO_ERROR_NONE;
 80023d8:	2300      	movs	r3, #0
 80023da:	e000      	b.n	80023de <AUDIO_PLAYER_Start+0xa2>
        }
      }
  }
  return AUDIO_ERROR_IO;
 80023dc:	2301      	movs	r3, #1
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	200017d8 	.word	0x200017d8
 80023ec:	200013d0 	.word	0x200013d0
 80023f0:	200017ac 	.word	0x200017ac
 80023f4:	200003c4 	.word	0x200003c4
 80023f8:	200013cc 	.word	0x200013cc

080023fc <AUDIO_PLAYER_Process>:

AUDIO_ErrorTypeDef AUDIO_PLAYER_Process(bool isLoop)
{
 80023fc:	b590      	push	{r4, r7, lr}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	71fb      	strb	r3, [r7, #7]
  uint32_t bytesread;
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 8002406:	2300      	movs	r3, #0
 8002408:	73fb      	strb	r3, [r7, #15]
  
  switch(AudioState)
 800240a:	4b82      	ldr	r3, [pc, #520]	; (8002614 <AUDIO_PLAYER_Process+0x218>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	3b03      	subs	r3, #3
 8002410:	2b0a      	cmp	r3, #10
 8002412:	f200 80f6 	bhi.w	8002602 <AUDIO_PLAYER_Process+0x206>
 8002416:	a201      	add	r2, pc, #4	; (adr r2, 800241c <AUDIO_PLAYER_Process+0x20>)
 8002418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800241c:	08002449 	.word	0x08002449
 8002420:	08002603 	.word	0x08002603
 8002424:	0800250f 	.word	0x0800250f
 8002428:	0800255d 	.word	0x0800255d
 800242c:	08002603 	.word	0x08002603
 8002430:	08002603 	.word	0x08002603
 8002434:	080024fd 	.word	0x080024fd
 8002438:	0800259f 	.word	0x0800259f
 800243c:	080025ab 	.word	0x080025ab
 8002440:	080025b7 	.word	0x080025b7
 8002444:	080025dd 	.word	0x080025dd
  {
  case AUDIO_STATE_PLAY:
    if(BufferCtl.fptr >= WaveFormat.FileSize)
 8002448:	4b73      	ldr	r3, [pc, #460]	; (8002618 <AUDIO_PLAYER_Process+0x21c>)
 800244a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	4b72      	ldr	r3, [pc, #456]	; (800261c <AUDIO_PLAYER_Process+0x220>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	429a      	cmp	r2, r3
 8002456:	d305      	bcc.n	8002464 <AUDIO_PLAYER_Process+0x68>
    {
      AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002458:	2002      	movs	r0, #2
 800245a:	f7fe f8db 	bl	8000614 <AUDIO_OUT_Stop>
      AudioState = AUDIO_STATE_NEXT;
 800245e:	4b6d      	ldr	r3, [pc, #436]	; (8002614 <AUDIO_PLAYER_Process+0x218>)
 8002460:	2205      	movs	r2, #5
 8002462:	701a      	strb	r2, [r3, #0]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_HALF)
 8002464:	4b6c      	ldr	r3, [pc, #432]	; (8002618 <AUDIO_PLAYER_Process+0x21c>)
 8002466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d11e      	bne.n	80024ae <AUDIO_PLAYER_Process+0xb2>
    {
      if(f_read(&WavFile, &BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 8002470:	f107 0308 	add.w	r3, r7, #8
 8002474:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002478:	4967      	ldr	r1, [pc, #412]	; (8002618 <AUDIO_PLAYER_Process+0x21c>)
 800247a:	4869      	ldr	r0, [pc, #420]	; (8002620 <AUDIO_PLAYER_Process+0x224>)
 800247c:	f00d f844 	bl	800f508 <f_read>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d004      	beq.n	8002490 <AUDIO_PLAYER_Process+0x94>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002486:	2002      	movs	r0, #2
 8002488:	f7fe f8c4 	bl	8000614 <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 800248c:	2301      	movs	r3, #1
 800248e:	e0bc      	b.n	800260a <AUDIO_PLAYER_Process+0x20e>
      } 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 8002490:	4b61      	ldr	r3, [pc, #388]	; (8002618 <AUDIO_PLAYER_Process+0x21c>)
 8002492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002496:	2200      	movs	r2, #0
 8002498:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 800249a:	4b5f      	ldr	r3, [pc, #380]	; (8002618 <AUDIO_PLAYER_Process+0x21c>)
 800249c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	4413      	add	r3, r2
 80024a6:	4a5c      	ldr	r2, [pc, #368]	; (8002618 <AUDIO_PLAYER_Process+0x21c>)
 80024a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024ac:	6053      	str	r3, [r2, #4]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_FULL)
 80024ae:	4b5a      	ldr	r3, [pc, #360]	; (8002618 <AUDIO_PLAYER_Process+0x21c>)
 80024b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	f040 80a5 	bne.w	8002606 <AUDIO_PLAYER_Process+0x20a>
    {
      if(f_read(&WavFile, &BufferCtl.buff[AUDIO_OUT_BUFFER_SIZE /2], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 80024bc:	f107 0308 	add.w	r3, r7, #8
 80024c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024c4:	4957      	ldr	r1, [pc, #348]	; (8002624 <AUDIO_PLAYER_Process+0x228>)
 80024c6:	4856      	ldr	r0, [pc, #344]	; (8002620 <AUDIO_PLAYER_Process+0x224>)
 80024c8:	f00d f81e 	bl	800f508 <f_read>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d004      	beq.n	80024dc <AUDIO_PLAYER_Process+0xe0>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 80024d2:	2002      	movs	r0, #2
 80024d4:	f7fe f89e 	bl	8000614 <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 80024d8:	2301      	movs	r3, #1
 80024da:	e096      	b.n	800260a <AUDIO_PLAYER_Process+0x20e>
      } 
 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 80024dc:	4b4e      	ldr	r3, [pc, #312]	; (8002618 <AUDIO_PLAYER_Process+0x21c>)
 80024de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 80024e6:	4b4c      	ldr	r3, [pc, #304]	; (8002618 <AUDIO_PLAYER_Process+0x21c>)
 80024e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	4413      	add	r3, r2
 80024f2:	4a49      	ldr	r2, [pc, #292]	; (8002618 <AUDIO_PLAYER_Process+0x21c>)
 80024f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024f8:	6053      	str	r3, [r2, #4]
    }
    break;
 80024fa:	e084      	b.n	8002606 <AUDIO_PLAYER_Process+0x20a>
    
  case AUDIO_STATE_STOP:
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 80024fc:	2002      	movs	r0, #2
 80024fe:	f7fe f889 	bl	8000614 <AUDIO_OUT_Stop>
    AudioState = AUDIO_STATE_IDLE; 
 8002502:	4b44      	ldr	r3, [pc, #272]	; (8002614 <AUDIO_PLAYER_Process+0x218>)
 8002504:	2200      	movs	r2, #0
 8002506:	701a      	strb	r2, [r3, #0]
    audio_error = AUDIO_ERROR_IO;
 8002508:	2301      	movs	r3, #1
 800250a:	73fb      	strb	r3, [r7, #15]
    break;
 800250c:	e07c      	b.n	8002608 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_NEXT:
    if(++FilePos >= AUDIO_GetWavObjectNumber())
 800250e:	4b46      	ldr	r3, [pc, #280]	; (8002628 <AUDIO_PLAYER_Process+0x22c>)
 8002510:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002514:	b29b      	uxth	r3, r3
 8002516:	3301      	adds	r3, #1
 8002518:	b29b      	uxth	r3, r3
 800251a:	b21a      	sxth	r2, r3
 800251c:	4b42      	ldr	r3, [pc, #264]	; (8002628 <AUDIO_PLAYER_Process+0x22c>)
 800251e:	801a      	strh	r2, [r3, #0]
 8002520:	4b41      	ldr	r3, [pc, #260]	; (8002628 <AUDIO_PLAYER_Process+0x22c>)
 8002522:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002526:	461c      	mov	r4, r3
 8002528:	f7fe fc32 	bl	8000d90 <AUDIO_GetWavObjectNumber>
 800252c:	4603      	mov	r3, r0
 800252e:	429c      	cmp	r4, r3
 8002530:	db09      	blt.n	8002546 <AUDIO_PLAYER_Process+0x14a>
    {
    	if (isLoop)
 8002532:	79fb      	ldrb	r3, [r7, #7]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <AUDIO_PLAYER_Process+0x144>
    	{
    		FilePos = 0;
 8002538:	4b3b      	ldr	r3, [pc, #236]	; (8002628 <AUDIO_PLAYER_Process+0x22c>)
 800253a:	2200      	movs	r2, #0
 800253c:	801a      	strh	r2, [r3, #0]
 800253e:	e002      	b.n	8002546 <AUDIO_PLAYER_Process+0x14a>
    	}
    	else
    	{
    		AudioState =AUDIO_STATE_STOP;
 8002540:	4b34      	ldr	r3, [pc, #208]	; (8002614 <AUDIO_PLAYER_Process+0x218>)
 8002542:	2209      	movs	r2, #9
 8002544:	701a      	strb	r2, [r3, #0]
    	}
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002546:	2002      	movs	r0, #2
 8002548:	f7fe f864 	bl	8000614 <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 800254c:	4b36      	ldr	r3, [pc, #216]	; (8002628 <AUDIO_PLAYER_Process+0x22c>)
 800254e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002552:	b2db      	uxtb	r3, r3
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff fef1 	bl	800233c <AUDIO_PLAYER_Start>
    break;    
 800255a:	e055      	b.n	8002608 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_PREVIOUS:
    if(--FilePos < 0)
 800255c:	4b32      	ldr	r3, [pc, #200]	; (8002628 <AUDIO_PLAYER_Process+0x22c>)
 800255e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002562:	b29b      	uxth	r3, r3
 8002564:	3b01      	subs	r3, #1
 8002566:	b29b      	uxth	r3, r3
 8002568:	b21a      	sxth	r2, r3
 800256a:	4b2f      	ldr	r3, [pc, #188]	; (8002628 <AUDIO_PLAYER_Process+0x22c>)
 800256c:	801a      	strh	r2, [r3, #0]
 800256e:	4b2e      	ldr	r3, [pc, #184]	; (8002628 <AUDIO_PLAYER_Process+0x22c>)
 8002570:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002574:	2b00      	cmp	r3, #0
 8002576:	da07      	bge.n	8002588 <AUDIO_PLAYER_Process+0x18c>
    {
      FilePos = AUDIO_GetWavObjectNumber() - 1;
 8002578:	f7fe fc0a 	bl	8000d90 <AUDIO_GetWavObjectNumber>
 800257c:	4603      	mov	r3, r0
 800257e:	3b01      	subs	r3, #1
 8002580:	b29b      	uxth	r3, r3
 8002582:	b21a      	sxth	r2, r3
 8002584:	4b28      	ldr	r3, [pc, #160]	; (8002628 <AUDIO_PLAYER_Process+0x22c>)
 8002586:	801a      	strh	r2, [r3, #0]
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002588:	2002      	movs	r0, #2
 800258a:	f7fe f843 	bl	8000614 <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 800258e:	4b26      	ldr	r3, [pc, #152]	; (8002628 <AUDIO_PLAYER_Process+0x22c>)
 8002590:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002594:	b2db      	uxtb	r3, r3
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff fed0 	bl	800233c <AUDIO_PLAYER_Start>
    break;   
 800259c:	e034      	b.n	8002608 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_PAUSE:
    AUDIO_OUT_Pause();
 800259e:	f7fe f80d 	bl	80005bc <AUDIO_OUT_Pause>
    AudioState = AUDIO_STATE_WAIT;
 80025a2:	4b1c      	ldr	r3, [pc, #112]	; (8002614 <AUDIO_PLAYER_Process+0x218>)
 80025a4:	2201      	movs	r2, #1
 80025a6:	701a      	strb	r2, [r3, #0]
    break;
 80025a8:	e02e      	b.n	8002608 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_RESUME:
    AUDIO_OUT_Resume();
 80025aa:	f7fe f81d 	bl	80005e8 <AUDIO_OUT_Resume>
    AudioState = AUDIO_STATE_PLAY;
 80025ae:	4b19      	ldr	r3, [pc, #100]	; (8002614 <AUDIO_PLAYER_Process+0x218>)
 80025b0:	2203      	movs	r2, #3
 80025b2:	701a      	strb	r2, [r3, #0]
    break;
 80025b4:	e028      	b.n	8002608 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_VOLUME_UP: 
    if( uwVolume <= 90)
 80025b6:	4b1d      	ldr	r3, [pc, #116]	; (800262c <AUDIO_PLAYER_Process+0x230>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2b5a      	cmp	r3, #90	; 0x5a
 80025bc:	d804      	bhi.n	80025c8 <AUDIO_PLAYER_Process+0x1cc>
    {
      uwVolume += 10;
 80025be:	4b1b      	ldr	r3, [pc, #108]	; (800262c <AUDIO_PLAYER_Process+0x230>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	330a      	adds	r3, #10
 80025c4:	4a19      	ldr	r2, [pc, #100]	; (800262c <AUDIO_PLAYER_Process+0x230>)
 80025c6:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 80025c8:	4b18      	ldr	r3, [pc, #96]	; (800262c <AUDIO_PLAYER_Process+0x230>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fe f848 	bl	8000664 <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 80025d4:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <AUDIO_PLAYER_Process+0x218>)
 80025d6:	2203      	movs	r2, #3
 80025d8:	701a      	strb	r2, [r3, #0]
    break;
 80025da:	e015      	b.n	8002608 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_VOLUME_DOWN:    
    if( uwVolume >= 10)
 80025dc:	4b13      	ldr	r3, [pc, #76]	; (800262c <AUDIO_PLAYER_Process+0x230>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b09      	cmp	r3, #9
 80025e2:	d904      	bls.n	80025ee <AUDIO_PLAYER_Process+0x1f2>
    {
      uwVolume -= 10;
 80025e4:	4b11      	ldr	r3, [pc, #68]	; (800262c <AUDIO_PLAYER_Process+0x230>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	3b0a      	subs	r3, #10
 80025ea:	4a10      	ldr	r2, [pc, #64]	; (800262c <AUDIO_PLAYER_Process+0x230>)
 80025ec:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 80025ee:	4b0f      	ldr	r3, [pc, #60]	; (800262c <AUDIO_PLAYER_Process+0x230>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fe f835 	bl	8000664 <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 80025fa:	4b06      	ldr	r3, [pc, #24]	; (8002614 <AUDIO_PLAYER_Process+0x218>)
 80025fc:	2203      	movs	r2, #3
 80025fe:	701a      	strb	r2, [r3, #0]
    break;
 8002600:	e002      	b.n	8002608 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_WAIT:
  case AUDIO_STATE_IDLE:
  case AUDIO_STATE_INIT:    
  default:
    break;
 8002602:	bf00      	nop
 8002604:	e000      	b.n	8002608 <AUDIO_PLAYER_Process+0x20c>
    break;
 8002606:	bf00      	nop
  }
  return audio_error;
 8002608:	7bfb      	ldrb	r3, [r7, #15]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	bd90      	pop	{r4, r7, pc}
 8002612:	bf00      	nop
 8002614:	200013cc 	.word	0x200013cc
 8002618:	200003c4 	.word	0x200003c4
 800261c:	200017ac 	.word	0x200017ac
 8002620:	200017d8 	.word	0x200017d8
 8002624:	20000bc4 	.word	0x20000bc4
 8002628:	200013ce 	.word	0x200013ce
 800262c:	20000040 	.word	0x20000040

08002630 <AUDIO_OUT_TransferComplete_CallBack>:
  f_close(&WavFile);
  return AUDIO_ERROR_NONE;
}

void AUDIO_OUT_TransferComplete_CallBack(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8002634:	4b06      	ldr	r3, [pc, #24]	; (8002650 <AUDIO_OUT_TransferComplete_CallBack+0x20>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b03      	cmp	r3, #3
 800263a:	d104      	bne.n	8002646 <AUDIO_OUT_TransferComplete_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_FULL;
 800263c:	4b05      	ldr	r3, [pc, #20]	; (8002654 <AUDIO_OUT_TransferComplete_CallBack+0x24>)
 800263e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002642:	2202      	movs	r2, #2
 8002644:	701a      	strb	r2, [r3, #0]
  }
}
 8002646:	bf00      	nop
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	200013cc 	.word	0x200013cc
 8002654:	200003c4 	.word	0x200003c4

08002658 <AUDIO_OUT_HalfTransfer_CallBack>:

void AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 800265c:	4b06      	ldr	r3, [pc, #24]	; (8002678 <AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2b03      	cmp	r3, #3
 8002662:	d104      	bne.n	800266e <AUDIO_OUT_HalfTransfer_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_HALF;
 8002664:	4b05      	ldr	r3, [pc, #20]	; (800267c <AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 8002666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800266a:	2201      	movs	r2, #1
 800266c:	701a      	strb	r2, [r3, #0]
  }
}
 800266e:	bf00      	nop
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	200013cc 	.word	0x200013cc
 800267c:	200003c4 	.word	0x200003c4

08002680 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002680:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002684:	480d      	ldr	r0, [pc, #52]	; (80026bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002686:	490e      	ldr	r1, [pc, #56]	; (80026c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002688:	4a0e      	ldr	r2, [pc, #56]	; (80026c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800268a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800268c:	e002      	b.n	8002694 <LoopCopyDataInit>

0800268e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800268e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002692:	3304      	adds	r3, #4

08002694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002698:	d3f9      	bcc.n	800268e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800269a:	4a0b      	ldr	r2, [pc, #44]	; (80026c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800269c:	4c0b      	ldr	r4, [pc, #44]	; (80026cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800269e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026a0:	e001      	b.n	80026a6 <LoopFillZerobss>

080026a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026a4:	3204      	adds	r2, #4

080026a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026a8:	d3fb      	bcc.n	80026a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026aa:	f7ff fe11 	bl	80022d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026ae:	f00e f861 	bl	8010774 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026b2:	f7ff fb23 	bl	8001cfc <main>
  bx  lr    
 80026b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80026b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026c0:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 80026c4:	08010fa8 	.word	0x08010fa8
  ldr r2, =_sbss
 80026c8:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 80026cc:	2000256c 	.word	0x2000256c

080026d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026d0:	e7fe      	b.n	80026d0 <ADC_IRQHandler>
	...

080026d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026d8:	4b0e      	ldr	r3, [pc, #56]	; (8002714 <HAL_Init+0x40>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a0d      	ldr	r2, [pc, #52]	; (8002714 <HAL_Init+0x40>)
 80026de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026e4:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <HAL_Init+0x40>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a0a      	ldr	r2, [pc, #40]	; (8002714 <HAL_Init+0x40>)
 80026ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026f0:	4b08      	ldr	r3, [pc, #32]	; (8002714 <HAL_Init+0x40>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a07      	ldr	r2, [pc, #28]	; (8002714 <HAL_Init+0x40>)
 80026f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026fc:	2003      	movs	r0, #3
 80026fe:	f000 f94f 	bl	80029a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002702:	2000      	movs	r0, #0
 8002704:	f000 f808 	bl	8002718 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002708:	f7ff fd3e 	bl	8002188 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40023c00 	.word	0x40023c00

08002718 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002720:	4b12      	ldr	r3, [pc, #72]	; (800276c <HAL_InitTick+0x54>)
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	4b12      	ldr	r3, [pc, #72]	; (8002770 <HAL_InitTick+0x58>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	4619      	mov	r1, r3
 800272a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800272e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002732:	fbb2 f3f3 	udiv	r3, r2, r3
 8002736:	4618      	mov	r0, r3
 8002738:	f000 f967 	bl	8002a0a <HAL_SYSTICK_Config>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e00e      	b.n	8002764 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b0f      	cmp	r3, #15
 800274a:	d80a      	bhi.n	8002762 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800274c:	2200      	movs	r2, #0
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	f04f 30ff 	mov.w	r0, #4294967295
 8002754:	f000 f92f 	bl	80029b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002758:	4a06      	ldr	r2, [pc, #24]	; (8002774 <HAL_InitTick+0x5c>)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800275e:	2300      	movs	r3, #0
 8002760:	e000      	b.n	8002764 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
}
 8002764:	4618      	mov	r0, r3
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	2000003c 	.word	0x2000003c
 8002770:	20000048 	.word	0x20000048
 8002774:	20000044 	.word	0x20000044

08002778 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800277c:	4b06      	ldr	r3, [pc, #24]	; (8002798 <HAL_IncTick+0x20>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	461a      	mov	r2, r3
 8002782:	4b06      	ldr	r3, [pc, #24]	; (800279c <HAL_IncTick+0x24>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4413      	add	r3, r2
 8002788:	4a04      	ldr	r2, [pc, #16]	; (800279c <HAL_IncTick+0x24>)
 800278a:	6013      	str	r3, [r2, #0]
}
 800278c:	bf00      	nop
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	20000048 	.word	0x20000048
 800279c:	20001a08 	.word	0x20001a08

080027a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  return uwTick;
 80027a4:	4b03      	ldr	r3, [pc, #12]	; (80027b4 <HAL_GetTick+0x14>)
 80027a6:	681b      	ldr	r3, [r3, #0]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	20001a08 	.word	0x20001a08

080027b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027c0:	f7ff ffee 	bl	80027a0 <HAL_GetTick>
 80027c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d0:	d005      	beq.n	80027de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027d2:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <HAL_Delay+0x44>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	461a      	mov	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4413      	add	r3, r2
 80027dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027de:	bf00      	nop
 80027e0:	f7ff ffde 	bl	80027a0 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d8f7      	bhi.n	80027e0 <HAL_Delay+0x28>
  {
  }
}
 80027f0:	bf00      	nop
 80027f2:	bf00      	nop
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20000048 	.word	0x20000048

08002800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002810:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <__NVIC_SetPriorityGrouping+0x44>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800281c:	4013      	ands	r3, r2
 800281e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002828:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800282c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002832:	4a04      	ldr	r2, [pc, #16]	; (8002844 <__NVIC_SetPriorityGrouping+0x44>)
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	60d3      	str	r3, [r2, #12]
}
 8002838:	bf00      	nop
 800283a:	3714      	adds	r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	e000ed00 	.word	0xe000ed00

08002848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800284c:	4b04      	ldr	r3, [pc, #16]	; (8002860 <__NVIC_GetPriorityGrouping+0x18>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	0a1b      	lsrs	r3, r3, #8
 8002852:	f003 0307 	and.w	r3, r3, #7
}
 8002856:	4618      	mov	r0, r3
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	e000ed00 	.word	0xe000ed00

08002864 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800286e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002872:	2b00      	cmp	r3, #0
 8002874:	db0b      	blt.n	800288e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002876:	79fb      	ldrb	r3, [r7, #7]
 8002878:	f003 021f 	and.w	r2, r3, #31
 800287c:	4907      	ldr	r1, [pc, #28]	; (800289c <__NVIC_EnableIRQ+0x38>)
 800287e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002882:	095b      	lsrs	r3, r3, #5
 8002884:	2001      	movs	r0, #1
 8002886:	fa00 f202 	lsl.w	r2, r0, r2
 800288a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	e000e100 	.word	0xe000e100

080028a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	6039      	str	r1, [r7, #0]
 80028aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	db0a      	blt.n	80028ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	490c      	ldr	r1, [pc, #48]	; (80028ec <__NVIC_SetPriority+0x4c>)
 80028ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028be:	0112      	lsls	r2, r2, #4
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	440b      	add	r3, r1
 80028c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028c8:	e00a      	b.n	80028e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	4908      	ldr	r1, [pc, #32]	; (80028f0 <__NVIC_SetPriority+0x50>)
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	3b04      	subs	r3, #4
 80028d8:	0112      	lsls	r2, r2, #4
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	440b      	add	r3, r1
 80028de:	761a      	strb	r2, [r3, #24]
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	e000e100 	.word	0xe000e100
 80028f0:	e000ed00 	.word	0xe000ed00

080028f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b089      	sub	sp, #36	; 0x24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	f1c3 0307 	rsb	r3, r3, #7
 800290e:	2b04      	cmp	r3, #4
 8002910:	bf28      	it	cs
 8002912:	2304      	movcs	r3, #4
 8002914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	3304      	adds	r3, #4
 800291a:	2b06      	cmp	r3, #6
 800291c:	d902      	bls.n	8002924 <NVIC_EncodePriority+0x30>
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	3b03      	subs	r3, #3
 8002922:	e000      	b.n	8002926 <NVIC_EncodePriority+0x32>
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002928:	f04f 32ff 	mov.w	r2, #4294967295
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	43da      	mvns	r2, r3
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	401a      	ands	r2, r3
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800293c:	f04f 31ff 	mov.w	r1, #4294967295
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	fa01 f303 	lsl.w	r3, r1, r3
 8002946:	43d9      	mvns	r1, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800294c:	4313      	orrs	r3, r2
         );
}
 800294e:	4618      	mov	r0, r3
 8002950:	3724      	adds	r7, #36	; 0x24
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
	...

0800295c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3b01      	subs	r3, #1
 8002968:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800296c:	d301      	bcc.n	8002972 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800296e:	2301      	movs	r3, #1
 8002970:	e00f      	b.n	8002992 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002972:	4a0a      	ldr	r2, [pc, #40]	; (800299c <SysTick_Config+0x40>)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3b01      	subs	r3, #1
 8002978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800297a:	210f      	movs	r1, #15
 800297c:	f04f 30ff 	mov.w	r0, #4294967295
 8002980:	f7ff ff8e 	bl	80028a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002984:	4b05      	ldr	r3, [pc, #20]	; (800299c <SysTick_Config+0x40>)
 8002986:	2200      	movs	r2, #0
 8002988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800298a:	4b04      	ldr	r3, [pc, #16]	; (800299c <SysTick_Config+0x40>)
 800298c:	2207      	movs	r2, #7
 800298e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	e000e010 	.word	0xe000e010

080029a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f7ff ff29 	bl	8002800 <__NVIC_SetPriorityGrouping>
}
 80029ae:	bf00      	nop
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b086      	sub	sp, #24
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	4603      	mov	r3, r0
 80029be:	60b9      	str	r1, [r7, #8]
 80029c0:	607a      	str	r2, [r7, #4]
 80029c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029c8:	f7ff ff3e 	bl	8002848 <__NVIC_GetPriorityGrouping>
 80029cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	68b9      	ldr	r1, [r7, #8]
 80029d2:	6978      	ldr	r0, [r7, #20]
 80029d4:	f7ff ff8e 	bl	80028f4 <NVIC_EncodePriority>
 80029d8:	4602      	mov	r2, r0
 80029da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029de:	4611      	mov	r1, r2
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff ff5d 	bl	80028a0 <__NVIC_SetPriority>
}
 80029e6:	bf00      	nop
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b082      	sub	sp, #8
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	4603      	mov	r3, r0
 80029f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff ff31 	bl	8002864 <__NVIC_EnableIRQ>
}
 8002a02:	bf00      	nop
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b082      	sub	sp, #8
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7ff ffa2 	bl	800295c <SysTick_Config>
 8002a18:	4603      	mov	r3, r0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
	...

08002a24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a30:	f7ff feb6 	bl	80027a0 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e099      	b.n	8002b74 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2202      	movs	r2, #2
 8002a44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0201 	bic.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a60:	e00f      	b.n	8002a82 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a62:	f7ff fe9d 	bl	80027a0 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b05      	cmp	r3, #5
 8002a6e:	d908      	bls.n	8002a82 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2220      	movs	r2, #32
 8002a74:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2203      	movs	r2, #3
 8002a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e078      	b.n	8002b74 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1e8      	bne.n	8002a62 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	4b38      	ldr	r3, [pc, #224]	; (8002b7c <HAL_DMA_Init+0x158>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ac6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d107      	bne.n	8002aec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f023 0307 	bic.w	r3, r3, #7
 8002b02:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d117      	bne.n	8002b46 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00e      	beq.n	8002b46 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 fb3d 	bl	80031a8 <DMA_CheckFifoParam>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d008      	beq.n	8002b46 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2240      	movs	r2, #64	; 0x40
 8002b38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b42:	2301      	movs	r3, #1
 8002b44:	e016      	b.n	8002b74 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 faf4 	bl	800313c <DMA_CalcBaseAndBitshift>
 8002b54:	4603      	mov	r3, r0
 8002b56:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b5c:	223f      	movs	r2, #63	; 0x3f
 8002b5e:	409a      	lsls	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	f010803f 	.word	0xf010803f

08002b80 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e050      	b.n	8002c34 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d101      	bne.n	8002ba2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e048      	b.n	8002c34 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0201 	bic.w	r2, r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2221      	movs	r2, #33	; 0x21
 8002be0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 faaa 	bl	800313c <DMA_CalcBaseAndBitshift>
 8002be8:	4603      	mov	r3, r0
 8002bea:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c14:	223f      	movs	r2, #63	; 0x3f
 8002c16:	409a      	lsls	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
 8002c48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c52:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d101      	bne.n	8002c62 <HAL_DMA_Start_IT+0x26>
 8002c5e:	2302      	movs	r3, #2
 8002c60:	e040      	b.n	8002ce4 <HAL_DMA_Start_IT+0xa8>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d12f      	bne.n	8002cd6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2202      	movs	r2, #2
 8002c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	68b9      	ldr	r1, [r7, #8]
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f000 fa28 	bl	80030e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c94:	223f      	movs	r2, #63	; 0x3f
 8002c96:	409a      	lsls	r2, r3
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0216 	orr.w	r2, r2, #22
 8002caa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d007      	beq.n	8002cc4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f042 0208 	orr.w	r2, r2, #8
 8002cc2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0201 	orr.w	r2, r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	e005      	b.n	8002ce2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ce2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002cfa:	f7ff fd51 	bl	80027a0 <HAL_GetTick>
 8002cfe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d008      	beq.n	8002d1e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2280      	movs	r2, #128	; 0x80
 8002d10:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e052      	b.n	8002dc4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 0216 	bic.w	r2, r2, #22
 8002d2c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	695a      	ldr	r2, [r3, #20]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d3c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d103      	bne.n	8002d4e <HAL_DMA_Abort+0x62>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d007      	beq.n	8002d5e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 0208 	bic.w	r2, r2, #8
 8002d5c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 0201 	bic.w	r2, r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d6e:	e013      	b.n	8002d98 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d70:	f7ff fd16 	bl	80027a0 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b05      	cmp	r3, #5
 8002d7c:	d90c      	bls.n	8002d98 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2220      	movs	r2, #32
 8002d82:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2203      	movs	r2, #3
 8002d88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e015      	b.n	8002dc4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1e4      	bne.n	8002d70 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002daa:	223f      	movs	r2, #63	; 0x3f
 8002dac:	409a      	lsls	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002dd8:	4b8e      	ldr	r3, [pc, #568]	; (8003014 <HAL_DMA_IRQHandler+0x248>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a8e      	ldr	r2, [pc, #568]	; (8003018 <HAL_DMA_IRQHandler+0x24c>)
 8002dde:	fba2 2303 	umull	r2, r3, r2, r3
 8002de2:	0a9b      	lsrs	r3, r3, #10
 8002de4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df6:	2208      	movs	r2, #8
 8002df8:	409a      	lsls	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d01a      	beq.n	8002e38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d013      	beq.n	8002e38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0204 	bic.w	r2, r2, #4
 8002e1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e24:	2208      	movs	r2, #8
 8002e26:	409a      	lsls	r2, r3
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e30:	f043 0201 	orr.w	r2, r3, #1
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	409a      	lsls	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4013      	ands	r3, r2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d012      	beq.n	8002e6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00b      	beq.n	8002e6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	409a      	lsls	r2, r3
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e66:	f043 0202 	orr.w	r2, r3, #2
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e72:	2204      	movs	r2, #4
 8002e74:	409a      	lsls	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d012      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00b      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e90:	2204      	movs	r2, #4
 8002e92:	409a      	lsls	r2, r3
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9c:	f043 0204 	orr.w	r2, r3, #4
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea8:	2210      	movs	r2, #16
 8002eaa:	409a      	lsls	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d043      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d03c      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec6:	2210      	movs	r2, #16
 8002ec8:	409a      	lsls	r2, r3
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d018      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d108      	bne.n	8002efc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d024      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	4798      	blx	r3
 8002efa:	e01f      	b.n	8002f3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d01b      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	4798      	blx	r3
 8002f0c:	e016      	b.n	8002f3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d107      	bne.n	8002f2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 0208 	bic.w	r2, r2, #8
 8002f2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f40:	2220      	movs	r2, #32
 8002f42:	409a      	lsls	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4013      	ands	r3, r2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 808f 	beq.w	800306c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0310 	and.w	r3, r3, #16
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 8087 	beq.w	800306c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f62:	2220      	movs	r2, #32
 8002f64:	409a      	lsls	r2, r3
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b05      	cmp	r3, #5
 8002f74:	d136      	bne.n	8002fe4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0216 	bic.w	r2, r2, #22
 8002f84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	695a      	ldr	r2, [r3, #20]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d103      	bne.n	8002fa6 <HAL_DMA_IRQHandler+0x1da>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d007      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0208 	bic.w	r2, r2, #8
 8002fb4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fba:	223f      	movs	r2, #63	; 0x3f
 8002fbc:	409a      	lsls	r2, r3
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d07e      	beq.n	80030d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	4798      	blx	r3
        }
        return;
 8002fe2:	e079      	b.n	80030d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d01d      	beq.n	800302e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10d      	bne.n	800301c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003004:	2b00      	cmp	r3, #0
 8003006:	d031      	beq.n	800306c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	4798      	blx	r3
 8003010:	e02c      	b.n	800306c <HAL_DMA_IRQHandler+0x2a0>
 8003012:	bf00      	nop
 8003014:	2000003c 	.word	0x2000003c
 8003018:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003020:	2b00      	cmp	r3, #0
 8003022:	d023      	beq.n	800306c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	4798      	blx	r3
 800302c:	e01e      	b.n	800306c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10f      	bne.n	800305c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0210 	bic.w	r2, r2, #16
 800304a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003070:	2b00      	cmp	r3, #0
 8003072:	d032      	beq.n	80030da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b00      	cmp	r3, #0
 800307e:	d022      	beq.n	80030c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2205      	movs	r2, #5
 8003084:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 0201 	bic.w	r2, r2, #1
 8003096:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	3301      	adds	r3, #1
 800309c:	60bb      	str	r3, [r7, #8]
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d307      	bcc.n	80030b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1f2      	bne.n	8003098 <HAL_DMA_IRQHandler+0x2cc>
 80030b2:	e000      	b.n	80030b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80030b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d005      	beq.n	80030da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	4798      	blx	r3
 80030d6:	e000      	b.n	80030da <HAL_DMA_IRQHandler+0x30e>
        return;
 80030d8:	bf00      	nop
    }
  }
}
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
 80030ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	2b40      	cmp	r3, #64	; 0x40
 800310c:	d108      	bne.n	8003120 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800311e:	e007      	b.n	8003130 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	60da      	str	r2, [r3, #12]
}
 8003130:	bf00      	nop
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	b2db      	uxtb	r3, r3
 800314a:	3b10      	subs	r3, #16
 800314c:	4a14      	ldr	r2, [pc, #80]	; (80031a0 <DMA_CalcBaseAndBitshift+0x64>)
 800314e:	fba2 2303 	umull	r2, r3, r2, r3
 8003152:	091b      	lsrs	r3, r3, #4
 8003154:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003156:	4a13      	ldr	r2, [pc, #76]	; (80031a4 <DMA_CalcBaseAndBitshift+0x68>)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4413      	add	r3, r2
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	461a      	mov	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2b03      	cmp	r3, #3
 8003168:	d909      	bls.n	800317e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003172:	f023 0303 	bic.w	r3, r3, #3
 8003176:	1d1a      	adds	r2, r3, #4
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	659a      	str	r2, [r3, #88]	; 0x58
 800317c:	e007      	b.n	800318e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003186:	f023 0303 	bic.w	r3, r3, #3
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003192:	4618      	mov	r0, r3
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	aaaaaaab 	.word	0xaaaaaaab
 80031a4:	08010b3c 	.word	0x08010b3c

080031a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031b0:	2300      	movs	r3, #0
 80031b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d11f      	bne.n	8003202 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	2b03      	cmp	r3, #3
 80031c6:	d856      	bhi.n	8003276 <DMA_CheckFifoParam+0xce>
 80031c8:	a201      	add	r2, pc, #4	; (adr r2, 80031d0 <DMA_CheckFifoParam+0x28>)
 80031ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ce:	bf00      	nop
 80031d0:	080031e1 	.word	0x080031e1
 80031d4:	080031f3 	.word	0x080031f3
 80031d8:	080031e1 	.word	0x080031e1
 80031dc:	08003277 	.word	0x08003277
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d046      	beq.n	800327a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031f0:	e043      	b.n	800327a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031fa:	d140      	bne.n	800327e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003200:	e03d      	b.n	800327e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800320a:	d121      	bne.n	8003250 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b03      	cmp	r3, #3
 8003210:	d837      	bhi.n	8003282 <DMA_CheckFifoParam+0xda>
 8003212:	a201      	add	r2, pc, #4	; (adr r2, 8003218 <DMA_CheckFifoParam+0x70>)
 8003214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003218:	08003229 	.word	0x08003229
 800321c:	0800322f 	.word	0x0800322f
 8003220:	08003229 	.word	0x08003229
 8003224:	08003241 	.word	0x08003241
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	73fb      	strb	r3, [r7, #15]
      break;
 800322c:	e030      	b.n	8003290 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003232:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d025      	beq.n	8003286 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800323e:	e022      	b.n	8003286 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003244:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003248:	d11f      	bne.n	800328a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800324e:	e01c      	b.n	800328a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2b02      	cmp	r3, #2
 8003254:	d903      	bls.n	800325e <DMA_CheckFifoParam+0xb6>
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2b03      	cmp	r3, #3
 800325a:	d003      	beq.n	8003264 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800325c:	e018      	b.n	8003290 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	73fb      	strb	r3, [r7, #15]
      break;
 8003262:	e015      	b.n	8003290 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003268:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00e      	beq.n	800328e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	73fb      	strb	r3, [r7, #15]
      break;
 8003274:	e00b      	b.n	800328e <DMA_CheckFifoParam+0xe6>
      break;
 8003276:	bf00      	nop
 8003278:	e00a      	b.n	8003290 <DMA_CheckFifoParam+0xe8>
      break;
 800327a:	bf00      	nop
 800327c:	e008      	b.n	8003290 <DMA_CheckFifoParam+0xe8>
      break;
 800327e:	bf00      	nop
 8003280:	e006      	b.n	8003290 <DMA_CheckFifoParam+0xe8>
      break;
 8003282:	bf00      	nop
 8003284:	e004      	b.n	8003290 <DMA_CheckFifoParam+0xe8>
      break;
 8003286:	bf00      	nop
 8003288:	e002      	b.n	8003290 <DMA_CheckFifoParam+0xe8>
      break;   
 800328a:	bf00      	nop
 800328c:	e000      	b.n	8003290 <DMA_CheckFifoParam+0xe8>
      break;
 800328e:	bf00      	nop
    }
  } 
  
  return status; 
 8003290:	7bfb      	ldrb	r3, [r7, #15]
}
 8003292:	4618      	mov	r0, r3
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop

080032a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b089      	sub	sp, #36	; 0x24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032aa:	2300      	movs	r3, #0
 80032ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032ae:	2300      	movs	r3, #0
 80032b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032b6:	2300      	movs	r3, #0
 80032b8:	61fb      	str	r3, [r7, #28]
 80032ba:	e16b      	b.n	8003594 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032bc:	2201      	movs	r2, #1
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	4013      	ands	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	f040 815a 	bne.w	800358e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f003 0303 	and.w	r3, r3, #3
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d005      	beq.n	80032f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d130      	bne.n	8003354 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	2203      	movs	r2, #3
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	43db      	mvns	r3, r3
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	4013      	ands	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	68da      	ldr	r2, [r3, #12]
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	4313      	orrs	r3, r2
 800331a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003328:	2201      	movs	r2, #1
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	43db      	mvns	r3, r3
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4013      	ands	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	091b      	lsrs	r3, r3, #4
 800333e:	f003 0201 	and.w	r2, r3, #1
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4313      	orrs	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f003 0303 	and.w	r3, r3, #3
 800335c:	2b03      	cmp	r3, #3
 800335e:	d017      	beq.n	8003390 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	2203      	movs	r2, #3
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	43db      	mvns	r3, r3
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	4013      	ands	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	4313      	orrs	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f003 0303 	and.w	r3, r3, #3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d123      	bne.n	80033e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	08da      	lsrs	r2, r3, #3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3208      	adds	r2, #8
 80033a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	220f      	movs	r2, #15
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	43db      	mvns	r3, r3
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	4013      	ands	r3, r2
 80033be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	691a      	ldr	r2, [r3, #16]
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	08da      	lsrs	r2, r3, #3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	3208      	adds	r2, #8
 80033de:	69b9      	ldr	r1, [r7, #24]
 80033e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	2203      	movs	r2, #3
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	43db      	mvns	r3, r3
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	4013      	ands	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f003 0203 	and.w	r2, r3, #3
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	4313      	orrs	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 80b4 	beq.w	800358e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003426:	2300      	movs	r3, #0
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	4b60      	ldr	r3, [pc, #384]	; (80035ac <HAL_GPIO_Init+0x30c>)
 800342c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342e:	4a5f      	ldr	r2, [pc, #380]	; (80035ac <HAL_GPIO_Init+0x30c>)
 8003430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003434:	6453      	str	r3, [r2, #68]	; 0x44
 8003436:	4b5d      	ldr	r3, [pc, #372]	; (80035ac <HAL_GPIO_Init+0x30c>)
 8003438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003442:	4a5b      	ldr	r2, [pc, #364]	; (80035b0 <HAL_GPIO_Init+0x310>)
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	089b      	lsrs	r3, r3, #2
 8003448:	3302      	adds	r3, #2
 800344a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800344e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	220f      	movs	r2, #15
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	43db      	mvns	r3, r3
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	4013      	ands	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a52      	ldr	r2, [pc, #328]	; (80035b4 <HAL_GPIO_Init+0x314>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d02b      	beq.n	80034c6 <HAL_GPIO_Init+0x226>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a51      	ldr	r2, [pc, #324]	; (80035b8 <HAL_GPIO_Init+0x318>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d025      	beq.n	80034c2 <HAL_GPIO_Init+0x222>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a50      	ldr	r2, [pc, #320]	; (80035bc <HAL_GPIO_Init+0x31c>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d01f      	beq.n	80034be <HAL_GPIO_Init+0x21e>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a4f      	ldr	r2, [pc, #316]	; (80035c0 <HAL_GPIO_Init+0x320>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d019      	beq.n	80034ba <HAL_GPIO_Init+0x21a>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a4e      	ldr	r2, [pc, #312]	; (80035c4 <HAL_GPIO_Init+0x324>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d013      	beq.n	80034b6 <HAL_GPIO_Init+0x216>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a4d      	ldr	r2, [pc, #308]	; (80035c8 <HAL_GPIO_Init+0x328>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d00d      	beq.n	80034b2 <HAL_GPIO_Init+0x212>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a4c      	ldr	r2, [pc, #304]	; (80035cc <HAL_GPIO_Init+0x32c>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d007      	beq.n	80034ae <HAL_GPIO_Init+0x20e>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a4b      	ldr	r2, [pc, #300]	; (80035d0 <HAL_GPIO_Init+0x330>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d101      	bne.n	80034aa <HAL_GPIO_Init+0x20a>
 80034a6:	2307      	movs	r3, #7
 80034a8:	e00e      	b.n	80034c8 <HAL_GPIO_Init+0x228>
 80034aa:	2308      	movs	r3, #8
 80034ac:	e00c      	b.n	80034c8 <HAL_GPIO_Init+0x228>
 80034ae:	2306      	movs	r3, #6
 80034b0:	e00a      	b.n	80034c8 <HAL_GPIO_Init+0x228>
 80034b2:	2305      	movs	r3, #5
 80034b4:	e008      	b.n	80034c8 <HAL_GPIO_Init+0x228>
 80034b6:	2304      	movs	r3, #4
 80034b8:	e006      	b.n	80034c8 <HAL_GPIO_Init+0x228>
 80034ba:	2303      	movs	r3, #3
 80034bc:	e004      	b.n	80034c8 <HAL_GPIO_Init+0x228>
 80034be:	2302      	movs	r3, #2
 80034c0:	e002      	b.n	80034c8 <HAL_GPIO_Init+0x228>
 80034c2:	2301      	movs	r3, #1
 80034c4:	e000      	b.n	80034c8 <HAL_GPIO_Init+0x228>
 80034c6:	2300      	movs	r3, #0
 80034c8:	69fa      	ldr	r2, [r7, #28]
 80034ca:	f002 0203 	and.w	r2, r2, #3
 80034ce:	0092      	lsls	r2, r2, #2
 80034d0:	4093      	lsls	r3, r2
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034d8:	4935      	ldr	r1, [pc, #212]	; (80035b0 <HAL_GPIO_Init+0x310>)
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	089b      	lsrs	r3, r3, #2
 80034de:	3302      	adds	r3, #2
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034e6:	4b3b      	ldr	r3, [pc, #236]	; (80035d4 <HAL_GPIO_Init+0x334>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	43db      	mvns	r3, r3
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4013      	ands	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	4313      	orrs	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800350a:	4a32      	ldr	r2, [pc, #200]	; (80035d4 <HAL_GPIO_Init+0x334>)
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003510:	4b30      	ldr	r3, [pc, #192]	; (80035d4 <HAL_GPIO_Init+0x334>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	43db      	mvns	r3, r3
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	4013      	ands	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d003      	beq.n	8003534 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	4313      	orrs	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003534:	4a27      	ldr	r2, [pc, #156]	; (80035d4 <HAL_GPIO_Init+0x334>)
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800353a:	4b26      	ldr	r3, [pc, #152]	; (80035d4 <HAL_GPIO_Init+0x334>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	43db      	mvns	r3, r3
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	4013      	ands	r3, r2
 8003548:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d003      	beq.n	800355e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	4313      	orrs	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800355e:	4a1d      	ldr	r2, [pc, #116]	; (80035d4 <HAL_GPIO_Init+0x334>)
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003564:	4b1b      	ldr	r3, [pc, #108]	; (80035d4 <HAL_GPIO_Init+0x334>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	43db      	mvns	r3, r3
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	4013      	ands	r3, r2
 8003572:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d003      	beq.n	8003588 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	4313      	orrs	r3, r2
 8003586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003588:	4a12      	ldr	r2, [pc, #72]	; (80035d4 <HAL_GPIO_Init+0x334>)
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	3301      	adds	r3, #1
 8003592:	61fb      	str	r3, [r7, #28]
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	2b0f      	cmp	r3, #15
 8003598:	f67f ae90 	bls.w	80032bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800359c:	bf00      	nop
 800359e:	bf00      	nop
 80035a0:	3724      	adds	r7, #36	; 0x24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	40023800 	.word	0x40023800
 80035b0:	40013800 	.word	0x40013800
 80035b4:	40020000 	.word	0x40020000
 80035b8:	40020400 	.word	0x40020400
 80035bc:	40020800 	.word	0x40020800
 80035c0:	40020c00 	.word	0x40020c00
 80035c4:	40021000 	.word	0x40021000
 80035c8:	40021400 	.word	0x40021400
 80035cc:	40021800 	.word	0x40021800
 80035d0:	40021c00 	.word	0x40021c00
 80035d4:	40013c00 	.word	0x40013c00

080035d8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80035d8:	b480      	push	{r7}
 80035da:	b087      	sub	sp, #28
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80035e6:	2300      	movs	r3, #0
 80035e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035ee:	2300      	movs	r3, #0
 80035f0:	617b      	str	r3, [r7, #20]
 80035f2:	e0cd      	b.n	8003790 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035f4:	2201      	movs	r2, #1
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	4013      	ands	r3, r2
 8003604:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	429a      	cmp	r2, r3
 800360c:	f040 80bd 	bne.w	800378a <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003610:	4a65      	ldr	r2, [pc, #404]	; (80037a8 <HAL_GPIO_DeInit+0x1d0>)
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	089b      	lsrs	r3, r3, #2
 8003616:	3302      	adds	r3, #2
 8003618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800361c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f003 0303 	and.w	r3, r3, #3
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	220f      	movs	r2, #15
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	68ba      	ldr	r2, [r7, #8]
 800362e:	4013      	ands	r3, r2
 8003630:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a5d      	ldr	r2, [pc, #372]	; (80037ac <HAL_GPIO_DeInit+0x1d4>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d02b      	beq.n	8003692 <HAL_GPIO_DeInit+0xba>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a5c      	ldr	r2, [pc, #368]	; (80037b0 <HAL_GPIO_DeInit+0x1d8>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d025      	beq.n	800368e <HAL_GPIO_DeInit+0xb6>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a5b      	ldr	r2, [pc, #364]	; (80037b4 <HAL_GPIO_DeInit+0x1dc>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d01f      	beq.n	800368a <HAL_GPIO_DeInit+0xb2>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a5a      	ldr	r2, [pc, #360]	; (80037b8 <HAL_GPIO_DeInit+0x1e0>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d019      	beq.n	8003686 <HAL_GPIO_DeInit+0xae>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a59      	ldr	r2, [pc, #356]	; (80037bc <HAL_GPIO_DeInit+0x1e4>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d013      	beq.n	8003682 <HAL_GPIO_DeInit+0xaa>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a58      	ldr	r2, [pc, #352]	; (80037c0 <HAL_GPIO_DeInit+0x1e8>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d00d      	beq.n	800367e <HAL_GPIO_DeInit+0xa6>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a57      	ldr	r2, [pc, #348]	; (80037c4 <HAL_GPIO_DeInit+0x1ec>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d007      	beq.n	800367a <HAL_GPIO_DeInit+0xa2>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a56      	ldr	r2, [pc, #344]	; (80037c8 <HAL_GPIO_DeInit+0x1f0>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d101      	bne.n	8003676 <HAL_GPIO_DeInit+0x9e>
 8003672:	2307      	movs	r3, #7
 8003674:	e00e      	b.n	8003694 <HAL_GPIO_DeInit+0xbc>
 8003676:	2308      	movs	r3, #8
 8003678:	e00c      	b.n	8003694 <HAL_GPIO_DeInit+0xbc>
 800367a:	2306      	movs	r3, #6
 800367c:	e00a      	b.n	8003694 <HAL_GPIO_DeInit+0xbc>
 800367e:	2305      	movs	r3, #5
 8003680:	e008      	b.n	8003694 <HAL_GPIO_DeInit+0xbc>
 8003682:	2304      	movs	r3, #4
 8003684:	e006      	b.n	8003694 <HAL_GPIO_DeInit+0xbc>
 8003686:	2303      	movs	r3, #3
 8003688:	e004      	b.n	8003694 <HAL_GPIO_DeInit+0xbc>
 800368a:	2302      	movs	r3, #2
 800368c:	e002      	b.n	8003694 <HAL_GPIO_DeInit+0xbc>
 800368e:	2301      	movs	r3, #1
 8003690:	e000      	b.n	8003694 <HAL_GPIO_DeInit+0xbc>
 8003692:	2300      	movs	r3, #0
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	f002 0203 	and.w	r2, r2, #3
 800369a:	0092      	lsls	r2, r2, #2
 800369c:	4093      	lsls	r3, r2
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d132      	bne.n	800370a <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80036a4:	4b49      	ldr	r3, [pc, #292]	; (80037cc <HAL_GPIO_DeInit+0x1f4>)
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	43db      	mvns	r3, r3
 80036ac:	4947      	ldr	r1, [pc, #284]	; (80037cc <HAL_GPIO_DeInit+0x1f4>)
 80036ae:	4013      	ands	r3, r2
 80036b0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80036b2:	4b46      	ldr	r3, [pc, #280]	; (80037cc <HAL_GPIO_DeInit+0x1f4>)
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	43db      	mvns	r3, r3
 80036ba:	4944      	ldr	r1, [pc, #272]	; (80037cc <HAL_GPIO_DeInit+0x1f4>)
 80036bc:	4013      	ands	r3, r2
 80036be:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80036c0:	4b42      	ldr	r3, [pc, #264]	; (80037cc <HAL_GPIO_DeInit+0x1f4>)
 80036c2:	68da      	ldr	r2, [r3, #12]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	43db      	mvns	r3, r3
 80036c8:	4940      	ldr	r1, [pc, #256]	; (80037cc <HAL_GPIO_DeInit+0x1f4>)
 80036ca:	4013      	ands	r3, r2
 80036cc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80036ce:	4b3f      	ldr	r3, [pc, #252]	; (80037cc <HAL_GPIO_DeInit+0x1f4>)
 80036d0:	689a      	ldr	r2, [r3, #8]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	43db      	mvns	r3, r3
 80036d6:	493d      	ldr	r1, [pc, #244]	; (80037cc <HAL_GPIO_DeInit+0x1f4>)
 80036d8:	4013      	ands	r3, r2
 80036da:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	220f      	movs	r2, #15
 80036e6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ea:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80036ec:	4a2e      	ldr	r2, [pc, #184]	; (80037a8 <HAL_GPIO_DeInit+0x1d0>)
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	089b      	lsrs	r3, r3, #2
 80036f2:	3302      	adds	r3, #2
 80036f4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	43da      	mvns	r2, r3
 80036fc:	482a      	ldr	r0, [pc, #168]	; (80037a8 <HAL_GPIO_DeInit+0x1d0>)
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	089b      	lsrs	r3, r3, #2
 8003702:	400a      	ands	r2, r1
 8003704:	3302      	adds	r3, #2
 8003706:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	2103      	movs	r1, #3
 8003714:	fa01 f303 	lsl.w	r3, r1, r3
 8003718:	43db      	mvns	r3, r3
 800371a:	401a      	ands	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	08da      	lsrs	r2, r3, #3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3208      	adds	r2, #8
 8003728:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f003 0307 	and.w	r3, r3, #7
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	220f      	movs	r2, #15
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	43db      	mvns	r3, r3
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	08d2      	lsrs	r2, r2, #3
 8003740:	4019      	ands	r1, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	3208      	adds	r2, #8
 8003746:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	2103      	movs	r1, #3
 8003754:	fa01 f303 	lsl.w	r3, r1, r3
 8003758:	43db      	mvns	r3, r3
 800375a:	401a      	ands	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	2101      	movs	r1, #1
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	fa01 f303 	lsl.w	r3, r1, r3
 800376c:	43db      	mvns	r3, r3
 800376e:	401a      	ands	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	2103      	movs	r1, #3
 800377e:	fa01 f303 	lsl.w	r3, r1, r3
 8003782:	43db      	mvns	r3, r3
 8003784:	401a      	ands	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	3301      	adds	r3, #1
 800378e:	617b      	str	r3, [r7, #20]
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	2b0f      	cmp	r3, #15
 8003794:	f67f af2e 	bls.w	80035f4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003798:	bf00      	nop
 800379a:	bf00      	nop
 800379c:	371c      	adds	r7, #28
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	40013800 	.word	0x40013800
 80037ac:	40020000 	.word	0x40020000
 80037b0:	40020400 	.word	0x40020400
 80037b4:	40020800 	.word	0x40020800
 80037b8:	40020c00 	.word	0x40020c00
 80037bc:	40021000 	.word	0x40021000
 80037c0:	40021400 	.word	0x40021400
 80037c4:	40021800 	.word	0x40021800
 80037c8:	40021c00 	.word	0x40021c00
 80037cc:	40013c00 	.word	0x40013c00

080037d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	460b      	mov	r3, r1
 80037da:	807b      	strh	r3, [r7, #2]
 80037dc:	4613      	mov	r3, r2
 80037de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037e0:	787b      	ldrb	r3, [r7, #1]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037e6:	887a      	ldrh	r2, [r7, #2]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037ec:	e003      	b.n	80037f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037ee:	887b      	ldrh	r3, [r7, #2]
 80037f0:	041a      	lsls	r2, r3, #16
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	619a      	str	r2, [r3, #24]
}
 80037f6:	bf00      	nop
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003802:	b480      	push	{r7}
 8003804:	b085      	sub	sp, #20
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
 800380a:	460b      	mov	r3, r1
 800380c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003814:	887a      	ldrh	r2, [r7, #2]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	4013      	ands	r3, r2
 800381a:	041a      	lsls	r2, r3, #16
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	43d9      	mvns	r1, r3
 8003820:	887b      	ldrh	r3, [r7, #2]
 8003822:	400b      	ands	r3, r1
 8003824:	431a      	orrs	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	619a      	str	r2, [r3, #24]
}
 800382a:	bf00      	nop
 800382c:	3714      	adds	r7, #20
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
	...

08003838 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	4603      	mov	r3, r0
 8003840:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003842:	4b08      	ldr	r3, [pc, #32]	; (8003864 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003844:	695a      	ldr	r2, [r3, #20]
 8003846:	88fb      	ldrh	r3, [r7, #6]
 8003848:	4013      	ands	r3, r2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d006      	beq.n	800385c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800384e:	4a05      	ldr	r2, [pc, #20]	; (8003864 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003850:	88fb      	ldrh	r3, [r7, #6]
 8003852:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003854:	88fb      	ldrh	r3, [r7, #6]
 8003856:	4618      	mov	r0, r3
 8003858:	f7fe fa22 	bl	8001ca0 <HAL_GPIO_EXTI_Callback>
  }
}
 800385c:	bf00      	nop
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40013c00 	.word	0x40013c00

08003868 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800386a:	b08f      	sub	sp, #60	; 0x3c
 800386c:	af0a      	add	r7, sp, #40	; 0x28
 800386e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e054      	b.n	8003924 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	d106      	bne.n	800389a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f00c fc7d 	bl	8010194 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2203      	movs	r2, #3
 800389e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d102      	bne.n	80038b4 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f005 f887 	bl	80089cc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	603b      	str	r3, [r7, #0]
 80038c4:	687e      	ldr	r6, [r7, #4]
 80038c6:	466d      	mov	r5, sp
 80038c8:	f106 0410 	add.w	r4, r6, #16
 80038cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80038dc:	1d33      	adds	r3, r6, #4
 80038de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038e0:	6838      	ldr	r0, [r7, #0]
 80038e2:	f005 f801 	bl	80088e8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2101      	movs	r1, #1
 80038ec:	4618      	mov	r0, r3
 80038ee:	f005 f87e 	bl	80089ee <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	603b      	str	r3, [r7, #0]
 80038f8:	687e      	ldr	r6, [r7, #4]
 80038fa:	466d      	mov	r5, sp
 80038fc:	f106 0410 	add.w	r4, r6, #16
 8003900:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003902:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003904:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003906:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003908:	e894 0003 	ldmia.w	r4, {r0, r1}
 800390c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003910:	1d33      	adds	r3, r6, #4
 8003912:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003914:	6838      	ldr	r0, [r7, #0]
 8003916:	f005 fa07 	bl	8008d28 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800392c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800392c:	b590      	push	{r4, r7, lr}
 800392e:	b089      	sub	sp, #36	; 0x24
 8003930:	af04      	add	r7, sp, #16
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	4608      	mov	r0, r1
 8003936:	4611      	mov	r1, r2
 8003938:	461a      	mov	r2, r3
 800393a:	4603      	mov	r3, r0
 800393c:	70fb      	strb	r3, [r7, #3]
 800393e:	460b      	mov	r3, r1
 8003940:	70bb      	strb	r3, [r7, #2]
 8003942:	4613      	mov	r3, r2
 8003944:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800394c:	2b01      	cmp	r3, #1
 800394e:	d101      	bne.n	8003954 <HAL_HCD_HC_Init+0x28>
 8003950:	2302      	movs	r3, #2
 8003952:	e076      	b.n	8003a42 <HAL_HCD_HC_Init+0x116>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800395c:	78fb      	ldrb	r3, [r7, #3]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	212c      	movs	r1, #44	; 0x2c
 8003962:	fb01 f303 	mul.w	r3, r1, r3
 8003966:	4413      	add	r3, r2
 8003968:	333d      	adds	r3, #61	; 0x3d
 800396a:	2200      	movs	r2, #0
 800396c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800396e:	78fb      	ldrb	r3, [r7, #3]
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	212c      	movs	r1, #44	; 0x2c
 8003974:	fb01 f303 	mul.w	r3, r1, r3
 8003978:	4413      	add	r3, r2
 800397a:	3338      	adds	r3, #56	; 0x38
 800397c:	787a      	ldrb	r2, [r7, #1]
 800397e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003980:	78fb      	ldrb	r3, [r7, #3]
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	212c      	movs	r1, #44	; 0x2c
 8003986:	fb01 f303 	mul.w	r3, r1, r3
 800398a:	4413      	add	r3, r2
 800398c:	3340      	adds	r3, #64	; 0x40
 800398e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003990:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003992:	78fb      	ldrb	r3, [r7, #3]
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	212c      	movs	r1, #44	; 0x2c
 8003998:	fb01 f303 	mul.w	r3, r1, r3
 800399c:	4413      	add	r3, r2
 800399e:	3339      	adds	r3, #57	; 0x39
 80039a0:	78fa      	ldrb	r2, [r7, #3]
 80039a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80039a4:	78fb      	ldrb	r3, [r7, #3]
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	212c      	movs	r1, #44	; 0x2c
 80039aa:	fb01 f303 	mul.w	r3, r1, r3
 80039ae:	4413      	add	r3, r2
 80039b0:	333f      	adds	r3, #63	; 0x3f
 80039b2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80039b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80039b8:	78fb      	ldrb	r3, [r7, #3]
 80039ba:	78ba      	ldrb	r2, [r7, #2]
 80039bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039c0:	b2d0      	uxtb	r0, r2
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	212c      	movs	r1, #44	; 0x2c
 80039c6:	fb01 f303 	mul.w	r3, r1, r3
 80039ca:	4413      	add	r3, r2
 80039cc:	333a      	adds	r3, #58	; 0x3a
 80039ce:	4602      	mov	r2, r0
 80039d0:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80039d2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	da09      	bge.n	80039ee <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80039da:	78fb      	ldrb	r3, [r7, #3]
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	212c      	movs	r1, #44	; 0x2c
 80039e0:	fb01 f303 	mul.w	r3, r1, r3
 80039e4:	4413      	add	r3, r2
 80039e6:	333b      	adds	r3, #59	; 0x3b
 80039e8:	2201      	movs	r2, #1
 80039ea:	701a      	strb	r2, [r3, #0]
 80039ec:	e008      	b.n	8003a00 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80039ee:	78fb      	ldrb	r3, [r7, #3]
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	212c      	movs	r1, #44	; 0x2c
 80039f4:	fb01 f303 	mul.w	r3, r1, r3
 80039f8:	4413      	add	r3, r2
 80039fa:	333b      	adds	r3, #59	; 0x3b
 80039fc:	2200      	movs	r2, #0
 80039fe:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003a00:	78fb      	ldrb	r3, [r7, #3]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	212c      	movs	r1, #44	; 0x2c
 8003a06:	fb01 f303 	mul.w	r3, r1, r3
 8003a0a:	4413      	add	r3, r2
 8003a0c:	333c      	adds	r3, #60	; 0x3c
 8003a0e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003a12:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6818      	ldr	r0, [r3, #0]
 8003a18:	787c      	ldrb	r4, [r7, #1]
 8003a1a:	78ba      	ldrb	r2, [r7, #2]
 8003a1c:	78f9      	ldrb	r1, [r7, #3]
 8003a1e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003a20:	9302      	str	r3, [sp, #8]
 8003a22:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003a26:	9301      	str	r3, [sp, #4]
 8003a28:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	4623      	mov	r3, r4
 8003a30:	f005 fb00 	bl	8009034 <USB_HC_Init>
 8003a34:	4603      	mov	r3, r0
 8003a36:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3714      	adds	r7, #20
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd90      	pop	{r4, r7, pc}

08003a4a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b084      	sub	sp, #16
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
 8003a52:	460b      	mov	r3, r1
 8003a54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003a56:	2300      	movs	r3, #0
 8003a58:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <HAL_HCD_HC_Halt+0x1e>
 8003a64:	2302      	movs	r3, #2
 8003a66:	e00f      	b.n	8003a88 <HAL_HCD_HC_Halt+0x3e>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	78fa      	ldrb	r2, [r7, #3]
 8003a76:	4611      	mov	r1, r2
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f005 fd50 	bl	800951e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	4608      	mov	r0, r1
 8003a9a:	4611      	mov	r1, r2
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	70fb      	strb	r3, [r7, #3]
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	70bb      	strb	r3, [r7, #2]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003aaa:	78fb      	ldrb	r3, [r7, #3]
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	212c      	movs	r1, #44	; 0x2c
 8003ab0:	fb01 f303 	mul.w	r3, r1, r3
 8003ab4:	4413      	add	r3, r2
 8003ab6:	333b      	adds	r3, #59	; 0x3b
 8003ab8:	78ba      	ldrb	r2, [r7, #2]
 8003aba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003abc:	78fb      	ldrb	r3, [r7, #3]
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	212c      	movs	r1, #44	; 0x2c
 8003ac2:	fb01 f303 	mul.w	r3, r1, r3
 8003ac6:	4413      	add	r3, r2
 8003ac8:	333f      	adds	r3, #63	; 0x3f
 8003aca:	787a      	ldrb	r2, [r7, #1]
 8003acc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003ace:	7c3b      	ldrb	r3, [r7, #16]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d112      	bne.n	8003afa <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003ad4:	78fb      	ldrb	r3, [r7, #3]
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	212c      	movs	r1, #44	; 0x2c
 8003ada:	fb01 f303 	mul.w	r3, r1, r3
 8003ade:	4413      	add	r3, r2
 8003ae0:	3342      	adds	r3, #66	; 0x42
 8003ae2:	2203      	movs	r2, #3
 8003ae4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003ae6:	78fb      	ldrb	r3, [r7, #3]
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	212c      	movs	r1, #44	; 0x2c
 8003aec:	fb01 f303 	mul.w	r3, r1, r3
 8003af0:	4413      	add	r3, r2
 8003af2:	333d      	adds	r3, #61	; 0x3d
 8003af4:	7f3a      	ldrb	r2, [r7, #28]
 8003af6:	701a      	strb	r2, [r3, #0]
 8003af8:	e008      	b.n	8003b0c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003afa:	78fb      	ldrb	r3, [r7, #3]
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	212c      	movs	r1, #44	; 0x2c
 8003b00:	fb01 f303 	mul.w	r3, r1, r3
 8003b04:	4413      	add	r3, r2
 8003b06:	3342      	adds	r3, #66	; 0x42
 8003b08:	2202      	movs	r2, #2
 8003b0a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003b0c:	787b      	ldrb	r3, [r7, #1]
 8003b0e:	2b03      	cmp	r3, #3
 8003b10:	f200 80c6 	bhi.w	8003ca0 <HAL_HCD_HC_SubmitRequest+0x210>
 8003b14:	a201      	add	r2, pc, #4	; (adr r2, 8003b1c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1a:	bf00      	nop
 8003b1c:	08003b2d 	.word	0x08003b2d
 8003b20:	08003c8d 	.word	0x08003c8d
 8003b24:	08003b91 	.word	0x08003b91
 8003b28:	08003c0f 	.word	0x08003c0f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003b2c:	7c3b      	ldrb	r3, [r7, #16]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	f040 80b8 	bne.w	8003ca4 <HAL_HCD_HC_SubmitRequest+0x214>
 8003b34:	78bb      	ldrb	r3, [r7, #2]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f040 80b4 	bne.w	8003ca4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003b3c:	8b3b      	ldrh	r3, [r7, #24]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d108      	bne.n	8003b54 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003b42:	78fb      	ldrb	r3, [r7, #3]
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	212c      	movs	r1, #44	; 0x2c
 8003b48:	fb01 f303 	mul.w	r3, r1, r3
 8003b4c:	4413      	add	r3, r2
 8003b4e:	3355      	adds	r3, #85	; 0x55
 8003b50:	2201      	movs	r2, #1
 8003b52:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003b54:	78fb      	ldrb	r3, [r7, #3]
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	212c      	movs	r1, #44	; 0x2c
 8003b5a:	fb01 f303 	mul.w	r3, r1, r3
 8003b5e:	4413      	add	r3, r2
 8003b60:	3355      	adds	r3, #85	; 0x55
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d109      	bne.n	8003b7c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b68:	78fb      	ldrb	r3, [r7, #3]
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	212c      	movs	r1, #44	; 0x2c
 8003b6e:	fb01 f303 	mul.w	r3, r1, r3
 8003b72:	4413      	add	r3, r2
 8003b74:	3342      	adds	r3, #66	; 0x42
 8003b76:	2200      	movs	r2, #0
 8003b78:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003b7a:	e093      	b.n	8003ca4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b7c:	78fb      	ldrb	r3, [r7, #3]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	212c      	movs	r1, #44	; 0x2c
 8003b82:	fb01 f303 	mul.w	r3, r1, r3
 8003b86:	4413      	add	r3, r2
 8003b88:	3342      	adds	r3, #66	; 0x42
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	701a      	strb	r2, [r3, #0]
      break;
 8003b8e:	e089      	b.n	8003ca4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003b90:	78bb      	ldrb	r3, [r7, #2]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d11d      	bne.n	8003bd2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003b96:	78fb      	ldrb	r3, [r7, #3]
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	212c      	movs	r1, #44	; 0x2c
 8003b9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ba0:	4413      	add	r3, r2
 8003ba2:	3355      	adds	r3, #85	; 0x55
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d109      	bne.n	8003bbe <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003baa:	78fb      	ldrb	r3, [r7, #3]
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	212c      	movs	r1, #44	; 0x2c
 8003bb0:	fb01 f303 	mul.w	r3, r1, r3
 8003bb4:	4413      	add	r3, r2
 8003bb6:	3342      	adds	r3, #66	; 0x42
 8003bb8:	2200      	movs	r2, #0
 8003bba:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003bbc:	e073      	b.n	8003ca6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003bbe:	78fb      	ldrb	r3, [r7, #3]
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	212c      	movs	r1, #44	; 0x2c
 8003bc4:	fb01 f303 	mul.w	r3, r1, r3
 8003bc8:	4413      	add	r3, r2
 8003bca:	3342      	adds	r3, #66	; 0x42
 8003bcc:	2202      	movs	r2, #2
 8003bce:	701a      	strb	r2, [r3, #0]
      break;
 8003bd0:	e069      	b.n	8003ca6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003bd2:	78fb      	ldrb	r3, [r7, #3]
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	212c      	movs	r1, #44	; 0x2c
 8003bd8:	fb01 f303 	mul.w	r3, r1, r3
 8003bdc:	4413      	add	r3, r2
 8003bde:	3354      	adds	r3, #84	; 0x54
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d109      	bne.n	8003bfa <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003be6:	78fb      	ldrb	r3, [r7, #3]
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	212c      	movs	r1, #44	; 0x2c
 8003bec:	fb01 f303 	mul.w	r3, r1, r3
 8003bf0:	4413      	add	r3, r2
 8003bf2:	3342      	adds	r3, #66	; 0x42
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	701a      	strb	r2, [r3, #0]
      break;
 8003bf8:	e055      	b.n	8003ca6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003bfa:	78fb      	ldrb	r3, [r7, #3]
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	212c      	movs	r1, #44	; 0x2c
 8003c00:	fb01 f303 	mul.w	r3, r1, r3
 8003c04:	4413      	add	r3, r2
 8003c06:	3342      	adds	r3, #66	; 0x42
 8003c08:	2202      	movs	r2, #2
 8003c0a:	701a      	strb	r2, [r3, #0]
      break;
 8003c0c:	e04b      	b.n	8003ca6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003c0e:	78bb      	ldrb	r3, [r7, #2]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d11d      	bne.n	8003c50 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003c14:	78fb      	ldrb	r3, [r7, #3]
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	212c      	movs	r1, #44	; 0x2c
 8003c1a:	fb01 f303 	mul.w	r3, r1, r3
 8003c1e:	4413      	add	r3, r2
 8003c20:	3355      	adds	r3, #85	; 0x55
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d109      	bne.n	8003c3c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c28:	78fb      	ldrb	r3, [r7, #3]
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	212c      	movs	r1, #44	; 0x2c
 8003c2e:	fb01 f303 	mul.w	r3, r1, r3
 8003c32:	4413      	add	r3, r2
 8003c34:	3342      	adds	r3, #66	; 0x42
 8003c36:	2200      	movs	r2, #0
 8003c38:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003c3a:	e034      	b.n	8003ca6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c3c:	78fb      	ldrb	r3, [r7, #3]
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	212c      	movs	r1, #44	; 0x2c
 8003c42:	fb01 f303 	mul.w	r3, r1, r3
 8003c46:	4413      	add	r3, r2
 8003c48:	3342      	adds	r3, #66	; 0x42
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	701a      	strb	r2, [r3, #0]
      break;
 8003c4e:	e02a      	b.n	8003ca6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003c50:	78fb      	ldrb	r3, [r7, #3]
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	212c      	movs	r1, #44	; 0x2c
 8003c56:	fb01 f303 	mul.w	r3, r1, r3
 8003c5a:	4413      	add	r3, r2
 8003c5c:	3354      	adds	r3, #84	; 0x54
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d109      	bne.n	8003c78 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c64:	78fb      	ldrb	r3, [r7, #3]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	212c      	movs	r1, #44	; 0x2c
 8003c6a:	fb01 f303 	mul.w	r3, r1, r3
 8003c6e:	4413      	add	r3, r2
 8003c70:	3342      	adds	r3, #66	; 0x42
 8003c72:	2200      	movs	r2, #0
 8003c74:	701a      	strb	r2, [r3, #0]
      break;
 8003c76:	e016      	b.n	8003ca6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c78:	78fb      	ldrb	r3, [r7, #3]
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	212c      	movs	r1, #44	; 0x2c
 8003c7e:	fb01 f303 	mul.w	r3, r1, r3
 8003c82:	4413      	add	r3, r2
 8003c84:	3342      	adds	r3, #66	; 0x42
 8003c86:	2202      	movs	r2, #2
 8003c88:	701a      	strb	r2, [r3, #0]
      break;
 8003c8a:	e00c      	b.n	8003ca6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c8c:	78fb      	ldrb	r3, [r7, #3]
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	212c      	movs	r1, #44	; 0x2c
 8003c92:	fb01 f303 	mul.w	r3, r1, r3
 8003c96:	4413      	add	r3, r2
 8003c98:	3342      	adds	r3, #66	; 0x42
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	701a      	strb	r2, [r3, #0]
      break;
 8003c9e:	e002      	b.n	8003ca6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003ca0:	bf00      	nop
 8003ca2:	e000      	b.n	8003ca6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003ca4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003ca6:	78fb      	ldrb	r3, [r7, #3]
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	212c      	movs	r1, #44	; 0x2c
 8003cac:	fb01 f303 	mul.w	r3, r1, r3
 8003cb0:	4413      	add	r3, r2
 8003cb2:	3344      	adds	r3, #68	; 0x44
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003cb8:	78fb      	ldrb	r3, [r7, #3]
 8003cba:	8b3a      	ldrh	r2, [r7, #24]
 8003cbc:	6879      	ldr	r1, [r7, #4]
 8003cbe:	202c      	movs	r0, #44	; 0x2c
 8003cc0:	fb00 f303 	mul.w	r3, r0, r3
 8003cc4:	440b      	add	r3, r1
 8003cc6:	334c      	adds	r3, #76	; 0x4c
 8003cc8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003cca:	78fb      	ldrb	r3, [r7, #3]
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	212c      	movs	r1, #44	; 0x2c
 8003cd0:	fb01 f303 	mul.w	r3, r1, r3
 8003cd4:	4413      	add	r3, r2
 8003cd6:	3360      	adds	r3, #96	; 0x60
 8003cd8:	2200      	movs	r2, #0
 8003cda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003cdc:	78fb      	ldrb	r3, [r7, #3]
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	212c      	movs	r1, #44	; 0x2c
 8003ce2:	fb01 f303 	mul.w	r3, r1, r3
 8003ce6:	4413      	add	r3, r2
 8003ce8:	3350      	adds	r3, #80	; 0x50
 8003cea:	2200      	movs	r2, #0
 8003cec:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003cee:	78fb      	ldrb	r3, [r7, #3]
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	212c      	movs	r1, #44	; 0x2c
 8003cf4:	fb01 f303 	mul.w	r3, r1, r3
 8003cf8:	4413      	add	r3, r2
 8003cfa:	3339      	adds	r3, #57	; 0x39
 8003cfc:	78fa      	ldrb	r2, [r7, #3]
 8003cfe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003d00:	78fb      	ldrb	r3, [r7, #3]
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	212c      	movs	r1, #44	; 0x2c
 8003d06:	fb01 f303 	mul.w	r3, r1, r3
 8003d0a:	4413      	add	r3, r2
 8003d0c:	3361      	adds	r3, #97	; 0x61
 8003d0e:	2200      	movs	r2, #0
 8003d10:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6818      	ldr	r0, [r3, #0]
 8003d16:	78fb      	ldrb	r3, [r7, #3]
 8003d18:	222c      	movs	r2, #44	; 0x2c
 8003d1a:	fb02 f303 	mul.w	r3, r2, r3
 8003d1e:	3338      	adds	r3, #56	; 0x38
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	18d1      	adds	r1, r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	f005 faa4 	bl	8009278 <USB_HC_StartXfer>
 8003d30:	4603      	mov	r3, r0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop

08003d3c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f004 ffa5 	bl	8008ca2 <USB_GetMode>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	f040 80f6 	bne.w	8003f4c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f004 ff89 	bl	8008c7c <USB_ReadInterrupts>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 80ec 	beq.w	8003f4a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f004 ff80 	bl	8008c7c <USB_ReadInterrupts>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d86:	d104      	bne.n	8003d92 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003d90:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f004 ff70 	bl	8008c7c <USB_ReadInterrupts>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003da2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003da6:	d104      	bne.n	8003db2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003db0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f004 ff60 	bl	8008c7c <USB_ReadInterrupts>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003dc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dc6:	d104      	bne.n	8003dd2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003dd0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f004 ff50 	bl	8008c7c <USB_ReadInterrupts>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d103      	bne.n	8003dee <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2202      	movs	r2, #2
 8003dec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f004 ff42 	bl	8008c7c <USB_ReadInterrupts>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e02:	d11c      	bne.n	8003e3e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003e0c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10f      	bne.n	8003e3e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003e1e:	2110      	movs	r1, #16
 8003e20:	6938      	ldr	r0, [r7, #16]
 8003e22:	f004 fe31 	bl	8008a88 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003e26:	6938      	ldr	r0, [r7, #16]
 8003e28:	f004 fe62 	bl	8008af0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2101      	movs	r1, #1
 8003e32:	4618      	mov	r0, r3
 8003e34:	f005 f838 	bl	8008ea8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f00c fa39 	bl	80102b0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f004 ff1a 	bl	8008c7c <USB_ReadInterrupts>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e52:	d102      	bne.n	8003e5a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f001 f89e 	bl	8004f96 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f004 ff0c 	bl	8008c7c <USB_ReadInterrupts>
 8003e64:	4603      	mov	r3, r0
 8003e66:	f003 0308 	and.w	r3, r3, #8
 8003e6a:	2b08      	cmp	r3, #8
 8003e6c:	d106      	bne.n	8003e7c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f00c fa02 	bl	8010278 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2208      	movs	r2, #8
 8003e7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f004 fefb 	bl	8008c7c <USB_ReadInterrupts>
 8003e86:	4603      	mov	r3, r0
 8003e88:	f003 0310 	and.w	r3, r3, #16
 8003e8c:	2b10      	cmp	r3, #16
 8003e8e:	d101      	bne.n	8003e94 <HAL_HCD_IRQHandler+0x158>
 8003e90:	2301      	movs	r3, #1
 8003e92:	e000      	b.n	8003e96 <HAL_HCD_IRQHandler+0x15a>
 8003e94:	2300      	movs	r3, #0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d012      	beq.n	8003ec0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	699a      	ldr	r2, [r3, #24]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0210 	bic.w	r2, r2, #16
 8003ea8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 ffa1 	bl	8004df2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699a      	ldr	r2, [r3, #24]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0210 	orr.w	r2, r2, #16
 8003ebe:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f004 fed9 	bl	8008c7c <USB_ReadInterrupts>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ed4:	d13a      	bne.n	8003f4c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f005 fb0e 	bl	80094fc <USB_HC_ReadInterrupt>
 8003ee0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	617b      	str	r3, [r7, #20]
 8003ee6:	e025      	b.n	8003f34 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f003 030f 	and.w	r3, r3, #15
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d018      	beq.n	8003f2e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f12:	d106      	bne.n	8003f22 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	4619      	mov	r1, r3
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f8ab 	bl	8004076 <HCD_HC_IN_IRQHandler>
 8003f20:	e005      	b.n	8003f2e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	4619      	mov	r1, r3
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 fbf9 	bl	8004720 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	3301      	adds	r3, #1
 8003f32:	617b      	str	r3, [r7, #20]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d3d4      	bcc.n	8003ee8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f46:	615a      	str	r2, [r3, #20]
 8003f48:	e000      	b.n	8003f4c <HAL_HCD_IRQHandler+0x210>
      return;
 8003f4a:	bf00      	nop
    }
  }
}
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b082      	sub	sp, #8
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d101      	bne.n	8003f68 <HAL_HCD_Start+0x16>
 8003f64:	2302      	movs	r3, #2
 8003f66:	e013      	b.n	8003f90 <HAL_HCD_Start+0x3e>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2101      	movs	r1, #1
 8003f76:	4618      	mov	r0, r3
 8003f78:	f004 fffa 	bl	8008f70 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f004 fd12 	bl	80089aa <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3708      	adds	r7, #8
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d101      	bne.n	8003fae <HAL_HCD_Stop+0x16>
 8003faa:	2302      	movs	r3, #2
 8003fac:	e00d      	b.n	8003fca <HAL_HCD_Stop+0x32>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f005 fbe8 	bl	8009790 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b082      	sub	sp, #8
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f004 ff9c 	bl	8008f1c <USB_ResetPort>
 8003fe4:	4603      	mov	r3, r0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3708      	adds	r7, #8
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b083      	sub	sp, #12
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003ffa:	78fb      	ldrb	r3, [r7, #3]
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	212c      	movs	r1, #44	; 0x2c
 8004000:	fb01 f303 	mul.w	r3, r1, r3
 8004004:	4413      	add	r3, r2
 8004006:	3360      	adds	r3, #96	; 0x60
 8004008:	781b      	ldrb	r3, [r3, #0]
}
 800400a:	4618      	mov	r0, r3
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004016:	b480      	push	{r7}
 8004018:	b083      	sub	sp, #12
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
 800401e:	460b      	mov	r3, r1
 8004020:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004022:	78fb      	ldrb	r3, [r7, #3]
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	212c      	movs	r1, #44	; 0x2c
 8004028:	fb01 f303 	mul.w	r3, r1, r3
 800402c:	4413      	add	r3, r2
 800402e:	3350      	adds	r3, #80	; 0x50
 8004030:	681b      	ldr	r3, [r3, #0]
}
 8004032:	4618      	mov	r0, r3
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b082      	sub	sp, #8
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	f004 ffe0 	bl	8009010 <USB_GetCurrentFrame>
 8004050:	4603      	mov	r3, r0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b082      	sub	sp, #8
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4618      	mov	r0, r3
 8004068:	f004 ffbb 	bl	8008fe2 <USB_GetHostSpeed>
 800406c:	4603      	mov	r3, r0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b086      	sub	sp, #24
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
 800407e:	460b      	mov	r3, r1
 8004080:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800408c:	78fb      	ldrb	r3, [r7, #3]
 800408e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	015a      	lsls	r2, r3, #5
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	4413      	add	r3, r2
 8004098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 0304 	and.w	r3, r3, #4
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	d11a      	bne.n	80040dc <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	015a      	lsls	r2, r3, #5
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040b2:	461a      	mov	r2, r3
 80040b4:	2304      	movs	r3, #4
 80040b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	212c      	movs	r1, #44	; 0x2c
 80040be:	fb01 f303 	mul.w	r3, r1, r3
 80040c2:	4413      	add	r3, r2
 80040c4:	3361      	adds	r3, #97	; 0x61
 80040c6:	2206      	movs	r2, #6
 80040c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	b2d2      	uxtb	r2, r2
 80040d2:	4611      	mov	r1, r2
 80040d4:	4618      	mov	r0, r3
 80040d6:	f005 fa22 	bl	800951e <USB_HC_Halt>
 80040da:	e0af      	b.n	800423c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040f2:	d11b      	bne.n	800412c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	015a      	lsls	r2, r3, #5
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	4413      	add	r3, r2
 80040fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004100:	461a      	mov	r2, r3
 8004102:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004106:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	212c      	movs	r1, #44	; 0x2c
 800410e:	fb01 f303 	mul.w	r3, r1, r3
 8004112:	4413      	add	r3, r2
 8004114:	3361      	adds	r3, #97	; 0x61
 8004116:	2207      	movs	r2, #7
 8004118:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	b2d2      	uxtb	r2, r2
 8004122:	4611      	mov	r1, r2
 8004124:	4618      	mov	r0, r3
 8004126:	f005 f9fa 	bl	800951e <USB_HC_Halt>
 800412a:	e087      	b.n	800423c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	015a      	lsls	r2, r3, #5
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	4413      	add	r3, r2
 8004134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 0320 	and.w	r3, r3, #32
 800413e:	2b20      	cmp	r3, #32
 8004140:	d109      	bne.n	8004156 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	015a      	lsls	r2, r3, #5
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	4413      	add	r3, r2
 800414a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800414e:	461a      	mov	r2, r3
 8004150:	2320      	movs	r3, #32
 8004152:	6093      	str	r3, [r2, #8]
 8004154:	e072      	b.n	800423c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	015a      	lsls	r2, r3, #5
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	4413      	add	r3, r2
 800415e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f003 0308 	and.w	r3, r3, #8
 8004168:	2b08      	cmp	r3, #8
 800416a:	d11a      	bne.n	80041a2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	4413      	add	r3, r2
 8004174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004178:	461a      	mov	r2, r3
 800417a:	2308      	movs	r3, #8
 800417c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	212c      	movs	r1, #44	; 0x2c
 8004184:	fb01 f303 	mul.w	r3, r1, r3
 8004188:	4413      	add	r3, r2
 800418a:	3361      	adds	r3, #97	; 0x61
 800418c:	2205      	movs	r2, #5
 800418e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	b2d2      	uxtb	r2, r2
 8004198:	4611      	mov	r1, r2
 800419a:	4618      	mov	r0, r3
 800419c:	f005 f9bf 	bl	800951e <USB_HC_Halt>
 80041a0:	e04c      	b.n	800423c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	015a      	lsls	r2, r3, #5
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	4413      	add	r3, r2
 80041aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041b8:	d11b      	bne.n	80041f2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c6:	461a      	mov	r2, r3
 80041c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	212c      	movs	r1, #44	; 0x2c
 80041d4:	fb01 f303 	mul.w	r3, r1, r3
 80041d8:	4413      	add	r3, r2
 80041da:	3361      	adds	r3, #97	; 0x61
 80041dc:	2208      	movs	r2, #8
 80041de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	b2d2      	uxtb	r2, r2
 80041e8:	4611      	mov	r1, r2
 80041ea:	4618      	mov	r0, r3
 80041ec:	f005 f997 	bl	800951e <USB_HC_Halt>
 80041f0:	e024      	b.n	800423c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	015a      	lsls	r2, r3, #5
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	4413      	add	r3, r2
 80041fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004204:	2b80      	cmp	r3, #128	; 0x80
 8004206:	d119      	bne.n	800423c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	015a      	lsls	r2, r3, #5
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	4413      	add	r3, r2
 8004210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004214:	461a      	mov	r2, r3
 8004216:	2380      	movs	r3, #128	; 0x80
 8004218:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	212c      	movs	r1, #44	; 0x2c
 8004220:	fb01 f303 	mul.w	r3, r1, r3
 8004224:	4413      	add	r3, r2
 8004226:	3361      	adds	r3, #97	; 0x61
 8004228:	2206      	movs	r2, #6
 800422a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	b2d2      	uxtb	r2, r2
 8004234:	4611      	mov	r1, r2
 8004236:	4618      	mov	r0, r3
 8004238:	f005 f971 	bl	800951e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	015a      	lsls	r2, r3, #5
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	4413      	add	r3, r2
 8004244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800424e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004252:	d112      	bne.n	800427a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	b2d2      	uxtb	r2, r2
 800425c:	4611      	mov	r1, r2
 800425e:	4618      	mov	r0, r3
 8004260:	f005 f95d 	bl	800951e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	4413      	add	r3, r2
 800426c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004270:	461a      	mov	r2, r3
 8004272:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004276:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004278:	e24e      	b.n	8004718 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	015a      	lsls	r2, r3, #5
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	4413      	add	r3, r2
 8004282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b01      	cmp	r3, #1
 800428e:	f040 80df 	bne.w	8004450 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d019      	beq.n	80042ce <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	212c      	movs	r1, #44	; 0x2c
 80042a0:	fb01 f303 	mul.w	r3, r1, r3
 80042a4:	4413      	add	r3, r2
 80042a6:	3348      	adds	r3, #72	; 0x48
 80042a8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	0159      	lsls	r1, r3, #5
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	440b      	add	r3, r1
 80042b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80042bc:	1ad2      	subs	r2, r2, r3
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	202c      	movs	r0, #44	; 0x2c
 80042c4:	fb00 f303 	mul.w	r3, r0, r3
 80042c8:	440b      	add	r3, r1
 80042ca:	3350      	adds	r3, #80	; 0x50
 80042cc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	212c      	movs	r1, #44	; 0x2c
 80042d4:	fb01 f303 	mul.w	r3, r1, r3
 80042d8:	4413      	add	r3, r2
 80042da:	3361      	adds	r3, #97	; 0x61
 80042dc:	2201      	movs	r2, #1
 80042de:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	212c      	movs	r1, #44	; 0x2c
 80042e6:	fb01 f303 	mul.w	r3, r1, r3
 80042ea:	4413      	add	r3, r2
 80042ec:	335c      	adds	r3, #92	; 0x5c
 80042ee:	2200      	movs	r2, #0
 80042f0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	015a      	lsls	r2, r3, #5
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	4413      	add	r3, r2
 80042fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042fe:	461a      	mov	r2, r3
 8004300:	2301      	movs	r3, #1
 8004302:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	212c      	movs	r1, #44	; 0x2c
 800430a:	fb01 f303 	mul.w	r3, r1, r3
 800430e:	4413      	add	r3, r2
 8004310:	333f      	adds	r3, #63	; 0x3f
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d009      	beq.n	800432c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	212c      	movs	r1, #44	; 0x2c
 800431e:	fb01 f303 	mul.w	r3, r1, r3
 8004322:	4413      	add	r3, r2
 8004324:	333f      	adds	r3, #63	; 0x3f
 8004326:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004328:	2b02      	cmp	r3, #2
 800432a:	d111      	bne.n	8004350 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	b2d2      	uxtb	r2, r2
 8004334:	4611      	mov	r1, r2
 8004336:	4618      	mov	r0, r3
 8004338:	f005 f8f1 	bl	800951e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	015a      	lsls	r2, r3, #5
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	4413      	add	r3, r2
 8004344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004348:	461a      	mov	r2, r3
 800434a:	2310      	movs	r3, #16
 800434c:	6093      	str	r3, [r2, #8]
 800434e:	e03a      	b.n	80043c6 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	212c      	movs	r1, #44	; 0x2c
 8004356:	fb01 f303 	mul.w	r3, r1, r3
 800435a:	4413      	add	r3, r2
 800435c:	333f      	adds	r3, #63	; 0x3f
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	2b03      	cmp	r3, #3
 8004362:	d009      	beq.n	8004378 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	212c      	movs	r1, #44	; 0x2c
 800436a:	fb01 f303 	mul.w	r3, r1, r3
 800436e:	4413      	add	r3, r2
 8004370:	333f      	adds	r3, #63	; 0x3f
 8004372:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004374:	2b01      	cmp	r3, #1
 8004376:	d126      	bne.n	80043c6 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	015a      	lsls	r2, r3, #5
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	4413      	add	r3, r2
 8004380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	0151      	lsls	r1, r2, #5
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	440a      	add	r2, r1
 800438e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004392:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004396:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	212c      	movs	r1, #44	; 0x2c
 800439e:	fb01 f303 	mul.w	r3, r1, r3
 80043a2:	4413      	add	r3, r2
 80043a4:	3360      	adds	r3, #96	; 0x60
 80043a6:	2201      	movs	r2, #1
 80043a8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	b2d9      	uxtb	r1, r3
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	202c      	movs	r0, #44	; 0x2c
 80043b4:	fb00 f303 	mul.w	r3, r0, r3
 80043b8:	4413      	add	r3, r2
 80043ba:	3360      	adds	r3, #96	; 0x60
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	461a      	mov	r2, r3
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f00b ff83 	bl	80102cc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d12b      	bne.n	8004426 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	212c      	movs	r1, #44	; 0x2c
 80043d4:	fb01 f303 	mul.w	r3, r1, r3
 80043d8:	4413      	add	r3, r2
 80043da:	3348      	adds	r3, #72	; 0x48
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6879      	ldr	r1, [r7, #4]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	202c      	movs	r0, #44	; 0x2c
 80043e4:	fb00 f202 	mul.w	r2, r0, r2
 80043e8:	440a      	add	r2, r1
 80043ea:	3240      	adds	r2, #64	; 0x40
 80043ec:	8812      	ldrh	r2, [r2, #0]
 80043ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f000 818e 	beq.w	8004718 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	212c      	movs	r1, #44	; 0x2c
 8004402:	fb01 f303 	mul.w	r3, r1, r3
 8004406:	4413      	add	r3, r2
 8004408:	3354      	adds	r3, #84	; 0x54
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	f083 0301 	eor.w	r3, r3, #1
 8004410:	b2d8      	uxtb	r0, r3
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	212c      	movs	r1, #44	; 0x2c
 8004418:	fb01 f303 	mul.w	r3, r1, r3
 800441c:	4413      	add	r3, r2
 800441e:	3354      	adds	r3, #84	; 0x54
 8004420:	4602      	mov	r2, r0
 8004422:	701a      	strb	r2, [r3, #0]
}
 8004424:	e178      	b.n	8004718 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	212c      	movs	r1, #44	; 0x2c
 800442c:	fb01 f303 	mul.w	r3, r1, r3
 8004430:	4413      	add	r3, r2
 8004432:	3354      	adds	r3, #84	; 0x54
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	f083 0301 	eor.w	r3, r3, #1
 800443a:	b2d8      	uxtb	r0, r3
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	212c      	movs	r1, #44	; 0x2c
 8004442:	fb01 f303 	mul.w	r3, r1, r3
 8004446:	4413      	add	r3, r2
 8004448:	3354      	adds	r3, #84	; 0x54
 800444a:	4602      	mov	r2, r0
 800444c:	701a      	strb	r2, [r3, #0]
}
 800444e:	e163      	b.n	8004718 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	015a      	lsls	r2, r3, #5
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	4413      	add	r3, r2
 8004458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b02      	cmp	r3, #2
 8004464:	f040 80f6 	bne.w	8004654 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	212c      	movs	r1, #44	; 0x2c
 800446e:	fb01 f303 	mul.w	r3, r1, r3
 8004472:	4413      	add	r3, r2
 8004474:	3361      	adds	r3, #97	; 0x61
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d109      	bne.n	8004490 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	212c      	movs	r1, #44	; 0x2c
 8004482:	fb01 f303 	mul.w	r3, r1, r3
 8004486:	4413      	add	r3, r2
 8004488:	3360      	adds	r3, #96	; 0x60
 800448a:	2201      	movs	r2, #1
 800448c:	701a      	strb	r2, [r3, #0]
 800448e:	e0c9      	b.n	8004624 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	212c      	movs	r1, #44	; 0x2c
 8004496:	fb01 f303 	mul.w	r3, r1, r3
 800449a:	4413      	add	r3, r2
 800449c:	3361      	adds	r3, #97	; 0x61
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	2b05      	cmp	r3, #5
 80044a2:	d109      	bne.n	80044b8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	212c      	movs	r1, #44	; 0x2c
 80044aa:	fb01 f303 	mul.w	r3, r1, r3
 80044ae:	4413      	add	r3, r2
 80044b0:	3360      	adds	r3, #96	; 0x60
 80044b2:	2205      	movs	r2, #5
 80044b4:	701a      	strb	r2, [r3, #0]
 80044b6:	e0b5      	b.n	8004624 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	212c      	movs	r1, #44	; 0x2c
 80044be:	fb01 f303 	mul.w	r3, r1, r3
 80044c2:	4413      	add	r3, r2
 80044c4:	3361      	adds	r3, #97	; 0x61
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	2b06      	cmp	r3, #6
 80044ca:	d009      	beq.n	80044e0 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	212c      	movs	r1, #44	; 0x2c
 80044d2:	fb01 f303 	mul.w	r3, r1, r3
 80044d6:	4413      	add	r3, r2
 80044d8:	3361      	adds	r3, #97	; 0x61
 80044da:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80044dc:	2b08      	cmp	r3, #8
 80044de:	d150      	bne.n	8004582 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	212c      	movs	r1, #44	; 0x2c
 80044e6:	fb01 f303 	mul.w	r3, r1, r3
 80044ea:	4413      	add	r3, r2
 80044ec:	335c      	adds	r3, #92	; 0x5c
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	1c5a      	adds	r2, r3, #1
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	202c      	movs	r0, #44	; 0x2c
 80044f8:	fb00 f303 	mul.w	r3, r0, r3
 80044fc:	440b      	add	r3, r1
 80044fe:	335c      	adds	r3, #92	; 0x5c
 8004500:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	212c      	movs	r1, #44	; 0x2c
 8004508:	fb01 f303 	mul.w	r3, r1, r3
 800450c:	4413      	add	r3, r2
 800450e:	335c      	adds	r3, #92	; 0x5c
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2b02      	cmp	r3, #2
 8004514:	d912      	bls.n	800453c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	212c      	movs	r1, #44	; 0x2c
 800451c:	fb01 f303 	mul.w	r3, r1, r3
 8004520:	4413      	add	r3, r2
 8004522:	335c      	adds	r3, #92	; 0x5c
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	212c      	movs	r1, #44	; 0x2c
 800452e:	fb01 f303 	mul.w	r3, r1, r3
 8004532:	4413      	add	r3, r2
 8004534:	3360      	adds	r3, #96	; 0x60
 8004536:	2204      	movs	r2, #4
 8004538:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800453a:	e073      	b.n	8004624 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	212c      	movs	r1, #44	; 0x2c
 8004542:	fb01 f303 	mul.w	r3, r1, r3
 8004546:	4413      	add	r3, r2
 8004548:	3360      	adds	r3, #96	; 0x60
 800454a:	2202      	movs	r2, #2
 800454c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	015a      	lsls	r2, r3, #5
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	4413      	add	r3, r2
 8004556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004564:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800456c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	015a      	lsls	r2, r3, #5
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	4413      	add	r3, r2
 8004576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800457a:	461a      	mov	r2, r3
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004580:	e050      	b.n	8004624 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	212c      	movs	r1, #44	; 0x2c
 8004588:	fb01 f303 	mul.w	r3, r1, r3
 800458c:	4413      	add	r3, r2
 800458e:	3361      	adds	r3, #97	; 0x61
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	2b03      	cmp	r3, #3
 8004594:	d122      	bne.n	80045dc <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	212c      	movs	r1, #44	; 0x2c
 800459c:	fb01 f303 	mul.w	r3, r1, r3
 80045a0:	4413      	add	r3, r2
 80045a2:	3360      	adds	r3, #96	; 0x60
 80045a4:	2202      	movs	r2, #2
 80045a6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	015a      	lsls	r2, r3, #5
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	4413      	add	r3, r2
 80045b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045be:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045c6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045d4:	461a      	mov	r2, r3
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	6013      	str	r3, [r2, #0]
 80045da:	e023      	b.n	8004624 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	212c      	movs	r1, #44	; 0x2c
 80045e2:	fb01 f303 	mul.w	r3, r1, r3
 80045e6:	4413      	add	r3, r2
 80045e8:	3361      	adds	r3, #97	; 0x61
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	2b07      	cmp	r3, #7
 80045ee:	d119      	bne.n	8004624 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	212c      	movs	r1, #44	; 0x2c
 80045f6:	fb01 f303 	mul.w	r3, r1, r3
 80045fa:	4413      	add	r3, r2
 80045fc:	335c      	adds	r3, #92	; 0x5c
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	1c5a      	adds	r2, r3, #1
 8004602:	6879      	ldr	r1, [r7, #4]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	202c      	movs	r0, #44	; 0x2c
 8004608:	fb00 f303 	mul.w	r3, r0, r3
 800460c:	440b      	add	r3, r1
 800460e:	335c      	adds	r3, #92	; 0x5c
 8004610:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	212c      	movs	r1, #44	; 0x2c
 8004618:	fb01 f303 	mul.w	r3, r1, r3
 800461c:	4413      	add	r3, r2
 800461e:	3360      	adds	r3, #96	; 0x60
 8004620:	2204      	movs	r2, #4
 8004622:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	4413      	add	r3, r2
 800462c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004630:	461a      	mov	r2, r3
 8004632:	2302      	movs	r3, #2
 8004634:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	b2d9      	uxtb	r1, r3
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	202c      	movs	r0, #44	; 0x2c
 8004640:	fb00 f303 	mul.w	r3, r0, r3
 8004644:	4413      	add	r3, r2
 8004646:	3360      	adds	r3, #96	; 0x60
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	461a      	mov	r2, r3
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f00b fe3d 	bl	80102cc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004652:	e061      	b.n	8004718 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	015a      	lsls	r2, r3, #5
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	4413      	add	r3, r2
 800465c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f003 0310 	and.w	r3, r3, #16
 8004666:	2b10      	cmp	r3, #16
 8004668:	d156      	bne.n	8004718 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	212c      	movs	r1, #44	; 0x2c
 8004670:	fb01 f303 	mul.w	r3, r1, r3
 8004674:	4413      	add	r3, r2
 8004676:	333f      	adds	r3, #63	; 0x3f
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	2b03      	cmp	r3, #3
 800467c:	d111      	bne.n	80046a2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	212c      	movs	r1, #44	; 0x2c
 8004684:	fb01 f303 	mul.w	r3, r1, r3
 8004688:	4413      	add	r3, r2
 800468a:	335c      	adds	r3, #92	; 0x5c
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	b2d2      	uxtb	r2, r2
 8004698:	4611      	mov	r1, r2
 800469a:	4618      	mov	r0, r3
 800469c:	f004 ff3f 	bl	800951e <USB_HC_Halt>
 80046a0:	e031      	b.n	8004706 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	212c      	movs	r1, #44	; 0x2c
 80046a8:	fb01 f303 	mul.w	r3, r1, r3
 80046ac:	4413      	add	r3, r2
 80046ae:	333f      	adds	r3, #63	; 0x3f
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d009      	beq.n	80046ca <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	212c      	movs	r1, #44	; 0x2c
 80046bc:	fb01 f303 	mul.w	r3, r1, r3
 80046c0:	4413      	add	r3, r2
 80046c2:	333f      	adds	r3, #63	; 0x3f
 80046c4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d11d      	bne.n	8004706 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	212c      	movs	r1, #44	; 0x2c
 80046d0:	fb01 f303 	mul.w	r3, r1, r3
 80046d4:	4413      	add	r3, r2
 80046d6:	335c      	adds	r3, #92	; 0x5c
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d110      	bne.n	8004706 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	212c      	movs	r1, #44	; 0x2c
 80046ea:	fb01 f303 	mul.w	r3, r1, r3
 80046ee:	4413      	add	r3, r2
 80046f0:	3361      	adds	r3, #97	; 0x61
 80046f2:	2203      	movs	r2, #3
 80046f4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	b2d2      	uxtb	r2, r2
 80046fe:	4611      	mov	r1, r2
 8004700:	4618      	mov	r0, r3
 8004702:	f004 ff0c 	bl	800951e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	4413      	add	r3, r2
 800470e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004712:	461a      	mov	r2, r3
 8004714:	2310      	movs	r3, #16
 8004716:	6093      	str	r3, [r2, #8]
}
 8004718:	bf00      	nop
 800471a:	3718      	adds	r7, #24
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b088      	sub	sp, #32
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	460b      	mov	r3, r1
 800472a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004736:	78fb      	ldrb	r3, [r7, #3]
 8004738:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	015a      	lsls	r2, r3, #5
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	4413      	add	r3, r2
 8004742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f003 0304 	and.w	r3, r3, #4
 800474c:	2b04      	cmp	r3, #4
 800474e:	d11a      	bne.n	8004786 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	015a      	lsls	r2, r3, #5
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	4413      	add	r3, r2
 8004758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800475c:	461a      	mov	r2, r3
 800475e:	2304      	movs	r3, #4
 8004760:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	212c      	movs	r1, #44	; 0x2c
 8004768:	fb01 f303 	mul.w	r3, r1, r3
 800476c:	4413      	add	r3, r2
 800476e:	3361      	adds	r3, #97	; 0x61
 8004770:	2206      	movs	r2, #6
 8004772:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	b2d2      	uxtb	r2, r2
 800477c:	4611      	mov	r1, r2
 800477e:	4618      	mov	r0, r3
 8004780:	f004 fecd 	bl	800951e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004784:	e331      	b.n	8004dea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	015a      	lsls	r2, r3, #5
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	4413      	add	r3, r2
 800478e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f003 0320 	and.w	r3, r3, #32
 8004798:	2b20      	cmp	r3, #32
 800479a:	d12e      	bne.n	80047fa <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	015a      	lsls	r2, r3, #5
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	4413      	add	r3, r2
 80047a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047a8:	461a      	mov	r2, r3
 80047aa:	2320      	movs	r3, #32
 80047ac:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	212c      	movs	r1, #44	; 0x2c
 80047b4:	fb01 f303 	mul.w	r3, r1, r3
 80047b8:	4413      	add	r3, r2
 80047ba:	333d      	adds	r3, #61	; 0x3d
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	f040 8313 	bne.w	8004dea <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	212c      	movs	r1, #44	; 0x2c
 80047ca:	fb01 f303 	mul.w	r3, r1, r3
 80047ce:	4413      	add	r3, r2
 80047d0:	333d      	adds	r3, #61	; 0x3d
 80047d2:	2200      	movs	r2, #0
 80047d4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	212c      	movs	r1, #44	; 0x2c
 80047dc:	fb01 f303 	mul.w	r3, r1, r3
 80047e0:	4413      	add	r3, r2
 80047e2:	3360      	adds	r3, #96	; 0x60
 80047e4:	2202      	movs	r2, #2
 80047e6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	b2d2      	uxtb	r2, r2
 80047f0:	4611      	mov	r1, r2
 80047f2:	4618      	mov	r0, r3
 80047f4:	f004 fe93 	bl	800951e <USB_HC_Halt>
}
 80047f8:	e2f7      	b.n	8004dea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	015a      	lsls	r2, r3, #5
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	4413      	add	r3, r2
 8004802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800480c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004810:	d112      	bne.n	8004838 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	015a      	lsls	r2, r3, #5
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	4413      	add	r3, r2
 800481a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800481e:	461a      	mov	r2, r3
 8004820:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004824:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	b2d2      	uxtb	r2, r2
 800482e:	4611      	mov	r1, r2
 8004830:	4618      	mov	r0, r3
 8004832:	f004 fe74 	bl	800951e <USB_HC_Halt>
}
 8004836:	e2d8      	b.n	8004dea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	015a      	lsls	r2, r3, #5
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	4413      	add	r3, r2
 8004840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b01      	cmp	r3, #1
 800484c:	d140      	bne.n	80048d0 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	212c      	movs	r1, #44	; 0x2c
 8004854:	fb01 f303 	mul.w	r3, r1, r3
 8004858:	4413      	add	r3, r2
 800485a:	335c      	adds	r3, #92	; 0x5c
 800485c:	2200      	movs	r2, #0
 800485e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	015a      	lsls	r2, r3, #5
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	4413      	add	r3, r2
 8004868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004872:	2b40      	cmp	r3, #64	; 0x40
 8004874:	d111      	bne.n	800489a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	212c      	movs	r1, #44	; 0x2c
 800487c:	fb01 f303 	mul.w	r3, r1, r3
 8004880:	4413      	add	r3, r2
 8004882:	333d      	adds	r3, #61	; 0x3d
 8004884:	2201      	movs	r2, #1
 8004886:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	015a      	lsls	r2, r3, #5
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	4413      	add	r3, r2
 8004890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004894:	461a      	mov	r2, r3
 8004896:	2340      	movs	r3, #64	; 0x40
 8004898:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	015a      	lsls	r2, r3, #5
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	4413      	add	r3, r2
 80048a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048a6:	461a      	mov	r2, r3
 80048a8:	2301      	movs	r3, #1
 80048aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	212c      	movs	r1, #44	; 0x2c
 80048b2:	fb01 f303 	mul.w	r3, r1, r3
 80048b6:	4413      	add	r3, r2
 80048b8:	3361      	adds	r3, #97	; 0x61
 80048ba:	2201      	movs	r2, #1
 80048bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	b2d2      	uxtb	r2, r2
 80048c6:	4611      	mov	r1, r2
 80048c8:	4618      	mov	r0, r3
 80048ca:	f004 fe28 	bl	800951e <USB_HC_Halt>
}
 80048ce:	e28c      	b.n	8004dea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	015a      	lsls	r2, r3, #5
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	4413      	add	r3, r2
 80048d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e2:	2b40      	cmp	r3, #64	; 0x40
 80048e4:	d12c      	bne.n	8004940 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	212c      	movs	r1, #44	; 0x2c
 80048ec:	fb01 f303 	mul.w	r3, r1, r3
 80048f0:	4413      	add	r3, r2
 80048f2:	3361      	adds	r3, #97	; 0x61
 80048f4:	2204      	movs	r2, #4
 80048f6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	212c      	movs	r1, #44	; 0x2c
 80048fe:	fb01 f303 	mul.w	r3, r1, r3
 8004902:	4413      	add	r3, r2
 8004904:	333d      	adds	r3, #61	; 0x3d
 8004906:	2201      	movs	r2, #1
 8004908:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	212c      	movs	r1, #44	; 0x2c
 8004910:	fb01 f303 	mul.w	r3, r1, r3
 8004914:	4413      	add	r3, r2
 8004916:	335c      	adds	r3, #92	; 0x5c
 8004918:	2200      	movs	r2, #0
 800491a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	b2d2      	uxtb	r2, r2
 8004924:	4611      	mov	r1, r2
 8004926:	4618      	mov	r0, r3
 8004928:	f004 fdf9 	bl	800951e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	4413      	add	r3, r2
 8004934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004938:	461a      	mov	r2, r3
 800493a:	2340      	movs	r3, #64	; 0x40
 800493c:	6093      	str	r3, [r2, #8]
}
 800493e:	e254      	b.n	8004dea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	015a      	lsls	r2, r3, #5
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	4413      	add	r3, r2
 8004948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f003 0308 	and.w	r3, r3, #8
 8004952:	2b08      	cmp	r3, #8
 8004954:	d11a      	bne.n	800498c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	015a      	lsls	r2, r3, #5
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	4413      	add	r3, r2
 800495e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004962:	461a      	mov	r2, r3
 8004964:	2308      	movs	r3, #8
 8004966:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	212c      	movs	r1, #44	; 0x2c
 800496e:	fb01 f303 	mul.w	r3, r1, r3
 8004972:	4413      	add	r3, r2
 8004974:	3361      	adds	r3, #97	; 0x61
 8004976:	2205      	movs	r2, #5
 8004978:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	b2d2      	uxtb	r2, r2
 8004982:	4611      	mov	r1, r2
 8004984:	4618      	mov	r0, r3
 8004986:	f004 fdca 	bl	800951e <USB_HC_Halt>
}
 800498a:	e22e      	b.n	8004dea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	015a      	lsls	r2, r3, #5
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	4413      	add	r3, r2
 8004994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f003 0310 	and.w	r3, r3, #16
 800499e:	2b10      	cmp	r3, #16
 80049a0:	d140      	bne.n	8004a24 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	212c      	movs	r1, #44	; 0x2c
 80049a8:	fb01 f303 	mul.w	r3, r1, r3
 80049ac:	4413      	add	r3, r2
 80049ae:	335c      	adds	r3, #92	; 0x5c
 80049b0:	2200      	movs	r2, #0
 80049b2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	212c      	movs	r1, #44	; 0x2c
 80049ba:	fb01 f303 	mul.w	r3, r1, r3
 80049be:	4413      	add	r3, r2
 80049c0:	3361      	adds	r3, #97	; 0x61
 80049c2:	2203      	movs	r2, #3
 80049c4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	212c      	movs	r1, #44	; 0x2c
 80049cc:	fb01 f303 	mul.w	r3, r1, r3
 80049d0:	4413      	add	r3, r2
 80049d2:	333d      	adds	r3, #61	; 0x3d
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d112      	bne.n	8004a00 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	212c      	movs	r1, #44	; 0x2c
 80049e0:	fb01 f303 	mul.w	r3, r1, r3
 80049e4:	4413      	add	r3, r2
 80049e6:	333c      	adds	r3, #60	; 0x3c
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d108      	bne.n	8004a00 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	212c      	movs	r1, #44	; 0x2c
 80049f4:	fb01 f303 	mul.w	r3, r1, r3
 80049f8:	4413      	add	r3, r2
 80049fa:	333d      	adds	r3, #61	; 0x3d
 80049fc:	2201      	movs	r2, #1
 80049fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	b2d2      	uxtb	r2, r2
 8004a08:	4611      	mov	r1, r2
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f004 fd87 	bl	800951e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	015a      	lsls	r2, r3, #5
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	4413      	add	r3, r2
 8004a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	2310      	movs	r3, #16
 8004a20:	6093      	str	r3, [r2, #8]
}
 8004a22:	e1e2      	b.n	8004dea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	015a      	lsls	r2, r3, #5
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a36:	2b80      	cmp	r3, #128	; 0x80
 8004a38:	d164      	bne.n	8004b04 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d111      	bne.n	8004a66 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	212c      	movs	r1, #44	; 0x2c
 8004a48:	fb01 f303 	mul.w	r3, r1, r3
 8004a4c:	4413      	add	r3, r2
 8004a4e:	3361      	adds	r3, #97	; 0x61
 8004a50:	2206      	movs	r2, #6
 8004a52:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	b2d2      	uxtb	r2, r2
 8004a5c:	4611      	mov	r1, r2
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f004 fd5d 	bl	800951e <USB_HC_Halt>
 8004a64:	e044      	b.n	8004af0 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	212c      	movs	r1, #44	; 0x2c
 8004a6c:	fb01 f303 	mul.w	r3, r1, r3
 8004a70:	4413      	add	r3, r2
 8004a72:	335c      	adds	r3, #92	; 0x5c
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	1c5a      	adds	r2, r3, #1
 8004a78:	6879      	ldr	r1, [r7, #4]
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	202c      	movs	r0, #44	; 0x2c
 8004a7e:	fb00 f303 	mul.w	r3, r0, r3
 8004a82:	440b      	add	r3, r1
 8004a84:	335c      	adds	r3, #92	; 0x5c
 8004a86:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	212c      	movs	r1, #44	; 0x2c
 8004a8e:	fb01 f303 	mul.w	r3, r1, r3
 8004a92:	4413      	add	r3, r2
 8004a94:	335c      	adds	r3, #92	; 0x5c
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d920      	bls.n	8004ade <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	212c      	movs	r1, #44	; 0x2c
 8004aa2:	fb01 f303 	mul.w	r3, r1, r3
 8004aa6:	4413      	add	r3, r2
 8004aa8:	335c      	adds	r3, #92	; 0x5c
 8004aaa:	2200      	movs	r2, #0
 8004aac:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	212c      	movs	r1, #44	; 0x2c
 8004ab4:	fb01 f303 	mul.w	r3, r1, r3
 8004ab8:	4413      	add	r3, r2
 8004aba:	3360      	adds	r3, #96	; 0x60
 8004abc:	2204      	movs	r2, #4
 8004abe:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	b2d9      	uxtb	r1, r3
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	202c      	movs	r0, #44	; 0x2c
 8004aca:	fb00 f303 	mul.w	r3, r0, r3
 8004ace:	4413      	add	r3, r2
 8004ad0:	3360      	adds	r3, #96	; 0x60
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f00b fbf8 	bl	80102cc <HAL_HCD_HC_NotifyURBChange_Callback>
 8004adc:	e008      	b.n	8004af0 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	212c      	movs	r1, #44	; 0x2c
 8004ae4:	fb01 f303 	mul.w	r3, r1, r3
 8004ae8:	4413      	add	r3, r2
 8004aea:	3360      	adds	r3, #96	; 0x60
 8004aec:	2202      	movs	r2, #2
 8004aee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004afc:	461a      	mov	r2, r3
 8004afe:	2380      	movs	r3, #128	; 0x80
 8004b00:	6093      	str	r3, [r2, #8]
}
 8004b02:	e172      	b.n	8004dea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b1a:	d11b      	bne.n	8004b54 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	212c      	movs	r1, #44	; 0x2c
 8004b22:	fb01 f303 	mul.w	r3, r1, r3
 8004b26:	4413      	add	r3, r2
 8004b28:	3361      	adds	r3, #97	; 0x61
 8004b2a:	2208      	movs	r2, #8
 8004b2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	b2d2      	uxtb	r2, r2
 8004b36:	4611      	mov	r1, r2
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f004 fcf0 	bl	800951e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	015a      	lsls	r2, r3, #5
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	4413      	add	r3, r2
 8004b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b50:	6093      	str	r3, [r2, #8]
}
 8004b52:	e14a      	b.n	8004dea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	f040 813f 	bne.w	8004dea <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	212c      	movs	r1, #44	; 0x2c
 8004b72:	fb01 f303 	mul.w	r3, r1, r3
 8004b76:	4413      	add	r3, r2
 8004b78:	3361      	adds	r3, #97	; 0x61
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d17d      	bne.n	8004c7c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	212c      	movs	r1, #44	; 0x2c
 8004b86:	fb01 f303 	mul.w	r3, r1, r3
 8004b8a:	4413      	add	r3, r2
 8004b8c:	3360      	adds	r3, #96	; 0x60
 8004b8e:	2201      	movs	r2, #1
 8004b90:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	212c      	movs	r1, #44	; 0x2c
 8004b98:	fb01 f303 	mul.w	r3, r1, r3
 8004b9c:	4413      	add	r3, r2
 8004b9e:	333f      	adds	r3, #63	; 0x3f
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d00a      	beq.n	8004bbc <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	212c      	movs	r1, #44	; 0x2c
 8004bac:	fb01 f303 	mul.w	r3, r1, r3
 8004bb0:	4413      	add	r3, r2
 8004bb2:	333f      	adds	r3, #63	; 0x3f
 8004bb4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004bb6:	2b03      	cmp	r3, #3
 8004bb8:	f040 8100 	bne.w	8004dbc <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d113      	bne.n	8004bec <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	212c      	movs	r1, #44	; 0x2c
 8004bca:	fb01 f303 	mul.w	r3, r1, r3
 8004bce:	4413      	add	r3, r2
 8004bd0:	3355      	adds	r3, #85	; 0x55
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	f083 0301 	eor.w	r3, r3, #1
 8004bd8:	b2d8      	uxtb	r0, r3
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	212c      	movs	r1, #44	; 0x2c
 8004be0:	fb01 f303 	mul.w	r3, r1, r3
 8004be4:	4413      	add	r3, r2
 8004be6:	3355      	adds	r3, #85	; 0x55
 8004be8:	4602      	mov	r2, r0
 8004bea:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	f040 80e3 	bne.w	8004dbc <HCD_HC_OUT_IRQHandler+0x69c>
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	212c      	movs	r1, #44	; 0x2c
 8004bfc:	fb01 f303 	mul.w	r3, r1, r3
 8004c00:	4413      	add	r3, r2
 8004c02:	334c      	adds	r3, #76	; 0x4c
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f000 80d8 	beq.w	8004dbc <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	212c      	movs	r1, #44	; 0x2c
 8004c12:	fb01 f303 	mul.w	r3, r1, r3
 8004c16:	4413      	add	r3, r2
 8004c18:	334c      	adds	r3, #76	; 0x4c
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6879      	ldr	r1, [r7, #4]
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	202c      	movs	r0, #44	; 0x2c
 8004c22:	fb00 f202 	mul.w	r2, r0, r2
 8004c26:	440a      	add	r2, r1
 8004c28:	3240      	adds	r2, #64	; 0x40
 8004c2a:	8812      	ldrh	r2, [r2, #0]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	6879      	ldr	r1, [r7, #4]
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	202c      	movs	r0, #44	; 0x2c
 8004c36:	fb00 f202 	mul.w	r2, r0, r2
 8004c3a:	440a      	add	r2, r1
 8004c3c:	3240      	adds	r2, #64	; 0x40
 8004c3e:	8812      	ldrh	r2, [r2, #0]
 8004c40:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c44:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 80b5 	beq.w	8004dbc <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	212c      	movs	r1, #44	; 0x2c
 8004c58:	fb01 f303 	mul.w	r3, r1, r3
 8004c5c:	4413      	add	r3, r2
 8004c5e:	3355      	adds	r3, #85	; 0x55
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	f083 0301 	eor.w	r3, r3, #1
 8004c66:	b2d8      	uxtb	r0, r3
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	212c      	movs	r1, #44	; 0x2c
 8004c6e:	fb01 f303 	mul.w	r3, r1, r3
 8004c72:	4413      	add	r3, r2
 8004c74:	3355      	adds	r3, #85	; 0x55
 8004c76:	4602      	mov	r2, r0
 8004c78:	701a      	strb	r2, [r3, #0]
 8004c7a:	e09f      	b.n	8004dbc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	212c      	movs	r1, #44	; 0x2c
 8004c82:	fb01 f303 	mul.w	r3, r1, r3
 8004c86:	4413      	add	r3, r2
 8004c88:	3361      	adds	r3, #97	; 0x61
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	2b03      	cmp	r3, #3
 8004c8e:	d109      	bne.n	8004ca4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	212c      	movs	r1, #44	; 0x2c
 8004c96:	fb01 f303 	mul.w	r3, r1, r3
 8004c9a:	4413      	add	r3, r2
 8004c9c:	3360      	adds	r3, #96	; 0x60
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	701a      	strb	r2, [r3, #0]
 8004ca2:	e08b      	b.n	8004dbc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	212c      	movs	r1, #44	; 0x2c
 8004caa:	fb01 f303 	mul.w	r3, r1, r3
 8004cae:	4413      	add	r3, r2
 8004cb0:	3361      	adds	r3, #97	; 0x61
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	2b04      	cmp	r3, #4
 8004cb6:	d109      	bne.n	8004ccc <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	212c      	movs	r1, #44	; 0x2c
 8004cbe:	fb01 f303 	mul.w	r3, r1, r3
 8004cc2:	4413      	add	r3, r2
 8004cc4:	3360      	adds	r3, #96	; 0x60
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	701a      	strb	r2, [r3, #0]
 8004cca:	e077      	b.n	8004dbc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	212c      	movs	r1, #44	; 0x2c
 8004cd2:	fb01 f303 	mul.w	r3, r1, r3
 8004cd6:	4413      	add	r3, r2
 8004cd8:	3361      	adds	r3, #97	; 0x61
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	2b05      	cmp	r3, #5
 8004cde:	d109      	bne.n	8004cf4 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	212c      	movs	r1, #44	; 0x2c
 8004ce6:	fb01 f303 	mul.w	r3, r1, r3
 8004cea:	4413      	add	r3, r2
 8004cec:	3360      	adds	r3, #96	; 0x60
 8004cee:	2205      	movs	r2, #5
 8004cf0:	701a      	strb	r2, [r3, #0]
 8004cf2:	e063      	b.n	8004dbc <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	212c      	movs	r1, #44	; 0x2c
 8004cfa:	fb01 f303 	mul.w	r3, r1, r3
 8004cfe:	4413      	add	r3, r2
 8004d00:	3361      	adds	r3, #97	; 0x61
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	2b06      	cmp	r3, #6
 8004d06:	d009      	beq.n	8004d1c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	212c      	movs	r1, #44	; 0x2c
 8004d0e:	fb01 f303 	mul.w	r3, r1, r3
 8004d12:	4413      	add	r3, r2
 8004d14:	3361      	adds	r3, #97	; 0x61
 8004d16:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004d18:	2b08      	cmp	r3, #8
 8004d1a:	d14f      	bne.n	8004dbc <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	212c      	movs	r1, #44	; 0x2c
 8004d22:	fb01 f303 	mul.w	r3, r1, r3
 8004d26:	4413      	add	r3, r2
 8004d28:	335c      	adds	r3, #92	; 0x5c
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	1c5a      	adds	r2, r3, #1
 8004d2e:	6879      	ldr	r1, [r7, #4]
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	202c      	movs	r0, #44	; 0x2c
 8004d34:	fb00 f303 	mul.w	r3, r0, r3
 8004d38:	440b      	add	r3, r1
 8004d3a:	335c      	adds	r3, #92	; 0x5c
 8004d3c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	212c      	movs	r1, #44	; 0x2c
 8004d44:	fb01 f303 	mul.w	r3, r1, r3
 8004d48:	4413      	add	r3, r2
 8004d4a:	335c      	adds	r3, #92	; 0x5c
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d912      	bls.n	8004d78 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	212c      	movs	r1, #44	; 0x2c
 8004d58:	fb01 f303 	mul.w	r3, r1, r3
 8004d5c:	4413      	add	r3, r2
 8004d5e:	335c      	adds	r3, #92	; 0x5c
 8004d60:	2200      	movs	r2, #0
 8004d62:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	212c      	movs	r1, #44	; 0x2c
 8004d6a:	fb01 f303 	mul.w	r3, r1, r3
 8004d6e:	4413      	add	r3, r2
 8004d70:	3360      	adds	r3, #96	; 0x60
 8004d72:	2204      	movs	r2, #4
 8004d74:	701a      	strb	r2, [r3, #0]
 8004d76:	e021      	b.n	8004dbc <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	212c      	movs	r1, #44	; 0x2c
 8004d7e:	fb01 f303 	mul.w	r3, r1, r3
 8004d82:	4413      	add	r3, r2
 8004d84:	3360      	adds	r3, #96	; 0x60
 8004d86:	2202      	movs	r2, #2
 8004d88:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	015a      	lsls	r2, r3, #5
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	4413      	add	r3, r2
 8004d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004da0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004da8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	015a      	lsls	r2, r3, #5
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	4413      	add	r3, r2
 8004db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004db6:	461a      	mov	r2, r3
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc8:	461a      	mov	r2, r3
 8004dca:	2302      	movs	r3, #2
 8004dcc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	b2d9      	uxtb	r1, r3
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	202c      	movs	r0, #44	; 0x2c
 8004dd8:	fb00 f303 	mul.w	r3, r0, r3
 8004ddc:	4413      	add	r3, r2
 8004dde:	3360      	adds	r3, #96	; 0x60
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	461a      	mov	r2, r3
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f00b fa71 	bl	80102cc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004dea:	bf00      	nop
 8004dec:	3720      	adds	r7, #32
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b08a      	sub	sp, #40	; 0x28
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	f003 030f 	and.w	r3, r3, #15
 8004e12:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	0c5b      	lsrs	r3, r3, #17
 8004e18:	f003 030f 	and.w	r3, r3, #15
 8004e1c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	091b      	lsrs	r3, r3, #4
 8004e22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e26:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d004      	beq.n	8004e38 <HCD_RXQLVL_IRQHandler+0x46>
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	2b05      	cmp	r3, #5
 8004e32:	f000 80a9 	beq.w	8004f88 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004e36:	e0aa      	b.n	8004f8e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 80a6 	beq.w	8004f8c <HCD_RXQLVL_IRQHandler+0x19a>
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	212c      	movs	r1, #44	; 0x2c
 8004e46:	fb01 f303 	mul.w	r3, r1, r3
 8004e4a:	4413      	add	r3, r2
 8004e4c:	3344      	adds	r3, #68	; 0x44
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f000 809b 	beq.w	8004f8c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	212c      	movs	r1, #44	; 0x2c
 8004e5c:	fb01 f303 	mul.w	r3, r1, r3
 8004e60:	4413      	add	r3, r2
 8004e62:	3350      	adds	r3, #80	; 0x50
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	441a      	add	r2, r3
 8004e6a:	6879      	ldr	r1, [r7, #4]
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	202c      	movs	r0, #44	; 0x2c
 8004e70:	fb00 f303 	mul.w	r3, r0, r3
 8004e74:	440b      	add	r3, r1
 8004e76:	334c      	adds	r3, #76	; 0x4c
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d87a      	bhi.n	8004f74 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6818      	ldr	r0, [r3, #0]
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	212c      	movs	r1, #44	; 0x2c
 8004e88:	fb01 f303 	mul.w	r3, r1, r3
 8004e8c:	4413      	add	r3, r2
 8004e8e:	3344      	adds	r3, #68	; 0x44
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	b292      	uxth	r2, r2
 8004e96:	4619      	mov	r1, r3
 8004e98:	f003 fe98 	bl	8008bcc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	212c      	movs	r1, #44	; 0x2c
 8004ea2:	fb01 f303 	mul.w	r3, r1, r3
 8004ea6:	4413      	add	r3, r2
 8004ea8:	3344      	adds	r3, #68	; 0x44
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	441a      	add	r2, r3
 8004eb0:	6879      	ldr	r1, [r7, #4]
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	202c      	movs	r0, #44	; 0x2c
 8004eb6:	fb00 f303 	mul.w	r3, r0, r3
 8004eba:	440b      	add	r3, r1
 8004ebc:	3344      	adds	r3, #68	; 0x44
 8004ebe:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	212c      	movs	r1, #44	; 0x2c
 8004ec6:	fb01 f303 	mul.w	r3, r1, r3
 8004eca:	4413      	add	r3, r2
 8004ecc:	3350      	adds	r3, #80	; 0x50
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	441a      	add	r2, r3
 8004ed4:	6879      	ldr	r1, [r7, #4]
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	202c      	movs	r0, #44	; 0x2c
 8004eda:	fb00 f303 	mul.w	r3, r0, r3
 8004ede:	440b      	add	r3, r1
 8004ee0:	3350      	adds	r3, #80	; 0x50
 8004ee2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	6a3b      	ldr	r3, [r7, #32]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	0cdb      	lsrs	r3, r3, #19
 8004ef4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ef8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	212c      	movs	r1, #44	; 0x2c
 8004f00:	fb01 f303 	mul.w	r3, r1, r3
 8004f04:	4413      	add	r3, r2
 8004f06:	3340      	adds	r3, #64	; 0x40
 8004f08:	881b      	ldrh	r3, [r3, #0]
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d13c      	bne.n	8004f8c <HCD_RXQLVL_IRQHandler+0x19a>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d039      	beq.n	8004f8c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	015a      	lsls	r2, r3, #5
 8004f1c:	6a3b      	ldr	r3, [r7, #32]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f2e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f36:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	015a      	lsls	r2, r3, #5
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	4413      	add	r3, r2
 8004f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f44:	461a      	mov	r2, r3
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	212c      	movs	r1, #44	; 0x2c
 8004f50:	fb01 f303 	mul.w	r3, r1, r3
 8004f54:	4413      	add	r3, r2
 8004f56:	3354      	adds	r3, #84	; 0x54
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	f083 0301 	eor.w	r3, r3, #1
 8004f5e:	b2d8      	uxtb	r0, r3
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	212c      	movs	r1, #44	; 0x2c
 8004f66:	fb01 f303 	mul.w	r3, r1, r3
 8004f6a:	4413      	add	r3, r2
 8004f6c:	3354      	adds	r3, #84	; 0x54
 8004f6e:	4602      	mov	r2, r0
 8004f70:	701a      	strb	r2, [r3, #0]
      break;
 8004f72:	e00b      	b.n	8004f8c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	212c      	movs	r1, #44	; 0x2c
 8004f7a:	fb01 f303 	mul.w	r3, r1, r3
 8004f7e:	4413      	add	r3, r2
 8004f80:	3360      	adds	r3, #96	; 0x60
 8004f82:	2204      	movs	r2, #4
 8004f84:	701a      	strb	r2, [r3, #0]
      break;
 8004f86:	e001      	b.n	8004f8c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004f88:	bf00      	nop
 8004f8a:	e000      	b.n	8004f8e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004f8c:	bf00      	nop
  }
}
 8004f8e:	bf00      	nop
 8004f90:	3728      	adds	r7, #40	; 0x28
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b086      	sub	sp, #24
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004fc2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d10b      	bne.n	8004fe6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d102      	bne.n	8004fde <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f00b f95b 	bl	8010294 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	f043 0302 	orr.w	r3, r3, #2
 8004fe4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f003 0308 	and.w	r3, r3, #8
 8004fec:	2b08      	cmp	r3, #8
 8004fee:	d132      	bne.n	8005056 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	f043 0308 	orr.w	r3, r3, #8
 8004ff6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f003 0304 	and.w	r3, r3, #4
 8004ffe:	2b04      	cmp	r3, #4
 8005000:	d126      	bne.n	8005050 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	2b02      	cmp	r3, #2
 8005008:	d113      	bne.n	8005032 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005010:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005014:	d106      	bne.n	8005024 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2102      	movs	r1, #2
 800501c:	4618      	mov	r0, r3
 800501e:	f003 ff43 	bl	8008ea8 <USB_InitFSLSPClkSel>
 8005022:	e011      	b.n	8005048 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2101      	movs	r1, #1
 800502a:	4618      	mov	r0, r3
 800502c:	f003 ff3c 	bl	8008ea8 <USB_InitFSLSPClkSel>
 8005030:	e00a      	b.n	8005048 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d106      	bne.n	8005048 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005040:	461a      	mov	r2, r3
 8005042:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005046:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f00b f94d 	bl	80102e8 <HAL_HCD_PortEnabled_Callback>
 800504e:	e002      	b.n	8005056 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f00b f957 	bl	8010304 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f003 0320 	and.w	r3, r3, #32
 800505c:	2b20      	cmp	r3, #32
 800505e:	d103      	bne.n	8005068 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	f043 0320 	orr.w	r3, r3, #32
 8005066:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800506e:	461a      	mov	r2, r3
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	6013      	str	r3, [r2, #0]
}
 8005074:	bf00      	nop
 8005076:	3718      	adds	r7, #24
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e12b      	b.n	80052e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d106      	bne.n	80050a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f7fc fca6 	bl	80019f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2224      	movs	r2, #36	; 0x24
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f022 0201 	bic.w	r2, r2, #1
 80050be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80050e0:	f002 fcda 	bl	8007a98 <HAL_RCC_GetPCLK1Freq>
 80050e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	4a81      	ldr	r2, [pc, #516]	; (80052f0 <HAL_I2C_Init+0x274>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d807      	bhi.n	8005100 <HAL_I2C_Init+0x84>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4a80      	ldr	r2, [pc, #512]	; (80052f4 <HAL_I2C_Init+0x278>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	bf94      	ite	ls
 80050f8:	2301      	movls	r3, #1
 80050fa:	2300      	movhi	r3, #0
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	e006      	b.n	800510e <HAL_I2C_Init+0x92>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	4a7d      	ldr	r2, [pc, #500]	; (80052f8 <HAL_I2C_Init+0x27c>)
 8005104:	4293      	cmp	r3, r2
 8005106:	bf94      	ite	ls
 8005108:	2301      	movls	r3, #1
 800510a:	2300      	movhi	r3, #0
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d001      	beq.n	8005116 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e0e7      	b.n	80052e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	4a78      	ldr	r2, [pc, #480]	; (80052fc <HAL_I2C_Init+0x280>)
 800511a:	fba2 2303 	umull	r2, r3, r2, r3
 800511e:	0c9b      	lsrs	r3, r3, #18
 8005120:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68ba      	ldr	r2, [r7, #8]
 8005132:	430a      	orrs	r2, r1
 8005134:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6a1b      	ldr	r3, [r3, #32]
 800513c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	4a6a      	ldr	r2, [pc, #424]	; (80052f0 <HAL_I2C_Init+0x274>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d802      	bhi.n	8005150 <HAL_I2C_Init+0xd4>
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	3301      	adds	r3, #1
 800514e:	e009      	b.n	8005164 <HAL_I2C_Init+0xe8>
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005156:	fb02 f303 	mul.w	r3, r2, r3
 800515a:	4a69      	ldr	r2, [pc, #420]	; (8005300 <HAL_I2C_Init+0x284>)
 800515c:	fba2 2303 	umull	r2, r3, r2, r3
 8005160:	099b      	lsrs	r3, r3, #6
 8005162:	3301      	adds	r3, #1
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	6812      	ldr	r2, [r2, #0]
 8005168:	430b      	orrs	r3, r1
 800516a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005176:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	495c      	ldr	r1, [pc, #368]	; (80052f0 <HAL_I2C_Init+0x274>)
 8005180:	428b      	cmp	r3, r1
 8005182:	d819      	bhi.n	80051b8 <HAL_I2C_Init+0x13c>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	1e59      	subs	r1, r3, #1
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005192:	1c59      	adds	r1, r3, #1
 8005194:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005198:	400b      	ands	r3, r1
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00a      	beq.n	80051b4 <HAL_I2C_Init+0x138>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	1e59      	subs	r1, r3, #1
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	005b      	lsls	r3, r3, #1
 80051a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80051ac:	3301      	adds	r3, #1
 80051ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051b2:	e051      	b.n	8005258 <HAL_I2C_Init+0x1dc>
 80051b4:	2304      	movs	r3, #4
 80051b6:	e04f      	b.n	8005258 <HAL_I2C_Init+0x1dc>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d111      	bne.n	80051e4 <HAL_I2C_Init+0x168>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	1e58      	subs	r0, r3, #1
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6859      	ldr	r1, [r3, #4]
 80051c8:	460b      	mov	r3, r1
 80051ca:	005b      	lsls	r3, r3, #1
 80051cc:	440b      	add	r3, r1
 80051ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80051d2:	3301      	adds	r3, #1
 80051d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051d8:	2b00      	cmp	r3, #0
 80051da:	bf0c      	ite	eq
 80051dc:	2301      	moveq	r3, #1
 80051de:	2300      	movne	r3, #0
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	e012      	b.n	800520a <HAL_I2C_Init+0x18e>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	1e58      	subs	r0, r3, #1
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6859      	ldr	r1, [r3, #4]
 80051ec:	460b      	mov	r3, r1
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	440b      	add	r3, r1
 80051f2:	0099      	lsls	r1, r3, #2
 80051f4:	440b      	add	r3, r1
 80051f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80051fa:	3301      	adds	r3, #1
 80051fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005200:	2b00      	cmp	r3, #0
 8005202:	bf0c      	ite	eq
 8005204:	2301      	moveq	r3, #1
 8005206:	2300      	movne	r3, #0
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d001      	beq.n	8005212 <HAL_I2C_Init+0x196>
 800520e:	2301      	movs	r3, #1
 8005210:	e022      	b.n	8005258 <HAL_I2C_Init+0x1dc>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10e      	bne.n	8005238 <HAL_I2C_Init+0x1bc>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	1e58      	subs	r0, r3, #1
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6859      	ldr	r1, [r3, #4]
 8005222:	460b      	mov	r3, r1
 8005224:	005b      	lsls	r3, r3, #1
 8005226:	440b      	add	r3, r1
 8005228:	fbb0 f3f3 	udiv	r3, r0, r3
 800522c:	3301      	adds	r3, #1
 800522e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005236:	e00f      	b.n	8005258 <HAL_I2C_Init+0x1dc>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	1e58      	subs	r0, r3, #1
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6859      	ldr	r1, [r3, #4]
 8005240:	460b      	mov	r3, r1
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	440b      	add	r3, r1
 8005246:	0099      	lsls	r1, r3, #2
 8005248:	440b      	add	r3, r1
 800524a:	fbb0 f3f3 	udiv	r3, r0, r3
 800524e:	3301      	adds	r3, #1
 8005250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005254:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005258:	6879      	ldr	r1, [r7, #4]
 800525a:	6809      	ldr	r1, [r1, #0]
 800525c:	4313      	orrs	r3, r2
 800525e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	69da      	ldr	r2, [r3, #28]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	431a      	orrs	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	430a      	orrs	r2, r1
 800527a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005286:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	6911      	ldr	r1, [r2, #16]
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	68d2      	ldr	r2, [r2, #12]
 8005292:	4311      	orrs	r1, r2
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	6812      	ldr	r2, [r2, #0]
 8005298:	430b      	orrs	r3, r1
 800529a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	695a      	ldr	r2, [r3, #20]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	431a      	orrs	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	430a      	orrs	r2, r1
 80052b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f042 0201 	orr.w	r2, r2, #1
 80052c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2220      	movs	r2, #32
 80052d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	000186a0 	.word	0x000186a0
 80052f4:	001e847f 	.word	0x001e847f
 80052f8:	003d08ff 	.word	0x003d08ff
 80052fc:	431bde83 	.word	0x431bde83
 8005300:	10624dd3 	.word	0x10624dd3

08005304 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e021      	b.n	800535a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2224      	movs	r2, #36	; 0x24
 800531a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 0201 	bic.w	r2, r2, #1
 800532c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7fc fba8 	bl	8001a84 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3708      	adds	r7, #8
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
	...

08005364 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b088      	sub	sp, #32
 8005368:	af02      	add	r7, sp, #8
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	4608      	mov	r0, r1
 800536e:	4611      	mov	r1, r2
 8005370:	461a      	mov	r2, r3
 8005372:	4603      	mov	r3, r0
 8005374:	817b      	strh	r3, [r7, #10]
 8005376:	460b      	mov	r3, r1
 8005378:	813b      	strh	r3, [r7, #8]
 800537a:	4613      	mov	r3, r2
 800537c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800537e:	f7fd fa0f 	bl	80027a0 <HAL_GetTick>
 8005382:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b20      	cmp	r3, #32
 800538e:	f040 80d9 	bne.w	8005544 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	9300      	str	r3, [sp, #0]
 8005396:	2319      	movs	r3, #25
 8005398:	2201      	movs	r2, #1
 800539a:	496d      	ldr	r1, [pc, #436]	; (8005550 <HAL_I2C_Mem_Write+0x1ec>)
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f000 fc8d 	bl	8005cbc <I2C_WaitOnFlagUntilTimeout>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d001      	beq.n	80053ac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80053a8:	2302      	movs	r3, #2
 80053aa:	e0cc      	b.n	8005546 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d101      	bne.n	80053ba <HAL_I2C_Mem_Write+0x56>
 80053b6:	2302      	movs	r3, #2
 80053b8:	e0c5      	b.n	8005546 <HAL_I2C_Mem_Write+0x1e2>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0301 	and.w	r3, r3, #1
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d007      	beq.n	80053e0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f042 0201 	orr.w	r2, r2, #1
 80053de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2221      	movs	r2, #33	; 0x21
 80053f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2240      	movs	r2, #64	; 0x40
 80053fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6a3a      	ldr	r2, [r7, #32]
 800540a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005410:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005416:	b29a      	uxth	r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4a4d      	ldr	r2, [pc, #308]	; (8005554 <HAL_I2C_Mem_Write+0x1f0>)
 8005420:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005422:	88f8      	ldrh	r0, [r7, #6]
 8005424:	893a      	ldrh	r2, [r7, #8]
 8005426:	8979      	ldrh	r1, [r7, #10]
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	9301      	str	r3, [sp, #4]
 800542c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542e:	9300      	str	r3, [sp, #0]
 8005430:	4603      	mov	r3, r0
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f000 fac4 	bl	80059c0 <I2C_RequestMemoryWrite>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d052      	beq.n	80054e4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e081      	b.n	8005546 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f000 fd0e 	bl	8005e68 <I2C_WaitOnTXEFlagUntilTimeout>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00d      	beq.n	800546e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005456:	2b04      	cmp	r3, #4
 8005458:	d107      	bne.n	800546a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005468:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e06b      	b.n	8005546 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005472:	781a      	ldrb	r2, [r3, #0]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	1c5a      	adds	r2, r3, #1
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005488:	3b01      	subs	r3, #1
 800548a:	b29a      	uxth	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005494:	b29b      	uxth	r3, r3
 8005496:	3b01      	subs	r3, #1
 8005498:	b29a      	uxth	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	695b      	ldr	r3, [r3, #20]
 80054a4:	f003 0304 	and.w	r3, r3, #4
 80054a8:	2b04      	cmp	r3, #4
 80054aa:	d11b      	bne.n	80054e4 <HAL_I2C_Mem_Write+0x180>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d017      	beq.n	80054e4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	781a      	ldrb	r2, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c4:	1c5a      	adds	r2, r3, #1
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ce:	3b01      	subs	r3, #1
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054da:	b29b      	uxth	r3, r3
 80054dc:	3b01      	subs	r3, #1
 80054de:	b29a      	uxth	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1aa      	bne.n	8005442 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f000 fcfa 	bl	8005eea <I2C_WaitOnBTFFlagUntilTimeout>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00d      	beq.n	8005518 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005500:	2b04      	cmp	r3, #4
 8005502:	d107      	bne.n	8005514 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005512:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e016      	b.n	8005546 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005526:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2220      	movs	r2, #32
 800552c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005540:	2300      	movs	r3, #0
 8005542:	e000      	b.n	8005546 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005544:	2302      	movs	r3, #2
  }
}
 8005546:	4618      	mov	r0, r3
 8005548:	3718      	adds	r7, #24
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	00100002 	.word	0x00100002
 8005554:	ffff0000 	.word	0xffff0000

08005558 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b08c      	sub	sp, #48	; 0x30
 800555c:	af02      	add	r7, sp, #8
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	4608      	mov	r0, r1
 8005562:	4611      	mov	r1, r2
 8005564:	461a      	mov	r2, r3
 8005566:	4603      	mov	r3, r0
 8005568:	817b      	strh	r3, [r7, #10]
 800556a:	460b      	mov	r3, r1
 800556c:	813b      	strh	r3, [r7, #8]
 800556e:	4613      	mov	r3, r2
 8005570:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005572:	f7fd f915 	bl	80027a0 <HAL_GetTick>
 8005576:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800557e:	b2db      	uxtb	r3, r3
 8005580:	2b20      	cmp	r3, #32
 8005582:	f040 8208 	bne.w	8005996 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005588:	9300      	str	r3, [sp, #0]
 800558a:	2319      	movs	r3, #25
 800558c:	2201      	movs	r2, #1
 800558e:	497b      	ldr	r1, [pc, #492]	; (800577c <HAL_I2C_Mem_Read+0x224>)
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f000 fb93 	bl	8005cbc <I2C_WaitOnFlagUntilTimeout>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d001      	beq.n	80055a0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800559c:	2302      	movs	r3, #2
 800559e:	e1fb      	b.n	8005998 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d101      	bne.n	80055ae <HAL_I2C_Mem_Read+0x56>
 80055aa:	2302      	movs	r3, #2
 80055ac:	e1f4      	b.n	8005998 <HAL_I2C_Mem_Read+0x440>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d007      	beq.n	80055d4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f042 0201 	orr.w	r2, r2, #1
 80055d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2222      	movs	r2, #34	; 0x22
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2240      	movs	r2, #64	; 0x40
 80055f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005604:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800560a:	b29a      	uxth	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	4a5b      	ldr	r2, [pc, #364]	; (8005780 <HAL_I2C_Mem_Read+0x228>)
 8005614:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005616:	88f8      	ldrh	r0, [r7, #6]
 8005618:	893a      	ldrh	r2, [r7, #8]
 800561a:	8979      	ldrh	r1, [r7, #10]
 800561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561e:	9301      	str	r3, [sp, #4]
 8005620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005622:	9300      	str	r3, [sp, #0]
 8005624:	4603      	mov	r3, r0
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f000 fa60 	bl	8005aec <I2C_RequestMemoryRead>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e1b0      	b.n	8005998 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800563a:	2b00      	cmp	r3, #0
 800563c:	d113      	bne.n	8005666 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800563e:	2300      	movs	r3, #0
 8005640:	623b      	str	r3, [r7, #32]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	623b      	str	r3, [r7, #32]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	623b      	str	r3, [r7, #32]
 8005652:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005662:	601a      	str	r2, [r3, #0]
 8005664:	e184      	b.n	8005970 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800566a:	2b01      	cmp	r3, #1
 800566c:	d11b      	bne.n	80056a6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800567c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800567e:	2300      	movs	r3, #0
 8005680:	61fb      	str	r3, [r7, #28]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	61fb      	str	r3, [r7, #28]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	61fb      	str	r3, [r7, #28]
 8005692:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	e164      	b.n	8005970 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d11b      	bne.n	80056e6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056bc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056ce:	2300      	movs	r3, #0
 80056d0:	61bb      	str	r3, [r7, #24]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	61bb      	str	r3, [r7, #24]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	61bb      	str	r3, [r7, #24]
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	e144      	b.n	8005970 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056e6:	2300      	movs	r3, #0
 80056e8:	617b      	str	r3, [r7, #20]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	695b      	ldr	r3, [r3, #20]
 80056f0:	617b      	str	r3, [r7, #20]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	617b      	str	r3, [r7, #20]
 80056fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80056fc:	e138      	b.n	8005970 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005702:	2b03      	cmp	r3, #3
 8005704:	f200 80f1 	bhi.w	80058ea <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800570c:	2b01      	cmp	r3, #1
 800570e:	d123      	bne.n	8005758 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005712:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f000 fc29 	bl	8005f6c <I2C_WaitOnRXNEFlagUntilTimeout>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d001      	beq.n	8005724 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e139      	b.n	8005998 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	691a      	ldr	r2, [r3, #16]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005736:	1c5a      	adds	r2, r3, #1
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005740:	3b01      	subs	r3, #1
 8005742:	b29a      	uxth	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800574c:	b29b      	uxth	r3, r3
 800574e:	3b01      	subs	r3, #1
 8005750:	b29a      	uxth	r2, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005756:	e10b      	b.n	8005970 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800575c:	2b02      	cmp	r3, #2
 800575e:	d14e      	bne.n	80057fe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005766:	2200      	movs	r2, #0
 8005768:	4906      	ldr	r1, [pc, #24]	; (8005784 <HAL_I2C_Mem_Read+0x22c>)
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f000 faa6 	bl	8005cbc <I2C_WaitOnFlagUntilTimeout>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d008      	beq.n	8005788 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e10e      	b.n	8005998 <HAL_I2C_Mem_Read+0x440>
 800577a:	bf00      	nop
 800577c:	00100002 	.word	0x00100002
 8005780:	ffff0000 	.word	0xffff0000
 8005784:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005796:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	691a      	ldr	r2, [r3, #16]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a2:	b2d2      	uxtb	r2, r2
 80057a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057aa:	1c5a      	adds	r2, r3, #1
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057b4:	3b01      	subs	r3, #1
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	3b01      	subs	r3, #1
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	691a      	ldr	r2, [r3, #16]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d4:	b2d2      	uxtb	r2, r2
 80057d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057dc:	1c5a      	adds	r2, r3, #1
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057e6:	3b01      	subs	r3, #1
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	3b01      	subs	r3, #1
 80057f6:	b29a      	uxth	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80057fc:	e0b8      	b.n	8005970 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005800:	9300      	str	r3, [sp, #0]
 8005802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005804:	2200      	movs	r2, #0
 8005806:	4966      	ldr	r1, [pc, #408]	; (80059a0 <HAL_I2C_Mem_Read+0x448>)
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f000 fa57 	bl	8005cbc <I2C_WaitOnFlagUntilTimeout>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d001      	beq.n	8005818 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e0bf      	b.n	8005998 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005826:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	691a      	ldr	r2, [r3, #16]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005832:	b2d2      	uxtb	r2, r2
 8005834:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583a:	1c5a      	adds	r2, r3, #1
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005844:	3b01      	subs	r3, #1
 8005846:	b29a      	uxth	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005850:	b29b      	uxth	r3, r3
 8005852:	3b01      	subs	r3, #1
 8005854:	b29a      	uxth	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005860:	2200      	movs	r2, #0
 8005862:	494f      	ldr	r1, [pc, #316]	; (80059a0 <HAL_I2C_Mem_Read+0x448>)
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f000 fa29 	bl	8005cbc <I2C_WaitOnFlagUntilTimeout>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d001      	beq.n	8005874 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e091      	b.n	8005998 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005882:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	691a      	ldr	r2, [r3, #16]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588e:	b2d2      	uxtb	r2, r2
 8005890:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	1c5a      	adds	r2, r3, #1
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058a0:	3b01      	subs	r3, #1
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	3b01      	subs	r3, #1
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	691a      	ldr	r2, [r3, #16]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c0:	b2d2      	uxtb	r2, r2
 80058c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c8:	1c5a      	adds	r2, r3, #1
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058d2:	3b01      	subs	r3, #1
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058de:	b29b      	uxth	r3, r3
 80058e0:	3b01      	subs	r3, #1
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80058e8:	e042      	b.n	8005970 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f000 fb3c 	bl	8005f6c <I2C_WaitOnRXNEFlagUntilTimeout>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e04c      	b.n	8005998 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	691a      	ldr	r2, [r3, #16]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005908:	b2d2      	uxtb	r2, r2
 800590a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005910:	1c5a      	adds	r2, r3, #1
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800591a:	3b01      	subs	r3, #1
 800591c:	b29a      	uxth	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005926:	b29b      	uxth	r3, r3
 8005928:	3b01      	subs	r3, #1
 800592a:	b29a      	uxth	r2, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	f003 0304 	and.w	r3, r3, #4
 800593a:	2b04      	cmp	r3, #4
 800593c:	d118      	bne.n	8005970 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	691a      	ldr	r2, [r3, #16]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005948:	b2d2      	uxtb	r2, r2
 800594a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005950:	1c5a      	adds	r2, r3, #1
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800595a:	3b01      	subs	r3, #1
 800595c:	b29a      	uxth	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005966:	b29b      	uxth	r3, r3
 8005968:	3b01      	subs	r3, #1
 800596a:	b29a      	uxth	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005974:	2b00      	cmp	r3, #0
 8005976:	f47f aec2 	bne.w	80056fe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2220      	movs	r2, #32
 800597e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005992:	2300      	movs	r3, #0
 8005994:	e000      	b.n	8005998 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005996:	2302      	movs	r3, #2
  }
}
 8005998:	4618      	mov	r0, r3
 800599a:	3728      	adds	r7, #40	; 0x28
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	00010004 	.word	0x00010004

080059a4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059b2:	b2db      	uxtb	r3, r3
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b088      	sub	sp, #32
 80059c4:	af02      	add	r7, sp, #8
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	4608      	mov	r0, r1
 80059ca:	4611      	mov	r1, r2
 80059cc:	461a      	mov	r2, r3
 80059ce:	4603      	mov	r3, r0
 80059d0:	817b      	strh	r3, [r7, #10]
 80059d2:	460b      	mov	r3, r1
 80059d4:	813b      	strh	r3, [r7, #8]
 80059d6:	4613      	mov	r3, r2
 80059d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ec:	9300      	str	r3, [sp, #0]
 80059ee:	6a3b      	ldr	r3, [r7, #32]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f000 f960 	bl	8005cbc <I2C_WaitOnFlagUntilTimeout>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00d      	beq.n	8005a1e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a10:	d103      	bne.n	8005a1a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e05f      	b.n	8005ade <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a1e:	897b      	ldrh	r3, [r7, #10]
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	461a      	mov	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a30:	6a3a      	ldr	r2, [r7, #32]
 8005a32:	492d      	ldr	r1, [pc, #180]	; (8005ae8 <I2C_RequestMemoryWrite+0x128>)
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f000 f998 	bl	8005d6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d001      	beq.n	8005a44 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e04c      	b.n	8005ade <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a44:	2300      	movs	r3, #0
 8005a46:	617b      	str	r3, [r7, #20]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	617b      	str	r3, [r7, #20]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	617b      	str	r3, [r7, #20]
 8005a58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a5c:	6a39      	ldr	r1, [r7, #32]
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f000 fa02 	bl	8005e68 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00d      	beq.n	8005a86 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6e:	2b04      	cmp	r3, #4
 8005a70:	d107      	bne.n	8005a82 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e02b      	b.n	8005ade <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a86:	88fb      	ldrh	r3, [r7, #6]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d105      	bne.n	8005a98 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a8c:	893b      	ldrh	r3, [r7, #8]
 8005a8e:	b2da      	uxtb	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	611a      	str	r2, [r3, #16]
 8005a96:	e021      	b.n	8005adc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005a98:	893b      	ldrh	r3, [r7, #8]
 8005a9a:	0a1b      	lsrs	r3, r3, #8
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	b2da      	uxtb	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aa8:	6a39      	ldr	r1, [r7, #32]
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f000 f9dc 	bl	8005e68 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00d      	beq.n	8005ad2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aba:	2b04      	cmp	r3, #4
 8005abc:	d107      	bne.n	8005ace <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005acc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e005      	b.n	8005ade <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ad2:	893b      	ldrh	r3, [r7, #8]
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3718      	adds	r7, #24
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	00010002 	.word	0x00010002

08005aec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b088      	sub	sp, #32
 8005af0:	af02      	add	r7, sp, #8
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	4608      	mov	r0, r1
 8005af6:	4611      	mov	r1, r2
 8005af8:	461a      	mov	r2, r3
 8005afa:	4603      	mov	r3, r0
 8005afc:	817b      	strh	r3, [r7, #10]
 8005afe:	460b      	mov	r3, r1
 8005b00:	813b      	strh	r3, [r7, #8]
 8005b02:	4613      	mov	r3, r2
 8005b04:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b14:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b28:	9300      	str	r3, [sp, #0]
 8005b2a:	6a3b      	ldr	r3, [r7, #32]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f000 f8c2 	bl	8005cbc <I2C_WaitOnFlagUntilTimeout>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00d      	beq.n	8005b5a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b4c:	d103      	bne.n	8005b56 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e0aa      	b.n	8005cb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b5a:	897b      	ldrh	r3, [r7, #10]
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	461a      	mov	r2, r3
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6c:	6a3a      	ldr	r2, [r7, #32]
 8005b6e:	4952      	ldr	r1, [pc, #328]	; (8005cb8 <I2C_RequestMemoryRead+0x1cc>)
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f000 f8fa 	bl	8005d6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d001      	beq.n	8005b80 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e097      	b.n	8005cb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b80:	2300      	movs	r3, #0
 8005b82:	617b      	str	r3, [r7, #20]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	617b      	str	r3, [r7, #20]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	617b      	str	r3, [r7, #20]
 8005b94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b98:	6a39      	ldr	r1, [r7, #32]
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	f000 f964 	bl	8005e68 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00d      	beq.n	8005bc2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005baa:	2b04      	cmp	r3, #4
 8005bac:	d107      	bne.n	8005bbe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bbc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e076      	b.n	8005cb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005bc2:	88fb      	ldrh	r3, [r7, #6]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d105      	bne.n	8005bd4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005bc8:	893b      	ldrh	r3, [r7, #8]
 8005bca:	b2da      	uxtb	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	611a      	str	r2, [r3, #16]
 8005bd2:	e021      	b.n	8005c18 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005bd4:	893b      	ldrh	r3, [r7, #8]
 8005bd6:	0a1b      	lsrs	r3, r3, #8
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005be4:	6a39      	ldr	r1, [r7, #32]
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	f000 f93e 	bl	8005e68 <I2C_WaitOnTXEFlagUntilTimeout>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00d      	beq.n	8005c0e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf6:	2b04      	cmp	r3, #4
 8005bf8:	d107      	bne.n	8005c0a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e050      	b.n	8005cb0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c0e:	893b      	ldrh	r3, [r7, #8]
 8005c10:	b2da      	uxtb	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c1a:	6a39      	ldr	r1, [r7, #32]
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f000 f923 	bl	8005e68 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00d      	beq.n	8005c44 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2c:	2b04      	cmp	r3, #4
 8005c2e:	d107      	bne.n	8005c40 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c3e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e035      	b.n	8005cb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c52:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c56:	9300      	str	r3, [sp, #0]
 8005c58:	6a3b      	ldr	r3, [r7, #32]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f000 f82b 	bl	8005cbc <I2C_WaitOnFlagUntilTimeout>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00d      	beq.n	8005c88 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c7a:	d103      	bne.n	8005c84 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e013      	b.n	8005cb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005c88:	897b      	ldrh	r3, [r7, #10]
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	f043 0301 	orr.w	r3, r3, #1
 8005c90:	b2da      	uxtb	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9a:	6a3a      	ldr	r2, [r7, #32]
 8005c9c:	4906      	ldr	r1, [pc, #24]	; (8005cb8 <I2C_RequestMemoryRead+0x1cc>)
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f000 f863 	bl	8005d6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d001      	beq.n	8005cae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e000      	b.n	8005cb0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3718      	adds	r7, #24
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	00010002 	.word	0x00010002

08005cbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	603b      	str	r3, [r7, #0]
 8005cc8:	4613      	mov	r3, r2
 8005cca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ccc:	e025      	b.n	8005d1a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd4:	d021      	beq.n	8005d1a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cd6:	f7fc fd63 	bl	80027a0 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	683a      	ldr	r2, [r7, #0]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d302      	bcc.n	8005cec <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d116      	bne.n	8005d1a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2220      	movs	r2, #32
 8005cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d06:	f043 0220 	orr.w	r2, r3, #32
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e023      	b.n	8005d62 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	0c1b      	lsrs	r3, r3, #16
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d10d      	bne.n	8005d40 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	43da      	mvns	r2, r3
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	4013      	ands	r3, r2
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	bf0c      	ite	eq
 8005d36:	2301      	moveq	r3, #1
 8005d38:	2300      	movne	r3, #0
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	e00c      	b.n	8005d5a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	43da      	mvns	r2, r3
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	bf0c      	ite	eq
 8005d52:	2301      	moveq	r3, #1
 8005d54:	2300      	movne	r3, #0
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	461a      	mov	r2, r3
 8005d5a:	79fb      	ldrb	r3, [r7, #7]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d0b6      	beq.n	8005cce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b084      	sub	sp, #16
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	60f8      	str	r0, [r7, #12]
 8005d72:	60b9      	str	r1, [r7, #8]
 8005d74:	607a      	str	r2, [r7, #4]
 8005d76:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d78:	e051      	b.n	8005e1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	695b      	ldr	r3, [r3, #20]
 8005d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d88:	d123      	bne.n	8005dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d98:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005da2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2200      	movs	r2, #0
 8005da8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2220      	movs	r2, #32
 8005dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbe:	f043 0204 	orr.w	r2, r3, #4
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e046      	b.n	8005e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd8:	d021      	beq.n	8005e1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dda:	f7fc fce1 	bl	80027a0 <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d302      	bcc.n	8005df0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d116      	bne.n	8005e1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2220      	movs	r2, #32
 8005dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0a:	f043 0220 	orr.w	r2, r3, #32
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e020      	b.n	8005e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	0c1b      	lsrs	r3, r3, #16
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d10c      	bne.n	8005e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	43da      	mvns	r2, r3
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	4013      	ands	r3, r2
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	bf14      	ite	ne
 8005e3a:	2301      	movne	r3, #1
 8005e3c:	2300      	moveq	r3, #0
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	e00b      	b.n	8005e5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	43da      	mvns	r2, r3
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	bf14      	ite	ne
 8005e54:	2301      	movne	r3, #1
 8005e56:	2300      	moveq	r3, #0
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d18d      	bne.n	8005d7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e74:	e02d      	b.n	8005ed2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f000 f8ce 	bl	8006018 <I2C_IsAcknowledgeFailed>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d001      	beq.n	8005e86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e02d      	b.n	8005ee2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e8c:	d021      	beq.n	8005ed2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e8e:	f7fc fc87 	bl	80027a0 <HAL_GetTick>
 8005e92:	4602      	mov	r2, r0
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d302      	bcc.n	8005ea4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d116      	bne.n	8005ed2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2220      	movs	r2, #32
 8005eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebe:	f043 0220 	orr.w	r2, r3, #32
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e007      	b.n	8005ee2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	695b      	ldr	r3, [r3, #20]
 8005ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005edc:	2b80      	cmp	r3, #128	; 0x80
 8005ede:	d1ca      	bne.n	8005e76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b084      	sub	sp, #16
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	60f8      	str	r0, [r7, #12]
 8005ef2:	60b9      	str	r1, [r7, #8]
 8005ef4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ef6:	e02d      	b.n	8005f54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f000 f88d 	bl	8006018 <I2C_IsAcknowledgeFailed>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d001      	beq.n	8005f08 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e02d      	b.n	8005f64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f0e:	d021      	beq.n	8005f54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f10:	f7fc fc46 	bl	80027a0 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d302      	bcc.n	8005f26 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d116      	bne.n	8005f54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2220      	movs	r2, #32
 8005f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f40:	f043 0220 	orr.w	r2, r3, #32
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e007      	b.n	8005f64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	f003 0304 	and.w	r3, r3, #4
 8005f5e:	2b04      	cmp	r3, #4
 8005f60:	d1ca      	bne.n	8005ef8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f78:	e042      	b.n	8006000 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	695b      	ldr	r3, [r3, #20]
 8005f80:	f003 0310 	and.w	r3, r3, #16
 8005f84:	2b10      	cmp	r3, #16
 8005f86:	d119      	bne.n	8005fbc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f06f 0210 	mvn.w	r2, #16
 8005f90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e029      	b.n	8006010 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fbc:	f7fc fbf0 	bl	80027a0 <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d302      	bcc.n	8005fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d116      	bne.n	8006000 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2220      	movs	r2, #32
 8005fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fec:	f043 0220 	orr.w	r2, r3, #32
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e007      	b.n	8006010 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800600a:	2b40      	cmp	r3, #64	; 0x40
 800600c:	d1b5      	bne.n	8005f7a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800602a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800602e:	d11b      	bne.n	8006068 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006038:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2220      	movs	r2, #32
 8006044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006054:	f043 0204 	orr.w	r2, r3, #4
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e000      	b.n	800606a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	370c      	adds	r7, #12
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
	...

08006078 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b088      	sub	sp, #32
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d101      	bne.n	800608a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e128      	b.n	80062dc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2b00      	cmp	r3, #0
 8006094:	d109      	bne.n	80060aa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a90      	ldr	r2, [pc, #576]	; (80062e4 <HAL_I2S_Init+0x26c>)
 80060a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f7fb fd3d 	bl	8001b24 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2202      	movs	r2, #2
 80060ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	69db      	ldr	r3, [r3, #28]
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	6812      	ldr	r2, [r2, #0]
 80060bc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80060c0:	f023 030f 	bic.w	r3, r3, #15
 80060c4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2202      	movs	r2, #2
 80060cc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d060      	beq.n	8006198 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d102      	bne.n	80060e4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80060de:	2310      	movs	r3, #16
 80060e0:	617b      	str	r3, [r7, #20]
 80060e2:	e001      	b.n	80060e8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80060e4:	2320      	movs	r3, #32
 80060e6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	2b20      	cmp	r3, #32
 80060ee:	d802      	bhi.n	80060f6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	005b      	lsls	r3, r3, #1
 80060f4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80060f6:	2001      	movs	r0, #1
 80060f8:	f001 fdf0 	bl	8007cdc <HAL_RCCEx_GetPeriphCLKFreq>
 80060fc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006106:	d125      	bne.n	8006154 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d010      	beq.n	8006132 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	fbb2 f2f3 	udiv	r2, r2, r3
 800611a:	4613      	mov	r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4413      	add	r3, r2
 8006120:	005b      	lsls	r3, r3, #1
 8006122:	461a      	mov	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	695b      	ldr	r3, [r3, #20]
 8006128:	fbb2 f3f3 	udiv	r3, r2, r3
 800612c:	3305      	adds	r3, #5
 800612e:	613b      	str	r3, [r7, #16]
 8006130:	e01f      	b.n	8006172 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	00db      	lsls	r3, r3, #3
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	fbb2 f2f3 	udiv	r2, r2, r3
 800613c:	4613      	mov	r3, r2
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	4413      	add	r3, r2
 8006142:	005b      	lsls	r3, r3, #1
 8006144:	461a      	mov	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	fbb2 f3f3 	udiv	r3, r2, r3
 800614e:	3305      	adds	r3, #5
 8006150:	613b      	str	r3, [r7, #16]
 8006152:	e00e      	b.n	8006172 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	fbb2 f2f3 	udiv	r2, r2, r3
 800615c:	4613      	mov	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	005b      	lsls	r3, r3, #1
 8006164:	461a      	mov	r2, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	fbb2 f3f3 	udiv	r3, r2, r3
 800616e:	3305      	adds	r3, #5
 8006170:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	4a5c      	ldr	r2, [pc, #368]	; (80062e8 <HAL_I2S_Init+0x270>)
 8006176:	fba2 2303 	umull	r2, r3, r2, r3
 800617a:	08db      	lsrs	r3, r3, #3
 800617c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	085b      	lsrs	r3, r3, #1
 800618e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	021b      	lsls	r3, r3, #8
 8006194:	61bb      	str	r3, [r7, #24]
 8006196:	e003      	b.n	80061a0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006198:	2302      	movs	r3, #2
 800619a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800619c:	2300      	movs	r3, #0
 800619e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d902      	bls.n	80061ac <HAL_I2S_Init+0x134>
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	2bff      	cmp	r3, #255	; 0xff
 80061aa:	d907      	bls.n	80061bc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061b0:	f043 0210 	orr.w	r2, r3, #16
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e08f      	b.n	80062dc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	691a      	ldr	r2, [r3, #16]
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	ea42 0103 	orr.w	r1, r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	69fa      	ldr	r2, [r7, #28]
 80061cc:	430a      	orrs	r2, r1
 80061ce:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	69db      	ldr	r3, [r3, #28]
 80061d6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80061da:	f023 030f 	bic.w	r3, r3, #15
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	6851      	ldr	r1, [r2, #4]
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	6892      	ldr	r2, [r2, #8]
 80061e6:	4311      	orrs	r1, r2
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	68d2      	ldr	r2, [r2, #12]
 80061ec:	4311      	orrs	r1, r2
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	6992      	ldr	r2, [r2, #24]
 80061f2:	430a      	orrs	r2, r1
 80061f4:	431a      	orrs	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061fe:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a1b      	ldr	r3, [r3, #32]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d161      	bne.n	80062cc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a38      	ldr	r2, [pc, #224]	; (80062ec <HAL_I2S_Init+0x274>)
 800620c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a37      	ldr	r2, [pc, #220]	; (80062f0 <HAL_I2S_Init+0x278>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d101      	bne.n	800621c <HAL_I2S_Init+0x1a4>
 8006218:	4b36      	ldr	r3, [pc, #216]	; (80062f4 <HAL_I2S_Init+0x27c>)
 800621a:	e001      	b.n	8006220 <HAL_I2S_Init+0x1a8>
 800621c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006220:	69db      	ldr	r3, [r3, #28]
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	6812      	ldr	r2, [r2, #0]
 8006226:	4932      	ldr	r1, [pc, #200]	; (80062f0 <HAL_I2S_Init+0x278>)
 8006228:	428a      	cmp	r2, r1
 800622a:	d101      	bne.n	8006230 <HAL_I2S_Init+0x1b8>
 800622c:	4a31      	ldr	r2, [pc, #196]	; (80062f4 <HAL_I2S_Init+0x27c>)
 800622e:	e001      	b.n	8006234 <HAL_I2S_Init+0x1bc>
 8006230:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006234:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006238:	f023 030f 	bic.w	r3, r3, #15
 800623c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a2b      	ldr	r2, [pc, #172]	; (80062f0 <HAL_I2S_Init+0x278>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d101      	bne.n	800624c <HAL_I2S_Init+0x1d4>
 8006248:	4b2a      	ldr	r3, [pc, #168]	; (80062f4 <HAL_I2S_Init+0x27c>)
 800624a:	e001      	b.n	8006250 <HAL_I2S_Init+0x1d8>
 800624c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006250:	2202      	movs	r2, #2
 8006252:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a25      	ldr	r2, [pc, #148]	; (80062f0 <HAL_I2S_Init+0x278>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d101      	bne.n	8006262 <HAL_I2S_Init+0x1ea>
 800625e:	4b25      	ldr	r3, [pc, #148]	; (80062f4 <HAL_I2S_Init+0x27c>)
 8006260:	e001      	b.n	8006266 <HAL_I2S_Init+0x1ee>
 8006262:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006266:	69db      	ldr	r3, [r3, #28]
 8006268:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006272:	d003      	beq.n	800627c <HAL_I2S_Init+0x204>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d103      	bne.n	8006284 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800627c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006280:	613b      	str	r3, [r7, #16]
 8006282:	e001      	b.n	8006288 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006284:	2300      	movs	r3, #0
 8006286:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006292:	4313      	orrs	r3, r2
 8006294:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800629c:	4313      	orrs	r3, r2
 800629e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80062a6:	4313      	orrs	r3, r2
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	897b      	ldrh	r3, [r7, #10]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80062b4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a0d      	ldr	r2, [pc, #52]	; (80062f0 <HAL_I2S_Init+0x278>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d101      	bne.n	80062c4 <HAL_I2S_Init+0x24c>
 80062c0:	4b0c      	ldr	r3, [pc, #48]	; (80062f4 <HAL_I2S_Init+0x27c>)
 80062c2:	e001      	b.n	80062c8 <HAL_I2S_Init+0x250>
 80062c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062c8:	897a      	ldrh	r2, [r7, #10]
 80062ca:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3720      	adds	r7, #32
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	08006b7d 	.word	0x08006b7d
 80062e8:	cccccccd 	.word	0xcccccccd
 80062ec:	08006d05 	.word	0x08006d05
 80062f0:	40003800 	.word	0x40003800
 80062f4:	40003400 	.word	0x40003400

080062f8 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b086      	sub	sp, #24
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	4613      	mov	r3, r2
 8006304:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d002      	beq.n	8006312 <HAL_I2S_Transmit_DMA+0x1a>
 800630c:	88fb      	ldrh	r3, [r7, #6]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d101      	bne.n	8006316 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e08e      	b.n	8006434 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b01      	cmp	r3, #1
 8006320:	d101      	bne.n	8006326 <HAL_I2S_Transmit_DMA+0x2e>
 8006322:	2302      	movs	r3, #2
 8006324:	e086      	b.n	8006434 <HAL_I2S_Transmit_DMA+0x13c>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b01      	cmp	r3, #1
 8006338:	d005      	beq.n	8006346 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8006342:	2302      	movs	r3, #2
 8006344:	e076      	b.n	8006434 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2203      	movs	r2, #3
 800634a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	69db      	ldr	r3, [r3, #28]
 8006360:	f003 0307 	and.w	r3, r3, #7
 8006364:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	2b03      	cmp	r3, #3
 800636a:	d002      	beq.n	8006372 <HAL_I2S_Transmit_DMA+0x7a>
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	2b05      	cmp	r3, #5
 8006370:	d10a      	bne.n	8006388 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8006372:	88fb      	ldrh	r3, [r7, #6]
 8006374:	005b      	lsls	r3, r3, #1
 8006376:	b29a      	uxth	r2, r3
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 800637c:	88fb      	ldrh	r3, [r7, #6]
 800637e:	005b      	lsls	r3, r3, #1
 8006380:	b29a      	uxth	r2, r3
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006386:	e005      	b.n	8006394 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	88fa      	ldrh	r2, [r7, #6]
 800638c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	88fa      	ldrh	r2, [r7, #6]
 8006392:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006398:	4a28      	ldr	r2, [pc, #160]	; (800643c <HAL_I2S_Transmit_DMA+0x144>)
 800639a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a0:	4a27      	ldr	r2, [pc, #156]	; (8006440 <HAL_I2S_Transmit_DMA+0x148>)
 80063a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a8:	4a26      	ldr	r2, [pc, #152]	; (8006444 <HAL_I2S_Transmit_DMA+0x14c>)
 80063aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80063b4:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80063bc:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063c2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80063c4:	f7fc fc3a 	bl	8002c3c <HAL_DMA_Start_IT>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00f      	beq.n	80063ee <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d2:	f043 0208 	orr.w	r2, r3, #8
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2201      	movs	r2, #1
 80063de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e022      	b.n	8006434 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	69db      	ldr	r3, [r3, #28]
 80063f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d107      	bne.n	800640c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	69da      	ldr	r2, [r3, #28]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800640a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	f003 0302 	and.w	r3, r3, #2
 8006416:	2b00      	cmp	r3, #0
 8006418:	d107      	bne.n	800642a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	685a      	ldr	r2, [r3, #4]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f042 0202 	orr.w	r2, r2, #2
 8006428:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3718      	adds	r7, #24
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	08006a5b 	.word	0x08006a5b
 8006440:	08006a19 	.word	0x08006a19
 8006444:	08006a77 	.word	0x08006a77

08006448 <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006456:	b2db      	uxtb	r3, r3
 8006458:	2b01      	cmp	r3, #1
 800645a:	d101      	bne.n	8006460 <HAL_I2S_DMAPause+0x18>
 800645c:	2302      	movs	r3, #2
 800645e:	e04a      	b.n	80064f6 <HAL_I2S_DMAPause+0xae>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800646e:	b2db      	uxtb	r3, r3
 8006470:	2b03      	cmp	r3, #3
 8006472:	d108      	bne.n	8006486 <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	685a      	ldr	r2, [r3, #4]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f022 0202 	bic.w	r2, r2, #2
 8006482:	605a      	str	r2, [r3, #4]
 8006484:	e032      	b.n	80064ec <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b04      	cmp	r3, #4
 8006490:	d108      	bne.n	80064a4 <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	685a      	ldr	r2, [r3, #4]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f022 0201 	bic.w	r2, r2, #1
 80064a0:	605a      	str	r2, [r3, #4]
 80064a2:	e023      	b.n	80064ec <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	2b05      	cmp	r3, #5
 80064ae:	d11d      	bne.n	80064ec <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	685a      	ldr	r2, [r3, #4]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f022 0203 	bic.w	r2, r2, #3
 80064be:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a0f      	ldr	r2, [pc, #60]	; (8006504 <HAL_I2S_DMAPause+0xbc>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d101      	bne.n	80064ce <HAL_I2S_DMAPause+0x86>
 80064ca:	4b0f      	ldr	r3, [pc, #60]	; (8006508 <HAL_I2S_DMAPause+0xc0>)
 80064cc:	e001      	b.n	80064d2 <HAL_I2S_DMAPause+0x8a>
 80064ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064d2:	685a      	ldr	r2, [r3, #4]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	490a      	ldr	r1, [pc, #40]	; (8006504 <HAL_I2S_DMAPause+0xbc>)
 80064da:	428b      	cmp	r3, r1
 80064dc:	d101      	bne.n	80064e2 <HAL_I2S_DMAPause+0x9a>
 80064de:	4b0a      	ldr	r3, [pc, #40]	; (8006508 <HAL_I2S_DMAPause+0xc0>)
 80064e0:	e001      	b.n	80064e6 <HAL_I2S_DMAPause+0x9e>
 80064e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064e6:	f022 0203 	bic.w	r2, r2, #3
 80064ea:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	40003800 	.word	0x40003800
 8006508:	40003400 	.word	0x40003400

0800650c <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800651a:	b2db      	uxtb	r3, r3
 800651c:	2b01      	cmp	r3, #1
 800651e:	d101      	bne.n	8006524 <HAL_I2S_DMAResume+0x18>
 8006520:	2302      	movs	r3, #2
 8006522:	e07d      	b.n	8006620 <HAL_I2S_DMAResume+0x114>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006532:	b2db      	uxtb	r3, r3
 8006534:	2b03      	cmp	r3, #3
 8006536:	d108      	bne.n	800654a <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	685a      	ldr	r2, [r3, #4]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f042 0202 	orr.w	r2, r2, #2
 8006546:	605a      	str	r2, [r3, #4]
 8006548:	e056      	b.n	80065f8 <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006550:	b2db      	uxtb	r3, r3
 8006552:	2b04      	cmp	r3, #4
 8006554:	d108      	bne.n	8006568 <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	685a      	ldr	r2, [r3, #4]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f042 0201 	orr.w	r2, r2, #1
 8006564:	605a      	str	r2, [r3, #4]
 8006566:	e047      	b.n	80065f8 <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b05      	cmp	r3, #5
 8006572:	d141      	bne.n	80065f8 <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	685a      	ldr	r2, [r3, #4]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f042 0203 	orr.w	r2, r2, #3
 8006582:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a28      	ldr	r2, [pc, #160]	; (800662c <HAL_I2S_DMAResume+0x120>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d101      	bne.n	8006592 <HAL_I2S_DMAResume+0x86>
 800658e:	4b28      	ldr	r3, [pc, #160]	; (8006630 <HAL_I2S_DMAResume+0x124>)
 8006590:	e001      	b.n	8006596 <HAL_I2S_DMAResume+0x8a>
 8006592:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006596:	685a      	ldr	r2, [r3, #4]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4923      	ldr	r1, [pc, #140]	; (800662c <HAL_I2S_DMAResume+0x120>)
 800659e:	428b      	cmp	r3, r1
 80065a0:	d101      	bne.n	80065a6 <HAL_I2S_DMAResume+0x9a>
 80065a2:	4b23      	ldr	r3, [pc, #140]	; (8006630 <HAL_I2S_DMAResume+0x124>)
 80065a4:	e001      	b.n	80065aa <HAL_I2S_DMAResume+0x9e>
 80065a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065aa:	f042 0203 	orr.w	r2, r2, #3
 80065ae:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a1d      	ldr	r2, [pc, #116]	; (800662c <HAL_I2S_DMAResume+0x120>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d101      	bne.n	80065be <HAL_I2S_DMAResume+0xb2>
 80065ba:	4b1d      	ldr	r3, [pc, #116]	; (8006630 <HAL_I2S_DMAResume+0x124>)
 80065bc:	e001      	b.n	80065c2 <HAL_I2S_DMAResume+0xb6>
 80065be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065c2:	69db      	ldr	r3, [r3, #28]
 80065c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d115      	bne.n	80065f8 <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a16      	ldr	r2, [pc, #88]	; (800662c <HAL_I2S_DMAResume+0x120>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d101      	bne.n	80065da <HAL_I2S_DMAResume+0xce>
 80065d6:	4b16      	ldr	r3, [pc, #88]	; (8006630 <HAL_I2S_DMAResume+0x124>)
 80065d8:	e001      	b.n	80065de <HAL_I2S_DMAResume+0xd2>
 80065da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065de:	69da      	ldr	r2, [r3, #28]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4911      	ldr	r1, [pc, #68]	; (800662c <HAL_I2S_DMAResume+0x120>)
 80065e6:	428b      	cmp	r3, r1
 80065e8:	d101      	bne.n	80065ee <HAL_I2S_DMAResume+0xe2>
 80065ea:	4b11      	ldr	r3, [pc, #68]	; (8006630 <HAL_I2S_DMAResume+0x124>)
 80065ec:	e001      	b.n	80065f2 <HAL_I2S_DMAResume+0xe6>
 80065ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065f6:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	69db      	ldr	r3, [r3, #28]
 80065fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006602:	2b00      	cmp	r3, #0
 8006604:	d107      	bne.n	8006616 <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	69da      	ldr	r2, [r3, #28]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006614:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr
 800662c:	40003800 	.word	0x40003800
 8006630:	40003400 	.word	0x40003400

08006634 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b088      	sub	sp, #32
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 800663c:	2300      	movs	r3, #0
 800663e:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006648:	d004      	beq.n	8006654 <HAL_I2S_DMAStop+0x20>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	2b00      	cmp	r3, #0
 8006650:	f040 80d1 	bne.w	80067f6 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00f      	beq.n	800667c <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006660:	4618      	mov	r0, r3
 8006662:	f7fc fb43 	bl	8002cec <HAL_DMA_Abort>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d007      	beq.n	800667c <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006670:	f043 0208 	orr.w	r2, r3, #8
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800667c:	2364      	movs	r3, #100	; 0x64
 800667e:	2201      	movs	r2, #1
 8006680:	2102      	movs	r1, #2
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fb04 	bl	8006c90 <I2S_WaitFlagStateUntilTimeout>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00b      	beq.n	80066a6 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006692:	f043 0201 	orr.w	r2, r3, #1
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80066a6:	2364      	movs	r3, #100	; 0x64
 80066a8:	2200      	movs	r2, #0
 80066aa:	2180      	movs	r1, #128	; 0x80
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 faef 	bl	8006c90 <I2S_WaitFlagStateUntilTimeout>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00b      	beq.n	80066d0 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066bc:	f043 0201 	orr.w	r2, r3, #1
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	69da      	ldr	r2, [r3, #28]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066de:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80066e0:	2300      	movs	r3, #0
 80066e2:	617b      	str	r3, [r7, #20]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	617b      	str	r3, [r7, #20]
 80066ec:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	685a      	ldr	r2, [r3, #4]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f022 0202 	bic.w	r2, r2, #2
 80066fc:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006704:	b2db      	uxtb	r3, r3
 8006706:	2b05      	cmp	r3, #5
 8006708:	f040 8165 	bne.w	80069d6 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006710:	2b00      	cmp	r3, #0
 8006712:	d00f      	beq.n	8006734 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006718:	4618      	mov	r0, r3
 800671a:	f7fc fae7 	bl	8002cec <HAL_DMA_Abort>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d007      	beq.n	8006734 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006728:	f043 0208 	orr.w	r2, r3, #8
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a8a      	ldr	r2, [pc, #552]	; (8006964 <HAL_I2S_DMAStop+0x330>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d101      	bne.n	8006742 <HAL_I2S_DMAStop+0x10e>
 800673e:	4b8a      	ldr	r3, [pc, #552]	; (8006968 <HAL_I2S_DMAStop+0x334>)
 8006740:	e001      	b.n	8006746 <HAL_I2S_DMAStop+0x112>
 8006742:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006746:	69da      	ldr	r2, [r3, #28]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4985      	ldr	r1, [pc, #532]	; (8006964 <HAL_I2S_DMAStop+0x330>)
 800674e:	428b      	cmp	r3, r1
 8006750:	d101      	bne.n	8006756 <HAL_I2S_DMAStop+0x122>
 8006752:	4b85      	ldr	r3, [pc, #532]	; (8006968 <HAL_I2S_DMAStop+0x334>)
 8006754:	e001      	b.n	800675a <HAL_I2S_DMAStop+0x126>
 8006756:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800675a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800675e:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8006760:	2300      	movs	r3, #0
 8006762:	613b      	str	r3, [r7, #16]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a7e      	ldr	r2, [pc, #504]	; (8006964 <HAL_I2S_DMAStop+0x330>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d101      	bne.n	8006772 <HAL_I2S_DMAStop+0x13e>
 800676e:	4b7e      	ldr	r3, [pc, #504]	; (8006968 <HAL_I2S_DMAStop+0x334>)
 8006770:	e001      	b.n	8006776 <HAL_I2S_DMAStop+0x142>
 8006772:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	613b      	str	r3, [r7, #16]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a79      	ldr	r2, [pc, #484]	; (8006964 <HAL_I2S_DMAStop+0x330>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d101      	bne.n	8006788 <HAL_I2S_DMAStop+0x154>
 8006784:	4b78      	ldr	r3, [pc, #480]	; (8006968 <HAL_I2S_DMAStop+0x334>)
 8006786:	e001      	b.n	800678c <HAL_I2S_DMAStop+0x158>
 8006788:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	613b      	str	r3, [r7, #16]
 8006790:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a73      	ldr	r2, [pc, #460]	; (8006964 <HAL_I2S_DMAStop+0x330>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d101      	bne.n	80067a0 <HAL_I2S_DMAStop+0x16c>
 800679c:	4b72      	ldr	r3, [pc, #456]	; (8006968 <HAL_I2S_DMAStop+0x334>)
 800679e:	e001      	b.n	80067a4 <HAL_I2S_DMAStop+0x170>
 80067a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067a4:	685a      	ldr	r2, [r3, #4]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	496e      	ldr	r1, [pc, #440]	; (8006964 <HAL_I2S_DMAStop+0x330>)
 80067ac:	428b      	cmp	r3, r1
 80067ae:	d101      	bne.n	80067b4 <HAL_I2S_DMAStop+0x180>
 80067b0:	4b6d      	ldr	r3, [pc, #436]	; (8006968 <HAL_I2S_DMAStop+0x334>)
 80067b2:	e001      	b.n	80067b8 <HAL_I2S_DMAStop+0x184>
 80067b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067b8:	f022 0201 	bic.w	r2, r2, #1
 80067bc:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10c      	bne.n	80067e0 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2201      	movs	r2, #1
 80067d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80067de:	e0fa      	b.n	80069d6 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a5f      	ldr	r2, [pc, #380]	; (8006964 <HAL_I2S_DMAStop+0x330>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d101      	bne.n	80067ee <HAL_I2S_DMAStop+0x1ba>
 80067ea:	4b5f      	ldr	r3, [pc, #380]	; (8006968 <HAL_I2S_DMAStop+0x334>)
 80067ec:	e001      	b.n	80067f2 <HAL_I2S_DMAStop+0x1be>
 80067ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067f2:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80067f4:	e0ef      	b.n	80069d6 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067fe:	d005      	beq.n	800680c <HAL_I2S_DMAStop+0x1d8>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006808:	f040 80e5 	bne.w	80069d6 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00f      	beq.n	8006834 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006818:	4618      	mov	r0, r3
 800681a:	f7fc fa67 	bl	8002cec <HAL_DMA_Abort>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d007      	beq.n	8006834 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006828:	f043 0208 	orr.w	r2, r3, #8
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800683a:	b2db      	uxtb	r3, r3
 800683c:	2b05      	cmp	r3, #5
 800683e:	f040 809a 	bne.w	8006976 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00f      	beq.n	800686a <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684e:	4618      	mov	r0, r3
 8006850:	f7fc fa4c 	bl	8002cec <HAL_DMA_Abort>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d007      	beq.n	800686a <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800685e:	f043 0208 	orr.w	r2, r3, #8
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 800686a:	f7fb ff99 	bl	80027a0 <HAL_GetTick>
 800686e:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8006870:	e012      	b.n	8006898 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8006872:	f7fb ff95 	bl	80027a0 <HAL_GetTick>
 8006876:	4602      	mov	r2, r0
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	2b64      	cmp	r3, #100	; 0x64
 800687e:	d90b      	bls.n	8006898 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006884:	f043 0201 	orr.w	r2, r3, #1
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a31      	ldr	r2, [pc, #196]	; (8006964 <HAL_I2S_DMAStop+0x330>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d101      	bne.n	80068a6 <HAL_I2S_DMAStop+0x272>
 80068a2:	4b31      	ldr	r3, [pc, #196]	; (8006968 <HAL_I2S_DMAStop+0x334>)
 80068a4:	e001      	b.n	80068aa <HAL_I2S_DMAStop+0x276>
 80068a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f003 0302 	and.w	r3, r3, #2
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d1de      	bne.n	8006872 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80068b4:	e012      	b.n	80068dc <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80068b6:	f7fb ff73 	bl	80027a0 <HAL_GetTick>
 80068ba:	4602      	mov	r2, r0
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	1ad3      	subs	r3, r2, r3
 80068c0:	2b64      	cmp	r3, #100	; 0x64
 80068c2:	d90b      	bls.n	80068dc <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068c8:	f043 0201 	orr.w	r2, r3, #1
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a20      	ldr	r2, [pc, #128]	; (8006964 <HAL_I2S_DMAStop+0x330>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d101      	bne.n	80068ea <HAL_I2S_DMAStop+0x2b6>
 80068e6:	4b20      	ldr	r3, [pc, #128]	; (8006968 <HAL_I2S_DMAStop+0x334>)
 80068e8:	e001      	b.n	80068ee <HAL_I2S_DMAStop+0x2ba>
 80068ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068f4:	2b80      	cmp	r3, #128	; 0x80
 80068f6:	d0de      	beq.n	80068b6 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a19      	ldr	r2, [pc, #100]	; (8006964 <HAL_I2S_DMAStop+0x330>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d101      	bne.n	8006906 <HAL_I2S_DMAStop+0x2d2>
 8006902:	4b19      	ldr	r3, [pc, #100]	; (8006968 <HAL_I2S_DMAStop+0x334>)
 8006904:	e001      	b.n	800690a <HAL_I2S_DMAStop+0x2d6>
 8006906:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800690a:	69da      	ldr	r2, [r3, #28]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4914      	ldr	r1, [pc, #80]	; (8006964 <HAL_I2S_DMAStop+0x330>)
 8006912:	428b      	cmp	r3, r1
 8006914:	d101      	bne.n	800691a <HAL_I2S_DMAStop+0x2e6>
 8006916:	4b14      	ldr	r3, [pc, #80]	; (8006968 <HAL_I2S_DMAStop+0x334>)
 8006918:	e001      	b.n	800691e <HAL_I2S_DMAStop+0x2ea>
 800691a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800691e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006922:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8006924:	2300      	movs	r3, #0
 8006926:	60fb      	str	r3, [r7, #12]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a0d      	ldr	r2, [pc, #52]	; (8006964 <HAL_I2S_DMAStop+0x330>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d101      	bne.n	8006936 <HAL_I2S_DMAStop+0x302>
 8006932:	4b0d      	ldr	r3, [pc, #52]	; (8006968 <HAL_I2S_DMAStop+0x334>)
 8006934:	e001      	b.n	800693a <HAL_I2S_DMAStop+0x306>
 8006936:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	60fb      	str	r3, [r7, #12]
 800693e:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a07      	ldr	r2, [pc, #28]	; (8006964 <HAL_I2S_DMAStop+0x330>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d101      	bne.n	800694e <HAL_I2S_DMAStop+0x31a>
 800694a:	4b07      	ldr	r3, [pc, #28]	; (8006968 <HAL_I2S_DMAStop+0x334>)
 800694c:	e001      	b.n	8006952 <HAL_I2S_DMAStop+0x31e>
 800694e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006952:	685a      	ldr	r2, [r3, #4]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4902      	ldr	r1, [pc, #8]	; (8006964 <HAL_I2S_DMAStop+0x330>)
 800695a:	428b      	cmp	r3, r1
 800695c:	d106      	bne.n	800696c <HAL_I2S_DMAStop+0x338>
 800695e:	4b02      	ldr	r3, [pc, #8]	; (8006968 <HAL_I2S_DMAStop+0x334>)
 8006960:	e006      	b.n	8006970 <HAL_I2S_DMAStop+0x33c>
 8006962:	bf00      	nop
 8006964:	40003800 	.word	0x40003800
 8006968:	40003400 	.word	0x40003400
 800696c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006970:	f022 0202 	bic.w	r2, r2, #2
 8006974:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	69da      	ldr	r2, [r3, #28]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006984:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006986:	2300      	movs	r3, #0
 8006988:	60bb      	str	r3, [r7, #8]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	60bb      	str	r3, [r7, #8]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	60bb      	str	r3, [r7, #8]
 800699a:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	685a      	ldr	r2, [r3, #4]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f022 0201 	bic.w	r2, r2, #1
 80069aa:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069b4:	d10c      	bne.n	80069d0 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2201      	movs	r2, #1
 80069c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	77fb      	strb	r3, [r7, #31]
 80069ce:	e002      	b.n	80069d6 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2201      	movs	r2, #1
 80069da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 80069de:	7ffb      	ldrb	r3, [r7, #31]
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3720      	adds	r7, #32
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80069f0:	bf00      	nop
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a0a:	b2db      	uxtb	r3, r3
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a24:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	69db      	ldr	r3, [r3, #28]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d10e      	bne.n	8006a4c <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	685a      	ldr	r2, [r3, #4]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f022 0202 	bic.w	r2, r2, #2
 8006a3c:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f7f9 fe21 	bl	8000694 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006a52:	bf00      	nop
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b084      	sub	sp, #16
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a66:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f7f9 fe25 	bl	80006b8 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006a6e:	bf00      	nop
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b084      	sub	sp, #16
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a82:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	685a      	ldr	r2, [r3, #4]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f022 0203 	bic.w	r2, r2, #3
 8006a92:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aac:	f043 0208 	orr.w	r2, r3, #8
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f7f9 ff6b 	bl	8000990 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006aba:	bf00      	nop
 8006abc:	3710      	adds	r7, #16
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b082      	sub	sp, #8
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ace:	881a      	ldrh	r2, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ada:	1c9a      	adds	r2, r3, #2
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	3b01      	subs	r3, #1
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10e      	bne.n	8006b16 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	685a      	ldr	r2, [r3, #4]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006b06:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f7f9 fdbf 	bl	8000694 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006b16:	bf00      	nop
 8006b18:	3708      	adds	r7, #8
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b082      	sub	sp, #8
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68da      	ldr	r2, [r3, #12]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b30:	b292      	uxth	r2, r2
 8006b32:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b38:	1c9a      	adds	r2, r3, #2
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	3b01      	subs	r3, #1
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10e      	bne.n	8006b74 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	685a      	ldr	r2, [r3, #4]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006b64:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f7ff ff3a 	bl	80069e8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006b74:	bf00      	nop
 8006b76:	3708      	adds	r7, #8
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b086      	sub	sp, #24
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	2b04      	cmp	r3, #4
 8006b96:	d13a      	bne.n	8006c0e <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	f003 0301 	and.w	r3, r3, #1
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d109      	bne.n	8006bb6 <I2S_IRQHandler+0x3a>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bac:	2b40      	cmp	r3, #64	; 0x40
 8006bae:	d102      	bne.n	8006bb6 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f7ff ffb4 	bl	8006b1e <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bbc:	2b40      	cmp	r3, #64	; 0x40
 8006bbe:	d126      	bne.n	8006c0e <I2S_IRQHandler+0x92>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	f003 0320 	and.w	r3, r3, #32
 8006bca:	2b20      	cmp	r3, #32
 8006bcc:	d11f      	bne.n	8006c0e <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	685a      	ldr	r2, [r3, #4]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006bdc:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006bde:	2300      	movs	r3, #0
 8006be0:	613b      	str	r3, [r7, #16]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	613b      	str	r3, [r7, #16]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	613b      	str	r3, [r7, #16]
 8006bf2:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c00:	f043 0202 	orr.w	r2, r3, #2
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f7f9 fec1 	bl	8000990 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	2b03      	cmp	r3, #3
 8006c18:	d136      	bne.n	8006c88 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	f003 0302 	and.w	r3, r3, #2
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d109      	bne.n	8006c38 <I2S_IRQHandler+0xbc>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c2e:	2b80      	cmp	r3, #128	; 0x80
 8006c30:	d102      	bne.n	8006c38 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f7ff ff45 	bl	8006ac2 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	f003 0308 	and.w	r3, r3, #8
 8006c3e:	2b08      	cmp	r3, #8
 8006c40:	d122      	bne.n	8006c88 <I2S_IRQHandler+0x10c>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	f003 0320 	and.w	r3, r3, #32
 8006c4c:	2b20      	cmp	r3, #32
 8006c4e:	d11b      	bne.n	8006c88 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	685a      	ldr	r2, [r3, #4]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006c5e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006c60:	2300      	movs	r3, #0
 8006c62:	60fb      	str	r3, [r7, #12]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	60fb      	str	r3, [r7, #12]
 8006c6c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c7a:	f043 0204 	orr.w	r2, r3, #4
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f7f9 fe84 	bl	8000990 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006c88:	bf00      	nop
 8006c8a:	3718      	adds	r7, #24
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b086      	sub	sp, #24
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	60f8      	str	r0, [r7, #12]
 8006c98:	60b9      	str	r1, [r7, #8]
 8006c9a:	603b      	str	r3, [r7, #0]
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ca0:	f7fb fd7e 	bl	80027a0 <HAL_GetTick>
 8006ca4:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8006ca6:	e018      	b.n	8006cda <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cae:	d014      	beq.n	8006cda <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8006cb0:	f7fb fd76 	bl	80027a0 <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	683a      	ldr	r2, [r7, #0]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d902      	bls.n	8006cc6 <I2S_WaitFlagStateUntilTimeout+0x36>
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d109      	bne.n	8006cda <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	e00f      	b.n	8006cfa <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	689a      	ldr	r2, [r3, #8]
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	4013      	ands	r3, r2
 8006ce4:	68ba      	ldr	r2, [r7, #8]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	bf0c      	ite	eq
 8006cea:	2301      	moveq	r3, #1
 8006cec:	2300      	movne	r3, #0
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	79fb      	ldrb	r3, [r7, #7]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d1d7      	bne.n	8006ca8 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3718      	adds	r7, #24
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
	...

08006d04 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b088      	sub	sp, #32
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a92      	ldr	r2, [pc, #584]	; (8006f64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d101      	bne.n	8006d22 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006d1e:	4b92      	ldr	r3, [pc, #584]	; (8006f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006d20:	e001      	b.n	8006d26 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006d22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a8b      	ldr	r2, [pc, #556]	; (8006f64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d101      	bne.n	8006d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006d3c:	4b8a      	ldr	r3, [pc, #552]	; (8006f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006d3e:	e001      	b.n	8006d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006d40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d50:	d004      	beq.n	8006d5c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	f040 8099 	bne.w	8006e8e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	f003 0302 	and.w	r3, r3, #2
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d107      	bne.n	8006d76 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d002      	beq.n	8006d76 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 f925 	bl	8006fc0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	f003 0301 	and.w	r3, r3, #1
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d107      	bne.n	8006d90 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d002      	beq.n	8006d90 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 f9c8 	bl	8007120 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d96:	2b40      	cmp	r3, #64	; 0x40
 8006d98:	d13a      	bne.n	8006e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	f003 0320 	and.w	r3, r3, #32
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d035      	beq.n	8006e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a6e      	ldr	r2, [pc, #440]	; (8006f64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d101      	bne.n	8006db2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006dae:	4b6e      	ldr	r3, [pc, #440]	; (8006f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006db0:	e001      	b.n	8006db6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006db2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006db6:	685a      	ldr	r2, [r3, #4]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4969      	ldr	r1, [pc, #420]	; (8006f64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006dbe:	428b      	cmp	r3, r1
 8006dc0:	d101      	bne.n	8006dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006dc2:	4b69      	ldr	r3, [pc, #420]	; (8006f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006dc4:	e001      	b.n	8006dca <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006dc6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006dca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006dce:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	685a      	ldr	r2, [r3, #4]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006dde:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006de0:	2300      	movs	r3, #0
 8006de2:	60fb      	str	r3, [r7, #12]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	60fb      	str	r3, [r7, #12]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	60fb      	str	r3, [r7, #12]
 8006df4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e02:	f043 0202 	orr.w	r2, r3, #2
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f7f9 fdc0 	bl	8000990 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	f003 0308 	and.w	r3, r3, #8
 8006e16:	2b08      	cmp	r3, #8
 8006e18:	f040 80c3 	bne.w	8006fa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	f003 0320 	and.w	r3, r3, #32
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	f000 80bd 	beq.w	8006fa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	685a      	ldr	r2, [r3, #4]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006e36:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a49      	ldr	r2, [pc, #292]	; (8006f64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d101      	bne.n	8006e46 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006e42:	4b49      	ldr	r3, [pc, #292]	; (8006f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006e44:	e001      	b.n	8006e4a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006e46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4944      	ldr	r1, [pc, #272]	; (8006f64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006e52:	428b      	cmp	r3, r1
 8006e54:	d101      	bne.n	8006e5a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006e56:	4b44      	ldr	r3, [pc, #272]	; (8006f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006e58:	e001      	b.n	8006e5e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006e5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006e62:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006e64:	2300      	movs	r3, #0
 8006e66:	60bb      	str	r3, [r7, #8]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	60bb      	str	r3, [r7, #8]
 8006e70:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2201      	movs	r2, #1
 8006e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e7e:	f043 0204 	orr.w	r2, r3, #4
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f7f9 fd82 	bl	8000990 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006e8c:	e089      	b.n	8006fa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	f003 0302 	and.w	r3, r3, #2
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d107      	bne.n	8006ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d002      	beq.n	8006ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f8be 	bl	8007024 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	f003 0301 	and.w	r3, r3, #1
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d107      	bne.n	8006ec2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d002      	beq.n	8006ec2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 f8fd 	bl	80070bc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec8:	2b40      	cmp	r3, #64	; 0x40
 8006eca:	d12f      	bne.n	8006f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	f003 0320 	and.w	r3, r3, #32
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d02a      	beq.n	8006f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006ee4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a1e      	ldr	r2, [pc, #120]	; (8006f64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d101      	bne.n	8006ef4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006ef0:	4b1d      	ldr	r3, [pc, #116]	; (8006f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006ef2:	e001      	b.n	8006ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006ef4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ef8:	685a      	ldr	r2, [r3, #4]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4919      	ldr	r1, [pc, #100]	; (8006f64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006f00:	428b      	cmp	r3, r1
 8006f02:	d101      	bne.n	8006f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006f04:	4b18      	ldr	r3, [pc, #96]	; (8006f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006f06:	e001      	b.n	8006f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006f08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006f10:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f1e:	f043 0202 	orr.w	r2, r3, #2
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f7f9 fd32 	bl	8000990 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	f003 0308 	and.w	r3, r3, #8
 8006f32:	2b08      	cmp	r3, #8
 8006f34:	d136      	bne.n	8006fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	f003 0320 	and.w	r3, r3, #32
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d031      	beq.n	8006fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a07      	ldr	r2, [pc, #28]	; (8006f64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d101      	bne.n	8006f4e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006f4a:	4b07      	ldr	r3, [pc, #28]	; (8006f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006f4c:	e001      	b.n	8006f52 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006f4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f52:	685a      	ldr	r2, [r3, #4]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4902      	ldr	r1, [pc, #8]	; (8006f64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006f5a:	428b      	cmp	r3, r1
 8006f5c:	d106      	bne.n	8006f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006f5e:	4b02      	ldr	r3, [pc, #8]	; (8006f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006f60:	e006      	b.n	8006f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006f62:	bf00      	nop
 8006f64:	40003800 	.word	0x40003800
 8006f68:	40003400 	.word	0x40003400
 8006f6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006f74:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	685a      	ldr	r2, [r3, #4]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006f84:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f92:	f043 0204 	orr.w	r2, r3, #4
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f7f9 fcf8 	bl	8000990 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006fa0:	e000      	b.n	8006fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006fa2:	bf00      	nop
}
 8006fa4:	bf00      	nop
 8006fa6:	3720      	adds	r7, #32
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b083      	sub	sp, #12
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006fb4:	bf00      	nop
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fcc:	1c99      	adds	r1, r3, #2
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	6251      	str	r1, [r2, #36]	; 0x24
 8006fd2:	881a      	ldrh	r2, [r3, #0]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	b29a      	uxth	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d113      	bne.n	800701a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	685a      	ldr	r2, [r3, #4]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007000:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007006:	b29b      	uxth	r3, r3
 8007008:	2b00      	cmp	r3, #0
 800700a:	d106      	bne.n	800701a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f7ff ffc9 	bl	8006fac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800701a:	bf00      	nop
 800701c:	3708      	adds	r7, #8
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
	...

08007024 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007030:	1c99      	adds	r1, r3, #2
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	6251      	str	r1, [r2, #36]	; 0x24
 8007036:	8819      	ldrh	r1, [r3, #0]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a1d      	ldr	r2, [pc, #116]	; (80070b4 <I2SEx_TxISR_I2SExt+0x90>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d101      	bne.n	8007046 <I2SEx_TxISR_I2SExt+0x22>
 8007042:	4b1d      	ldr	r3, [pc, #116]	; (80070b8 <I2SEx_TxISR_I2SExt+0x94>)
 8007044:	e001      	b.n	800704a <I2SEx_TxISR_I2SExt+0x26>
 8007046:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800704a:	460a      	mov	r2, r1
 800704c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007052:	b29b      	uxth	r3, r3
 8007054:	3b01      	subs	r3, #1
 8007056:	b29a      	uxth	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007060:	b29b      	uxth	r3, r3
 8007062:	2b00      	cmp	r3, #0
 8007064:	d121      	bne.n	80070aa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a12      	ldr	r2, [pc, #72]	; (80070b4 <I2SEx_TxISR_I2SExt+0x90>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d101      	bne.n	8007074 <I2SEx_TxISR_I2SExt+0x50>
 8007070:	4b11      	ldr	r3, [pc, #68]	; (80070b8 <I2SEx_TxISR_I2SExt+0x94>)
 8007072:	e001      	b.n	8007078 <I2SEx_TxISR_I2SExt+0x54>
 8007074:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007078:	685a      	ldr	r2, [r3, #4]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	490d      	ldr	r1, [pc, #52]	; (80070b4 <I2SEx_TxISR_I2SExt+0x90>)
 8007080:	428b      	cmp	r3, r1
 8007082:	d101      	bne.n	8007088 <I2SEx_TxISR_I2SExt+0x64>
 8007084:	4b0c      	ldr	r3, [pc, #48]	; (80070b8 <I2SEx_TxISR_I2SExt+0x94>)
 8007086:	e001      	b.n	800708c <I2SEx_TxISR_I2SExt+0x68>
 8007088:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800708c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007090:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007096:	b29b      	uxth	r3, r3
 8007098:	2b00      	cmp	r3, #0
 800709a:	d106      	bne.n	80070aa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f7ff ff81 	bl	8006fac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80070aa:	bf00      	nop
 80070ac:	3708      	adds	r7, #8
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	40003800 	.word	0x40003800
 80070b8:	40003400 	.word	0x40003400

080070bc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68d8      	ldr	r0, [r3, #12]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ce:	1c99      	adds	r1, r3, #2
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80070d4:	b282      	uxth	r2, r0
 80070d6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80070dc:	b29b      	uxth	r3, r3
 80070de:	3b01      	subs	r3, #1
 80070e0:	b29a      	uxth	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d113      	bne.n	8007118 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	685a      	ldr	r2, [r3, #4]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80070fe:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007104:	b29b      	uxth	r3, r3
 8007106:	2b00      	cmp	r3, #0
 8007108:	d106      	bne.n	8007118 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2201      	movs	r2, #1
 800710e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f7ff ff4a 	bl	8006fac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007118:	bf00      	nop
 800711a:	3708      	adds	r7, #8
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a20      	ldr	r2, [pc, #128]	; (80071b0 <I2SEx_RxISR_I2SExt+0x90>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d101      	bne.n	8007136 <I2SEx_RxISR_I2SExt+0x16>
 8007132:	4b20      	ldr	r3, [pc, #128]	; (80071b4 <I2SEx_RxISR_I2SExt+0x94>)
 8007134:	e001      	b.n	800713a <I2SEx_RxISR_I2SExt+0x1a>
 8007136:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800713a:	68d8      	ldr	r0, [r3, #12]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007140:	1c99      	adds	r1, r3, #2
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007146:	b282      	uxth	r2, r0
 8007148:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800714e:	b29b      	uxth	r3, r3
 8007150:	3b01      	subs	r3, #1
 8007152:	b29a      	uxth	r2, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800715c:	b29b      	uxth	r3, r3
 800715e:	2b00      	cmp	r3, #0
 8007160:	d121      	bne.n	80071a6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a12      	ldr	r2, [pc, #72]	; (80071b0 <I2SEx_RxISR_I2SExt+0x90>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d101      	bne.n	8007170 <I2SEx_RxISR_I2SExt+0x50>
 800716c:	4b11      	ldr	r3, [pc, #68]	; (80071b4 <I2SEx_RxISR_I2SExt+0x94>)
 800716e:	e001      	b.n	8007174 <I2SEx_RxISR_I2SExt+0x54>
 8007170:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007174:	685a      	ldr	r2, [r3, #4]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	490d      	ldr	r1, [pc, #52]	; (80071b0 <I2SEx_RxISR_I2SExt+0x90>)
 800717c:	428b      	cmp	r3, r1
 800717e:	d101      	bne.n	8007184 <I2SEx_RxISR_I2SExt+0x64>
 8007180:	4b0c      	ldr	r3, [pc, #48]	; (80071b4 <I2SEx_RxISR_I2SExt+0x94>)
 8007182:	e001      	b.n	8007188 <I2SEx_RxISR_I2SExt+0x68>
 8007184:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007188:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800718c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007192:	b29b      	uxth	r3, r3
 8007194:	2b00      	cmp	r3, #0
 8007196:	d106      	bne.n	80071a6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f7ff ff03 	bl	8006fac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80071a6:	bf00      	nop
 80071a8:	3708      	adds	r7, #8
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	40003800 	.word	0x40003800
 80071b4:	40003400 	.word	0x40003400

080071b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b086      	sub	sp, #24
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d101      	bne.n	80071ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e267      	b.n	800769a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0301 	and.w	r3, r3, #1
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d075      	beq.n	80072c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80071d6:	4b88      	ldr	r3, [pc, #544]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f003 030c 	and.w	r3, r3, #12
 80071de:	2b04      	cmp	r3, #4
 80071e0:	d00c      	beq.n	80071fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80071e2:	4b85      	ldr	r3, [pc, #532]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80071ea:	2b08      	cmp	r3, #8
 80071ec:	d112      	bne.n	8007214 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80071ee:	4b82      	ldr	r3, [pc, #520]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071fa:	d10b      	bne.n	8007214 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071fc:	4b7e      	ldr	r3, [pc, #504]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007204:	2b00      	cmp	r3, #0
 8007206:	d05b      	beq.n	80072c0 <HAL_RCC_OscConfig+0x108>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d157      	bne.n	80072c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	e242      	b.n	800769a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800721c:	d106      	bne.n	800722c <HAL_RCC_OscConfig+0x74>
 800721e:	4b76      	ldr	r3, [pc, #472]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a75      	ldr	r2, [pc, #468]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 8007224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007228:	6013      	str	r3, [r2, #0]
 800722a:	e01d      	b.n	8007268 <HAL_RCC_OscConfig+0xb0>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007234:	d10c      	bne.n	8007250 <HAL_RCC_OscConfig+0x98>
 8007236:	4b70      	ldr	r3, [pc, #448]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a6f      	ldr	r2, [pc, #444]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 800723c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007240:	6013      	str	r3, [r2, #0]
 8007242:	4b6d      	ldr	r3, [pc, #436]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a6c      	ldr	r2, [pc, #432]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 8007248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800724c:	6013      	str	r3, [r2, #0]
 800724e:	e00b      	b.n	8007268 <HAL_RCC_OscConfig+0xb0>
 8007250:	4b69      	ldr	r3, [pc, #420]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a68      	ldr	r2, [pc, #416]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 8007256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800725a:	6013      	str	r3, [r2, #0]
 800725c:	4b66      	ldr	r3, [pc, #408]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a65      	ldr	r2, [pc, #404]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 8007262:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007266:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d013      	beq.n	8007298 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007270:	f7fb fa96 	bl	80027a0 <HAL_GetTick>
 8007274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007276:	e008      	b.n	800728a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007278:	f7fb fa92 	bl	80027a0 <HAL_GetTick>
 800727c:	4602      	mov	r2, r0
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	2b64      	cmp	r3, #100	; 0x64
 8007284:	d901      	bls.n	800728a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	e207      	b.n	800769a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800728a:	4b5b      	ldr	r3, [pc, #364]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007292:	2b00      	cmp	r3, #0
 8007294:	d0f0      	beq.n	8007278 <HAL_RCC_OscConfig+0xc0>
 8007296:	e014      	b.n	80072c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007298:	f7fb fa82 	bl	80027a0 <HAL_GetTick>
 800729c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800729e:	e008      	b.n	80072b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80072a0:	f7fb fa7e 	bl	80027a0 <HAL_GetTick>
 80072a4:	4602      	mov	r2, r0
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	1ad3      	subs	r3, r2, r3
 80072aa:	2b64      	cmp	r3, #100	; 0x64
 80072ac:	d901      	bls.n	80072b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80072ae:	2303      	movs	r3, #3
 80072b0:	e1f3      	b.n	800769a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072b2:	4b51      	ldr	r3, [pc, #324]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d1f0      	bne.n	80072a0 <HAL_RCC_OscConfig+0xe8>
 80072be:	e000      	b.n	80072c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 0302 	and.w	r3, r3, #2
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d063      	beq.n	8007396 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80072ce:	4b4a      	ldr	r3, [pc, #296]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	f003 030c 	and.w	r3, r3, #12
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00b      	beq.n	80072f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072da:	4b47      	ldr	r3, [pc, #284]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80072e2:	2b08      	cmp	r3, #8
 80072e4:	d11c      	bne.n	8007320 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072e6:	4b44      	ldr	r3, [pc, #272]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d116      	bne.n	8007320 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072f2:	4b41      	ldr	r3, [pc, #260]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0302 	and.w	r3, r3, #2
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d005      	beq.n	800730a <HAL_RCC_OscConfig+0x152>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	2b01      	cmp	r3, #1
 8007304:	d001      	beq.n	800730a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e1c7      	b.n	800769a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800730a:	4b3b      	ldr	r3, [pc, #236]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	00db      	lsls	r3, r3, #3
 8007318:	4937      	ldr	r1, [pc, #220]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 800731a:	4313      	orrs	r3, r2
 800731c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800731e:	e03a      	b.n	8007396 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d020      	beq.n	800736a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007328:	4b34      	ldr	r3, [pc, #208]	; (80073fc <HAL_RCC_OscConfig+0x244>)
 800732a:	2201      	movs	r2, #1
 800732c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800732e:	f7fb fa37 	bl	80027a0 <HAL_GetTick>
 8007332:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007334:	e008      	b.n	8007348 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007336:	f7fb fa33 	bl	80027a0 <HAL_GetTick>
 800733a:	4602      	mov	r2, r0
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	2b02      	cmp	r3, #2
 8007342:	d901      	bls.n	8007348 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007344:	2303      	movs	r3, #3
 8007346:	e1a8      	b.n	800769a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007348:	4b2b      	ldr	r3, [pc, #172]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 0302 	and.w	r3, r3, #2
 8007350:	2b00      	cmp	r3, #0
 8007352:	d0f0      	beq.n	8007336 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007354:	4b28      	ldr	r3, [pc, #160]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	00db      	lsls	r3, r3, #3
 8007362:	4925      	ldr	r1, [pc, #148]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 8007364:	4313      	orrs	r3, r2
 8007366:	600b      	str	r3, [r1, #0]
 8007368:	e015      	b.n	8007396 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800736a:	4b24      	ldr	r3, [pc, #144]	; (80073fc <HAL_RCC_OscConfig+0x244>)
 800736c:	2200      	movs	r2, #0
 800736e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007370:	f7fb fa16 	bl	80027a0 <HAL_GetTick>
 8007374:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007376:	e008      	b.n	800738a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007378:	f7fb fa12 	bl	80027a0 <HAL_GetTick>
 800737c:	4602      	mov	r2, r0
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	2b02      	cmp	r3, #2
 8007384:	d901      	bls.n	800738a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007386:	2303      	movs	r3, #3
 8007388:	e187      	b.n	800769a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800738a:	4b1b      	ldr	r3, [pc, #108]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 0302 	and.w	r3, r3, #2
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1f0      	bne.n	8007378 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 0308 	and.w	r3, r3, #8
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d036      	beq.n	8007410 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	695b      	ldr	r3, [r3, #20]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d016      	beq.n	80073d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073aa:	4b15      	ldr	r3, [pc, #84]	; (8007400 <HAL_RCC_OscConfig+0x248>)
 80073ac:	2201      	movs	r2, #1
 80073ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073b0:	f7fb f9f6 	bl	80027a0 <HAL_GetTick>
 80073b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073b6:	e008      	b.n	80073ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073b8:	f7fb f9f2 	bl	80027a0 <HAL_GetTick>
 80073bc:	4602      	mov	r2, r0
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d901      	bls.n	80073ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80073c6:	2303      	movs	r3, #3
 80073c8:	e167      	b.n	800769a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073ca:	4b0b      	ldr	r3, [pc, #44]	; (80073f8 <HAL_RCC_OscConfig+0x240>)
 80073cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073ce:	f003 0302 	and.w	r3, r3, #2
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d0f0      	beq.n	80073b8 <HAL_RCC_OscConfig+0x200>
 80073d6:	e01b      	b.n	8007410 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073d8:	4b09      	ldr	r3, [pc, #36]	; (8007400 <HAL_RCC_OscConfig+0x248>)
 80073da:	2200      	movs	r2, #0
 80073dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073de:	f7fb f9df 	bl	80027a0 <HAL_GetTick>
 80073e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073e4:	e00e      	b.n	8007404 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073e6:	f7fb f9db 	bl	80027a0 <HAL_GetTick>
 80073ea:	4602      	mov	r2, r0
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	1ad3      	subs	r3, r2, r3
 80073f0:	2b02      	cmp	r3, #2
 80073f2:	d907      	bls.n	8007404 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80073f4:	2303      	movs	r3, #3
 80073f6:	e150      	b.n	800769a <HAL_RCC_OscConfig+0x4e2>
 80073f8:	40023800 	.word	0x40023800
 80073fc:	42470000 	.word	0x42470000
 8007400:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007404:	4b88      	ldr	r3, [pc, #544]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 8007406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007408:	f003 0302 	and.w	r3, r3, #2
 800740c:	2b00      	cmp	r3, #0
 800740e:	d1ea      	bne.n	80073e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 0304 	and.w	r3, r3, #4
 8007418:	2b00      	cmp	r3, #0
 800741a:	f000 8097 	beq.w	800754c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800741e:	2300      	movs	r3, #0
 8007420:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007422:	4b81      	ldr	r3, [pc, #516]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 8007424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800742a:	2b00      	cmp	r3, #0
 800742c:	d10f      	bne.n	800744e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800742e:	2300      	movs	r3, #0
 8007430:	60bb      	str	r3, [r7, #8]
 8007432:	4b7d      	ldr	r3, [pc, #500]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 8007434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007436:	4a7c      	ldr	r2, [pc, #496]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 8007438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800743c:	6413      	str	r3, [r2, #64]	; 0x40
 800743e:	4b7a      	ldr	r3, [pc, #488]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 8007440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007446:	60bb      	str	r3, [r7, #8]
 8007448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800744a:	2301      	movs	r3, #1
 800744c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800744e:	4b77      	ldr	r3, [pc, #476]	; (800762c <HAL_RCC_OscConfig+0x474>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007456:	2b00      	cmp	r3, #0
 8007458:	d118      	bne.n	800748c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800745a:	4b74      	ldr	r3, [pc, #464]	; (800762c <HAL_RCC_OscConfig+0x474>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a73      	ldr	r2, [pc, #460]	; (800762c <HAL_RCC_OscConfig+0x474>)
 8007460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007466:	f7fb f99b 	bl	80027a0 <HAL_GetTick>
 800746a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800746c:	e008      	b.n	8007480 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800746e:	f7fb f997 	bl	80027a0 <HAL_GetTick>
 8007472:	4602      	mov	r2, r0
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	2b02      	cmp	r3, #2
 800747a:	d901      	bls.n	8007480 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800747c:	2303      	movs	r3, #3
 800747e:	e10c      	b.n	800769a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007480:	4b6a      	ldr	r3, [pc, #424]	; (800762c <HAL_RCC_OscConfig+0x474>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007488:	2b00      	cmp	r3, #0
 800748a:	d0f0      	beq.n	800746e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d106      	bne.n	80074a2 <HAL_RCC_OscConfig+0x2ea>
 8007494:	4b64      	ldr	r3, [pc, #400]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 8007496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007498:	4a63      	ldr	r2, [pc, #396]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 800749a:	f043 0301 	orr.w	r3, r3, #1
 800749e:	6713      	str	r3, [r2, #112]	; 0x70
 80074a0:	e01c      	b.n	80074dc <HAL_RCC_OscConfig+0x324>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	2b05      	cmp	r3, #5
 80074a8:	d10c      	bne.n	80074c4 <HAL_RCC_OscConfig+0x30c>
 80074aa:	4b5f      	ldr	r3, [pc, #380]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 80074ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ae:	4a5e      	ldr	r2, [pc, #376]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 80074b0:	f043 0304 	orr.w	r3, r3, #4
 80074b4:	6713      	str	r3, [r2, #112]	; 0x70
 80074b6:	4b5c      	ldr	r3, [pc, #368]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 80074b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ba:	4a5b      	ldr	r2, [pc, #364]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 80074bc:	f043 0301 	orr.w	r3, r3, #1
 80074c0:	6713      	str	r3, [r2, #112]	; 0x70
 80074c2:	e00b      	b.n	80074dc <HAL_RCC_OscConfig+0x324>
 80074c4:	4b58      	ldr	r3, [pc, #352]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 80074c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074c8:	4a57      	ldr	r2, [pc, #348]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 80074ca:	f023 0301 	bic.w	r3, r3, #1
 80074ce:	6713      	str	r3, [r2, #112]	; 0x70
 80074d0:	4b55      	ldr	r3, [pc, #340]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 80074d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074d4:	4a54      	ldr	r2, [pc, #336]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 80074d6:	f023 0304 	bic.w	r3, r3, #4
 80074da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d015      	beq.n	8007510 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074e4:	f7fb f95c 	bl	80027a0 <HAL_GetTick>
 80074e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074ea:	e00a      	b.n	8007502 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074ec:	f7fb f958 	bl	80027a0 <HAL_GetTick>
 80074f0:	4602      	mov	r2, r0
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d901      	bls.n	8007502 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80074fe:	2303      	movs	r3, #3
 8007500:	e0cb      	b.n	800769a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007502:	4b49      	ldr	r3, [pc, #292]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 8007504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007506:	f003 0302 	and.w	r3, r3, #2
 800750a:	2b00      	cmp	r3, #0
 800750c:	d0ee      	beq.n	80074ec <HAL_RCC_OscConfig+0x334>
 800750e:	e014      	b.n	800753a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007510:	f7fb f946 	bl	80027a0 <HAL_GetTick>
 8007514:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007516:	e00a      	b.n	800752e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007518:	f7fb f942 	bl	80027a0 <HAL_GetTick>
 800751c:	4602      	mov	r2, r0
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	f241 3288 	movw	r2, #5000	; 0x1388
 8007526:	4293      	cmp	r3, r2
 8007528:	d901      	bls.n	800752e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800752a:	2303      	movs	r3, #3
 800752c:	e0b5      	b.n	800769a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800752e:	4b3e      	ldr	r3, [pc, #248]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 8007530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007532:	f003 0302 	and.w	r3, r3, #2
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1ee      	bne.n	8007518 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800753a:	7dfb      	ldrb	r3, [r7, #23]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d105      	bne.n	800754c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007540:	4b39      	ldr	r3, [pc, #228]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 8007542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007544:	4a38      	ldr	r2, [pc, #224]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 8007546:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800754a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	699b      	ldr	r3, [r3, #24]
 8007550:	2b00      	cmp	r3, #0
 8007552:	f000 80a1 	beq.w	8007698 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007556:	4b34      	ldr	r3, [pc, #208]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	f003 030c 	and.w	r3, r3, #12
 800755e:	2b08      	cmp	r3, #8
 8007560:	d05c      	beq.n	800761c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	699b      	ldr	r3, [r3, #24]
 8007566:	2b02      	cmp	r3, #2
 8007568:	d141      	bne.n	80075ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800756a:	4b31      	ldr	r3, [pc, #196]	; (8007630 <HAL_RCC_OscConfig+0x478>)
 800756c:	2200      	movs	r2, #0
 800756e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007570:	f7fb f916 	bl	80027a0 <HAL_GetTick>
 8007574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007576:	e008      	b.n	800758a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007578:	f7fb f912 	bl	80027a0 <HAL_GetTick>
 800757c:	4602      	mov	r2, r0
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	2b02      	cmp	r3, #2
 8007584:	d901      	bls.n	800758a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007586:	2303      	movs	r3, #3
 8007588:	e087      	b.n	800769a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800758a:	4b27      	ldr	r3, [pc, #156]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007592:	2b00      	cmp	r3, #0
 8007594:	d1f0      	bne.n	8007578 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	69da      	ldr	r2, [r3, #28]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a1b      	ldr	r3, [r3, #32]
 800759e:	431a      	orrs	r2, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a4:	019b      	lsls	r3, r3, #6
 80075a6:	431a      	orrs	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ac:	085b      	lsrs	r3, r3, #1
 80075ae:	3b01      	subs	r3, #1
 80075b0:	041b      	lsls	r3, r3, #16
 80075b2:	431a      	orrs	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b8:	061b      	lsls	r3, r3, #24
 80075ba:	491b      	ldr	r1, [pc, #108]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 80075bc:	4313      	orrs	r3, r2
 80075be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075c0:	4b1b      	ldr	r3, [pc, #108]	; (8007630 <HAL_RCC_OscConfig+0x478>)
 80075c2:	2201      	movs	r2, #1
 80075c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075c6:	f7fb f8eb 	bl	80027a0 <HAL_GetTick>
 80075ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075cc:	e008      	b.n	80075e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075ce:	f7fb f8e7 	bl	80027a0 <HAL_GetTick>
 80075d2:	4602      	mov	r2, r0
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	1ad3      	subs	r3, r2, r3
 80075d8:	2b02      	cmp	r3, #2
 80075da:	d901      	bls.n	80075e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80075dc:	2303      	movs	r3, #3
 80075de:	e05c      	b.n	800769a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075e0:	4b11      	ldr	r3, [pc, #68]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d0f0      	beq.n	80075ce <HAL_RCC_OscConfig+0x416>
 80075ec:	e054      	b.n	8007698 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075ee:	4b10      	ldr	r3, [pc, #64]	; (8007630 <HAL_RCC_OscConfig+0x478>)
 80075f0:	2200      	movs	r2, #0
 80075f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075f4:	f7fb f8d4 	bl	80027a0 <HAL_GetTick>
 80075f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075fa:	e008      	b.n	800760e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075fc:	f7fb f8d0 	bl	80027a0 <HAL_GetTick>
 8007600:	4602      	mov	r2, r0
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	2b02      	cmp	r3, #2
 8007608:	d901      	bls.n	800760e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800760a:	2303      	movs	r3, #3
 800760c:	e045      	b.n	800769a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800760e:	4b06      	ldr	r3, [pc, #24]	; (8007628 <HAL_RCC_OscConfig+0x470>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1f0      	bne.n	80075fc <HAL_RCC_OscConfig+0x444>
 800761a:	e03d      	b.n	8007698 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	699b      	ldr	r3, [r3, #24]
 8007620:	2b01      	cmp	r3, #1
 8007622:	d107      	bne.n	8007634 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e038      	b.n	800769a <HAL_RCC_OscConfig+0x4e2>
 8007628:	40023800 	.word	0x40023800
 800762c:	40007000 	.word	0x40007000
 8007630:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007634:	4b1b      	ldr	r3, [pc, #108]	; (80076a4 <HAL_RCC_OscConfig+0x4ec>)
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	2b01      	cmp	r3, #1
 8007640:	d028      	beq.n	8007694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800764c:	429a      	cmp	r2, r3
 800764e:	d121      	bne.n	8007694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800765a:	429a      	cmp	r2, r3
 800765c:	d11a      	bne.n	8007694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007664:	4013      	ands	r3, r2
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800766a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800766c:	4293      	cmp	r3, r2
 800766e:	d111      	bne.n	8007694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767a:	085b      	lsrs	r3, r3, #1
 800767c:	3b01      	subs	r3, #1
 800767e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007680:	429a      	cmp	r2, r3
 8007682:	d107      	bne.n	8007694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007690:	429a      	cmp	r2, r3
 8007692:	d001      	beq.n	8007698 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e000      	b.n	800769a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3718      	adds	r7, #24
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	40023800 	.word	0x40023800

080076a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d101      	bne.n	80076bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	e0cc      	b.n	8007856 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80076bc:	4b68      	ldr	r3, [pc, #416]	; (8007860 <HAL_RCC_ClockConfig+0x1b8>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0307 	and.w	r3, r3, #7
 80076c4:	683a      	ldr	r2, [r7, #0]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d90c      	bls.n	80076e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076ca:	4b65      	ldr	r3, [pc, #404]	; (8007860 <HAL_RCC_ClockConfig+0x1b8>)
 80076cc:	683a      	ldr	r2, [r7, #0]
 80076ce:	b2d2      	uxtb	r2, r2
 80076d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076d2:	4b63      	ldr	r3, [pc, #396]	; (8007860 <HAL_RCC_ClockConfig+0x1b8>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 0307 	and.w	r3, r3, #7
 80076da:	683a      	ldr	r2, [r7, #0]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d001      	beq.n	80076e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e0b8      	b.n	8007856 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 0302 	and.w	r3, r3, #2
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d020      	beq.n	8007732 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 0304 	and.w	r3, r3, #4
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d005      	beq.n	8007708 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80076fc:	4b59      	ldr	r3, [pc, #356]	; (8007864 <HAL_RCC_ClockConfig+0x1bc>)
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	4a58      	ldr	r2, [pc, #352]	; (8007864 <HAL_RCC_ClockConfig+0x1bc>)
 8007702:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007706:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 0308 	and.w	r3, r3, #8
 8007710:	2b00      	cmp	r3, #0
 8007712:	d005      	beq.n	8007720 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007714:	4b53      	ldr	r3, [pc, #332]	; (8007864 <HAL_RCC_ClockConfig+0x1bc>)
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	4a52      	ldr	r2, [pc, #328]	; (8007864 <HAL_RCC_ClockConfig+0x1bc>)
 800771a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800771e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007720:	4b50      	ldr	r3, [pc, #320]	; (8007864 <HAL_RCC_ClockConfig+0x1bc>)
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	494d      	ldr	r1, [pc, #308]	; (8007864 <HAL_RCC_ClockConfig+0x1bc>)
 800772e:	4313      	orrs	r3, r2
 8007730:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 0301 	and.w	r3, r3, #1
 800773a:	2b00      	cmp	r3, #0
 800773c:	d044      	beq.n	80077c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d107      	bne.n	8007756 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007746:	4b47      	ldr	r3, [pc, #284]	; (8007864 <HAL_RCC_ClockConfig+0x1bc>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800774e:	2b00      	cmp	r3, #0
 8007750:	d119      	bne.n	8007786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e07f      	b.n	8007856 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	2b02      	cmp	r3, #2
 800775c:	d003      	beq.n	8007766 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007762:	2b03      	cmp	r3, #3
 8007764:	d107      	bne.n	8007776 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007766:	4b3f      	ldr	r3, [pc, #252]	; (8007864 <HAL_RCC_ClockConfig+0x1bc>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800776e:	2b00      	cmp	r3, #0
 8007770:	d109      	bne.n	8007786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	e06f      	b.n	8007856 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007776:	4b3b      	ldr	r3, [pc, #236]	; (8007864 <HAL_RCC_ClockConfig+0x1bc>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 0302 	and.w	r3, r3, #2
 800777e:	2b00      	cmp	r3, #0
 8007780:	d101      	bne.n	8007786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	e067      	b.n	8007856 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007786:	4b37      	ldr	r3, [pc, #220]	; (8007864 <HAL_RCC_ClockConfig+0x1bc>)
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	f023 0203 	bic.w	r2, r3, #3
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	4934      	ldr	r1, [pc, #208]	; (8007864 <HAL_RCC_ClockConfig+0x1bc>)
 8007794:	4313      	orrs	r3, r2
 8007796:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007798:	f7fb f802 	bl	80027a0 <HAL_GetTick>
 800779c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800779e:	e00a      	b.n	80077b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077a0:	f7fa fffe 	bl	80027a0 <HAL_GetTick>
 80077a4:	4602      	mov	r2, r0
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	1ad3      	subs	r3, r2, r3
 80077aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d901      	bls.n	80077b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e04f      	b.n	8007856 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077b6:	4b2b      	ldr	r3, [pc, #172]	; (8007864 <HAL_RCC_ClockConfig+0x1bc>)
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	f003 020c 	and.w	r2, r3, #12
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d1eb      	bne.n	80077a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80077c8:	4b25      	ldr	r3, [pc, #148]	; (8007860 <HAL_RCC_ClockConfig+0x1b8>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 0307 	and.w	r3, r3, #7
 80077d0:	683a      	ldr	r2, [r7, #0]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d20c      	bcs.n	80077f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077d6:	4b22      	ldr	r3, [pc, #136]	; (8007860 <HAL_RCC_ClockConfig+0x1b8>)
 80077d8:	683a      	ldr	r2, [r7, #0]
 80077da:	b2d2      	uxtb	r2, r2
 80077dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077de:	4b20      	ldr	r3, [pc, #128]	; (8007860 <HAL_RCC_ClockConfig+0x1b8>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f003 0307 	and.w	r3, r3, #7
 80077e6:	683a      	ldr	r2, [r7, #0]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d001      	beq.n	80077f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e032      	b.n	8007856 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f003 0304 	and.w	r3, r3, #4
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d008      	beq.n	800780e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80077fc:	4b19      	ldr	r3, [pc, #100]	; (8007864 <HAL_RCC_ClockConfig+0x1bc>)
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	4916      	ldr	r1, [pc, #88]	; (8007864 <HAL_RCC_ClockConfig+0x1bc>)
 800780a:	4313      	orrs	r3, r2
 800780c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 0308 	and.w	r3, r3, #8
 8007816:	2b00      	cmp	r3, #0
 8007818:	d009      	beq.n	800782e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800781a:	4b12      	ldr	r3, [pc, #72]	; (8007864 <HAL_RCC_ClockConfig+0x1bc>)
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	691b      	ldr	r3, [r3, #16]
 8007826:	00db      	lsls	r3, r3, #3
 8007828:	490e      	ldr	r1, [pc, #56]	; (8007864 <HAL_RCC_ClockConfig+0x1bc>)
 800782a:	4313      	orrs	r3, r2
 800782c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800782e:	f000 f821 	bl	8007874 <HAL_RCC_GetSysClockFreq>
 8007832:	4602      	mov	r2, r0
 8007834:	4b0b      	ldr	r3, [pc, #44]	; (8007864 <HAL_RCC_ClockConfig+0x1bc>)
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	091b      	lsrs	r3, r3, #4
 800783a:	f003 030f 	and.w	r3, r3, #15
 800783e:	490a      	ldr	r1, [pc, #40]	; (8007868 <HAL_RCC_ClockConfig+0x1c0>)
 8007840:	5ccb      	ldrb	r3, [r1, r3]
 8007842:	fa22 f303 	lsr.w	r3, r2, r3
 8007846:	4a09      	ldr	r2, [pc, #36]	; (800786c <HAL_RCC_ClockConfig+0x1c4>)
 8007848:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800784a:	4b09      	ldr	r3, [pc, #36]	; (8007870 <HAL_RCC_ClockConfig+0x1c8>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4618      	mov	r0, r3
 8007850:	f7fa ff62 	bl	8002718 <HAL_InitTick>

  return HAL_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	40023c00 	.word	0x40023c00
 8007864:	40023800 	.word	0x40023800
 8007868:	08010b24 	.word	0x08010b24
 800786c:	2000003c 	.word	0x2000003c
 8007870:	20000044 	.word	0x20000044

08007874 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007878:	b094      	sub	sp, #80	; 0x50
 800787a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800787c:	2300      	movs	r3, #0
 800787e:	647b      	str	r3, [r7, #68]	; 0x44
 8007880:	2300      	movs	r3, #0
 8007882:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007884:	2300      	movs	r3, #0
 8007886:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007888:	2300      	movs	r3, #0
 800788a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800788c:	4b79      	ldr	r3, [pc, #484]	; (8007a74 <HAL_RCC_GetSysClockFreq+0x200>)
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	f003 030c 	and.w	r3, r3, #12
 8007894:	2b08      	cmp	r3, #8
 8007896:	d00d      	beq.n	80078b4 <HAL_RCC_GetSysClockFreq+0x40>
 8007898:	2b08      	cmp	r3, #8
 800789a:	f200 80e1 	bhi.w	8007a60 <HAL_RCC_GetSysClockFreq+0x1ec>
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d002      	beq.n	80078a8 <HAL_RCC_GetSysClockFreq+0x34>
 80078a2:	2b04      	cmp	r3, #4
 80078a4:	d003      	beq.n	80078ae <HAL_RCC_GetSysClockFreq+0x3a>
 80078a6:	e0db      	b.n	8007a60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80078a8:	4b73      	ldr	r3, [pc, #460]	; (8007a78 <HAL_RCC_GetSysClockFreq+0x204>)
 80078aa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80078ac:	e0db      	b.n	8007a66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80078ae:	4b73      	ldr	r3, [pc, #460]	; (8007a7c <HAL_RCC_GetSysClockFreq+0x208>)
 80078b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80078b2:	e0d8      	b.n	8007a66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80078b4:	4b6f      	ldr	r3, [pc, #444]	; (8007a74 <HAL_RCC_GetSysClockFreq+0x200>)
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078bc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80078be:	4b6d      	ldr	r3, [pc, #436]	; (8007a74 <HAL_RCC_GetSysClockFreq+0x200>)
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d063      	beq.n	8007992 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078ca:	4b6a      	ldr	r3, [pc, #424]	; (8007a74 <HAL_RCC_GetSysClockFreq+0x200>)
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	099b      	lsrs	r3, r3, #6
 80078d0:	2200      	movs	r2, #0
 80078d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80078d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80078d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078dc:	633b      	str	r3, [r7, #48]	; 0x30
 80078de:	2300      	movs	r3, #0
 80078e0:	637b      	str	r3, [r7, #52]	; 0x34
 80078e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80078e6:	4622      	mov	r2, r4
 80078e8:	462b      	mov	r3, r5
 80078ea:	f04f 0000 	mov.w	r0, #0
 80078ee:	f04f 0100 	mov.w	r1, #0
 80078f2:	0159      	lsls	r1, r3, #5
 80078f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80078f8:	0150      	lsls	r0, r2, #5
 80078fa:	4602      	mov	r2, r0
 80078fc:	460b      	mov	r3, r1
 80078fe:	4621      	mov	r1, r4
 8007900:	1a51      	subs	r1, r2, r1
 8007902:	6139      	str	r1, [r7, #16]
 8007904:	4629      	mov	r1, r5
 8007906:	eb63 0301 	sbc.w	r3, r3, r1
 800790a:	617b      	str	r3, [r7, #20]
 800790c:	f04f 0200 	mov.w	r2, #0
 8007910:	f04f 0300 	mov.w	r3, #0
 8007914:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007918:	4659      	mov	r1, fp
 800791a:	018b      	lsls	r3, r1, #6
 800791c:	4651      	mov	r1, sl
 800791e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007922:	4651      	mov	r1, sl
 8007924:	018a      	lsls	r2, r1, #6
 8007926:	4651      	mov	r1, sl
 8007928:	ebb2 0801 	subs.w	r8, r2, r1
 800792c:	4659      	mov	r1, fp
 800792e:	eb63 0901 	sbc.w	r9, r3, r1
 8007932:	f04f 0200 	mov.w	r2, #0
 8007936:	f04f 0300 	mov.w	r3, #0
 800793a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800793e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007942:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007946:	4690      	mov	r8, r2
 8007948:	4699      	mov	r9, r3
 800794a:	4623      	mov	r3, r4
 800794c:	eb18 0303 	adds.w	r3, r8, r3
 8007950:	60bb      	str	r3, [r7, #8]
 8007952:	462b      	mov	r3, r5
 8007954:	eb49 0303 	adc.w	r3, r9, r3
 8007958:	60fb      	str	r3, [r7, #12]
 800795a:	f04f 0200 	mov.w	r2, #0
 800795e:	f04f 0300 	mov.w	r3, #0
 8007962:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007966:	4629      	mov	r1, r5
 8007968:	024b      	lsls	r3, r1, #9
 800796a:	4621      	mov	r1, r4
 800796c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007970:	4621      	mov	r1, r4
 8007972:	024a      	lsls	r2, r1, #9
 8007974:	4610      	mov	r0, r2
 8007976:	4619      	mov	r1, r3
 8007978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800797a:	2200      	movs	r2, #0
 800797c:	62bb      	str	r3, [r7, #40]	; 0x28
 800797e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007980:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007984:	f7f8 fc20 	bl	80001c8 <__aeabi_uldivmod>
 8007988:	4602      	mov	r2, r0
 800798a:	460b      	mov	r3, r1
 800798c:	4613      	mov	r3, r2
 800798e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007990:	e058      	b.n	8007a44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007992:	4b38      	ldr	r3, [pc, #224]	; (8007a74 <HAL_RCC_GetSysClockFreq+0x200>)
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	099b      	lsrs	r3, r3, #6
 8007998:	2200      	movs	r2, #0
 800799a:	4618      	mov	r0, r3
 800799c:	4611      	mov	r1, r2
 800799e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80079a2:	623b      	str	r3, [r7, #32]
 80079a4:	2300      	movs	r3, #0
 80079a6:	627b      	str	r3, [r7, #36]	; 0x24
 80079a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80079ac:	4642      	mov	r2, r8
 80079ae:	464b      	mov	r3, r9
 80079b0:	f04f 0000 	mov.w	r0, #0
 80079b4:	f04f 0100 	mov.w	r1, #0
 80079b8:	0159      	lsls	r1, r3, #5
 80079ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80079be:	0150      	lsls	r0, r2, #5
 80079c0:	4602      	mov	r2, r0
 80079c2:	460b      	mov	r3, r1
 80079c4:	4641      	mov	r1, r8
 80079c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80079ca:	4649      	mov	r1, r9
 80079cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80079d0:	f04f 0200 	mov.w	r2, #0
 80079d4:	f04f 0300 	mov.w	r3, #0
 80079d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80079dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80079e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80079e4:	ebb2 040a 	subs.w	r4, r2, sl
 80079e8:	eb63 050b 	sbc.w	r5, r3, fp
 80079ec:	f04f 0200 	mov.w	r2, #0
 80079f0:	f04f 0300 	mov.w	r3, #0
 80079f4:	00eb      	lsls	r3, r5, #3
 80079f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80079fa:	00e2      	lsls	r2, r4, #3
 80079fc:	4614      	mov	r4, r2
 80079fe:	461d      	mov	r5, r3
 8007a00:	4643      	mov	r3, r8
 8007a02:	18e3      	adds	r3, r4, r3
 8007a04:	603b      	str	r3, [r7, #0]
 8007a06:	464b      	mov	r3, r9
 8007a08:	eb45 0303 	adc.w	r3, r5, r3
 8007a0c:	607b      	str	r3, [r7, #4]
 8007a0e:	f04f 0200 	mov.w	r2, #0
 8007a12:	f04f 0300 	mov.w	r3, #0
 8007a16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007a1a:	4629      	mov	r1, r5
 8007a1c:	028b      	lsls	r3, r1, #10
 8007a1e:	4621      	mov	r1, r4
 8007a20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007a24:	4621      	mov	r1, r4
 8007a26:	028a      	lsls	r2, r1, #10
 8007a28:	4610      	mov	r0, r2
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a2e:	2200      	movs	r2, #0
 8007a30:	61bb      	str	r3, [r7, #24]
 8007a32:	61fa      	str	r2, [r7, #28]
 8007a34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a38:	f7f8 fbc6 	bl	80001c8 <__aeabi_uldivmod>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	460b      	mov	r3, r1
 8007a40:	4613      	mov	r3, r2
 8007a42:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007a44:	4b0b      	ldr	r3, [pc, #44]	; (8007a74 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	0c1b      	lsrs	r3, r3, #16
 8007a4a:	f003 0303 	and.w	r3, r3, #3
 8007a4e:	3301      	adds	r3, #1
 8007a50:	005b      	lsls	r3, r3, #1
 8007a52:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007a54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007a5e:	e002      	b.n	8007a66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007a60:	4b05      	ldr	r3, [pc, #20]	; (8007a78 <HAL_RCC_GetSysClockFreq+0x204>)
 8007a62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007a64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3750      	adds	r7, #80	; 0x50
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a72:	bf00      	nop
 8007a74:	40023800 	.word	0x40023800
 8007a78:	00f42400 	.word	0x00f42400
 8007a7c:	007a1200 	.word	0x007a1200

08007a80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a80:	b480      	push	{r7}
 8007a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a84:	4b03      	ldr	r3, [pc, #12]	; (8007a94 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a86:	681b      	ldr	r3, [r3, #0]
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	2000003c 	.word	0x2000003c

08007a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007a9c:	f7ff fff0 	bl	8007a80 <HAL_RCC_GetHCLKFreq>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	4b05      	ldr	r3, [pc, #20]	; (8007ab8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	0a9b      	lsrs	r3, r3, #10
 8007aa8:	f003 0307 	and.w	r3, r3, #7
 8007aac:	4903      	ldr	r1, [pc, #12]	; (8007abc <HAL_RCC_GetPCLK1Freq+0x24>)
 8007aae:	5ccb      	ldrb	r3, [r1, r3]
 8007ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	40023800 	.word	0x40023800
 8007abc:	08010b34 	.word	0x08010b34

08007ac0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b086      	sub	sp, #24
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007acc:	2300      	movs	r3, #0
 8007ace:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 0301 	and.w	r3, r3, #1
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d105      	bne.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d035      	beq.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007ae8:	4b62      	ldr	r3, [pc, #392]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007aea:	2200      	movs	r2, #0
 8007aec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007aee:	f7fa fe57 	bl	80027a0 <HAL_GetTick>
 8007af2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007af4:	e008      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007af6:	f7fa fe53 	bl	80027a0 <HAL_GetTick>
 8007afa:	4602      	mov	r2, r0
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	1ad3      	subs	r3, r2, r3
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	d901      	bls.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b04:	2303      	movs	r3, #3
 8007b06:	e0b0      	b.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007b08:	4b5b      	ldr	r3, [pc, #364]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1f0      	bne.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	019a      	lsls	r2, r3, #6
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	071b      	lsls	r3, r3, #28
 8007b20:	4955      	ldr	r1, [pc, #340]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b22:	4313      	orrs	r3, r2
 8007b24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007b28:	4b52      	ldr	r3, [pc, #328]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b2e:	f7fa fe37 	bl	80027a0 <HAL_GetTick>
 8007b32:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b34:	e008      	b.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007b36:	f7fa fe33 	bl	80027a0 <HAL_GetTick>
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	1ad3      	subs	r3, r2, r3
 8007b40:	2b02      	cmp	r3, #2
 8007b42:	d901      	bls.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b44:	2303      	movs	r3, #3
 8007b46:	e090      	b.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b48:	4b4b      	ldr	r3, [pc, #300]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d0f0      	beq.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 0302 	and.w	r3, r3, #2
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f000 8083 	beq.w	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007b62:	2300      	movs	r3, #0
 8007b64:	60fb      	str	r3, [r7, #12]
 8007b66:	4b44      	ldr	r3, [pc, #272]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b6a:	4a43      	ldr	r2, [pc, #268]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b70:	6413      	str	r3, [r2, #64]	; 0x40
 8007b72:	4b41      	ldr	r3, [pc, #260]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b7a:	60fb      	str	r3, [r7, #12]
 8007b7c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007b7e:	4b3f      	ldr	r3, [pc, #252]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a3e      	ldr	r2, [pc, #248]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b88:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007b8a:	f7fa fe09 	bl	80027a0 <HAL_GetTick>
 8007b8e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007b90:	e008      	b.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007b92:	f7fa fe05 	bl	80027a0 <HAL_GetTick>
 8007b96:	4602      	mov	r2, r0
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	1ad3      	subs	r3, r2, r3
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d901      	bls.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	e062      	b.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007ba4:	4b35      	ldr	r3, [pc, #212]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d0f0      	beq.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007bb0:	4b31      	ldr	r3, [pc, #196]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bb8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d02f      	beq.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bc8:	693a      	ldr	r2, [r7, #16]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d028      	beq.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007bce:	4b2a      	ldr	r3, [pc, #168]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bd6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007bd8:	4b29      	ldr	r3, [pc, #164]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007bda:	2201      	movs	r2, #1
 8007bdc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007bde:	4b28      	ldr	r3, [pc, #160]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007be0:	2200      	movs	r2, #0
 8007be2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007be4:	4a24      	ldr	r2, [pc, #144]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007bea:	4b23      	ldr	r3, [pc, #140]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bee:	f003 0301 	and.w	r3, r3, #1
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d114      	bne.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007bf6:	f7fa fdd3 	bl	80027a0 <HAL_GetTick>
 8007bfa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bfc:	e00a      	b.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007bfe:	f7fa fdcf 	bl	80027a0 <HAL_GetTick>
 8007c02:	4602      	mov	r2, r0
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	1ad3      	subs	r3, r2, r3
 8007c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d901      	bls.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007c10:	2303      	movs	r3, #3
 8007c12:	e02a      	b.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c14:	4b18      	ldr	r3, [pc, #96]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c18:	f003 0302 	and.w	r3, r3, #2
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d0ee      	beq.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c2c:	d10d      	bne.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007c2e:	4b12      	ldr	r3, [pc, #72]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007c3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c42:	490d      	ldr	r1, [pc, #52]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c44:	4313      	orrs	r3, r2
 8007c46:	608b      	str	r3, [r1, #8]
 8007c48:	e005      	b.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007c4a:	4b0b      	ldr	r3, [pc, #44]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	4a0a      	ldr	r2, [pc, #40]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c50:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007c54:	6093      	str	r3, [r2, #8]
 8007c56:	4b08      	ldr	r3, [pc, #32]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c62:	4905      	ldr	r1, [pc, #20]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c64:	4313      	orrs	r3, r2
 8007c66:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3718      	adds	r7, #24
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	42470068 	.word	0x42470068
 8007c78:	40023800 	.word	0x40023800
 8007c7c:	40007000 	.word	0x40007000
 8007c80:	42470e40 	.word	0x42470e40

08007c84 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b085      	sub	sp, #20
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2203      	movs	r2, #3
 8007c90:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8007c92:	4b11      	ldr	r3, [pc, #68]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8007c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c98:	099b      	lsrs	r3, r3, #6
 8007c9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007ca2:	4b0d      	ldr	r3, [pc, #52]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8007ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ca8:	0f1b      	lsrs	r3, r3, #28
 8007caa:	f003 0207 	and.w	r2, r3, #7
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8007cb2:	4b09      	ldr	r3, [pc, #36]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007cba:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8007cbc:	4b06      	ldr	r3, [pc, #24]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8007cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cc0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	431a      	orrs	r2, r3
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8007ccc:	bf00      	nop
 8007cce:	3714      	adds	r7, #20
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr
 8007cd8:	40023800 	.word	0x40023800

08007cdc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b087      	sub	sp, #28
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007cec:	2300      	movs	r3, #0
 8007cee:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d13e      	bne.n	8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007cfa:	4b23      	ldr	r3, [pc, #140]	; (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d02:	60fb      	str	r3, [r7, #12]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d005      	beq.n	8007d16 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d12f      	bne.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007d10:	4b1e      	ldr	r3, [pc, #120]	; (8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007d12:	617b      	str	r3, [r7, #20]
          break;
 8007d14:	e02f      	b.n	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007d16:	4b1c      	ldr	r3, [pc, #112]	; (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d22:	d108      	bne.n	8007d36 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007d24:	4b18      	ldr	r3, [pc, #96]	; (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d2c:	4a18      	ldr	r2, [pc, #96]	; (8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d32:	613b      	str	r3, [r7, #16]
 8007d34:	e007      	b.n	8007d46 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007d36:	4b14      	ldr	r3, [pc, #80]	; (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d3e:	4a15      	ldr	r2, [pc, #84]	; (8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d44:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007d46:	4b10      	ldr	r3, [pc, #64]	; (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007d48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d4c:	099b      	lsrs	r3, r3, #6
 8007d4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	fb02 f303 	mul.w	r3, r2, r3
 8007d58:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007d5a:	4b0b      	ldr	r3, [pc, #44]	; (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d60:	0f1b      	lsrs	r3, r3, #28
 8007d62:	f003 0307 	and.w	r3, r3, #7
 8007d66:	68ba      	ldr	r2, [r7, #8]
 8007d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d6c:	617b      	str	r3, [r7, #20]
          break;
 8007d6e:	e002      	b.n	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007d70:	2300      	movs	r3, #0
 8007d72:	617b      	str	r3, [r7, #20]
          break;
 8007d74:	bf00      	nop
        }
      }
      break;
 8007d76:	bf00      	nop
    }
  }
  return frequency;
 8007d78:	697b      	ldr	r3, [r7, #20]
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	371c      	adds	r7, #28
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop
 8007d88:	40023800 	.word	0x40023800
 8007d8c:	00bb8000 	.word	0x00bb8000
 8007d90:	007a1200 	.word	0x007a1200
 8007d94:	00f42400 	.word	0x00f42400

08007d98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d101      	bne.n	8007daa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	e07b      	b.n	8007ea2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d108      	bne.n	8007dc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007dba:	d009      	beq.n	8007dd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	61da      	str	r2, [r3, #28]
 8007dc2:	e005      	b.n	8007dd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d106      	bne.n	8007df0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f7fa f984 	bl	80020f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2202      	movs	r2, #2
 8007df4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007e18:	431a      	orrs	r2, r3
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e22:	431a      	orrs	r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	f003 0302 	and.w	r3, r3, #2
 8007e2c:	431a      	orrs	r2, r3
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	695b      	ldr	r3, [r3, #20]
 8007e32:	f003 0301 	and.w	r3, r3, #1
 8007e36:	431a      	orrs	r2, r3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	699b      	ldr	r3, [r3, #24]
 8007e3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e40:	431a      	orrs	r2, r3
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	69db      	ldr	r3, [r3, #28]
 8007e46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e4a:	431a      	orrs	r2, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6a1b      	ldr	r3, [r3, #32]
 8007e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e54:	ea42 0103 	orr.w	r1, r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e5c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	430a      	orrs	r2, r1
 8007e66:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	699b      	ldr	r3, [r3, #24]
 8007e6c:	0c1b      	lsrs	r3, r3, #16
 8007e6e:	f003 0104 	and.w	r1, r3, #4
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e76:	f003 0210 	and.w	r2, r3, #16
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	430a      	orrs	r2, r1
 8007e80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	69da      	ldr	r2, [r3, #28]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3708      	adds	r7, #8
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b088      	sub	sp, #32
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	60f8      	str	r0, [r7, #12]
 8007eb2:	60b9      	str	r1, [r7, #8]
 8007eb4:	603b      	str	r3, [r7, #0]
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d101      	bne.n	8007ecc <HAL_SPI_Transmit+0x22>
 8007ec8:	2302      	movs	r3, #2
 8007eca:	e126      	b.n	800811a <HAL_SPI_Transmit+0x270>
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ed4:	f7fa fc64 	bl	80027a0 <HAL_GetTick>
 8007ed8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007eda:	88fb      	ldrh	r3, [r7, #6]
 8007edc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d002      	beq.n	8007ef0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007eea:	2302      	movs	r3, #2
 8007eec:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007eee:	e10b      	b.n	8008108 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d002      	beq.n	8007efc <HAL_SPI_Transmit+0x52>
 8007ef6:	88fb      	ldrh	r3, [r7, #6]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d102      	bne.n	8007f02 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007f00:	e102      	b.n	8008108 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2203      	movs	r2, #3
 8007f06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	68ba      	ldr	r2, [r7, #8]
 8007f14:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	88fa      	ldrh	r2, [r7, #6]
 8007f1a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	88fa      	ldrh	r2, [r7, #6]
 8007f20:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2200      	movs	r2, #0
 8007f26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2200      	movs	r2, #0
 8007f38:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f48:	d10f      	bne.n	8007f6a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f68:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f74:	2b40      	cmp	r3, #64	; 0x40
 8007f76:	d007      	beq.n	8007f88 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f90:	d14b      	bne.n	800802a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d002      	beq.n	8007fa0 <HAL_SPI_Transmit+0xf6>
 8007f9a:	8afb      	ldrh	r3, [r7, #22]
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d13e      	bne.n	800801e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fa4:	881a      	ldrh	r2, [r3, #0]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fb0:	1c9a      	adds	r2, r3, #2
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	3b01      	subs	r3, #1
 8007fbe:	b29a      	uxth	r2, r3
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007fc4:	e02b      	b.n	800801e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	f003 0302 	and.w	r3, r3, #2
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	d112      	bne.n	8007ffa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fd8:	881a      	ldrh	r2, [r3, #0]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe4:	1c9a      	adds	r2, r3, #2
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	3b01      	subs	r3, #1
 8007ff2:	b29a      	uxth	r2, r3
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	86da      	strh	r2, [r3, #54]	; 0x36
 8007ff8:	e011      	b.n	800801e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ffa:	f7fa fbd1 	bl	80027a0 <HAL_GetTick>
 8007ffe:	4602      	mov	r2, r0
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	1ad3      	subs	r3, r2, r3
 8008004:	683a      	ldr	r2, [r7, #0]
 8008006:	429a      	cmp	r2, r3
 8008008:	d803      	bhi.n	8008012 <HAL_SPI_Transmit+0x168>
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008010:	d102      	bne.n	8008018 <HAL_SPI_Transmit+0x16e>
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d102      	bne.n	800801e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008018:	2303      	movs	r3, #3
 800801a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800801c:	e074      	b.n	8008108 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008022:	b29b      	uxth	r3, r3
 8008024:	2b00      	cmp	r3, #0
 8008026:	d1ce      	bne.n	8007fc6 <HAL_SPI_Transmit+0x11c>
 8008028:	e04c      	b.n	80080c4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d002      	beq.n	8008038 <HAL_SPI_Transmit+0x18e>
 8008032:	8afb      	ldrh	r3, [r7, #22]
 8008034:	2b01      	cmp	r3, #1
 8008036:	d140      	bne.n	80080ba <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	330c      	adds	r3, #12
 8008042:	7812      	ldrb	r2, [r2, #0]
 8008044:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800804a:	1c5a      	adds	r2, r3, #1
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008054:	b29b      	uxth	r3, r3
 8008056:	3b01      	subs	r3, #1
 8008058:	b29a      	uxth	r2, r3
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800805e:	e02c      	b.n	80080ba <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	f003 0302 	and.w	r3, r3, #2
 800806a:	2b02      	cmp	r3, #2
 800806c:	d113      	bne.n	8008096 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	330c      	adds	r3, #12
 8008078:	7812      	ldrb	r2, [r2, #0]
 800807a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008080:	1c5a      	adds	r2, r3, #1
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800808a:	b29b      	uxth	r3, r3
 800808c:	3b01      	subs	r3, #1
 800808e:	b29a      	uxth	r2, r3
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	86da      	strh	r2, [r3, #54]	; 0x36
 8008094:	e011      	b.n	80080ba <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008096:	f7fa fb83 	bl	80027a0 <HAL_GetTick>
 800809a:	4602      	mov	r2, r0
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	1ad3      	subs	r3, r2, r3
 80080a0:	683a      	ldr	r2, [r7, #0]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d803      	bhi.n	80080ae <HAL_SPI_Transmit+0x204>
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ac:	d102      	bne.n	80080b4 <HAL_SPI_Transmit+0x20a>
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d102      	bne.n	80080ba <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80080b4:	2303      	movs	r3, #3
 80080b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80080b8:	e026      	b.n	8008108 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080be:	b29b      	uxth	r3, r3
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1cd      	bne.n	8008060 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80080c4:	69ba      	ldr	r2, [r7, #24]
 80080c6:	6839      	ldr	r1, [r7, #0]
 80080c8:	68f8      	ldr	r0, [r7, #12]
 80080ca:	f000 fbcb 	bl	8008864 <SPI_EndRxTxTransaction>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d002      	beq.n	80080da <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2220      	movs	r2, #32
 80080d8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d10a      	bne.n	80080f8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80080e2:	2300      	movs	r3, #0
 80080e4:	613b      	str	r3, [r7, #16]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	613b      	str	r3, [r7, #16]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	689b      	ldr	r3, [r3, #8]
 80080f4:	613b      	str	r3, [r7, #16]
 80080f6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d002      	beq.n	8008106 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008100:	2301      	movs	r3, #1
 8008102:	77fb      	strb	r3, [r7, #31]
 8008104:	e000      	b.n	8008108 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008106:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2200      	movs	r2, #0
 8008114:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008118:	7ffb      	ldrb	r3, [r7, #31]
}
 800811a:	4618      	mov	r0, r3
 800811c:	3720      	adds	r7, #32
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008122:	b580      	push	{r7, lr}
 8008124:	b088      	sub	sp, #32
 8008126:	af02      	add	r7, sp, #8
 8008128:	60f8      	str	r0, [r7, #12]
 800812a:	60b9      	str	r1, [r7, #8]
 800812c:	603b      	str	r3, [r7, #0]
 800812e:	4613      	mov	r3, r2
 8008130:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008132:	2300      	movs	r3, #0
 8008134:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800813e:	d112      	bne.n	8008166 <HAL_SPI_Receive+0x44>
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d10e      	bne.n	8008166 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2204      	movs	r2, #4
 800814c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008150:	88fa      	ldrh	r2, [r7, #6]
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	9300      	str	r3, [sp, #0]
 8008156:	4613      	mov	r3, r2
 8008158:	68ba      	ldr	r2, [r7, #8]
 800815a:	68b9      	ldr	r1, [r7, #8]
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f000 f8f1 	bl	8008344 <HAL_SPI_TransmitReceive>
 8008162:	4603      	mov	r3, r0
 8008164:	e0ea      	b.n	800833c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800816c:	2b01      	cmp	r3, #1
 800816e:	d101      	bne.n	8008174 <HAL_SPI_Receive+0x52>
 8008170:	2302      	movs	r3, #2
 8008172:	e0e3      	b.n	800833c <HAL_SPI_Receive+0x21a>
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800817c:	f7fa fb10 	bl	80027a0 <HAL_GetTick>
 8008180:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008188:	b2db      	uxtb	r3, r3
 800818a:	2b01      	cmp	r3, #1
 800818c:	d002      	beq.n	8008194 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800818e:	2302      	movs	r3, #2
 8008190:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008192:	e0ca      	b.n	800832a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d002      	beq.n	80081a0 <HAL_SPI_Receive+0x7e>
 800819a:	88fb      	ldrh	r3, [r7, #6]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d102      	bne.n	80081a6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80081a4:	e0c1      	b.n	800832a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2204      	movs	r2, #4
 80081aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2200      	movs	r2, #0
 80081b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	68ba      	ldr	r2, [r7, #8]
 80081b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	88fa      	ldrh	r2, [r7, #6]
 80081be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	88fa      	ldrh	r2, [r7, #6]
 80081c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2200      	movs	r2, #0
 80081ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2200      	movs	r2, #0
 80081d0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2200      	movs	r2, #0
 80081d6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2200      	movs	r2, #0
 80081dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2200      	movs	r2, #0
 80081e2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081ec:	d10f      	bne.n	800820e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800820c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008218:	2b40      	cmp	r3, #64	; 0x40
 800821a:	d007      	beq.n	800822c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800822a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d162      	bne.n	80082fa <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008234:	e02e      	b.n	8008294 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	f003 0301 	and.w	r3, r3, #1
 8008240:	2b01      	cmp	r3, #1
 8008242:	d115      	bne.n	8008270 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f103 020c 	add.w	r2, r3, #12
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008250:	7812      	ldrb	r2, [r2, #0]
 8008252:	b2d2      	uxtb	r2, r2
 8008254:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800825a:	1c5a      	adds	r2, r3, #1
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008264:	b29b      	uxth	r3, r3
 8008266:	3b01      	subs	r3, #1
 8008268:	b29a      	uxth	r2, r3
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800826e:	e011      	b.n	8008294 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008270:	f7fa fa96 	bl	80027a0 <HAL_GetTick>
 8008274:	4602      	mov	r2, r0
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	1ad3      	subs	r3, r2, r3
 800827a:	683a      	ldr	r2, [r7, #0]
 800827c:	429a      	cmp	r2, r3
 800827e:	d803      	bhi.n	8008288 <HAL_SPI_Receive+0x166>
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008286:	d102      	bne.n	800828e <HAL_SPI_Receive+0x16c>
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d102      	bne.n	8008294 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800828e:	2303      	movs	r3, #3
 8008290:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008292:	e04a      	b.n	800832a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008298:	b29b      	uxth	r3, r3
 800829a:	2b00      	cmp	r3, #0
 800829c:	d1cb      	bne.n	8008236 <HAL_SPI_Receive+0x114>
 800829e:	e031      	b.n	8008304 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	f003 0301 	and.w	r3, r3, #1
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d113      	bne.n	80082d6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	68da      	ldr	r2, [r3, #12]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b8:	b292      	uxth	r2, r2
 80082ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c0:	1c9a      	adds	r2, r3, #2
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	3b01      	subs	r3, #1
 80082ce:	b29a      	uxth	r2, r3
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80082d4:	e011      	b.n	80082fa <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082d6:	f7fa fa63 	bl	80027a0 <HAL_GetTick>
 80082da:	4602      	mov	r2, r0
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	1ad3      	subs	r3, r2, r3
 80082e0:	683a      	ldr	r2, [r7, #0]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d803      	bhi.n	80082ee <HAL_SPI_Receive+0x1cc>
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ec:	d102      	bne.n	80082f4 <HAL_SPI_Receive+0x1d2>
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d102      	bne.n	80082fa <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80082f4:	2303      	movs	r3, #3
 80082f6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80082f8:	e017      	b.n	800832a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082fe:	b29b      	uxth	r3, r3
 8008300:	2b00      	cmp	r3, #0
 8008302:	d1cd      	bne.n	80082a0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008304:	693a      	ldr	r2, [r7, #16]
 8008306:	6839      	ldr	r1, [r7, #0]
 8008308:	68f8      	ldr	r0, [r7, #12]
 800830a:	f000 fa45 	bl	8008798 <SPI_EndRxTransaction>
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d002      	beq.n	800831a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2220      	movs	r2, #32
 8008318:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800831e:	2b00      	cmp	r3, #0
 8008320:	d002      	beq.n	8008328 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	75fb      	strb	r3, [r7, #23]
 8008326:	e000      	b.n	800832a <HAL_SPI_Receive+0x208>
  }

error :
 8008328:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2200      	movs	r2, #0
 8008336:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800833a:	7dfb      	ldrb	r3, [r7, #23]
}
 800833c:	4618      	mov	r0, r3
 800833e:	3718      	adds	r7, #24
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b08c      	sub	sp, #48	; 0x30
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	607a      	str	r2, [r7, #4]
 8008350:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008352:	2301      	movs	r3, #1
 8008354:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008356:	2300      	movs	r3, #0
 8008358:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008362:	2b01      	cmp	r3, #1
 8008364:	d101      	bne.n	800836a <HAL_SPI_TransmitReceive+0x26>
 8008366:	2302      	movs	r3, #2
 8008368:	e18a      	b.n	8008680 <HAL_SPI_TransmitReceive+0x33c>
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2201      	movs	r2, #1
 800836e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008372:	f7fa fa15 	bl	80027a0 <HAL_GetTick>
 8008376:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800837e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008388:	887b      	ldrh	r3, [r7, #2]
 800838a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800838c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008390:	2b01      	cmp	r3, #1
 8008392:	d00f      	beq.n	80083b4 <HAL_SPI_TransmitReceive+0x70>
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800839a:	d107      	bne.n	80083ac <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d103      	bne.n	80083ac <HAL_SPI_TransmitReceive+0x68>
 80083a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80083a8:	2b04      	cmp	r3, #4
 80083aa:	d003      	beq.n	80083b4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80083ac:	2302      	movs	r3, #2
 80083ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80083b2:	e15b      	b.n	800866c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d005      	beq.n	80083c6 <HAL_SPI_TransmitReceive+0x82>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d002      	beq.n	80083c6 <HAL_SPI_TransmitReceive+0x82>
 80083c0:	887b      	ldrh	r3, [r7, #2]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d103      	bne.n	80083ce <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80083cc:	e14e      	b.n	800866c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	2b04      	cmp	r3, #4
 80083d8:	d003      	beq.n	80083e2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2205      	movs	r2, #5
 80083de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2200      	movs	r2, #0
 80083e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	887a      	ldrh	r2, [r7, #2]
 80083f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	887a      	ldrh	r2, [r7, #2]
 80083f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	68ba      	ldr	r2, [r7, #8]
 80083fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	887a      	ldrh	r2, [r7, #2]
 8008404:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	887a      	ldrh	r2, [r7, #2]
 800840a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2200      	movs	r2, #0
 8008410:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2200      	movs	r2, #0
 8008416:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008422:	2b40      	cmp	r3, #64	; 0x40
 8008424:	d007      	beq.n	8008436 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008434:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800843e:	d178      	bne.n	8008532 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d002      	beq.n	800844e <HAL_SPI_TransmitReceive+0x10a>
 8008448:	8b7b      	ldrh	r3, [r7, #26]
 800844a:	2b01      	cmp	r3, #1
 800844c:	d166      	bne.n	800851c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008452:	881a      	ldrh	r2, [r3, #0]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800845e:	1c9a      	adds	r2, r3, #2
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008468:	b29b      	uxth	r3, r3
 800846a:	3b01      	subs	r3, #1
 800846c:	b29a      	uxth	r2, r3
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008472:	e053      	b.n	800851c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	f003 0302 	and.w	r3, r3, #2
 800847e:	2b02      	cmp	r3, #2
 8008480:	d11b      	bne.n	80084ba <HAL_SPI_TransmitReceive+0x176>
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008486:	b29b      	uxth	r3, r3
 8008488:	2b00      	cmp	r3, #0
 800848a:	d016      	beq.n	80084ba <HAL_SPI_TransmitReceive+0x176>
 800848c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800848e:	2b01      	cmp	r3, #1
 8008490:	d113      	bne.n	80084ba <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008496:	881a      	ldrh	r2, [r3, #0]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084a2:	1c9a      	adds	r2, r3, #2
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	3b01      	subs	r3, #1
 80084b0:	b29a      	uxth	r2, r3
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80084b6:	2300      	movs	r3, #0
 80084b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	f003 0301 	and.w	r3, r3, #1
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d119      	bne.n	80084fc <HAL_SPI_TransmitReceive+0x1b8>
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d014      	beq.n	80084fc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	68da      	ldr	r2, [r3, #12]
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084dc:	b292      	uxth	r2, r2
 80084de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e4:	1c9a      	adds	r2, r3, #2
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	3b01      	subs	r3, #1
 80084f2:	b29a      	uxth	r2, r3
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80084f8:	2301      	movs	r3, #1
 80084fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80084fc:	f7fa f950 	bl	80027a0 <HAL_GetTick>
 8008500:	4602      	mov	r2, r0
 8008502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008504:	1ad3      	subs	r3, r2, r3
 8008506:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008508:	429a      	cmp	r2, r3
 800850a:	d807      	bhi.n	800851c <HAL_SPI_TransmitReceive+0x1d8>
 800850c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008512:	d003      	beq.n	800851c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008514:	2303      	movs	r3, #3
 8008516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800851a:	e0a7      	b.n	800866c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008520:	b29b      	uxth	r3, r3
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1a6      	bne.n	8008474 <HAL_SPI_TransmitReceive+0x130>
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800852a:	b29b      	uxth	r3, r3
 800852c:	2b00      	cmp	r3, #0
 800852e:	d1a1      	bne.n	8008474 <HAL_SPI_TransmitReceive+0x130>
 8008530:	e07c      	b.n	800862c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d002      	beq.n	8008540 <HAL_SPI_TransmitReceive+0x1fc>
 800853a:	8b7b      	ldrh	r3, [r7, #26]
 800853c:	2b01      	cmp	r3, #1
 800853e:	d16b      	bne.n	8008618 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	330c      	adds	r3, #12
 800854a:	7812      	ldrb	r2, [r2, #0]
 800854c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008552:	1c5a      	adds	r2, r3, #1
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800855c:	b29b      	uxth	r3, r3
 800855e:	3b01      	subs	r3, #1
 8008560:	b29a      	uxth	r2, r3
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008566:	e057      	b.n	8008618 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	f003 0302 	and.w	r3, r3, #2
 8008572:	2b02      	cmp	r3, #2
 8008574:	d11c      	bne.n	80085b0 <HAL_SPI_TransmitReceive+0x26c>
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800857a:	b29b      	uxth	r3, r3
 800857c:	2b00      	cmp	r3, #0
 800857e:	d017      	beq.n	80085b0 <HAL_SPI_TransmitReceive+0x26c>
 8008580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008582:	2b01      	cmp	r3, #1
 8008584:	d114      	bne.n	80085b0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	330c      	adds	r3, #12
 8008590:	7812      	ldrb	r2, [r2, #0]
 8008592:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008598:	1c5a      	adds	r2, r3, #1
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	3b01      	subs	r3, #1
 80085a6:	b29a      	uxth	r2, r3
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80085ac:	2300      	movs	r3, #0
 80085ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	f003 0301 	and.w	r3, r3, #1
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d119      	bne.n	80085f2 <HAL_SPI_TransmitReceive+0x2ae>
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d014      	beq.n	80085f2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	68da      	ldr	r2, [r3, #12]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d2:	b2d2      	uxtb	r2, r2
 80085d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085da:	1c5a      	adds	r2, r3, #1
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	3b01      	subs	r3, #1
 80085e8:	b29a      	uxth	r2, r3
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80085ee:	2301      	movs	r3, #1
 80085f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80085f2:	f7fa f8d5 	bl	80027a0 <HAL_GetTick>
 80085f6:	4602      	mov	r2, r0
 80085f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fa:	1ad3      	subs	r3, r2, r3
 80085fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085fe:	429a      	cmp	r2, r3
 8008600:	d803      	bhi.n	800860a <HAL_SPI_TransmitReceive+0x2c6>
 8008602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008608:	d102      	bne.n	8008610 <HAL_SPI_TransmitReceive+0x2cc>
 800860a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860c:	2b00      	cmp	r3, #0
 800860e:	d103      	bne.n	8008618 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008610:	2303      	movs	r3, #3
 8008612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008616:	e029      	b.n	800866c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800861c:	b29b      	uxth	r3, r3
 800861e:	2b00      	cmp	r3, #0
 8008620:	d1a2      	bne.n	8008568 <HAL_SPI_TransmitReceive+0x224>
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008626:	b29b      	uxth	r3, r3
 8008628:	2b00      	cmp	r3, #0
 800862a:	d19d      	bne.n	8008568 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800862c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800862e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f000 f917 	bl	8008864 <SPI_EndRxTxTransaction>
 8008636:	4603      	mov	r3, r0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d006      	beq.n	800864a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800863c:	2301      	movs	r3, #1
 800863e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2220      	movs	r2, #32
 8008646:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008648:	e010      	b.n	800866c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d10b      	bne.n	800866a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008652:	2300      	movs	r3, #0
 8008654:	617b      	str	r3, [r7, #20]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	617b      	str	r3, [r7, #20]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	617b      	str	r3, [r7, #20]
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	e000      	b.n	800866c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800866a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2200      	movs	r2, #0
 8008678:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800867c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008680:	4618      	mov	r0, r3
 8008682:	3730      	adds	r7, #48	; 0x30
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b088      	sub	sp, #32
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	603b      	str	r3, [r7, #0]
 8008694:	4613      	mov	r3, r2
 8008696:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008698:	f7fa f882 	bl	80027a0 <HAL_GetTick>
 800869c:	4602      	mov	r2, r0
 800869e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a0:	1a9b      	subs	r3, r3, r2
 80086a2:	683a      	ldr	r2, [r7, #0]
 80086a4:	4413      	add	r3, r2
 80086a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80086a8:	f7fa f87a 	bl	80027a0 <HAL_GetTick>
 80086ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80086ae:	4b39      	ldr	r3, [pc, #228]	; (8008794 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	015b      	lsls	r3, r3, #5
 80086b4:	0d1b      	lsrs	r3, r3, #20
 80086b6:	69fa      	ldr	r2, [r7, #28]
 80086b8:	fb02 f303 	mul.w	r3, r2, r3
 80086bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80086be:	e054      	b.n	800876a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c6:	d050      	beq.n	800876a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80086c8:	f7fa f86a 	bl	80027a0 <HAL_GetTick>
 80086cc:	4602      	mov	r2, r0
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	1ad3      	subs	r3, r2, r3
 80086d2:	69fa      	ldr	r2, [r7, #28]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d902      	bls.n	80086de <SPI_WaitFlagStateUntilTimeout+0x56>
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d13d      	bne.n	800875a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	685a      	ldr	r2, [r3, #4]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80086ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086f6:	d111      	bne.n	800871c <SPI_WaitFlagStateUntilTimeout+0x94>
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008700:	d004      	beq.n	800870c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800870a:	d107      	bne.n	800871c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800871a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008724:	d10f      	bne.n	8008746 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008734:	601a      	str	r2, [r3, #0]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008744:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2201      	movs	r2, #1
 800874a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2200      	movs	r2, #0
 8008752:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008756:	2303      	movs	r3, #3
 8008758:	e017      	b.n	800878a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d101      	bne.n	8008764 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008760:	2300      	movs	r3, #0
 8008762:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	3b01      	subs	r3, #1
 8008768:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	689a      	ldr	r2, [r3, #8]
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	4013      	ands	r3, r2
 8008774:	68ba      	ldr	r2, [r7, #8]
 8008776:	429a      	cmp	r2, r3
 8008778:	bf0c      	ite	eq
 800877a:	2301      	moveq	r3, #1
 800877c:	2300      	movne	r3, #0
 800877e:	b2db      	uxtb	r3, r3
 8008780:	461a      	mov	r2, r3
 8008782:	79fb      	ldrb	r3, [r7, #7]
 8008784:	429a      	cmp	r2, r3
 8008786:	d19b      	bne.n	80086c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008788:	2300      	movs	r3, #0
}
 800878a:	4618      	mov	r0, r3
 800878c:	3720      	adds	r7, #32
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	2000003c 	.word	0x2000003c

08008798 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b086      	sub	sp, #24
 800879c:	af02      	add	r7, sp, #8
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	60b9      	str	r1, [r7, #8]
 80087a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087ac:	d111      	bne.n	80087d2 <SPI_EndRxTransaction+0x3a>
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087b6:	d004      	beq.n	80087c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087c0:	d107      	bne.n	80087d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087d0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087da:	d12a      	bne.n	8008832 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087e4:	d012      	beq.n	800880c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	9300      	str	r3, [sp, #0]
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	2200      	movs	r2, #0
 80087ee:	2180      	movs	r1, #128	; 0x80
 80087f0:	68f8      	ldr	r0, [r7, #12]
 80087f2:	f7ff ff49 	bl	8008688 <SPI_WaitFlagStateUntilTimeout>
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d02d      	beq.n	8008858 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008800:	f043 0220 	orr.w	r2, r3, #32
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008808:	2303      	movs	r3, #3
 800880a:	e026      	b.n	800885a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	9300      	str	r3, [sp, #0]
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	2200      	movs	r2, #0
 8008814:	2101      	movs	r1, #1
 8008816:	68f8      	ldr	r0, [r7, #12]
 8008818:	f7ff ff36 	bl	8008688 <SPI_WaitFlagStateUntilTimeout>
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d01a      	beq.n	8008858 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008826:	f043 0220 	orr.w	r2, r3, #32
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800882e:	2303      	movs	r3, #3
 8008830:	e013      	b.n	800885a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	9300      	str	r3, [sp, #0]
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	2200      	movs	r2, #0
 800883a:	2101      	movs	r1, #1
 800883c:	68f8      	ldr	r0, [r7, #12]
 800883e:	f7ff ff23 	bl	8008688 <SPI_WaitFlagStateUntilTimeout>
 8008842:	4603      	mov	r3, r0
 8008844:	2b00      	cmp	r3, #0
 8008846:	d007      	beq.n	8008858 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800884c:	f043 0220 	orr.w	r2, r3, #32
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008854:	2303      	movs	r3, #3
 8008856:	e000      	b.n	800885a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008858:	2300      	movs	r3, #0
}
 800885a:	4618      	mov	r0, r3
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
	...

08008864 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b088      	sub	sp, #32
 8008868:	af02      	add	r7, sp, #8
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	60b9      	str	r1, [r7, #8]
 800886e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008870:	4b1b      	ldr	r3, [pc, #108]	; (80088e0 <SPI_EndRxTxTransaction+0x7c>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a1b      	ldr	r2, [pc, #108]	; (80088e4 <SPI_EndRxTxTransaction+0x80>)
 8008876:	fba2 2303 	umull	r2, r3, r2, r3
 800887a:	0d5b      	lsrs	r3, r3, #21
 800887c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008880:	fb02 f303 	mul.w	r3, r2, r3
 8008884:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800888e:	d112      	bne.n	80088b6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	9300      	str	r3, [sp, #0]
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	2200      	movs	r2, #0
 8008898:	2180      	movs	r1, #128	; 0x80
 800889a:	68f8      	ldr	r0, [r7, #12]
 800889c:	f7ff fef4 	bl	8008688 <SPI_WaitFlagStateUntilTimeout>
 80088a0:	4603      	mov	r3, r0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d016      	beq.n	80088d4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088aa:	f043 0220 	orr.w	r2, r3, #32
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80088b2:	2303      	movs	r3, #3
 80088b4:	e00f      	b.n	80088d6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00a      	beq.n	80088d2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	3b01      	subs	r3, #1
 80088c0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088cc:	2b80      	cmp	r3, #128	; 0x80
 80088ce:	d0f2      	beq.n	80088b6 <SPI_EndRxTxTransaction+0x52>
 80088d0:	e000      	b.n	80088d4 <SPI_EndRxTxTransaction+0x70>
        break;
 80088d2:	bf00      	nop
  }

  return HAL_OK;
 80088d4:	2300      	movs	r3, #0
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3718      	adds	r7, #24
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	2000003c 	.word	0x2000003c
 80088e4:	165e9f81 	.word	0x165e9f81

080088e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80088e8:	b084      	sub	sp, #16
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b084      	sub	sp, #16
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
 80088f2:	f107 001c 	add.w	r0, r7, #28
 80088f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80088fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d122      	bne.n	8008946 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008904:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	68db      	ldr	r3, [r3, #12]
 8008920:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800892a:	2b01      	cmp	r3, #1
 800892c:	d105      	bne.n	800893a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 f9c0 	bl	8008cc0 <USB_CoreReset>
 8008940:	4603      	mov	r3, r0
 8008942:	73fb      	strb	r3, [r7, #15]
 8008944:	e01a      	b.n	800897c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	68db      	ldr	r3, [r3, #12]
 800894a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 f9b4 	bl	8008cc0 <USB_CoreReset>
 8008958:	4603      	mov	r3, r0
 800895a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800895c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800895e:	2b00      	cmp	r3, #0
 8008960:	d106      	bne.n	8008970 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008966:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	639a      	str	r2, [r3, #56]	; 0x38
 800896e:	e005      	b.n	800897c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008974:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800897c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800897e:	2b01      	cmp	r3, #1
 8008980:	d10b      	bne.n	800899a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	f043 0206 	orr.w	r2, r3, #6
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	f043 0220 	orr.w	r2, r3, #32
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800899a:	7bfb      	ldrb	r3, [r7, #15]
}
 800899c:	4618      	mov	r0, r3
 800899e:	3710      	adds	r7, #16
 80089a0:	46bd      	mov	sp, r7
 80089a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80089a6:	b004      	add	sp, #16
 80089a8:	4770      	bx	lr

080089aa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80089aa:	b480      	push	{r7}
 80089ac:	b083      	sub	sp, #12
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	f043 0201 	orr.w	r2, r3, #1
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	f023 0201 	bic.w	r2, r3, #1
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	370c      	adds	r7, #12
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr

080089ee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b084      	sub	sp, #16
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
 80089f6:	460b      	mov	r3, r1
 80089f8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80089fa:	2300      	movs	r3, #0
 80089fc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008a0a:	78fb      	ldrb	r3, [r7, #3]
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d115      	bne.n	8008a3c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	68db      	ldr	r3, [r3, #12]
 8008a14:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008a1c:	2001      	movs	r0, #1
 8008a1e:	f7f9 fecb 	bl	80027b8 <HAL_Delay>
      ms++;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	3301      	adds	r3, #1
 8008a26:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 f93a 	bl	8008ca2 <USB_GetMode>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d01e      	beq.n	8008a72 <USB_SetCurrentMode+0x84>
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2b31      	cmp	r3, #49	; 0x31
 8008a38:	d9f0      	bls.n	8008a1c <USB_SetCurrentMode+0x2e>
 8008a3a:	e01a      	b.n	8008a72 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008a3c:	78fb      	ldrb	r3, [r7, #3]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d115      	bne.n	8008a6e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008a4e:	2001      	movs	r0, #1
 8008a50:	f7f9 feb2 	bl	80027b8 <HAL_Delay>
      ms++;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	3301      	adds	r3, #1
 8008a58:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 f921 	bl	8008ca2 <USB_GetMode>
 8008a60:	4603      	mov	r3, r0
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d005      	beq.n	8008a72 <USB_SetCurrentMode+0x84>
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2b31      	cmp	r3, #49	; 0x31
 8008a6a:	d9f0      	bls.n	8008a4e <USB_SetCurrentMode+0x60>
 8008a6c:	e001      	b.n	8008a72 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e005      	b.n	8008a7e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2b32      	cmp	r3, #50	; 0x32
 8008a76:	d101      	bne.n	8008a7c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	e000      	b.n	8008a7e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3710      	adds	r7, #16
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
	...

08008a88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b085      	sub	sp, #20
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008a92:	2300      	movs	r3, #0
 8008a94:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	4a13      	ldr	r2, [pc, #76]	; (8008aec <USB_FlushTxFifo+0x64>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d901      	bls.n	8008aa8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008aa4:	2303      	movs	r3, #3
 8008aa6:	e01b      	b.n	8008ae0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	daf2      	bge.n	8008a96 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	019b      	lsls	r3, r3, #6
 8008ab8:	f043 0220 	orr.w	r2, r3, #32
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	4a08      	ldr	r2, [pc, #32]	; (8008aec <USB_FlushTxFifo+0x64>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d901      	bls.n	8008ad2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	e006      	b.n	8008ae0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	f003 0320 	and.w	r3, r3, #32
 8008ada:	2b20      	cmp	r3, #32
 8008adc:	d0f0      	beq.n	8008ac0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008ade:	2300      	movs	r3, #0
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3714      	adds	r7, #20
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr
 8008aec:	00030d40 	.word	0x00030d40

08008af0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b085      	sub	sp, #20
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008af8:	2300      	movs	r3, #0
 8008afa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	3301      	adds	r3, #1
 8008b00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	4a11      	ldr	r2, [pc, #68]	; (8008b4c <USB_FlushRxFifo+0x5c>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d901      	bls.n	8008b0e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008b0a:	2303      	movs	r3, #3
 8008b0c:	e018      	b.n	8008b40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	691b      	ldr	r3, [r3, #16]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	daf2      	bge.n	8008afc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008b16:	2300      	movs	r3, #0
 8008b18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2210      	movs	r2, #16
 8008b1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	3301      	adds	r3, #1
 8008b24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	4a08      	ldr	r2, [pc, #32]	; (8008b4c <USB_FlushRxFifo+0x5c>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d901      	bls.n	8008b32 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008b2e:	2303      	movs	r3, #3
 8008b30:	e006      	b.n	8008b40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	691b      	ldr	r3, [r3, #16]
 8008b36:	f003 0310 	and.w	r3, r3, #16
 8008b3a:	2b10      	cmp	r3, #16
 8008b3c:	d0f0      	beq.n	8008b20 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008b3e:	2300      	movs	r3, #0
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3714      	adds	r7, #20
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr
 8008b4c:	00030d40 	.word	0x00030d40

08008b50 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b089      	sub	sp, #36	; 0x24
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	4611      	mov	r1, r2
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	460b      	mov	r3, r1
 8008b60:	71fb      	strb	r3, [r7, #7]
 8008b62:	4613      	mov	r3, r2
 8008b64:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008b6e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d123      	bne.n	8008bbe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008b76:	88bb      	ldrh	r3, [r7, #4]
 8008b78:	3303      	adds	r3, #3
 8008b7a:	089b      	lsrs	r3, r3, #2
 8008b7c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008b7e:	2300      	movs	r3, #0
 8008b80:	61bb      	str	r3, [r7, #24]
 8008b82:	e018      	b.n	8008bb6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008b84:	79fb      	ldrb	r3, [r7, #7]
 8008b86:	031a      	lsls	r2, r3, #12
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	4413      	add	r3, r2
 8008b8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b90:	461a      	mov	r2, r3
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008b9e:	69fb      	ldr	r3, [r7, #28]
 8008ba0:	3301      	adds	r3, #1
 8008ba2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008ba4:	69fb      	ldr	r3, [r7, #28]
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008baa:	69fb      	ldr	r3, [r7, #28]
 8008bac:	3301      	adds	r3, #1
 8008bae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008bb0:	69bb      	ldr	r3, [r7, #24]
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	61bb      	str	r3, [r7, #24]
 8008bb6:	69ba      	ldr	r2, [r7, #24]
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d3e2      	bcc.n	8008b84 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008bbe:	2300      	movs	r3, #0
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3724      	adds	r7, #36	; 0x24
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr

08008bcc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b08b      	sub	sp, #44	; 0x2c
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	4613      	mov	r3, r2
 8008bd8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008be2:	88fb      	ldrh	r3, [r7, #6]
 8008be4:	089b      	lsrs	r3, r3, #2
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008bea:	88fb      	ldrh	r3, [r7, #6]
 8008bec:	f003 0303 	and.w	r3, r3, #3
 8008bf0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	623b      	str	r3, [r7, #32]
 8008bf6:	e014      	b.n	8008c22 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008bf8:	69bb      	ldr	r3, [r7, #24]
 8008bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c02:	601a      	str	r2, [r3, #0]
    pDest++;
 8008c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c06:	3301      	adds	r3, #1
 8008c08:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c12:	3301      	adds	r3, #1
 8008c14:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c18:	3301      	adds	r3, #1
 8008c1a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008c1c:	6a3b      	ldr	r3, [r7, #32]
 8008c1e:	3301      	adds	r3, #1
 8008c20:	623b      	str	r3, [r7, #32]
 8008c22:	6a3a      	ldr	r2, [r7, #32]
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d3e6      	bcc.n	8008bf8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008c2a:	8bfb      	ldrh	r3, [r7, #30]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d01e      	beq.n	8008c6e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008c30:	2300      	movs	r3, #0
 8008c32:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	f107 0310 	add.w	r3, r7, #16
 8008c40:	6812      	ldr	r2, [r2, #0]
 8008c42:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008c44:	693a      	ldr	r2, [r7, #16]
 8008c46:	6a3b      	ldr	r3, [r7, #32]
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	00db      	lsls	r3, r3, #3
 8008c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8008c50:	b2da      	uxtb	r2, r3
 8008c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c54:	701a      	strb	r2, [r3, #0]
      i++;
 8008c56:	6a3b      	ldr	r3, [r7, #32]
 8008c58:	3301      	adds	r3, #1
 8008c5a:	623b      	str	r3, [r7, #32]
      pDest++;
 8008c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5e:	3301      	adds	r3, #1
 8008c60:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008c62:	8bfb      	ldrh	r3, [r7, #30]
 8008c64:	3b01      	subs	r3, #1
 8008c66:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008c68:	8bfb      	ldrh	r3, [r7, #30]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d1ea      	bne.n	8008c44 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	372c      	adds	r7, #44	; 0x2c
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b085      	sub	sp, #20
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	695b      	ldr	r3, [r3, #20]
 8008c88:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	699b      	ldr	r3, [r3, #24]
 8008c8e:	68fa      	ldr	r2, [r7, #12]
 8008c90:	4013      	ands	r3, r2
 8008c92:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008c94:	68fb      	ldr	r3, [r7, #12]
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3714      	adds	r7, #20
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr

08008ca2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008ca2:	b480      	push	{r7}
 8008ca4:	b083      	sub	sp, #12
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	695b      	ldr	r3, [r3, #20]
 8008cae:	f003 0301 	and.w	r3, r3, #1
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	370c      	adds	r7, #12
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr
	...

08008cc0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b085      	sub	sp, #20
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	3301      	adds	r3, #1
 8008cd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	4a13      	ldr	r2, [pc, #76]	; (8008d24 <USB_CoreReset+0x64>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d901      	bls.n	8008cde <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008cda:	2303      	movs	r3, #3
 8008cdc:	e01b      	b.n	8008d16 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	691b      	ldr	r3, [r3, #16]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	daf2      	bge.n	8008ccc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	691b      	ldr	r3, [r3, #16]
 8008cee:	f043 0201 	orr.w	r2, r3, #1
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	4a09      	ldr	r2, [pc, #36]	; (8008d24 <USB_CoreReset+0x64>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d901      	bls.n	8008d08 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008d04:	2303      	movs	r3, #3
 8008d06:	e006      	b.n	8008d16 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	691b      	ldr	r3, [r3, #16]
 8008d0c:	f003 0301 	and.w	r3, r3, #1
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d0f0      	beq.n	8008cf6 <USB_CoreReset+0x36>

  return HAL_OK;
 8008d14:	2300      	movs	r3, #0
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3714      	adds	r7, #20
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop
 8008d24:	00030d40 	.word	0x00030d40

08008d28 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d28:	b084      	sub	sp, #16
 8008d2a:	b580      	push	{r7, lr}
 8008d2c:	b086      	sub	sp, #24
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
 8008d32:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008d36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d48:	461a      	mov	r2, r3
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d52:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d5e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d6a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d018      	beq.n	8008db0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d10a      	bne.n	8008d9a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	68fa      	ldr	r2, [r7, #12]
 8008d8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008d92:	f043 0304 	orr.w	r3, r3, #4
 8008d96:	6013      	str	r3, [r2, #0]
 8008d98:	e014      	b.n	8008dc4 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	68fa      	ldr	r2, [r7, #12]
 8008da4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008da8:	f023 0304 	bic.w	r3, r3, #4
 8008dac:	6013      	str	r3, [r2, #0]
 8008dae:	e009      	b.n	8008dc4 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008dbe:	f023 0304 	bic.w	r3, r3, #4
 8008dc2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008dc4:	2110      	movs	r1, #16
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f7ff fe5e 	bl	8008a88 <USB_FlushTxFifo>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d001      	beq.n	8008dd6 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f7ff fe8a 	bl	8008af0 <USB_FlushRxFifo>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d001      	beq.n	8008de6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008de6:	2300      	movs	r3, #0
 8008de8:	613b      	str	r3, [r7, #16]
 8008dea:	e015      	b.n	8008e18 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	015a      	lsls	r2, r3, #5
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	4413      	add	r3, r2
 8008df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008df8:	461a      	mov	r2, r3
 8008dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8008dfe:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	015a      	lsls	r2, r3, #5
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	4413      	add	r3, r2
 8008e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	2300      	movs	r3, #0
 8008e10:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	3301      	adds	r3, #1
 8008e16:	613b      	str	r3, [r7, #16]
 8008e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1a:	693a      	ldr	r2, [r7, #16]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d3e5      	bcc.n	8008dec <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2200      	movs	r2, #0
 8008e24:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f04f 32ff 	mov.w	r2, #4294967295
 8008e2c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d00b      	beq.n	8008e52 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e40:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4a13      	ldr	r2, [pc, #76]	; (8008e94 <USB_HostInit+0x16c>)
 8008e46:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	4a13      	ldr	r2, [pc, #76]	; (8008e98 <USB_HostInit+0x170>)
 8008e4c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008e50:	e009      	b.n	8008e66 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2280      	movs	r2, #128	; 0x80
 8008e56:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4a10      	ldr	r2, [pc, #64]	; (8008e9c <USB_HostInit+0x174>)
 8008e5c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	4a0f      	ldr	r2, [pc, #60]	; (8008ea0 <USB_HostInit+0x178>)
 8008e62:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d105      	bne.n	8008e78 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	699b      	ldr	r3, [r3, #24]
 8008e70:	f043 0210 	orr.w	r2, r3, #16
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	699a      	ldr	r2, [r3, #24]
 8008e7c:	4b09      	ldr	r3, [pc, #36]	; (8008ea4 <USB_HostInit+0x17c>)
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3718      	adds	r7, #24
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e90:	b004      	add	sp, #16
 8008e92:	4770      	bx	lr
 8008e94:	01000200 	.word	0x01000200
 8008e98:	00e00300 	.word	0x00e00300
 8008e9c:	00600080 	.word	0x00600080
 8008ea0:	004000e0 	.word	0x004000e0
 8008ea4:	a3200008 	.word	0xa3200008

08008ea8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b085      	sub	sp, #20
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	68fa      	ldr	r2, [r7, #12]
 8008ec2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008ec6:	f023 0303 	bic.w	r3, r3, #3
 8008eca:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	78fb      	ldrb	r3, [r7, #3]
 8008ed6:	f003 0303 	and.w	r3, r3, #3
 8008eda:	68f9      	ldr	r1, [r7, #12]
 8008edc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008ee4:	78fb      	ldrb	r3, [r7, #3]
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d107      	bne.n	8008efa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008ef6:	6053      	str	r3, [r2, #4]
 8008ef8:	e009      	b.n	8008f0e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008efa:	78fb      	ldrb	r3, [r7, #3]
 8008efc:	2b02      	cmp	r3, #2
 8008efe:	d106      	bne.n	8008f0e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f06:	461a      	mov	r2, r3
 8008f08:	f241 7370 	movw	r3, #6000	; 0x1770
 8008f0c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008f0e:	2300      	movs	r3, #0
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3714      	adds	r7, #20
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr

08008f1c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008f3c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f4a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008f4c:	2064      	movs	r0, #100	; 0x64
 8008f4e:	f7f9 fc33 	bl	80027b8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	68fa      	ldr	r2, [r7, #12]
 8008f56:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008f5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f5e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008f60:	200a      	movs	r0, #10
 8008f62:	f7f9 fc29 	bl	80027b8 <HAL_Delay>

  return HAL_OK;
 8008f66:	2300      	movs	r3, #0
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3710      	adds	r7, #16
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b085      	sub	sp, #20
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	460b      	mov	r3, r1
 8008f7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008f80:	2300      	movs	r3, #0
 8008f82:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008f94:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d109      	bne.n	8008fb4 <USB_DriveVbus+0x44>
 8008fa0:	78fb      	ldrb	r3, [r7, #3]
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d106      	bne.n	8008fb4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	68fa      	ldr	r2, [r7, #12]
 8008faa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008fae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008fb2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fbe:	d109      	bne.n	8008fd4 <USB_DriveVbus+0x64>
 8008fc0:	78fb      	ldrb	r3, [r7, #3]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d106      	bne.n	8008fd4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	68fa      	ldr	r2, [r7, #12]
 8008fca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008fce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fd2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3714      	adds	r7, #20
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr

08008fe2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008fe2:	b480      	push	{r7}
 8008fe4:	b085      	sub	sp, #20
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	0c5b      	lsrs	r3, r3, #17
 8009000:	f003 0303 	and.w	r3, r3, #3
}
 8009004:	4618      	mov	r0, r3
 8009006:	3714      	adds	r7, #20
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr

08009010 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8009010:	b480      	push	{r7}
 8009012:	b085      	sub	sp, #20
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	b29b      	uxth	r3, r3
}
 8009026:	4618      	mov	r0, r3
 8009028:	3714      	adds	r7, #20
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr
	...

08009034 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b088      	sub	sp, #32
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	4608      	mov	r0, r1
 800903e:	4611      	mov	r1, r2
 8009040:	461a      	mov	r2, r3
 8009042:	4603      	mov	r3, r0
 8009044:	70fb      	strb	r3, [r7, #3]
 8009046:	460b      	mov	r3, r1
 8009048:	70bb      	strb	r3, [r7, #2]
 800904a:	4613      	mov	r3, r2
 800904c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800904e:	2300      	movs	r3, #0
 8009050:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009056:	78fb      	ldrb	r3, [r7, #3]
 8009058:	015a      	lsls	r2, r3, #5
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	4413      	add	r3, r2
 800905e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009062:	461a      	mov	r2, r3
 8009064:	f04f 33ff 	mov.w	r3, #4294967295
 8009068:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800906a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800906e:	2b03      	cmp	r3, #3
 8009070:	d87e      	bhi.n	8009170 <USB_HC_Init+0x13c>
 8009072:	a201      	add	r2, pc, #4	; (adr r2, 8009078 <USB_HC_Init+0x44>)
 8009074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009078:	08009089 	.word	0x08009089
 800907c:	08009133 	.word	0x08009133
 8009080:	08009089 	.word	0x08009089
 8009084:	080090f5 	.word	0x080090f5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009088:	78fb      	ldrb	r3, [r7, #3]
 800908a:	015a      	lsls	r2, r3, #5
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	4413      	add	r3, r2
 8009090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009094:	461a      	mov	r2, r3
 8009096:	f240 439d 	movw	r3, #1181	; 0x49d
 800909a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800909c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	da10      	bge.n	80090c6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80090a4:	78fb      	ldrb	r3, [r7, #3]
 80090a6:	015a      	lsls	r2, r3, #5
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	4413      	add	r3, r2
 80090ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090b0:	68db      	ldr	r3, [r3, #12]
 80090b2:	78fa      	ldrb	r2, [r7, #3]
 80090b4:	0151      	lsls	r1, r2, #5
 80090b6:	693a      	ldr	r2, [r7, #16]
 80090b8:	440a      	add	r2, r1
 80090ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80090be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090c2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80090c4:	e057      	b.n	8009176 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d051      	beq.n	8009176 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80090d2:	78fb      	ldrb	r3, [r7, #3]
 80090d4:	015a      	lsls	r2, r3, #5
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	4413      	add	r3, r2
 80090da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	78fa      	ldrb	r2, [r7, #3]
 80090e2:	0151      	lsls	r1, r2, #5
 80090e4:	693a      	ldr	r2, [r7, #16]
 80090e6:	440a      	add	r2, r1
 80090e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80090ec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80090f0:	60d3      	str	r3, [r2, #12]
      break;
 80090f2:	e040      	b.n	8009176 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80090f4:	78fb      	ldrb	r3, [r7, #3]
 80090f6:	015a      	lsls	r2, r3, #5
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	4413      	add	r3, r2
 80090fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009100:	461a      	mov	r2, r3
 8009102:	f240 639d 	movw	r3, #1693	; 0x69d
 8009106:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009108:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800910c:	2b00      	cmp	r3, #0
 800910e:	da34      	bge.n	800917a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009110:	78fb      	ldrb	r3, [r7, #3]
 8009112:	015a      	lsls	r2, r3, #5
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	4413      	add	r3, r2
 8009118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800911c:	68db      	ldr	r3, [r3, #12]
 800911e:	78fa      	ldrb	r2, [r7, #3]
 8009120:	0151      	lsls	r1, r2, #5
 8009122:	693a      	ldr	r2, [r7, #16]
 8009124:	440a      	add	r2, r1
 8009126:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800912a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800912e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009130:	e023      	b.n	800917a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009132:	78fb      	ldrb	r3, [r7, #3]
 8009134:	015a      	lsls	r2, r3, #5
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	4413      	add	r3, r2
 800913a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800913e:	461a      	mov	r2, r3
 8009140:	f240 2325 	movw	r3, #549	; 0x225
 8009144:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009146:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800914a:	2b00      	cmp	r3, #0
 800914c:	da17      	bge.n	800917e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800914e:	78fb      	ldrb	r3, [r7, #3]
 8009150:	015a      	lsls	r2, r3, #5
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	4413      	add	r3, r2
 8009156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	78fa      	ldrb	r2, [r7, #3]
 800915e:	0151      	lsls	r1, r2, #5
 8009160:	693a      	ldr	r2, [r7, #16]
 8009162:	440a      	add	r2, r1
 8009164:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009168:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800916c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800916e:	e006      	b.n	800917e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009170:	2301      	movs	r3, #1
 8009172:	77fb      	strb	r3, [r7, #31]
      break;
 8009174:	e004      	b.n	8009180 <USB_HC_Init+0x14c>
      break;
 8009176:	bf00      	nop
 8009178:	e002      	b.n	8009180 <USB_HC_Init+0x14c>
      break;
 800917a:	bf00      	nop
 800917c:	e000      	b.n	8009180 <USB_HC_Init+0x14c>
      break;
 800917e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8009180:	78fb      	ldrb	r3, [r7, #3]
 8009182:	015a      	lsls	r2, r3, #5
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	4413      	add	r3, r2
 8009188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	78fa      	ldrb	r2, [r7, #3]
 8009190:	0151      	lsls	r1, r2, #5
 8009192:	693a      	ldr	r2, [r7, #16]
 8009194:	440a      	add	r2, r1
 8009196:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800919a:	f043 0302 	orr.w	r3, r3, #2
 800919e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091a6:	699a      	ldr	r2, [r3, #24]
 80091a8:	78fb      	ldrb	r3, [r7, #3]
 80091aa:	f003 030f 	and.w	r3, r3, #15
 80091ae:	2101      	movs	r1, #1
 80091b0:	fa01 f303 	lsl.w	r3, r1, r3
 80091b4:	6939      	ldr	r1, [r7, #16]
 80091b6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80091ba:	4313      	orrs	r3, r2
 80091bc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	699b      	ldr	r3, [r3, #24]
 80091c2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80091ca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	da03      	bge.n	80091da <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80091d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091d6:	61bb      	str	r3, [r7, #24]
 80091d8:	e001      	b.n	80091de <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80091da:	2300      	movs	r3, #0
 80091dc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f7ff feff 	bl	8008fe2 <USB_GetHostSpeed>
 80091e4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80091e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80091ea:	2b02      	cmp	r3, #2
 80091ec:	d106      	bne.n	80091fc <USB_HC_Init+0x1c8>
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2b02      	cmp	r3, #2
 80091f2:	d003      	beq.n	80091fc <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80091f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80091f8:	617b      	str	r3, [r7, #20]
 80091fa:	e001      	b.n	8009200 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80091fc:	2300      	movs	r3, #0
 80091fe:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009200:	787b      	ldrb	r3, [r7, #1]
 8009202:	059b      	lsls	r3, r3, #22
 8009204:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009208:	78bb      	ldrb	r3, [r7, #2]
 800920a:	02db      	lsls	r3, r3, #11
 800920c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009210:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009212:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009216:	049b      	lsls	r3, r3, #18
 8009218:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800921c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800921e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009220:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009224:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009226:	69bb      	ldr	r3, [r7, #24]
 8009228:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800922a:	78fb      	ldrb	r3, [r7, #3]
 800922c:	0159      	lsls	r1, r3, #5
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	440b      	add	r3, r1
 8009232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009236:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800923c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800923e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009242:	2b03      	cmp	r3, #3
 8009244:	d003      	beq.n	800924e <USB_HC_Init+0x21a>
 8009246:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800924a:	2b01      	cmp	r3, #1
 800924c:	d10f      	bne.n	800926e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800924e:	78fb      	ldrb	r3, [r7, #3]
 8009250:	015a      	lsls	r2, r3, #5
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	4413      	add	r3, r2
 8009256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	78fa      	ldrb	r2, [r7, #3]
 800925e:	0151      	lsls	r1, r2, #5
 8009260:	693a      	ldr	r2, [r7, #16]
 8009262:	440a      	add	r2, r1
 8009264:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009268:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800926c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800926e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009270:	4618      	mov	r0, r3
 8009272:	3720      	adds	r7, #32
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b08c      	sub	sp, #48	; 0x30
 800927c:	af02      	add	r7, sp, #8
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	60b9      	str	r1, [r7, #8]
 8009282:	4613      	mov	r3, r2
 8009284:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	785b      	ldrb	r3, [r3, #1]
 800928e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009290:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009294:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800929a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d02d      	beq.n	80092fe <USB_HC_StartXfer+0x86>
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	791b      	ldrb	r3, [r3, #4]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d129      	bne.n	80092fe <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80092aa:	79fb      	ldrb	r3, [r7, #7]
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d117      	bne.n	80092e0 <USB_HC_StartXfer+0x68>
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	79db      	ldrb	r3, [r3, #7]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d003      	beq.n	80092c0 <USB_HC_StartXfer+0x48>
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	79db      	ldrb	r3, [r3, #7]
 80092bc:	2b02      	cmp	r3, #2
 80092be:	d10f      	bne.n	80092e0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80092c0:	69fb      	ldr	r3, [r7, #28]
 80092c2:	015a      	lsls	r2, r3, #5
 80092c4:	6a3b      	ldr	r3, [r7, #32]
 80092c6:	4413      	add	r3, r2
 80092c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	69fa      	ldr	r2, [r7, #28]
 80092d0:	0151      	lsls	r1, r2, #5
 80092d2:	6a3a      	ldr	r2, [r7, #32]
 80092d4:	440a      	add	r2, r1
 80092d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092de:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80092e0:	79fb      	ldrb	r3, [r7, #7]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d10b      	bne.n	80092fe <USB_HC_StartXfer+0x86>
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	795b      	ldrb	r3, [r3, #5]
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d107      	bne.n	80092fe <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	785b      	ldrb	r3, [r3, #1]
 80092f2:	4619      	mov	r1, r3
 80092f4:	68f8      	ldr	r0, [r7, #12]
 80092f6:	f000 fa0f 	bl	8009718 <USB_DoPing>
      return HAL_OK;
 80092fa:	2300      	movs	r3, #0
 80092fc:	e0f8      	b.n	80094f0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	695b      	ldr	r3, [r3, #20]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d018      	beq.n	8009338 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	695b      	ldr	r3, [r3, #20]
 800930a:	68ba      	ldr	r2, [r7, #8]
 800930c:	8912      	ldrh	r2, [r2, #8]
 800930e:	4413      	add	r3, r2
 8009310:	3b01      	subs	r3, #1
 8009312:	68ba      	ldr	r2, [r7, #8]
 8009314:	8912      	ldrh	r2, [r2, #8]
 8009316:	fbb3 f3f2 	udiv	r3, r3, r2
 800931a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800931c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800931e:	8b7b      	ldrh	r3, [r7, #26]
 8009320:	429a      	cmp	r2, r3
 8009322:	d90b      	bls.n	800933c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8009324:	8b7b      	ldrh	r3, [r7, #26]
 8009326:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009328:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800932a:	68ba      	ldr	r2, [r7, #8]
 800932c:	8912      	ldrh	r2, [r2, #8]
 800932e:	fb03 f202 	mul.w	r2, r3, r2
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	611a      	str	r2, [r3, #16]
 8009336:	e001      	b.n	800933c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8009338:	2301      	movs	r3, #1
 800933a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	78db      	ldrb	r3, [r3, #3]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d007      	beq.n	8009354 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009344:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009346:	68ba      	ldr	r2, [r7, #8]
 8009348:	8912      	ldrh	r2, [r2, #8]
 800934a:	fb03 f202 	mul.w	r2, r3, r2
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	611a      	str	r2, [r3, #16]
 8009352:	e003      	b.n	800935c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	695a      	ldr	r2, [r3, #20]
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	691b      	ldr	r3, [r3, #16]
 8009360:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009364:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009366:	04d9      	lsls	r1, r3, #19
 8009368:	4b63      	ldr	r3, [pc, #396]	; (80094f8 <USB_HC_StartXfer+0x280>)
 800936a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800936c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	7a9b      	ldrb	r3, [r3, #10]
 8009372:	075b      	lsls	r3, r3, #29
 8009374:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009378:	69f9      	ldr	r1, [r7, #28]
 800937a:	0148      	lsls	r0, r1, #5
 800937c:	6a39      	ldr	r1, [r7, #32]
 800937e:	4401      	add	r1, r0
 8009380:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009384:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009386:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009388:	79fb      	ldrb	r3, [r7, #7]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d009      	beq.n	80093a2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	68d9      	ldr	r1, [r3, #12]
 8009392:	69fb      	ldr	r3, [r7, #28]
 8009394:	015a      	lsls	r2, r3, #5
 8009396:	6a3b      	ldr	r3, [r7, #32]
 8009398:	4413      	add	r3, r2
 800939a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800939e:	460a      	mov	r2, r1
 80093a0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80093a2:	6a3b      	ldr	r3, [r7, #32]
 80093a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093a8:	689b      	ldr	r3, [r3, #8]
 80093aa:	f003 0301 	and.w	r3, r3, #1
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	bf0c      	ite	eq
 80093b2:	2301      	moveq	r3, #1
 80093b4:	2300      	movne	r3, #0
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80093ba:	69fb      	ldr	r3, [r7, #28]
 80093bc:	015a      	lsls	r2, r3, #5
 80093be:	6a3b      	ldr	r3, [r7, #32]
 80093c0:	4413      	add	r3, r2
 80093c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	69fa      	ldr	r2, [r7, #28]
 80093ca:	0151      	lsls	r1, r2, #5
 80093cc:	6a3a      	ldr	r2, [r7, #32]
 80093ce:	440a      	add	r2, r1
 80093d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093d4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80093d8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80093da:	69fb      	ldr	r3, [r7, #28]
 80093dc:	015a      	lsls	r2, r3, #5
 80093de:	6a3b      	ldr	r3, [r7, #32]
 80093e0:	4413      	add	r3, r2
 80093e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	7e7b      	ldrb	r3, [r7, #25]
 80093ea:	075b      	lsls	r3, r3, #29
 80093ec:	69f9      	ldr	r1, [r7, #28]
 80093ee:	0148      	lsls	r0, r1, #5
 80093f0:	6a39      	ldr	r1, [r7, #32]
 80093f2:	4401      	add	r1, r0
 80093f4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80093f8:	4313      	orrs	r3, r2
 80093fa:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80093fc:	69fb      	ldr	r3, [r7, #28]
 80093fe:	015a      	lsls	r2, r3, #5
 8009400:	6a3b      	ldr	r3, [r7, #32]
 8009402:	4413      	add	r3, r2
 8009404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009412:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	78db      	ldrb	r3, [r3, #3]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d004      	beq.n	8009426 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009422:	613b      	str	r3, [r7, #16]
 8009424:	e003      	b.n	800942e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800942c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009434:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	015a      	lsls	r2, r3, #5
 800943a:	6a3b      	ldr	r3, [r7, #32]
 800943c:	4413      	add	r3, r2
 800943e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009442:	461a      	mov	r2, r3
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009448:	79fb      	ldrb	r3, [r7, #7]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d001      	beq.n	8009452 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800944e:	2300      	movs	r3, #0
 8009450:	e04e      	b.n	80094f0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	78db      	ldrb	r3, [r3, #3]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d149      	bne.n	80094ee <USB_HC_StartXfer+0x276>
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	695b      	ldr	r3, [r3, #20]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d045      	beq.n	80094ee <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	79db      	ldrb	r3, [r3, #7]
 8009466:	2b03      	cmp	r3, #3
 8009468:	d830      	bhi.n	80094cc <USB_HC_StartXfer+0x254>
 800946a:	a201      	add	r2, pc, #4	; (adr r2, 8009470 <USB_HC_StartXfer+0x1f8>)
 800946c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009470:	08009481 	.word	0x08009481
 8009474:	080094a5 	.word	0x080094a5
 8009478:	08009481 	.word	0x08009481
 800947c:	080094a5 	.word	0x080094a5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	695b      	ldr	r3, [r3, #20]
 8009484:	3303      	adds	r3, #3
 8009486:	089b      	lsrs	r3, r3, #2
 8009488:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800948a:	8afa      	ldrh	r2, [r7, #22]
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009490:	b29b      	uxth	r3, r3
 8009492:	429a      	cmp	r2, r3
 8009494:	d91c      	bls.n	80094d0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	699b      	ldr	r3, [r3, #24]
 800949a:	f043 0220 	orr.w	r2, r3, #32
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	619a      	str	r2, [r3, #24]
        }
        break;
 80094a2:	e015      	b.n	80094d0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	695b      	ldr	r3, [r3, #20]
 80094a8:	3303      	adds	r3, #3
 80094aa:	089b      	lsrs	r3, r3, #2
 80094ac:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80094ae:	8afa      	ldrh	r2, [r7, #22]
 80094b0:	6a3b      	ldr	r3, [r7, #32]
 80094b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094b6:	691b      	ldr	r3, [r3, #16]
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d90a      	bls.n	80094d4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	699b      	ldr	r3, [r3, #24]
 80094c2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	619a      	str	r2, [r3, #24]
        }
        break;
 80094ca:	e003      	b.n	80094d4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80094cc:	bf00      	nop
 80094ce:	e002      	b.n	80094d6 <USB_HC_StartXfer+0x25e>
        break;
 80094d0:	bf00      	nop
 80094d2:	e000      	b.n	80094d6 <USB_HC_StartXfer+0x25e>
        break;
 80094d4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	68d9      	ldr	r1, [r3, #12]
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	785a      	ldrb	r2, [r3, #1]
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	695b      	ldr	r3, [r3, #20]
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	2000      	movs	r0, #0
 80094e6:	9000      	str	r0, [sp, #0]
 80094e8:	68f8      	ldr	r0, [r7, #12]
 80094ea:	f7ff fb31 	bl	8008b50 <USB_WritePacket>
  }

  return HAL_OK;
 80094ee:	2300      	movs	r3, #0
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3728      	adds	r7, #40	; 0x28
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}
 80094f8:	1ff80000 	.word	0x1ff80000

080094fc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b085      	sub	sp, #20
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800950e:	695b      	ldr	r3, [r3, #20]
 8009510:	b29b      	uxth	r3, r3
}
 8009512:	4618      	mov	r0, r3
 8009514:	3714      	adds	r7, #20
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr

0800951e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800951e:	b480      	push	{r7}
 8009520:	b089      	sub	sp, #36	; 0x24
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
 8009526:	460b      	mov	r3, r1
 8009528:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800952e:	78fb      	ldrb	r3, [r7, #3]
 8009530:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8009532:	2300      	movs	r3, #0
 8009534:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009536:	69bb      	ldr	r3, [r7, #24]
 8009538:	015a      	lsls	r2, r3, #5
 800953a:	69fb      	ldr	r3, [r7, #28]
 800953c:	4413      	add	r3, r2
 800953e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	0c9b      	lsrs	r3, r3, #18
 8009546:	f003 0303 	and.w	r3, r3, #3
 800954a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800954c:	69bb      	ldr	r3, [r7, #24]
 800954e:	015a      	lsls	r2, r3, #5
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	4413      	add	r3, r2
 8009554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	0fdb      	lsrs	r3, r3, #31
 800955c:	f003 0301 	and.w	r3, r3, #1
 8009560:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	f003 0320 	and.w	r3, r3, #32
 800956a:	2b20      	cmp	r3, #32
 800956c:	d104      	bne.n	8009578 <USB_HC_Halt+0x5a>
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d101      	bne.n	8009578 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009574:	2300      	movs	r3, #0
 8009576:	e0c8      	b.n	800970a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d002      	beq.n	8009584 <USB_HC_Halt+0x66>
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	2b02      	cmp	r3, #2
 8009582:	d163      	bne.n	800964c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009584:	69bb      	ldr	r3, [r7, #24]
 8009586:	015a      	lsls	r2, r3, #5
 8009588:	69fb      	ldr	r3, [r7, #28]
 800958a:	4413      	add	r3, r2
 800958c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	69ba      	ldr	r2, [r7, #24]
 8009594:	0151      	lsls	r1, r2, #5
 8009596:	69fa      	ldr	r2, [r7, #28]
 8009598:	440a      	add	r2, r1
 800959a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800959e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80095a2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	689b      	ldr	r3, [r3, #8]
 80095a8:	f003 0320 	and.w	r3, r3, #32
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	f040 80ab 	bne.w	8009708 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d133      	bne.n	8009626 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80095be:	69bb      	ldr	r3, [r7, #24]
 80095c0:	015a      	lsls	r2, r3, #5
 80095c2:	69fb      	ldr	r3, [r7, #28]
 80095c4:	4413      	add	r3, r2
 80095c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	69ba      	ldr	r2, [r7, #24]
 80095ce:	0151      	lsls	r1, r2, #5
 80095d0:	69fa      	ldr	r2, [r7, #28]
 80095d2:	440a      	add	r2, r1
 80095d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80095dc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80095de:	69bb      	ldr	r3, [r7, #24]
 80095e0:	015a      	lsls	r2, r3, #5
 80095e2:	69fb      	ldr	r3, [r7, #28]
 80095e4:	4413      	add	r3, r2
 80095e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	69ba      	ldr	r2, [r7, #24]
 80095ee:	0151      	lsls	r1, r2, #5
 80095f0:	69fa      	ldr	r2, [r7, #28]
 80095f2:	440a      	add	r2, r1
 80095f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80095fc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	3301      	adds	r3, #1
 8009602:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800960a:	d81d      	bhi.n	8009648 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800960c:	69bb      	ldr	r3, [r7, #24]
 800960e:	015a      	lsls	r2, r3, #5
 8009610:	69fb      	ldr	r3, [r7, #28]
 8009612:	4413      	add	r3, r2
 8009614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800961e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009622:	d0ec      	beq.n	80095fe <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009624:	e070      	b.n	8009708 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009626:	69bb      	ldr	r3, [r7, #24]
 8009628:	015a      	lsls	r2, r3, #5
 800962a:	69fb      	ldr	r3, [r7, #28]
 800962c:	4413      	add	r3, r2
 800962e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	69ba      	ldr	r2, [r7, #24]
 8009636:	0151      	lsls	r1, r2, #5
 8009638:	69fa      	ldr	r2, [r7, #28]
 800963a:	440a      	add	r2, r1
 800963c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009640:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009644:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009646:	e05f      	b.n	8009708 <USB_HC_Halt+0x1ea>
            break;
 8009648:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800964a:	e05d      	b.n	8009708 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800964c:	69bb      	ldr	r3, [r7, #24]
 800964e:	015a      	lsls	r2, r3, #5
 8009650:	69fb      	ldr	r3, [r7, #28]
 8009652:	4413      	add	r3, r2
 8009654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	69ba      	ldr	r2, [r7, #24]
 800965c:	0151      	lsls	r1, r2, #5
 800965e:	69fa      	ldr	r2, [r7, #28]
 8009660:	440a      	add	r2, r1
 8009662:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009666:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800966a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800966c:	69fb      	ldr	r3, [r7, #28]
 800966e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009672:	691b      	ldr	r3, [r3, #16]
 8009674:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009678:	2b00      	cmp	r3, #0
 800967a:	d133      	bne.n	80096e4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800967c:	69bb      	ldr	r3, [r7, #24]
 800967e:	015a      	lsls	r2, r3, #5
 8009680:	69fb      	ldr	r3, [r7, #28]
 8009682:	4413      	add	r3, r2
 8009684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	69ba      	ldr	r2, [r7, #24]
 800968c:	0151      	lsls	r1, r2, #5
 800968e:	69fa      	ldr	r2, [r7, #28]
 8009690:	440a      	add	r2, r1
 8009692:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009696:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800969a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800969c:	69bb      	ldr	r3, [r7, #24]
 800969e:	015a      	lsls	r2, r3, #5
 80096a0:	69fb      	ldr	r3, [r7, #28]
 80096a2:	4413      	add	r3, r2
 80096a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	69ba      	ldr	r2, [r7, #24]
 80096ac:	0151      	lsls	r1, r2, #5
 80096ae:	69fa      	ldr	r2, [r7, #28]
 80096b0:	440a      	add	r2, r1
 80096b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80096b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80096ba:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	3301      	adds	r3, #1
 80096c0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80096c8:	d81d      	bhi.n	8009706 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80096ca:	69bb      	ldr	r3, [r7, #24]
 80096cc:	015a      	lsls	r2, r3, #5
 80096ce:	69fb      	ldr	r3, [r7, #28]
 80096d0:	4413      	add	r3, r2
 80096d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096e0:	d0ec      	beq.n	80096bc <USB_HC_Halt+0x19e>
 80096e2:	e011      	b.n	8009708 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80096e4:	69bb      	ldr	r3, [r7, #24]
 80096e6:	015a      	lsls	r2, r3, #5
 80096e8:	69fb      	ldr	r3, [r7, #28]
 80096ea:	4413      	add	r3, r2
 80096ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	69ba      	ldr	r2, [r7, #24]
 80096f4:	0151      	lsls	r1, r2, #5
 80096f6:	69fa      	ldr	r2, [r7, #28]
 80096f8:	440a      	add	r2, r1
 80096fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80096fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009702:	6013      	str	r3, [r2, #0]
 8009704:	e000      	b.n	8009708 <USB_HC_Halt+0x1ea>
          break;
 8009706:	bf00      	nop
    }
  }

  return HAL_OK;
 8009708:	2300      	movs	r3, #0
}
 800970a:	4618      	mov	r0, r3
 800970c:	3724      	adds	r7, #36	; 0x24
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr
	...

08009718 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009718:	b480      	push	{r7}
 800971a:	b087      	sub	sp, #28
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	460b      	mov	r3, r1
 8009722:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009728:	78fb      	ldrb	r3, [r7, #3]
 800972a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800972c:	2301      	movs	r3, #1
 800972e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	04da      	lsls	r2, r3, #19
 8009734:	4b15      	ldr	r3, [pc, #84]	; (800978c <USB_DoPing+0x74>)
 8009736:	4013      	ands	r3, r2
 8009738:	693a      	ldr	r2, [r7, #16]
 800973a:	0151      	lsls	r1, r2, #5
 800973c:	697a      	ldr	r2, [r7, #20]
 800973e:	440a      	add	r2, r1
 8009740:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009744:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009748:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	015a      	lsls	r2, r3, #5
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	4413      	add	r3, r2
 8009752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009760:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009768:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	015a      	lsls	r2, r3, #5
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	4413      	add	r3, r2
 8009772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009776:	461a      	mov	r2, r3
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800977c:	2300      	movs	r3, #0
}
 800977e:	4618      	mov	r0, r3
 8009780:	371c      	adds	r7, #28
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr
 800978a:	bf00      	nop
 800978c:	1ff80000 	.word	0x1ff80000

08009790 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b088      	sub	sp, #32
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009798:	2300      	movs	r3, #0
 800979a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80097a0:	2300      	movs	r3, #0
 80097a2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f7ff f911 	bl	80089cc <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80097aa:	2110      	movs	r1, #16
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f7ff f96b 	bl	8008a88 <USB_FlushTxFifo>
 80097b2:	4603      	mov	r3, r0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d001      	beq.n	80097bc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80097b8:	2301      	movs	r3, #1
 80097ba:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f7ff f997 	bl	8008af0 <USB_FlushRxFifo>
 80097c2:	4603      	mov	r3, r0
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d001      	beq.n	80097cc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80097c8:	2301      	movs	r3, #1
 80097ca:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80097cc:	2300      	movs	r3, #0
 80097ce:	61bb      	str	r3, [r7, #24]
 80097d0:	e01f      	b.n	8009812 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80097d2:	69bb      	ldr	r3, [r7, #24]
 80097d4:	015a      	lsls	r2, r3, #5
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	4413      	add	r3, r2
 80097da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80097e8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80097f0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80097f8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	015a      	lsls	r2, r3, #5
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	4413      	add	r3, r2
 8009802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009806:	461a      	mov	r2, r3
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800980c:	69bb      	ldr	r3, [r7, #24]
 800980e:	3301      	adds	r3, #1
 8009810:	61bb      	str	r3, [r7, #24]
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	2b0f      	cmp	r3, #15
 8009816:	d9dc      	bls.n	80097d2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009818:	2300      	movs	r3, #0
 800981a:	61bb      	str	r3, [r7, #24]
 800981c:	e034      	b.n	8009888 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800981e:	69bb      	ldr	r3, [r7, #24]
 8009820:	015a      	lsls	r2, r3, #5
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	4413      	add	r3, r2
 8009826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009834:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800983c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009844:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009846:	69bb      	ldr	r3, [r7, #24]
 8009848:	015a      	lsls	r2, r3, #5
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	4413      	add	r3, r2
 800984e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009852:	461a      	mov	r2, r3
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	3301      	adds	r3, #1
 800985c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009864:	d80c      	bhi.n	8009880 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009866:	69bb      	ldr	r3, [r7, #24]
 8009868:	015a      	lsls	r2, r3, #5
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	4413      	add	r3, r2
 800986e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009878:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800987c:	d0ec      	beq.n	8009858 <USB_StopHost+0xc8>
 800987e:	e000      	b.n	8009882 <USB_StopHost+0xf2>
        break;
 8009880:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009882:	69bb      	ldr	r3, [r7, #24]
 8009884:	3301      	adds	r3, #1
 8009886:	61bb      	str	r3, [r7, #24]
 8009888:	69bb      	ldr	r3, [r7, #24]
 800988a:	2b0f      	cmp	r3, #15
 800988c:	d9c7      	bls.n	800981e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009894:	461a      	mov	r2, r3
 8009896:	f04f 33ff 	mov.w	r3, #4294967295
 800989a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f04f 32ff 	mov.w	r2, #4294967295
 80098a2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f7ff f880 	bl	80089aa <USB_EnableGlobalInt>

  return ret;
 80098aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3720      	adds	r7, #32
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80098b8:	4904      	ldr	r1, [pc, #16]	; (80098cc <MX_FATFS_Init+0x18>)
 80098ba:	4805      	ldr	r0, [pc, #20]	; (80098d0 <MX_FATFS_Init+0x1c>)
 80098bc:	f006 fb36 	bl	800ff2c <FATFS_LinkDriver>
 80098c0:	4603      	mov	r3, r0
 80098c2:	461a      	mov	r2, r3
 80098c4:	4b03      	ldr	r3, [pc, #12]	; (80098d4 <MX_FATFS_Init+0x20>)
 80098c6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80098c8:	bf00      	nop
 80098ca:	bd80      	pop	{r7, pc}
 80098cc:	20001a10 	.word	0x20001a10
 80098d0:	08010b44 	.word	0x08010b44
 80098d4:	20001a0c 	.word	0x20001a0c

080098d8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80098d8:	b480      	push	{r7}
 80098da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80098dc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80098de:	4618      	mov	r0, r3
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr

080098e8 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b083      	sub	sp, #12
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	4603      	mov	r3, r0
 80098f0:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 80098f2:	2300      	movs	r3, #0
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	370c      	adds	r7, #12
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr

08009900 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b084      	sub	sp, #16
 8009904:	af00      	add	r7, sp, #0
 8009906:	4603      	mov	r3, r0
 8009908:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800990e:	79fb      	ldrb	r3, [r7, #7]
 8009910:	4619      	mov	r1, r3
 8009912:	4808      	ldr	r0, [pc, #32]	; (8009934 <USBH_status+0x34>)
 8009914:	f000 fe32 	bl	800a57c <USBH_MSC_UnitIsReady>
 8009918:	4603      	mov	r3, r0
 800991a:	2b00      	cmp	r3, #0
 800991c:	d002      	beq.n	8009924 <USBH_status+0x24>
  {
    res = RES_OK;
 800991e:	2300      	movs	r3, #0
 8009920:	73fb      	strb	r3, [r7, #15]
 8009922:	e001      	b.n	8009928 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8009924:	2301      	movs	r3, #1
 8009926:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009928:	7bfb      	ldrb	r3, [r7, #15]
}
 800992a:	4618      	mov	r0, r3
 800992c:	3710      	adds	r7, #16
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	20001e7c 	.word	0x20001e7c

08009938 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b094      	sub	sp, #80	; 0x50
 800993c:	af02      	add	r7, sp, #8
 800993e:	60b9      	str	r1, [r7, #8]
 8009940:	607a      	str	r2, [r7, #4]
 8009942:	603b      	str	r3, [r7, #0]
 8009944:	4603      	mov	r3, r0
 8009946:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009948:	2301      	movs	r3, #1
 800994a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800994e:	7bf9      	ldrb	r1, [r7, #15]
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	9300      	str	r3, [sp, #0]
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	687a      	ldr	r2, [r7, #4]
 8009958:	4813      	ldr	r0, [pc, #76]	; (80099a8 <USBH_read+0x70>)
 800995a:	f000 fe59 	bl	800a610 <USBH_MSC_Read>
 800995e:	4603      	mov	r3, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	d103      	bne.n	800996c <USBH_read+0x34>
  {
    res = RES_OK;
 8009964:	2300      	movs	r3, #0
 8009966:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800996a:	e017      	b.n	800999c <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800996c:	f107 0210 	add.w	r2, r7, #16
 8009970:	7bfb      	ldrb	r3, [r7, #15]
 8009972:	4619      	mov	r1, r3
 8009974:	480c      	ldr	r0, [pc, #48]	; (80099a8 <USBH_read+0x70>)
 8009976:	f000 fe27 	bl	800a5c8 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800997a:	7f7b      	ldrb	r3, [r7, #29]
 800997c:	2b3a      	cmp	r3, #58	; 0x3a
 800997e:	d005      	beq.n	800998c <USBH_read+0x54>
 8009980:	2b3a      	cmp	r3, #58	; 0x3a
 8009982:	dc07      	bgt.n	8009994 <USBH_read+0x5c>
 8009984:	2b04      	cmp	r3, #4
 8009986:	d001      	beq.n	800998c <USBH_read+0x54>
 8009988:	2b28      	cmp	r3, #40	; 0x28
 800998a:	d103      	bne.n	8009994 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800998c:	2303      	movs	r3, #3
 800998e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009992:	e003      	b.n	800999c <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8009994:	2301      	movs	r3, #1
 8009996:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800999a:	bf00      	nop
    }
  }

  return res;
 800999c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3748      	adds	r7, #72	; 0x48
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	20001e7c 	.word	0x20001e7c

080099ac <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b094      	sub	sp, #80	; 0x50
 80099b0:	af02      	add	r7, sp, #8
 80099b2:	60b9      	str	r1, [r7, #8]
 80099b4:	607a      	str	r2, [r7, #4]
 80099b6:	603b      	str	r3, [r7, #0]
 80099b8:	4603      	mov	r3, r0
 80099ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80099bc:	2301      	movs	r3, #1
 80099be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80099c2:	7bf9      	ldrb	r1, [r7, #15]
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	9300      	str	r3, [sp, #0]
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	4817      	ldr	r0, [pc, #92]	; (8009a2c <USBH_write+0x80>)
 80099ce:	f000 fe88 	bl	800a6e2 <USBH_MSC_Write>
 80099d2:	4603      	mov	r3, r0
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d103      	bne.n	80099e0 <USBH_write+0x34>
  {
    res = RES_OK;
 80099d8:	2300      	movs	r3, #0
 80099da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80099de:	e01f      	b.n	8009a20 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80099e0:	f107 0210 	add.w	r2, r7, #16
 80099e4:	7bfb      	ldrb	r3, [r7, #15]
 80099e6:	4619      	mov	r1, r3
 80099e8:	4810      	ldr	r0, [pc, #64]	; (8009a2c <USBH_write+0x80>)
 80099ea:	f000 fded 	bl	800a5c8 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80099ee:	7f7b      	ldrb	r3, [r7, #29]
 80099f0:	2b3a      	cmp	r3, #58	; 0x3a
 80099f2:	d00d      	beq.n	8009a10 <USBH_write+0x64>
 80099f4:	2b3a      	cmp	r3, #58	; 0x3a
 80099f6:	dc0f      	bgt.n	8009a18 <USBH_write+0x6c>
 80099f8:	2b28      	cmp	r3, #40	; 0x28
 80099fa:	d009      	beq.n	8009a10 <USBH_write+0x64>
 80099fc:	2b28      	cmp	r3, #40	; 0x28
 80099fe:	dc0b      	bgt.n	8009a18 <USBH_write+0x6c>
 8009a00:	2b04      	cmp	r3, #4
 8009a02:	d005      	beq.n	8009a10 <USBH_write+0x64>
 8009a04:	2b27      	cmp	r3, #39	; 0x27
 8009a06:	d107      	bne.n	8009a18 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8009a08:	2302      	movs	r3, #2
 8009a0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009a0e:	e007      	b.n	8009a20 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8009a10:	2303      	movs	r3, #3
 8009a12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009a16:	e003      	b.n	8009a20 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009a1e:	bf00      	nop
    }
  }

  return res;
 8009a20:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3748      	adds	r7, #72	; 0x48
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}
 8009a2c:	20001e7c 	.word	0x20001e7c

08009a30 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b090      	sub	sp, #64	; 0x40
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	4603      	mov	r3, r0
 8009a38:	603a      	str	r2, [r7, #0]
 8009a3a:	71fb      	strb	r3, [r7, #7]
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009a40:	2301      	movs	r3, #1
 8009a42:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8009a46:	79bb      	ldrb	r3, [r7, #6]
 8009a48:	2b03      	cmp	r3, #3
 8009a4a:	d852      	bhi.n	8009af2 <USBH_ioctl+0xc2>
 8009a4c:	a201      	add	r2, pc, #4	; (adr r2, 8009a54 <USBH_ioctl+0x24>)
 8009a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a52:	bf00      	nop
 8009a54:	08009a65 	.word	0x08009a65
 8009a58:	08009a6d 	.word	0x08009a6d
 8009a5c:	08009a97 	.word	0x08009a97
 8009a60:	08009ac3 	.word	0x08009ac3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8009a64:	2300      	movs	r3, #0
 8009a66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009a6a:	e045      	b.n	8009af8 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009a6c:	f107 0208 	add.w	r2, r7, #8
 8009a70:	79fb      	ldrb	r3, [r7, #7]
 8009a72:	4619      	mov	r1, r3
 8009a74:	4823      	ldr	r0, [pc, #140]	; (8009b04 <USBH_ioctl+0xd4>)
 8009a76:	f000 fda7 	bl	800a5c8 <USBH_MSC_GetLUNInfo>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d106      	bne.n	8009a8e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8009a80:	68fa      	ldr	r2, [r7, #12]
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009a86:	2300      	movs	r3, #0
 8009a88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009a8c:	e034      	b.n	8009af8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009a94:	e030      	b.n	8009af8 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009a96:	f107 0208 	add.w	r2, r7, #8
 8009a9a:	79fb      	ldrb	r3, [r7, #7]
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	4819      	ldr	r0, [pc, #100]	; (8009b04 <USBH_ioctl+0xd4>)
 8009aa0:	f000 fd92 	bl	800a5c8 <USBH_MSC_GetLUNInfo>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d107      	bne.n	8009aba <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8009aaa:	8a3b      	ldrh	r3, [r7, #16]
 8009aac:	461a      	mov	r2, r3
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009ab8:	e01e      	b.n	8009af8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8009aba:	2301      	movs	r3, #1
 8009abc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009ac0:	e01a      	b.n	8009af8 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009ac2:	f107 0208 	add.w	r2, r7, #8
 8009ac6:	79fb      	ldrb	r3, [r7, #7]
 8009ac8:	4619      	mov	r1, r3
 8009aca:	480e      	ldr	r0, [pc, #56]	; (8009b04 <USBH_ioctl+0xd4>)
 8009acc:	f000 fd7c 	bl	800a5c8 <USBH_MSC_GetLUNInfo>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d109      	bne.n	8009aea <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8009ad6:	8a3b      	ldrh	r3, [r7, #16]
 8009ad8:	0a5b      	lsrs	r3, r3, #9
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	461a      	mov	r2, r3
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009ae8:	e006      	b.n	8009af8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8009aea:	2301      	movs	r3, #1
 8009aec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009af0:	e002      	b.n	8009af8 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8009af2:	2304      	movs	r3, #4
 8009af4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8009af8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3740      	adds	r7, #64	; 0x40
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}
 8009b04:	20001e7c 	.word	0x20001e7c

08009b08 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009b08:	b590      	push	{r4, r7, lr}
 8009b0a:	b089      	sub	sp, #36	; 0x24
 8009b0c:	af04      	add	r7, sp, #16
 8009b0e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b16:	7919      	ldrb	r1, [r3, #4]
 8009b18:	2350      	movs	r3, #80	; 0x50
 8009b1a:	2206      	movs	r2, #6
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f001 fc6b 	bl	800b3f8 <USBH_FindInterface>
 8009b22:	4603      	mov	r3, r0
 8009b24:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8009b26:	7bfb      	ldrb	r3, [r7, #15]
 8009b28:	2bff      	cmp	r3, #255	; 0xff
 8009b2a:	d002      	beq.n	8009b32 <USBH_MSC_InterfaceInit+0x2a>
 8009b2c:	7bfb      	ldrb	r3, [r7, #15]
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	d901      	bls.n	8009b36 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009b32:	2302      	movs	r3, #2
 8009b34:	e106      	b.n	8009d44 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8009b36:	7bfb      	ldrb	r3, [r7, #15]
 8009b38:	4619      	mov	r1, r3
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f001 fc40 	bl	800b3c0 <USBH_SelectInterface>
 8009b40:	4603      	mov	r3, r0
 8009b42:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009b44:	7bbb      	ldrb	r3, [r7, #14]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d001      	beq.n	8009b4e <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8009b4a:	2302      	movs	r3, #2
 8009b4c:	e0fa      	b.n	8009d44 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009b54:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009b58:	f006 fe30 	bl	80107bc <malloc>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b66:	69db      	ldr	r3, [r3, #28]
 8009b68:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d101      	bne.n	8009b74 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8009b70:	2302      	movs	r3, #2
 8009b72:	e0e7      	b.n	8009d44 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8009b74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b78:	2100      	movs	r1, #0
 8009b7a:	68b8      	ldr	r0, [r7, #8]
 8009b7c:	f006 fe3c 	bl	80107f8 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009b80:	7bfb      	ldrb	r3, [r7, #15]
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	211a      	movs	r1, #26
 8009b86:	fb01 f303 	mul.w	r3, r1, r3
 8009b8a:	4413      	add	r3, r2
 8009b8c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009b90:	781b      	ldrb	r3, [r3, #0]
 8009b92:	b25b      	sxtb	r3, r3
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	da16      	bge.n	8009bc6 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8009b98:	7bfb      	ldrb	r3, [r7, #15]
 8009b9a:	687a      	ldr	r2, [r7, #4]
 8009b9c:	211a      	movs	r1, #26
 8009b9e:	fb01 f303 	mul.w	r3, r1, r3
 8009ba2:	4413      	add	r3, r2
 8009ba4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009ba8:	781a      	ldrb	r2, [r3, #0]
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009bae:	7bfb      	ldrb	r3, [r7, #15]
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	211a      	movs	r1, #26
 8009bb4:	fb01 f303 	mul.w	r3, r1, r3
 8009bb8:	4413      	add	r3, r2
 8009bba:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009bbe:	881a      	ldrh	r2, [r3, #0]
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	815a      	strh	r2, [r3, #10]
 8009bc4:	e015      	b.n	8009bf2 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8009bc6:	7bfb      	ldrb	r3, [r7, #15]
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	211a      	movs	r1, #26
 8009bcc:	fb01 f303 	mul.w	r3, r1, r3
 8009bd0:	4413      	add	r3, r2
 8009bd2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009bd6:	781a      	ldrb	r2, [r3, #0]
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009bdc:	7bfb      	ldrb	r3, [r7, #15]
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	211a      	movs	r1, #26
 8009be2:	fb01 f303 	mul.w	r3, r1, r3
 8009be6:	4413      	add	r3, r2
 8009be8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009bec:	881a      	ldrh	r2, [r3, #0]
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009bf2:	7bfb      	ldrb	r3, [r7, #15]
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	211a      	movs	r1, #26
 8009bf8:	fb01 f303 	mul.w	r3, r1, r3
 8009bfc:	4413      	add	r3, r2
 8009bfe:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	b25b      	sxtb	r3, r3
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	da16      	bge.n	8009c38 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8009c0a:	7bfb      	ldrb	r3, [r7, #15]
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	211a      	movs	r1, #26
 8009c10:	fb01 f303 	mul.w	r3, r1, r3
 8009c14:	4413      	add	r3, r2
 8009c16:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009c1a:	781a      	ldrb	r2, [r3, #0]
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009c20:	7bfb      	ldrb	r3, [r7, #15]
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	211a      	movs	r1, #26
 8009c26:	fb01 f303 	mul.w	r3, r1, r3
 8009c2a:	4413      	add	r3, r2
 8009c2c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009c30:	881a      	ldrh	r2, [r3, #0]
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	815a      	strh	r2, [r3, #10]
 8009c36:	e015      	b.n	8009c64 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8009c38:	7bfb      	ldrb	r3, [r7, #15]
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	211a      	movs	r1, #26
 8009c3e:	fb01 f303 	mul.w	r3, r1, r3
 8009c42:	4413      	add	r3, r2
 8009c44:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009c48:	781a      	ldrb	r2, [r3, #0]
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009c4e:	7bfb      	ldrb	r3, [r7, #15]
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	211a      	movs	r1, #26
 8009c54:	fb01 f303 	mul.w	r3, r1, r3
 8009c58:	4413      	add	r3, r2
 8009c5a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009c5e:	881a      	ldrh	r2, [r3, #0]
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	2200      	movs	r2, #0
 8009c68:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	2200      	movs	r2, #0
 8009c74:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	799b      	ldrb	r3, [r3, #6]
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f002 fed6 	bl	800ca2e <USBH_AllocPipe>
 8009c82:	4603      	mov	r3, r0
 8009c84:	461a      	mov	r2, r3
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	79db      	ldrb	r3, [r3, #7]
 8009c8e:	4619      	mov	r1, r3
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f002 fecc 	bl	800ca2e <USBH_AllocPipe>
 8009c96:	4603      	mov	r3, r0
 8009c98:	461a      	mov	r2, r3
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 fdc4 	bl	800a82c <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	799b      	ldrb	r3, [r3, #6]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d01e      	beq.n	8009cea <USBH_MSC_InterfaceInit+0x1e2>
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	891b      	ldrh	r3, [r3, #8]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d01a      	beq.n	8009cea <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	7959      	ldrb	r1, [r3, #5]
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	7998      	ldrb	r0, [r3, #6]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009cc8:	68ba      	ldr	r2, [r7, #8]
 8009cca:	8912      	ldrh	r2, [r2, #8]
 8009ccc:	9202      	str	r2, [sp, #8]
 8009cce:	2202      	movs	r2, #2
 8009cd0:	9201      	str	r2, [sp, #4]
 8009cd2:	9300      	str	r3, [sp, #0]
 8009cd4:	4623      	mov	r3, r4
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f002 fe79 	bl	800c9d0 <USBH_OpenPipe>
 8009cde:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	79db      	ldrb	r3, [r3, #7]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d02c      	beq.n	8009d42 <USBH_MSC_InterfaceInit+0x23a>
 8009ce8:	e001      	b.n	8009cee <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 8009cea:	2303      	movs	r3, #3
 8009cec:	e02a      	b.n	8009d44 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	895b      	ldrh	r3, [r3, #10]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d025      	beq.n	8009d42 <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	7919      	ldrb	r1, [r3, #4]
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	79d8      	ldrb	r0, [r3, #7]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009d0a:	68ba      	ldr	r2, [r7, #8]
 8009d0c:	8952      	ldrh	r2, [r2, #10]
 8009d0e:	9202      	str	r2, [sp, #8]
 8009d10:	2202      	movs	r2, #2
 8009d12:	9201      	str	r2, [sp, #4]
 8009d14:	9300      	str	r3, [sp, #0]
 8009d16:	4623      	mov	r3, r4
 8009d18:	4602      	mov	r2, r0
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f002 fe58 	bl	800c9d0 <USBH_OpenPipe>
 8009d20:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	791b      	ldrb	r3, [r3, #4]
 8009d26:	2200      	movs	r2, #0
 8009d28:	4619      	mov	r1, r3
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f006 fc68 	bl	8010600 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	795b      	ldrb	r3, [r3, #5]
 8009d34:	2200      	movs	r2, #0
 8009d36:	4619      	mov	r1, r3
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f006 fc61 	bl	8010600 <USBH_LL_SetToggle>

  return USBH_OK;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	e000      	b.n	8009d44 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 8009d42:	2303      	movs	r3, #3
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3714      	adds	r7, #20
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd90      	pop	{r4, r7, pc}

08009d4c <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d5a:	69db      	ldr	r3, [r3, #28]
 8009d5c:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	795b      	ldrb	r3, [r3, #5]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d00e      	beq.n	8009d84 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	795b      	ldrb	r3, [r3, #5]
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f002 fe4e 	bl	800ca0e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	795b      	ldrb	r3, [r3, #5]
 8009d76:	4619      	mov	r1, r3
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f002 fe79 	bl	800ca70 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2200      	movs	r2, #0
 8009d82:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	791b      	ldrb	r3, [r3, #4]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d00e      	beq.n	8009daa <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	791b      	ldrb	r3, [r3, #4]
 8009d90:	4619      	mov	r1, r3
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f002 fe3b 	bl	800ca0e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	791b      	ldrb	r3, [r3, #4]
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f002 fe66 	bl	800ca70 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2200      	movs	r2, #0
 8009da8:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009db0:	69db      	ldr	r3, [r3, #28]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d00b      	beq.n	8009dce <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009dbc:	69db      	ldr	r3, [r3, #28]
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f006 fd04 	bl	80107cc <free>
    phost->pActiveClass->pData = 0U;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009dca:	2200      	movs	r2, #0
 8009dcc:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009dce:	2300      	movs	r3, #0
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3710      	adds	r7, #16
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009de6:	69db      	ldr	r3, [r3, #28]
 8009de8:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009dea:	2301      	movs	r3, #1
 8009dec:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	7b9b      	ldrb	r3, [r3, #14]
 8009df2:	2b03      	cmp	r3, #3
 8009df4:	d041      	beq.n	8009e7a <USBH_MSC_ClassRequest+0xa2>
 8009df6:	2b03      	cmp	r3, #3
 8009df8:	dc4b      	bgt.n	8009e92 <USBH_MSC_ClassRequest+0xba>
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d001      	beq.n	8009e02 <USBH_MSC_ClassRequest+0x2a>
 8009dfe:	2b02      	cmp	r3, #2
 8009e00:	d147      	bne.n	8009e92 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	4619      	mov	r1, r3
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f000 fcf1 	bl	800a7ee <USBH_MSC_BOT_REQ_GetMaxLUN>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8009e10:	7bfb      	ldrb	r3, [r7, #15]
 8009e12:	2b03      	cmp	r3, #3
 8009e14:	d104      	bne.n	8009e20 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8009e20:	7bfb      	ldrb	r3, [r7, #15]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d137      	bne.n	8009e96 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	2b02      	cmp	r3, #2
 8009e2c:	d804      	bhi.n	8009e38 <USBH_MSC_ClassRequest+0x60>
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	3301      	adds	r3, #1
 8009e34:	b2da      	uxtb	r2, r3
 8009e36:	e000      	b.n	8009e3a <USBH_MSC_ClassRequest+0x62>
 8009e38:	2202      	movs	r2, #2
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009e3e:	2300      	movs	r3, #0
 8009e40:	73bb      	strb	r3, [r7, #14]
 8009e42:	e014      	b.n	8009e6e <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8009e44:	7bbb      	ldrb	r3, [r7, #14]
 8009e46:	68ba      	ldr	r2, [r7, #8]
 8009e48:	2134      	movs	r1, #52	; 0x34
 8009e4a:	fb01 f303 	mul.w	r3, r1, r3
 8009e4e:	4413      	add	r3, r2
 8009e50:	3392      	adds	r3, #146	; 0x92
 8009e52:	2202      	movs	r2, #2
 8009e54:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8009e56:	7bbb      	ldrb	r3, [r7, #14]
 8009e58:	68ba      	ldr	r2, [r7, #8]
 8009e5a:	2134      	movs	r1, #52	; 0x34
 8009e5c:	fb01 f303 	mul.w	r3, r1, r3
 8009e60:	4413      	add	r3, r2
 8009e62:	33c1      	adds	r3, #193	; 0xc1
 8009e64:	2200      	movs	r2, #0
 8009e66:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009e68:	7bbb      	ldrb	r3, [r7, #14]
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	73bb      	strb	r3, [r7, #14]
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	7bba      	ldrb	r2, [r7, #14]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d3e5      	bcc.n	8009e44 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8009e78:	e00d      	b.n	8009e96 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8009e7a:	2100      	movs	r1, #0
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f002 f888 	bl	800bf92 <USBH_ClrFeature>
 8009e82:	4603      	mov	r3, r0
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d108      	bne.n	8009e9a <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	7bda      	ldrb	r2, [r3, #15]
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	739a      	strb	r2, [r3, #14]
      }
      break;
 8009e90:	e003      	b.n	8009e9a <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8009e92:	bf00      	nop
 8009e94:	e002      	b.n	8009e9c <USBH_MSC_ClassRequest+0xc4>
      break;
 8009e96:	bf00      	nop
 8009e98:	e000      	b.n	8009e9c <USBH_MSC_ClassRequest+0xc4>
      break;
 8009e9a:	bf00      	nop
  }

  return status;
 8009e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3710      	adds	r7, #16
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
	...

08009ea8 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b086      	sub	sp, #24
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009eb6:	69db      	ldr	r3, [r3, #28]
 8009eb8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8009eba:	2301      	movs	r3, #1
 8009ebc:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	7b1b      	ldrb	r3, [r3, #12]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d003      	beq.n	8009ed6 <USBH_MSC_Process+0x2e>
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	f000 8271 	beq.w	800a3b6 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8009ed4:	e272      	b.n	800a3bc <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	781b      	ldrb	r3, [r3, #0]
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	f080 824f 	bcs.w	800a386 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009eee:	4619      	mov	r1, r3
 8009ef0:	693a      	ldr	r2, [r7, #16]
 8009ef2:	2334      	movs	r3, #52	; 0x34
 8009ef4:	fb01 f303 	mul.w	r3, r1, r3
 8009ef8:	4413      	add	r3, r2
 8009efa:	3391      	adds	r3, #145	; 0x91
 8009efc:	2201      	movs	r2, #1
 8009efe:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f06:	4619      	mov	r1, r3
 8009f08:	693a      	ldr	r2, [r7, #16]
 8009f0a:	2334      	movs	r3, #52	; 0x34
 8009f0c:	fb01 f303 	mul.w	r3, r1, r3
 8009f10:	4413      	add	r3, r2
 8009f12:	3390      	adds	r3, #144	; 0x90
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	2b08      	cmp	r3, #8
 8009f18:	f200 8243 	bhi.w	800a3a2 <USBH_MSC_Process+0x4fa>
 8009f1c:	a201      	add	r2, pc, #4	; (adr r2, 8009f24 <USBH_MSC_Process+0x7c>)
 8009f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f22:	bf00      	nop
 8009f24:	08009f49 	.word	0x08009f49
 8009f28:	0800a3a3 	.word	0x0800a3a3
 8009f2c:	0800a011 	.word	0x0800a011
 8009f30:	0800a195 	.word	0x0800a195
 8009f34:	08009f6f 	.word	0x08009f6f
 8009f38:	0800a261 	.word	0x0800a261
 8009f3c:	0800a3a3 	.word	0x0800a3a3
 8009f40:	0800a3a3 	.word	0x0800a3a3
 8009f44:	0800a375 	.word	0x0800a375
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f4e:	4619      	mov	r1, r3
 8009f50:	693a      	ldr	r2, [r7, #16]
 8009f52:	2334      	movs	r3, #52	; 0x34
 8009f54:	fb01 f303 	mul.w	r3, r1, r3
 8009f58:	4413      	add	r3, r2
 8009f5a:	3390      	adds	r3, #144	; 0x90
 8009f5c:	2204      	movs	r2, #4
 8009f5e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8009f6c:	e222      	b.n	800a3b4 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f74:	b2d9      	uxtb	r1, r3
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	2334      	movs	r3, #52	; 0x34
 8009f80:	fb02 f303 	mul.w	r3, r2, r3
 8009f84:	3398      	adds	r3, #152	; 0x98
 8009f86:	693a      	ldr	r2, [r7, #16]
 8009f88:	4413      	add	r3, r2
 8009f8a:	3307      	adds	r3, #7
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 ff6a 	bl	800ae68 <USBH_MSC_SCSI_Inquiry>
 8009f94:	4603      	mov	r3, r0
 8009f96:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009f98:	7bfb      	ldrb	r3, [r7, #15]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d10b      	bne.n	8009fb6 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	693a      	ldr	r2, [r7, #16]
 8009fa8:	2334      	movs	r3, #52	; 0x34
 8009faa:	fb01 f303 	mul.w	r3, r1, r3
 8009fae:	4413      	add	r3, r2
 8009fb0:	3390      	adds	r3, #144	; 0x90
 8009fb2:	2202      	movs	r2, #2
 8009fb4:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8009fb6:	7bfb      	ldrb	r3, [r7, #15]
 8009fb8:	2b02      	cmp	r3, #2
 8009fba:	d10c      	bne.n	8009fd6 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	693a      	ldr	r2, [r7, #16]
 8009fc6:	2334      	movs	r3, #52	; 0x34
 8009fc8:	fb01 f303 	mul.w	r3, r1, r3
 8009fcc:	4413      	add	r3, r2
 8009fce:	3390      	adds	r3, #144	; 0x90
 8009fd0:	2205      	movs	r2, #5
 8009fd2:	701a      	strb	r2, [r3, #0]
            break;
 8009fd4:	e1e7      	b.n	800a3a6 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009fd6:	7bfb      	ldrb	r3, [r7, #15]
 8009fd8:	2b04      	cmp	r3, #4
 8009fda:	f040 81e4 	bne.w	800a3a6 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	693a      	ldr	r2, [r7, #16]
 8009fe8:	2334      	movs	r3, #52	; 0x34
 8009fea:	fb01 f303 	mul.w	r3, r1, r3
 8009fee:	4413      	add	r3, r2
 8009ff0:	3390      	adds	r3, #144	; 0x90
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	693a      	ldr	r2, [r7, #16]
 800a000:	2334      	movs	r3, #52	; 0x34
 800a002:	fb01 f303 	mul.w	r3, r1, r3
 800a006:	4413      	add	r3, r2
 800a008:	3391      	adds	r3, #145	; 0x91
 800a00a:	2202      	movs	r2, #2
 800a00c:	701a      	strb	r2, [r3, #0]
            break;
 800a00e:	e1ca      	b.n	800a3a6 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a016:	b2db      	uxtb	r3, r3
 800a018:	4619      	mov	r1, r3
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 fe66 	bl	800acec <USBH_MSC_SCSI_TestUnitReady>
 800a020:	4603      	mov	r3, r0
 800a022:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800a024:	7bbb      	ldrb	r3, [r7, #14]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d149      	bne.n	800a0be <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a030:	4619      	mov	r1, r3
 800a032:	693a      	ldr	r2, [r7, #16]
 800a034:	2334      	movs	r3, #52	; 0x34
 800a036:	fb01 f303 	mul.w	r3, r1, r3
 800a03a:	4413      	add	r3, r2
 800a03c:	3392      	adds	r3, #146	; 0x92
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d00c      	beq.n	800a05e <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a04a:	4619      	mov	r1, r3
 800a04c:	693a      	ldr	r2, [r7, #16]
 800a04e:	2334      	movs	r3, #52	; 0x34
 800a050:	fb01 f303 	mul.w	r3, r1, r3
 800a054:	4413      	add	r3, r2
 800a056:	33c1      	adds	r3, #193	; 0xc1
 800a058:	2201      	movs	r2, #1
 800a05a:	701a      	strb	r2, [r3, #0]
 800a05c:	e00b      	b.n	800a076 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a064:	4619      	mov	r1, r3
 800a066:	693a      	ldr	r2, [r7, #16]
 800a068:	2334      	movs	r3, #52	; 0x34
 800a06a:	fb01 f303 	mul.w	r3, r1, r3
 800a06e:	4413      	add	r3, r2
 800a070:	33c1      	adds	r3, #193	; 0xc1
 800a072:	2200      	movs	r2, #0
 800a074:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a07c:	4619      	mov	r1, r3
 800a07e:	693a      	ldr	r2, [r7, #16]
 800a080:	2334      	movs	r3, #52	; 0x34
 800a082:	fb01 f303 	mul.w	r3, r1, r3
 800a086:	4413      	add	r3, r2
 800a088:	3390      	adds	r3, #144	; 0x90
 800a08a:	2203      	movs	r2, #3
 800a08c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a094:	4619      	mov	r1, r3
 800a096:	693a      	ldr	r2, [r7, #16]
 800a098:	2334      	movs	r3, #52	; 0x34
 800a09a:	fb01 f303 	mul.w	r3, r1, r3
 800a09e:	4413      	add	r3, r2
 800a0a0:	3391      	adds	r3, #145	; 0x91
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	693a      	ldr	r2, [r7, #16]
 800a0b0:	2334      	movs	r3, #52	; 0x34
 800a0b2:	fb01 f303 	mul.w	r3, r1, r3
 800a0b6:	4413      	add	r3, r2
 800a0b8:	3392      	adds	r3, #146	; 0x92
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800a0be:	7bbb      	ldrb	r3, [r7, #14]
 800a0c0:	2b02      	cmp	r3, #2
 800a0c2:	d14a      	bne.n	800a15a <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	693a      	ldr	r2, [r7, #16]
 800a0ce:	2334      	movs	r3, #52	; 0x34
 800a0d0:	fb01 f303 	mul.w	r3, r1, r3
 800a0d4:	4413      	add	r3, r2
 800a0d6:	3392      	adds	r3, #146	; 0x92
 800a0d8:	781b      	ldrb	r3, [r3, #0]
 800a0da:	2b02      	cmp	r3, #2
 800a0dc:	d00c      	beq.n	800a0f8 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	693a      	ldr	r2, [r7, #16]
 800a0e8:	2334      	movs	r3, #52	; 0x34
 800a0ea:	fb01 f303 	mul.w	r3, r1, r3
 800a0ee:	4413      	add	r3, r2
 800a0f0:	33c1      	adds	r3, #193	; 0xc1
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	701a      	strb	r2, [r3, #0]
 800a0f6:	e00b      	b.n	800a110 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a0fe:	4619      	mov	r1, r3
 800a100:	693a      	ldr	r2, [r7, #16]
 800a102:	2334      	movs	r3, #52	; 0x34
 800a104:	fb01 f303 	mul.w	r3, r1, r3
 800a108:	4413      	add	r3, r2
 800a10a:	33c1      	adds	r3, #193	; 0xc1
 800a10c:	2200      	movs	r2, #0
 800a10e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a116:	4619      	mov	r1, r3
 800a118:	693a      	ldr	r2, [r7, #16]
 800a11a:	2334      	movs	r3, #52	; 0x34
 800a11c:	fb01 f303 	mul.w	r3, r1, r3
 800a120:	4413      	add	r3, r2
 800a122:	3390      	adds	r3, #144	; 0x90
 800a124:	2205      	movs	r2, #5
 800a126:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a12e:	4619      	mov	r1, r3
 800a130:	693a      	ldr	r2, [r7, #16]
 800a132:	2334      	movs	r3, #52	; 0x34
 800a134:	fb01 f303 	mul.w	r3, r1, r3
 800a138:	4413      	add	r3, r2
 800a13a:	3391      	adds	r3, #145	; 0x91
 800a13c:	2201      	movs	r2, #1
 800a13e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a146:	4619      	mov	r1, r3
 800a148:	693a      	ldr	r2, [r7, #16]
 800a14a:	2334      	movs	r3, #52	; 0x34
 800a14c:	fb01 f303 	mul.w	r3, r1, r3
 800a150:	4413      	add	r3, r2
 800a152:	3392      	adds	r3, #146	; 0x92
 800a154:	2202      	movs	r2, #2
 800a156:	701a      	strb	r2, [r3, #0]
            break;
 800a158:	e127      	b.n	800a3aa <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800a15a:	7bbb      	ldrb	r3, [r7, #14]
 800a15c:	2b04      	cmp	r3, #4
 800a15e:	f040 8124 	bne.w	800a3aa <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a168:	4619      	mov	r1, r3
 800a16a:	693a      	ldr	r2, [r7, #16]
 800a16c:	2334      	movs	r3, #52	; 0x34
 800a16e:	fb01 f303 	mul.w	r3, r1, r3
 800a172:	4413      	add	r3, r2
 800a174:	3390      	adds	r3, #144	; 0x90
 800a176:	2201      	movs	r2, #1
 800a178:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a180:	4619      	mov	r1, r3
 800a182:	693a      	ldr	r2, [r7, #16]
 800a184:	2334      	movs	r3, #52	; 0x34
 800a186:	fb01 f303 	mul.w	r3, r1, r3
 800a18a:	4413      	add	r3, r2
 800a18c:	3391      	adds	r3, #145	; 0x91
 800a18e:	2202      	movs	r2, #2
 800a190:	701a      	strb	r2, [r3, #0]
            break;
 800a192:	e10a      	b.n	800a3aa <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a19a:	b2d9      	uxtb	r1, r3
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	2334      	movs	r3, #52	; 0x34
 800a1a6:	fb02 f303 	mul.w	r3, r2, r3
 800a1aa:	3390      	adds	r3, #144	; 0x90
 800a1ac:	693a      	ldr	r2, [r7, #16]
 800a1ae:	4413      	add	r3, r2
 800a1b0:	3304      	adds	r3, #4
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f000 fddc 	bl	800ad72 <USBH_MSC_SCSI_ReadCapacity>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a1be:	7bfb      	ldrb	r3, [r7, #15]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d120      	bne.n	800a206 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a1ca:	4619      	mov	r1, r3
 800a1cc:	693a      	ldr	r2, [r7, #16]
 800a1ce:	2334      	movs	r3, #52	; 0x34
 800a1d0:	fb01 f303 	mul.w	r3, r1, r3
 800a1d4:	4413      	add	r3, r2
 800a1d6:	3390      	adds	r3, #144	; 0x90
 800a1d8:	2201      	movs	r2, #1
 800a1da:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a1e2:	4619      	mov	r1, r3
 800a1e4:	693a      	ldr	r2, [r7, #16]
 800a1e6:	2334      	movs	r3, #52	; 0x34
 800a1e8:	fb01 f303 	mul.w	r3, r1, r3
 800a1ec:	4413      	add	r3, r2
 800a1ee:	3391      	adds	r3, #145	; 0x91
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	b29a      	uxth	r2, r3
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800a204:	e0d3      	b.n	800a3ae <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800a206:	7bfb      	ldrb	r3, [r7, #15]
 800a208:	2b02      	cmp	r3, #2
 800a20a:	d10c      	bne.n	800a226 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a212:	4619      	mov	r1, r3
 800a214:	693a      	ldr	r2, [r7, #16]
 800a216:	2334      	movs	r3, #52	; 0x34
 800a218:	fb01 f303 	mul.w	r3, r1, r3
 800a21c:	4413      	add	r3, r2
 800a21e:	3390      	adds	r3, #144	; 0x90
 800a220:	2205      	movs	r2, #5
 800a222:	701a      	strb	r2, [r3, #0]
            break;
 800a224:	e0c3      	b.n	800a3ae <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a226:	7bfb      	ldrb	r3, [r7, #15]
 800a228:	2b04      	cmp	r3, #4
 800a22a:	f040 80c0 	bne.w	800a3ae <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a234:	4619      	mov	r1, r3
 800a236:	693a      	ldr	r2, [r7, #16]
 800a238:	2334      	movs	r3, #52	; 0x34
 800a23a:	fb01 f303 	mul.w	r3, r1, r3
 800a23e:	4413      	add	r3, r2
 800a240:	3390      	adds	r3, #144	; 0x90
 800a242:	2201      	movs	r2, #1
 800a244:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a24c:	4619      	mov	r1, r3
 800a24e:	693a      	ldr	r2, [r7, #16]
 800a250:	2334      	movs	r3, #52	; 0x34
 800a252:	fb01 f303 	mul.w	r3, r1, r3
 800a256:	4413      	add	r3, r2
 800a258:	3391      	adds	r3, #145	; 0x91
 800a25a:	2202      	movs	r2, #2
 800a25c:	701a      	strb	r2, [r3, #0]
            break;
 800a25e:	e0a6      	b.n	800a3ae <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a266:	b2d9      	uxtb	r1, r3
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a26e:	461a      	mov	r2, r3
 800a270:	2334      	movs	r3, #52	; 0x34
 800a272:	fb02 f303 	mul.w	r3, r2, r3
 800a276:	3398      	adds	r3, #152	; 0x98
 800a278:	693a      	ldr	r2, [r7, #16]
 800a27a:	4413      	add	r3, r2
 800a27c:	3304      	adds	r3, #4
 800a27e:	461a      	mov	r2, r3
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f000 fe96 	bl	800afb2 <USBH_MSC_SCSI_RequestSense>
 800a286:	4603      	mov	r3, r0
 800a288:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a28a:	7bfb      	ldrb	r3, [r7, #15]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d145      	bne.n	800a31c <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a296:	4619      	mov	r1, r3
 800a298:	693a      	ldr	r2, [r7, #16]
 800a29a:	2334      	movs	r3, #52	; 0x34
 800a29c:	fb01 f303 	mul.w	r3, r1, r3
 800a2a0:	4413      	add	r3, r2
 800a2a2:	339c      	adds	r3, #156	; 0x9c
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	2b06      	cmp	r3, #6
 800a2a8:	d00c      	beq.n	800a2c4 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a2b0:	4619      	mov	r1, r3
 800a2b2:	693a      	ldr	r2, [r7, #16]
 800a2b4:	2334      	movs	r3, #52	; 0x34
 800a2b6:	fb01 f303 	mul.w	r3, r1, r3
 800a2ba:	4413      	add	r3, r2
 800a2bc:	339c      	adds	r3, #156	; 0x9c
 800a2be:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800a2c0:	2b02      	cmp	r3, #2
 800a2c2:	d117      	bne.n	800a2f4 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800a2d0:	1ad3      	subs	r3, r2, r3
 800a2d2:	f242 720f 	movw	r2, #9999	; 0x270f
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d80c      	bhi.n	800a2f4 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a2e0:	4619      	mov	r1, r3
 800a2e2:	693a      	ldr	r2, [r7, #16]
 800a2e4:	2334      	movs	r3, #52	; 0x34
 800a2e6:	fb01 f303 	mul.w	r3, r1, r3
 800a2ea:	4413      	add	r3, r2
 800a2ec:	3390      	adds	r3, #144	; 0x90
 800a2ee:	2202      	movs	r2, #2
 800a2f0:	701a      	strb	r2, [r3, #0]
                  break;
 800a2f2:	e05f      	b.n	800a3b4 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	693a      	ldr	r2, [r7, #16]
 800a2fe:	2334      	movs	r3, #52	; 0x34
 800a300:	fb01 f303 	mul.w	r3, r1, r3
 800a304:	4413      	add	r3, r2
 800a306:	3390      	adds	r3, #144	; 0x90
 800a308:	2201      	movs	r2, #1
 800a30a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a312:	3301      	adds	r3, #1
 800a314:	b29a      	uxth	r2, r3
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800a31c:	7bfb      	ldrb	r3, [r7, #15]
 800a31e:	2b02      	cmp	r3, #2
 800a320:	d10c      	bne.n	800a33c <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a328:	4619      	mov	r1, r3
 800a32a:	693a      	ldr	r2, [r7, #16]
 800a32c:	2334      	movs	r3, #52	; 0x34
 800a32e:	fb01 f303 	mul.w	r3, r1, r3
 800a332:	4413      	add	r3, r2
 800a334:	3390      	adds	r3, #144	; 0x90
 800a336:	2208      	movs	r2, #8
 800a338:	701a      	strb	r2, [r3, #0]
            break;
 800a33a:	e03a      	b.n	800a3b2 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a33c:	7bfb      	ldrb	r3, [r7, #15]
 800a33e:	2b04      	cmp	r3, #4
 800a340:	d137      	bne.n	800a3b2 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a348:	4619      	mov	r1, r3
 800a34a:	693a      	ldr	r2, [r7, #16]
 800a34c:	2334      	movs	r3, #52	; 0x34
 800a34e:	fb01 f303 	mul.w	r3, r1, r3
 800a352:	4413      	add	r3, r2
 800a354:	3390      	adds	r3, #144	; 0x90
 800a356:	2201      	movs	r2, #1
 800a358:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a360:	4619      	mov	r1, r3
 800a362:	693a      	ldr	r2, [r7, #16]
 800a364:	2334      	movs	r3, #52	; 0x34
 800a366:	fb01 f303 	mul.w	r3, r1, r3
 800a36a:	4413      	add	r3, r2
 800a36c:	3391      	adds	r3, #145	; 0x91
 800a36e:	2202      	movs	r2, #2
 800a370:	701a      	strb	r2, [r3, #0]
            break;
 800a372:	e01e      	b.n	800a3b2 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a37a:	3301      	adds	r3, #1
 800a37c:	b29a      	uxth	r2, r3
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800a384:	e016      	b.n	800a3b4 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	2200      	movs	r2, #0
 800a38a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	2201      	movs	r2, #1
 800a392:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a39a:	2102      	movs	r1, #2
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	4798      	blx	r3
      break;
 800a3a0:	e00c      	b.n	800a3bc <USBH_MSC_Process+0x514>
            break;
 800a3a2:	bf00      	nop
 800a3a4:	e00a      	b.n	800a3bc <USBH_MSC_Process+0x514>
            break;
 800a3a6:	bf00      	nop
 800a3a8:	e008      	b.n	800a3bc <USBH_MSC_Process+0x514>
            break;
 800a3aa:	bf00      	nop
 800a3ac:	e006      	b.n	800a3bc <USBH_MSC_Process+0x514>
            break;
 800a3ae:	bf00      	nop
 800a3b0:	e004      	b.n	800a3bc <USBH_MSC_Process+0x514>
            break;
 800a3b2:	bf00      	nop
      break;
 800a3b4:	e002      	b.n	800a3bc <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	75fb      	strb	r3, [r7, #23]
      break;
 800a3ba:	bf00      	nop
  }
  return error;
 800a3bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3718      	adds	r7, #24
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop

0800a3c8 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b083      	sub	sp, #12
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a3d0:	2300      	movs	r3, #0
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	370c      	adds	r7, #12
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr

0800a3de <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a3de:	b580      	push	{r7, lr}
 800a3e0:	b088      	sub	sp, #32
 800a3e2:	af02      	add	r7, sp, #8
 800a3e4:	6078      	str	r0, [r7, #4]
 800a3e6:	460b      	mov	r3, r1
 800a3e8:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3f0:	69db      	ldr	r3, [r3, #28]
 800a3f2:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800a3fc:	78fb      	ldrb	r3, [r7, #3]
 800a3fe:	693a      	ldr	r2, [r7, #16]
 800a400:	2134      	movs	r1, #52	; 0x34
 800a402:	fb01 f303 	mul.w	r3, r1, r3
 800a406:	4413      	add	r3, r2
 800a408:	3390      	adds	r3, #144	; 0x90
 800a40a:	781b      	ldrb	r3, [r3, #0]
 800a40c:	2b07      	cmp	r3, #7
 800a40e:	d03c      	beq.n	800a48a <USBH_MSC_RdWrProcess+0xac>
 800a410:	2b07      	cmp	r3, #7
 800a412:	f300 80a7 	bgt.w	800a564 <USBH_MSC_RdWrProcess+0x186>
 800a416:	2b05      	cmp	r3, #5
 800a418:	d06c      	beq.n	800a4f4 <USBH_MSC_RdWrProcess+0x116>
 800a41a:	2b06      	cmp	r3, #6
 800a41c:	f040 80a2 	bne.w	800a564 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800a420:	78f9      	ldrb	r1, [r7, #3]
 800a422:	2300      	movs	r3, #0
 800a424:	9300      	str	r3, [sp, #0]
 800a426:	2300      	movs	r3, #0
 800a428:	2200      	movs	r2, #0
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f000 fea5 	bl	800b17a <USBH_MSC_SCSI_Read>
 800a430:	4603      	mov	r3, r0
 800a432:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a434:	7bfb      	ldrb	r3, [r7, #15]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d10b      	bne.n	800a452 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a43a:	78fb      	ldrb	r3, [r7, #3]
 800a43c:	693a      	ldr	r2, [r7, #16]
 800a43e:	2134      	movs	r1, #52	; 0x34
 800a440:	fb01 f303 	mul.w	r3, r1, r3
 800a444:	4413      	add	r3, r2
 800a446:	3390      	adds	r3, #144	; 0x90
 800a448:	2201      	movs	r2, #1
 800a44a:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a44c:	2300      	movs	r3, #0
 800a44e:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a450:	e08a      	b.n	800a568 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800a452:	7bfb      	ldrb	r3, [r7, #15]
 800a454:	2b02      	cmp	r3, #2
 800a456:	d109      	bne.n	800a46c <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a458:	78fb      	ldrb	r3, [r7, #3]
 800a45a:	693a      	ldr	r2, [r7, #16]
 800a45c:	2134      	movs	r1, #52	; 0x34
 800a45e:	fb01 f303 	mul.w	r3, r1, r3
 800a462:	4413      	add	r3, r2
 800a464:	3390      	adds	r3, #144	; 0x90
 800a466:	2205      	movs	r2, #5
 800a468:	701a      	strb	r2, [r3, #0]
      break;
 800a46a:	e07d      	b.n	800a568 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a46c:	7bfb      	ldrb	r3, [r7, #15]
 800a46e:	2b04      	cmp	r3, #4
 800a470:	d17a      	bne.n	800a568 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a472:	78fb      	ldrb	r3, [r7, #3]
 800a474:	693a      	ldr	r2, [r7, #16]
 800a476:	2134      	movs	r1, #52	; 0x34
 800a478:	fb01 f303 	mul.w	r3, r1, r3
 800a47c:	4413      	add	r3, r2
 800a47e:	3390      	adds	r3, #144	; 0x90
 800a480:	2208      	movs	r2, #8
 800a482:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a484:	2302      	movs	r3, #2
 800a486:	75fb      	strb	r3, [r7, #23]
      break;
 800a488:	e06e      	b.n	800a568 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800a48a:	78f9      	ldrb	r1, [r7, #3]
 800a48c:	2300      	movs	r3, #0
 800a48e:	9300      	str	r3, [sp, #0]
 800a490:	2300      	movs	r3, #0
 800a492:	2200      	movs	r2, #0
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f000 fe05 	bl	800b0a4 <USBH_MSC_SCSI_Write>
 800a49a:	4603      	mov	r3, r0
 800a49c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a49e:	7bfb      	ldrb	r3, [r7, #15]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d10b      	bne.n	800a4bc <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a4a4:	78fb      	ldrb	r3, [r7, #3]
 800a4a6:	693a      	ldr	r2, [r7, #16]
 800a4a8:	2134      	movs	r1, #52	; 0x34
 800a4aa:	fb01 f303 	mul.w	r3, r1, r3
 800a4ae:	4413      	add	r3, r2
 800a4b0:	3390      	adds	r3, #144	; 0x90
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a4ba:	e057      	b.n	800a56c <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800a4bc:	7bfb      	ldrb	r3, [r7, #15]
 800a4be:	2b02      	cmp	r3, #2
 800a4c0:	d109      	bne.n	800a4d6 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a4c2:	78fb      	ldrb	r3, [r7, #3]
 800a4c4:	693a      	ldr	r2, [r7, #16]
 800a4c6:	2134      	movs	r1, #52	; 0x34
 800a4c8:	fb01 f303 	mul.w	r3, r1, r3
 800a4cc:	4413      	add	r3, r2
 800a4ce:	3390      	adds	r3, #144	; 0x90
 800a4d0:	2205      	movs	r2, #5
 800a4d2:	701a      	strb	r2, [r3, #0]
      break;
 800a4d4:	e04a      	b.n	800a56c <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a4d6:	7bfb      	ldrb	r3, [r7, #15]
 800a4d8:	2b04      	cmp	r3, #4
 800a4da:	d147      	bne.n	800a56c <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a4dc:	78fb      	ldrb	r3, [r7, #3]
 800a4de:	693a      	ldr	r2, [r7, #16]
 800a4e0:	2134      	movs	r1, #52	; 0x34
 800a4e2:	fb01 f303 	mul.w	r3, r1, r3
 800a4e6:	4413      	add	r3, r2
 800a4e8:	3390      	adds	r3, #144	; 0x90
 800a4ea:	2208      	movs	r2, #8
 800a4ec:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a4ee:	2302      	movs	r3, #2
 800a4f0:	75fb      	strb	r3, [r7, #23]
      break;
 800a4f2:	e03b      	b.n	800a56c <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800a4f4:	78fb      	ldrb	r3, [r7, #3]
 800a4f6:	2234      	movs	r2, #52	; 0x34
 800a4f8:	fb02 f303 	mul.w	r3, r2, r3
 800a4fc:	3398      	adds	r3, #152	; 0x98
 800a4fe:	693a      	ldr	r2, [r7, #16]
 800a500:	4413      	add	r3, r2
 800a502:	1d1a      	adds	r2, r3, #4
 800a504:	78fb      	ldrb	r3, [r7, #3]
 800a506:	4619      	mov	r1, r3
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f000 fd52 	bl	800afb2 <USBH_MSC_SCSI_RequestSense>
 800a50e:	4603      	mov	r3, r0
 800a510:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a512:	7bfb      	ldrb	r3, [r7, #15]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d113      	bne.n	800a540 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a518:	78fb      	ldrb	r3, [r7, #3]
 800a51a:	693a      	ldr	r2, [r7, #16]
 800a51c:	2134      	movs	r1, #52	; 0x34
 800a51e:	fb01 f303 	mul.w	r3, r1, r3
 800a522:	4413      	add	r3, r2
 800a524:	3390      	adds	r3, #144	; 0x90
 800a526:	2201      	movs	r2, #1
 800a528:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800a52a:	78fb      	ldrb	r3, [r7, #3]
 800a52c:	693a      	ldr	r2, [r7, #16]
 800a52e:	2134      	movs	r1, #52	; 0x34
 800a530:	fb01 f303 	mul.w	r3, r1, r3
 800a534:	4413      	add	r3, r2
 800a536:	3391      	adds	r3, #145	; 0x91
 800a538:	2202      	movs	r2, #2
 800a53a:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800a53c:	2302      	movs	r3, #2
 800a53e:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800a540:	7bfb      	ldrb	r3, [r7, #15]
 800a542:	2b02      	cmp	r3, #2
 800a544:	d014      	beq.n	800a570 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a546:	7bfb      	ldrb	r3, [r7, #15]
 800a548:	2b04      	cmp	r3, #4
 800a54a:	d111      	bne.n	800a570 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a54c:	78fb      	ldrb	r3, [r7, #3]
 800a54e:	693a      	ldr	r2, [r7, #16]
 800a550:	2134      	movs	r1, #52	; 0x34
 800a552:	fb01 f303 	mul.w	r3, r1, r3
 800a556:	4413      	add	r3, r2
 800a558:	3390      	adds	r3, #144	; 0x90
 800a55a:	2208      	movs	r2, #8
 800a55c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a55e:	2302      	movs	r3, #2
 800a560:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a562:	e005      	b.n	800a570 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800a564:	bf00      	nop
 800a566:	e004      	b.n	800a572 <USBH_MSC_RdWrProcess+0x194>
      break;
 800a568:	bf00      	nop
 800a56a:	e002      	b.n	800a572 <USBH_MSC_RdWrProcess+0x194>
      break;
 800a56c:	bf00      	nop
 800a56e:	e000      	b.n	800a572 <USBH_MSC_RdWrProcess+0x194>
      break;
 800a570:	bf00      	nop

  }
  return error;
 800a572:	7dfb      	ldrb	r3, [r7, #23]
}
 800a574:	4618      	mov	r0, r3
 800a576:	3718      	adds	r7, #24
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b085      	sub	sp, #20
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	460b      	mov	r3, r1
 800a586:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a58e:	69db      	ldr	r3, [r3, #28]
 800a590:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	781b      	ldrb	r3, [r3, #0]
 800a596:	b2db      	uxtb	r3, r3
 800a598:	2b0b      	cmp	r3, #11
 800a59a:	d10c      	bne.n	800a5b6 <USBH_MSC_UnitIsReady+0x3a>
 800a59c:	78fb      	ldrb	r3, [r7, #3]
 800a59e:	68ba      	ldr	r2, [r7, #8]
 800a5a0:	2134      	movs	r1, #52	; 0x34
 800a5a2:	fb01 f303 	mul.w	r3, r1, r3
 800a5a6:	4413      	add	r3, r2
 800a5a8:	3391      	adds	r3, #145	; 0x91
 800a5aa:	781b      	ldrb	r3, [r3, #0]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d102      	bne.n	800a5b6 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	73fb      	strb	r3, [r7, #15]
 800a5b4:	e001      	b.n	800a5ba <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800a5ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3714      	adds	r7, #20
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b086      	sub	sp, #24
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	460b      	mov	r3, r1
 800a5d2:	607a      	str	r2, [r7, #4]
 800a5d4:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a5dc:	69db      	ldr	r3, [r3, #28]
 800a5de:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	b2db      	uxtb	r3, r3
 800a5e6:	2b0b      	cmp	r3, #11
 800a5e8:	d10d      	bne.n	800a606 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800a5ea:	7afb      	ldrb	r3, [r7, #11]
 800a5ec:	2234      	movs	r2, #52	; 0x34
 800a5ee:	fb02 f303 	mul.w	r3, r2, r3
 800a5f2:	3390      	adds	r3, #144	; 0x90
 800a5f4:	697a      	ldr	r2, [r7, #20]
 800a5f6:	4413      	add	r3, r2
 800a5f8:	2234      	movs	r2, #52	; 0x34
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f006 f8ed 	bl	80107dc <memcpy>
    return USBH_OK;
 800a602:	2300      	movs	r3, #0
 800a604:	e000      	b.n	800a608 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800a606:	2302      	movs	r3, #2
  }
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3718      	adds	r7, #24
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b088      	sub	sp, #32
 800a614:	af02      	add	r7, sp, #8
 800a616:	60f8      	str	r0, [r7, #12]
 800a618:	607a      	str	r2, [r7, #4]
 800a61a:	603b      	str	r3, [r7, #0]
 800a61c:	460b      	mov	r3, r1
 800a61e:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a626:	69db      	ldr	r3, [r3, #28]
 800a628:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a630:	b2db      	uxtb	r3, r3
 800a632:	2b00      	cmp	r3, #0
 800a634:	d00e      	beq.n	800a654 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a63c:	2b0b      	cmp	r3, #11
 800a63e:	d109      	bne.n	800a654 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a640:	7afb      	ldrb	r3, [r7, #11]
 800a642:	697a      	ldr	r2, [r7, #20]
 800a644:	2134      	movs	r1, #52	; 0x34
 800a646:	fb01 f303 	mul.w	r3, r1, r3
 800a64a:	4413      	add	r3, r2
 800a64c:	3390      	adds	r3, #144	; 0x90
 800a64e:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a650:	2b01      	cmp	r3, #1
 800a652:	d001      	beq.n	800a658 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800a654:	2302      	movs	r3, #2
 800a656:	e040      	b.n	800a6da <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	2206      	movs	r2, #6
 800a65c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800a65e:	7afb      	ldrb	r3, [r7, #11]
 800a660:	697a      	ldr	r2, [r7, #20]
 800a662:	2134      	movs	r1, #52	; 0x34
 800a664:	fb01 f303 	mul.w	r3, r1, r3
 800a668:	4413      	add	r3, r2
 800a66a:	3390      	adds	r3, #144	; 0x90
 800a66c:	2206      	movs	r2, #6
 800a66e:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800a670:	7afb      	ldrb	r3, [r7, #11]
 800a672:	b29a      	uxth	r2, r3
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800a67a:	7af9      	ldrb	r1, [r7, #11]
 800a67c:	6a3b      	ldr	r3, [r7, #32]
 800a67e:	9300      	str	r3, [sp, #0]
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	687a      	ldr	r2, [r7, #4]
 800a684:	68f8      	ldr	r0, [r7, #12]
 800a686:	f000 fd78 	bl	800b17a <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a690:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a692:	e016      	b.n	800a6c2 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	1ad2      	subs	r2, r2, r3
 800a69e:	6a3b      	ldr	r3, [r7, #32]
 800a6a0:	f242 7110 	movw	r1, #10000	; 0x2710
 800a6a4:	fb01 f303 	mul.w	r3, r1, r3
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	d805      	bhi.n	800a6b8 <USBH_MSC_Read+0xa8>
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d104      	bne.n	800a6c2 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800a6be:	2302      	movs	r3, #2
 800a6c0:	e00b      	b.n	800a6da <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a6c2:	7afb      	ldrb	r3, [r7, #11]
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	68f8      	ldr	r0, [r7, #12]
 800a6c8:	f7ff fe89 	bl	800a3de <USBH_MSC_RdWrProcess>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	2b01      	cmp	r3, #1
 800a6d0:	d0e0      	beq.n	800a694 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800a6d8:	2300      	movs	r3, #0
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3718      	adds	r7, #24
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}

0800a6e2 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800a6e2:	b580      	push	{r7, lr}
 800a6e4:	b088      	sub	sp, #32
 800a6e6:	af02      	add	r7, sp, #8
 800a6e8:	60f8      	str	r0, [r7, #12]
 800a6ea:	607a      	str	r2, [r7, #4]
 800a6ec:	603b      	str	r3, [r7, #0]
 800a6ee:	460b      	mov	r3, r1
 800a6f0:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a6f8:	69db      	ldr	r3, [r3, #28]
 800a6fa:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a702:	b2db      	uxtb	r3, r3
 800a704:	2b00      	cmp	r3, #0
 800a706:	d00e      	beq.n	800a726 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	781b      	ldrb	r3, [r3, #0]
 800a70c:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a70e:	2b0b      	cmp	r3, #11
 800a710:	d109      	bne.n	800a726 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a712:	7afb      	ldrb	r3, [r7, #11]
 800a714:	697a      	ldr	r2, [r7, #20]
 800a716:	2134      	movs	r1, #52	; 0x34
 800a718:	fb01 f303 	mul.w	r3, r1, r3
 800a71c:	4413      	add	r3, r2
 800a71e:	3390      	adds	r3, #144	; 0x90
 800a720:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a722:	2b01      	cmp	r3, #1
 800a724:	d001      	beq.n	800a72a <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800a726:	2302      	movs	r3, #2
 800a728:	e040      	b.n	800a7ac <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	2207      	movs	r2, #7
 800a72e:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800a730:	7afb      	ldrb	r3, [r7, #11]
 800a732:	697a      	ldr	r2, [r7, #20]
 800a734:	2134      	movs	r1, #52	; 0x34
 800a736:	fb01 f303 	mul.w	r3, r1, r3
 800a73a:	4413      	add	r3, r2
 800a73c:	3390      	adds	r3, #144	; 0x90
 800a73e:	2207      	movs	r2, #7
 800a740:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800a742:	7afb      	ldrb	r3, [r7, #11]
 800a744:	b29a      	uxth	r2, r3
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800a74c:	7af9      	ldrb	r1, [r7, #11]
 800a74e:	6a3b      	ldr	r3, [r7, #32]
 800a750:	9300      	str	r3, [sp, #0]
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	687a      	ldr	r2, [r7, #4]
 800a756:	68f8      	ldr	r0, [r7, #12]
 800a758:	f000 fca4 	bl	800b0a4 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a762:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a764:	e016      	b.n	800a794 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	1ad2      	subs	r2, r2, r3
 800a770:	6a3b      	ldr	r3, [r7, #32]
 800a772:	f242 7110 	movw	r1, #10000	; 0x2710
 800a776:	fb01 f303 	mul.w	r3, r1, r3
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d805      	bhi.n	800a78a <USBH_MSC_Write+0xa8>
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a784:	b2db      	uxtb	r3, r3
 800a786:	2b00      	cmp	r3, #0
 800a788:	d104      	bne.n	800a794 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	2201      	movs	r2, #1
 800a78e:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800a790:	2302      	movs	r3, #2
 800a792:	e00b      	b.n	800a7ac <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a794:	7afb      	ldrb	r3, [r7, #11]
 800a796:	4619      	mov	r1, r3
 800a798:	68f8      	ldr	r0, [r7, #12]
 800a79a:	f7ff fe20 	bl	800a3de <USBH_MSC_RdWrProcess>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d0e0      	beq.n	800a766 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800a7aa:	2300      	movs	r3, #0
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3718      	adds	r7, #24
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b082      	sub	sp, #8
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2221      	movs	r2, #33	; 0x21
 800a7c0:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	22ff      	movs	r2, #255	; 0xff
 800a7c6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800a7da:	2200      	movs	r2, #0
 800a7dc:	2100      	movs	r1, #0
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f001 fea4 	bl	800c52c <USBH_CtlReq>
 800a7e4:	4603      	mov	r3, r0
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3708      	adds	r7, #8
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}

0800a7ee <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800a7ee:	b580      	push	{r7, lr}
 800a7f0:	b082      	sub	sp, #8
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
 800a7f6:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	22a1      	movs	r2, #161	; 0xa1
 800a7fc:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	22fe      	movs	r2, #254	; 0xfe
 800a802:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2200      	movs	r2, #0
 800a808:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2200      	movs	r2, #0
 800a80e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2201      	movs	r2, #1
 800a814:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800a816:	2201      	movs	r2, #1
 800a818:	6839      	ldr	r1, [r7, #0]
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f001 fe86 	bl	800c52c <USBH_CtlReq>
 800a820:	4603      	mov	r3, r0
}
 800a822:	4618      	mov	r0, r3
 800a824:	3708      	adds	r7, #8
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}
	...

0800a82c <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b085      	sub	sp, #20
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a83a:	69db      	ldr	r3, [r3, #28]
 800a83c:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	4a09      	ldr	r2, [pc, #36]	; (800a868 <USBH_MSC_BOT_Init+0x3c>)
 800a842:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	4a09      	ldr	r2, [pc, #36]	; (800a86c <USBH_MSC_BOT_Init+0x40>)
 800a848:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2201      	movs	r2, #1
 800a84e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2201      	movs	r2, #1
 800a856:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800a85a:	2300      	movs	r3, #0
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3714      	adds	r7, #20
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr
 800a868:	43425355 	.word	0x43425355
 800a86c:	20304050 	.word	0x20304050

0800a870 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b088      	sub	sp, #32
 800a874:	af02      	add	r7, sp, #8
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	460b      	mov	r3, r1
 800a87a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800a87c:	2301      	movs	r3, #1
 800a87e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800a880:	2301      	movs	r3, #1
 800a882:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800a884:	2301      	movs	r3, #1
 800a886:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a888:	2300      	movs	r3, #0
 800a88a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a892:	69db      	ldr	r3, [r3, #28]
 800a894:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800a896:	2300      	movs	r3, #0
 800a898:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a8a0:	3b01      	subs	r3, #1
 800a8a2:	2b0a      	cmp	r3, #10
 800a8a4:	f200 819e 	bhi.w	800abe4 <USBH_MSC_BOT_Process+0x374>
 800a8a8:	a201      	add	r2, pc, #4	; (adr r2, 800a8b0 <USBH_MSC_BOT_Process+0x40>)
 800a8aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ae:	bf00      	nop
 800a8b0:	0800a8dd 	.word	0x0800a8dd
 800a8b4:	0800a905 	.word	0x0800a905
 800a8b8:	0800a96f 	.word	0x0800a96f
 800a8bc:	0800a98d 	.word	0x0800a98d
 800a8c0:	0800aa11 	.word	0x0800aa11
 800a8c4:	0800aa33 	.word	0x0800aa33
 800a8c8:	0800aacb 	.word	0x0800aacb
 800a8cc:	0800aae7 	.word	0x0800aae7
 800a8d0:	0800ab39 	.word	0x0800ab39
 800a8d4:	0800ab69 	.word	0x0800ab69
 800a8d8:	0800abcb 	.word	0x0800abcb
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	78fa      	ldrb	r2, [r7, #3]
 800a8e0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	2202      	movs	r2, #2
 800a8e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	795b      	ldrb	r3, [r3, #5]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	9200      	str	r2, [sp, #0]
 800a8fa:	221f      	movs	r2, #31
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f002 f824 	bl	800c94a <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800a902:	e17e      	b.n	800ac02 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	795b      	ldrb	r3, [r3, #5]
 800a908:	4619      	mov	r1, r3
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f005 fe4e 	bl	80105ac <USBH_LL_GetURBState>
 800a910:	4603      	mov	r3, r0
 800a912:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a914:	7d3b      	ldrb	r3, [r7, #20]
 800a916:	2b01      	cmp	r3, #1
 800a918:	d118      	bne.n	800a94c <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d00f      	beq.n	800a942 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a928:	b25b      	sxtb	r3, r3
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	da04      	bge.n	800a938 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	2203      	movs	r2, #3
 800a932:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a936:	e157      	b.n	800abe8 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	2205      	movs	r2, #5
 800a93c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a940:	e152      	b.n	800abe8 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	2207      	movs	r2, #7
 800a946:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a94a:	e14d      	b.n	800abe8 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a94c:	7d3b      	ldrb	r3, [r7, #20]
 800a94e:	2b02      	cmp	r3, #2
 800a950:	d104      	bne.n	800a95c <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	2201      	movs	r2, #1
 800a956:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a95a:	e145      	b.n	800abe8 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800a95c:	7d3b      	ldrb	r3, [r7, #20]
 800a95e:	2b05      	cmp	r3, #5
 800a960:	f040 8142 	bne.w	800abe8 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	220a      	movs	r2, #10
 800a968:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a96c:	e13c      	b.n	800abe8 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	895a      	ldrh	r2, [r3, #10]
 800a978:	693b      	ldr	r3, [r7, #16]
 800a97a:	791b      	ldrb	r3, [r3, #4]
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f002 f809 	bl	800c994 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	2204      	movs	r2, #4
 800a986:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800a98a:	e13a      	b.n	800ac02 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	791b      	ldrb	r3, [r3, #4]
 800a990:	4619      	mov	r1, r3
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f005 fe0a 	bl	80105ac <USBH_LL_GetURBState>
 800a998:	4603      	mov	r3, r0
 800a99a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a99c:	7d3b      	ldrb	r3, [r7, #20]
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d12d      	bne.n	800a9fe <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9a6:	693a      	ldr	r2, [r7, #16]
 800a9a8:	8952      	ldrh	r2, [r2, #10]
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	d910      	bls.n	800a9d0 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9b4:	693a      	ldr	r2, [r7, #16]
 800a9b6:	8952      	ldrh	r2, [r2, #10]
 800a9b8:	441a      	add	r2, r3
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9c4:	693a      	ldr	r2, [r7, #16]
 800a9c6:	8952      	ldrh	r2, [r2, #10]
 800a9c8:	1a9a      	subs	r2, r3, r2
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	65da      	str	r2, [r3, #92]	; 0x5c
 800a9ce:	e002      	b.n	800a9d6 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d00a      	beq.n	800a9f4 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	895a      	ldrh	r2, [r3, #10]
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	791b      	ldrb	r3, [r3, #4]
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f001 ffd1 	bl	800c994 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800a9f2:	e0fb      	b.n	800abec <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	2207      	movs	r2, #7
 800a9f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a9fc:	e0f6      	b.n	800abec <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800a9fe:	7d3b      	ldrb	r3, [r7, #20]
 800aa00:	2b05      	cmp	r3, #5
 800aa02:	f040 80f3 	bne.w	800abec <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	2209      	movs	r2, #9
 800aa0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800aa0e:	e0ed      	b.n	800abec <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	891a      	ldrh	r2, [r3, #8]
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	795b      	ldrb	r3, [r3, #5]
 800aa1e:	2001      	movs	r0, #1
 800aa20:	9000      	str	r0, [sp, #0]
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f001 ff91 	bl	800c94a <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	2206      	movs	r2, #6
 800aa2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800aa30:	e0e7      	b.n	800ac02 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	795b      	ldrb	r3, [r3, #5]
 800aa36:	4619      	mov	r1, r3
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f005 fdb7 	bl	80105ac <USBH_LL_GetURBState>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800aa42:	7d3b      	ldrb	r3, [r7, #20]
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	d12f      	bne.n	800aaa8 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa4c:	693a      	ldr	r2, [r7, #16]
 800aa4e:	8912      	ldrh	r2, [r2, #8]
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d910      	bls.n	800aa76 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa5a:	693a      	ldr	r2, [r7, #16]
 800aa5c:	8912      	ldrh	r2, [r2, #8]
 800aa5e:	441a      	add	r2, r3
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa6a:	693a      	ldr	r2, [r7, #16]
 800aa6c:	8912      	ldrh	r2, [r2, #8]
 800aa6e:	1a9a      	subs	r2, r3, r2
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	65da      	str	r2, [r3, #92]	; 0x5c
 800aa74:	e002      	b.n	800aa7c <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d00c      	beq.n	800aa9e <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	891a      	ldrh	r2, [r3, #8]
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	795b      	ldrb	r3, [r3, #5]
 800aa92:	2001      	movs	r0, #1
 800aa94:	9000      	str	r0, [sp, #0]
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f001 ff57 	bl	800c94a <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800aa9c:	e0a8      	b.n	800abf0 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	2207      	movs	r2, #7
 800aaa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800aaa6:	e0a3      	b.n	800abf0 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800aaa8:	7d3b      	ldrb	r3, [r7, #20]
 800aaaa:	2b02      	cmp	r3, #2
 800aaac:	d104      	bne.n	800aab8 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	2205      	movs	r2, #5
 800aab2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800aab6:	e09b      	b.n	800abf0 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800aab8:	7d3b      	ldrb	r3, [r7, #20]
 800aaba:	2b05      	cmp	r3, #5
 800aabc:	f040 8098 	bne.w	800abf0 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	220a      	movs	r2, #10
 800aac4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800aac8:	e092      	b.n	800abf0 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	791b      	ldrb	r3, [r3, #4]
 800aad4:	220d      	movs	r2, #13
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f001 ff5c 	bl	800c994 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	2208      	movs	r2, #8
 800aae0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800aae4:	e08d      	b.n	800ac02 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	791b      	ldrb	r3, [r3, #4]
 800aaea:	4619      	mov	r1, r3
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f005 fd5d 	bl	80105ac <USBH_LL_GetURBState>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800aaf6:	7d3b      	ldrb	r3, [r7, #20]
 800aaf8:	2b01      	cmp	r3, #1
 800aafa:	d115      	bne.n	800ab28 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	2201      	movs	r2, #1
 800ab00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	2201      	movs	r2, #1
 800ab08:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f000 f8a9 	bl	800ac64 <USBH_MSC_DecodeCSW>
 800ab12:	4603      	mov	r3, r0
 800ab14:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800ab16:	7d7b      	ldrb	r3, [r7, #21]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d102      	bne.n	800ab22 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800ab20:	e068      	b.n	800abf4 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800ab22:	2302      	movs	r3, #2
 800ab24:	75fb      	strb	r3, [r7, #23]
      break;
 800ab26:	e065      	b.n	800abf4 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800ab28:	7d3b      	ldrb	r3, [r7, #20]
 800ab2a:	2b05      	cmp	r3, #5
 800ab2c:	d162      	bne.n	800abf4 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	2209      	movs	r2, #9
 800ab32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ab36:	e05d      	b.n	800abf4 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800ab38:	78fb      	ldrb	r3, [r7, #3]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f000 f864 	bl	800ac0c <USBH_MSC_BOT_Abort>
 800ab44:	4603      	mov	r3, r0
 800ab46:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800ab48:	7dbb      	ldrb	r3, [r7, #22]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d104      	bne.n	800ab58 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	2207      	movs	r2, #7
 800ab52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800ab56:	e04f      	b.n	800abf8 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800ab58:	7dbb      	ldrb	r3, [r7, #22]
 800ab5a:	2b04      	cmp	r3, #4
 800ab5c:	d14c      	bne.n	800abf8 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	220b      	movs	r2, #11
 800ab62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ab66:	e047      	b.n	800abf8 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800ab68:	78fb      	ldrb	r3, [r7, #3]
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f000 f84c 	bl	800ac0c <USBH_MSC_BOT_Abort>
 800ab74:	4603      	mov	r3, r0
 800ab76:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800ab78:	7dbb      	ldrb	r3, [r7, #22]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d11d      	bne.n	800abba <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	795b      	ldrb	r3, [r3, #5]
 800ab82:	4619      	mov	r1, r3
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f005 fd6b 	bl	8010660 <USBH_LL_GetToggle>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	7959      	ldrb	r1, [r3, #5]
 800ab92:	7bfb      	ldrb	r3, [r7, #15]
 800ab94:	f1c3 0301 	rsb	r3, r3, #1
 800ab98:	b2db      	uxtb	r3, r3
 800ab9a:	461a      	mov	r2, r3
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f005 fd2f 	bl	8010600 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	791b      	ldrb	r3, [r3, #4]
 800aba6:	2200      	movs	r2, #0
 800aba8:	4619      	mov	r1, r3
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f005 fd28 	bl	8010600 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	2209      	movs	r2, #9
 800abb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800abb8:	e020      	b.n	800abfc <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800abba:	7dbb      	ldrb	r3, [r7, #22]
 800abbc:	2b04      	cmp	r3, #4
 800abbe:	d11d      	bne.n	800abfc <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	220b      	movs	r2, #11
 800abc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800abc8:	e018      	b.n	800abfc <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f7ff fdf2 	bl	800a7b4 <USBH_MSC_BOT_REQ_Reset>
 800abd0:	4603      	mov	r3, r0
 800abd2:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800abd4:	7dfb      	ldrb	r3, [r7, #23]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d112      	bne.n	800ac00 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	2201      	movs	r2, #1
 800abde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800abe2:	e00d      	b.n	800ac00 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800abe4:	bf00      	nop
 800abe6:	e00c      	b.n	800ac02 <USBH_MSC_BOT_Process+0x392>
      break;
 800abe8:	bf00      	nop
 800abea:	e00a      	b.n	800ac02 <USBH_MSC_BOT_Process+0x392>
      break;
 800abec:	bf00      	nop
 800abee:	e008      	b.n	800ac02 <USBH_MSC_BOT_Process+0x392>
      break;
 800abf0:	bf00      	nop
 800abf2:	e006      	b.n	800ac02 <USBH_MSC_BOT_Process+0x392>
      break;
 800abf4:	bf00      	nop
 800abf6:	e004      	b.n	800ac02 <USBH_MSC_BOT_Process+0x392>
      break;
 800abf8:	bf00      	nop
 800abfa:	e002      	b.n	800ac02 <USBH_MSC_BOT_Process+0x392>
      break;
 800abfc:	bf00      	nop
 800abfe:	e000      	b.n	800ac02 <USBH_MSC_BOT_Process+0x392>
      break;
 800ac00:	bf00      	nop
  }
  return status;
 800ac02:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3718      	adds	r7, #24
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	460b      	mov	r3, r1
 800ac16:	70fb      	strb	r3, [r7, #3]
 800ac18:	4613      	mov	r3, r2
 800ac1a:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800ac1c:	2302      	movs	r3, #2
 800ac1e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac26:	69db      	ldr	r3, [r3, #28]
 800ac28:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800ac2a:	78bb      	ldrb	r3, [r7, #2]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d002      	beq.n	800ac36 <USBH_MSC_BOT_Abort+0x2a>
 800ac30:	2b01      	cmp	r3, #1
 800ac32:	d009      	beq.n	800ac48 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800ac34:	e011      	b.n	800ac5a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	79db      	ldrb	r3, [r3, #7]
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f001 f9a8 	bl	800bf92 <USBH_ClrFeature>
 800ac42:	4603      	mov	r3, r0
 800ac44:	73fb      	strb	r3, [r7, #15]
      break;
 800ac46:	e008      	b.n	800ac5a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	799b      	ldrb	r3, [r3, #6]
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f001 f99f 	bl	800bf92 <USBH_ClrFeature>
 800ac54:	4603      	mov	r3, r0
 800ac56:	73fb      	strb	r3, [r7, #15]
      break;
 800ac58:	bf00      	nop
  }
  return status;
 800ac5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3710      	adds	r7, #16
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac72:	69db      	ldr	r3, [r3, #28]
 800ac74:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800ac76:	2301      	movs	r3, #1
 800ac78:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	791b      	ldrb	r3, [r3, #4]
 800ac7e:	4619      	mov	r1, r3
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f005 fc01 	bl	8010488 <USBH_LL_GetLastXferSize>
 800ac86:	4603      	mov	r3, r0
 800ac88:	2b0d      	cmp	r3, #13
 800ac8a:	d002      	beq.n	800ac92 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800ac8c:	2302      	movs	r3, #2
 800ac8e:	73fb      	strb	r3, [r7, #15]
 800ac90:	e024      	b.n	800acdc <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac96:	4a14      	ldr	r2, [pc, #80]	; (800ace8 <USBH_MSC_DecodeCSW+0x84>)
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d11d      	bne.n	800acd8 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aca4:	429a      	cmp	r2, r3
 800aca6:	d119      	bne.n	800acdc <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d102      	bne.n	800acb8 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800acb2:	2300      	movs	r3, #0
 800acb4:	73fb      	strb	r3, [r7, #15]
 800acb6:	e011      	b.n	800acdc <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800acbe:	2b01      	cmp	r3, #1
 800acc0:	d102      	bne.n	800acc8 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800acc2:	2301      	movs	r3, #1
 800acc4:	73fb      	strb	r3, [r7, #15]
 800acc6:	e009      	b.n	800acdc <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800acce:	2b02      	cmp	r3, #2
 800acd0:	d104      	bne.n	800acdc <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800acd2:	2302      	movs	r3, #2
 800acd4:	73fb      	strb	r3, [r7, #15]
 800acd6:	e001      	b.n	800acdc <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800acd8:	2302      	movs	r3, #2
 800acda:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800acdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3710      	adds	r7, #16
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}
 800ace6:	bf00      	nop
 800ace8:	53425355 	.word	0x53425355

0800acec <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b084      	sub	sp, #16
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	460b      	mov	r3, r1
 800acf6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800acf8:	2302      	movs	r3, #2
 800acfa:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad02:	69db      	ldr	r3, [r3, #28]
 800ad04:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ad0c:	2b01      	cmp	r3, #1
 800ad0e:	d002      	beq.n	800ad16 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800ad10:	2b02      	cmp	r3, #2
 800ad12:	d021      	beq.n	800ad58 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800ad14:	e028      	b.n	800ad68 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	220a      	movs	r2, #10
 800ad28:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	3363      	adds	r3, #99	; 0x63
 800ad30:	2210      	movs	r2, #16
 800ad32:	2100      	movs	r1, #0
 800ad34:	4618      	mov	r0, r3
 800ad36:	f005 fd5f 	bl	80107f8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	2201      	movs	r2, #1
 800ad46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	2202      	movs	r2, #2
 800ad4e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800ad52:	2301      	movs	r3, #1
 800ad54:	73fb      	strb	r3, [r7, #15]
      break;
 800ad56:	e007      	b.n	800ad68 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ad58:	78fb      	ldrb	r3, [r7, #3]
 800ad5a:	4619      	mov	r1, r3
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f7ff fd87 	bl	800a870 <USBH_MSC_BOT_Process>
 800ad62:	4603      	mov	r3, r0
 800ad64:	73fb      	strb	r3, [r7, #15]
      break;
 800ad66:	bf00      	nop
  }

  return error;
 800ad68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3710      	adds	r7, #16
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}

0800ad72 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800ad72:	b580      	push	{r7, lr}
 800ad74:	b086      	sub	sp, #24
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	60f8      	str	r0, [r7, #12]
 800ad7a:	460b      	mov	r3, r1
 800ad7c:	607a      	str	r2, [r7, #4]
 800ad7e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800ad80:	2301      	movs	r3, #1
 800ad82:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad8a:	69db      	ldr	r3, [r3, #28]
 800ad8c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d002      	beq.n	800ad9e <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800ad98:	2b02      	cmp	r3, #2
 800ad9a:	d027      	beq.n	800adec <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800ad9c:	e05f      	b.n	800ae5e <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	2208      	movs	r2, #8
 800ada2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	2280      	movs	r2, #128	; 0x80
 800ada8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800adac:	693b      	ldr	r3, [r7, #16]
 800adae:	220a      	movs	r2, #10
 800adb0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	3363      	adds	r3, #99	; 0x63
 800adb8:	2210      	movs	r2, #16
 800adba:	2100      	movs	r1, #0
 800adbc:	4618      	mov	r0, r3
 800adbe:	f005 fd1b 	bl	80107f8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	2225      	movs	r2, #37	; 0x25
 800adc6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	2201      	movs	r2, #1
 800adce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	2202      	movs	r2, #2
 800add6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	f103 0210 	add.w	r2, r3, #16
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ade6:	2301      	movs	r3, #1
 800ade8:	75fb      	strb	r3, [r7, #23]
      break;
 800adea:	e038      	b.n	800ae5e <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800adec:	7afb      	ldrb	r3, [r7, #11]
 800adee:	4619      	mov	r1, r3
 800adf0:	68f8      	ldr	r0, [r7, #12]
 800adf2:	f7ff fd3d 	bl	800a870 <USBH_MSC_BOT_Process>
 800adf6:	4603      	mov	r3, r0
 800adf8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800adfa:	7dfb      	ldrb	r3, [r7, #23]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d12d      	bne.n	800ae5c <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae06:	3303      	adds	r3, #3
 800ae08:	781b      	ldrb	r3, [r3, #0]
 800ae0a:	461a      	mov	r2, r3
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae12:	3302      	adds	r3, #2
 800ae14:	781b      	ldrb	r3, [r3, #0]
 800ae16:	021b      	lsls	r3, r3, #8
 800ae18:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae20:	3301      	adds	r3, #1
 800ae22:	781b      	ldrb	r3, [r3, #0]
 800ae24:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800ae26:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae2e:	781b      	ldrb	r3, [r3, #0]
 800ae30:	061b      	lsls	r3, r3, #24
 800ae32:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae3e:	3307      	adds	r3, #7
 800ae40:	781b      	ldrb	r3, [r3, #0]
 800ae42:	b29a      	uxth	r2, r3
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae4a:	3306      	adds	r3, #6
 800ae4c:	781b      	ldrb	r3, [r3, #0]
 800ae4e:	b29b      	uxth	r3, r3
 800ae50:	021b      	lsls	r3, r3, #8
 800ae52:	b29b      	uxth	r3, r3
 800ae54:	4313      	orrs	r3, r2
 800ae56:	b29a      	uxth	r2, r3
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	809a      	strh	r2, [r3, #4]
      break;
 800ae5c:	bf00      	nop
  }

  return error;
 800ae5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3718      	adds	r7, #24
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b086      	sub	sp, #24
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	60f8      	str	r0, [r7, #12]
 800ae70:	460b      	mov	r3, r1
 800ae72:	607a      	str	r2, [r7, #4]
 800ae74:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800ae76:	2302      	movs	r3, #2
 800ae78:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae80:	69db      	ldr	r3, [r3, #28]
 800ae82:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ae8a:	2b01      	cmp	r3, #1
 800ae8c:	d002      	beq.n	800ae94 <USBH_MSC_SCSI_Inquiry+0x2c>
 800ae8e:	2b02      	cmp	r3, #2
 800ae90:	d03d      	beq.n	800af0e <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800ae92:	e089      	b.n	800afa8 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	2224      	movs	r2, #36	; 0x24
 800ae98:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800ae9a:	693b      	ldr	r3, [r7, #16]
 800ae9c:	2280      	movs	r2, #128	; 0x80
 800ae9e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800aea2:	693b      	ldr	r3, [r7, #16]
 800aea4:	220a      	movs	r2, #10
 800aea6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	3363      	adds	r3, #99	; 0x63
 800aeae:	220a      	movs	r2, #10
 800aeb0:	2100      	movs	r1, #0
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f005 fca0 	bl	80107f8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	2212      	movs	r2, #18
 800aebc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800aec0:	7afb      	ldrb	r3, [r7, #11]
 800aec2:	015b      	lsls	r3, r3, #5
 800aec4:	b2da      	uxtb	r2, r3
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800aecc:	693b      	ldr	r3, [r7, #16]
 800aece:	2200      	movs	r2, #0
 800aed0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	2200      	movs	r2, #0
 800aed8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	2224      	movs	r2, #36	; 0x24
 800aee0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	2200      	movs	r2, #0
 800aee8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	2201      	movs	r2, #1
 800aef0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	2202      	movs	r2, #2
 800aef8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	f103 0210 	add.w	r2, r3, #16
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800af08:	2301      	movs	r3, #1
 800af0a:	75fb      	strb	r3, [r7, #23]
      break;
 800af0c:	e04c      	b.n	800afa8 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800af0e:	7afb      	ldrb	r3, [r7, #11]
 800af10:	4619      	mov	r1, r3
 800af12:	68f8      	ldr	r0, [r7, #12]
 800af14:	f7ff fcac 	bl	800a870 <USBH_MSC_BOT_Process>
 800af18:	4603      	mov	r3, r0
 800af1a:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800af1c:	7dfb      	ldrb	r3, [r7, #23]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d141      	bne.n	800afa6 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800af22:	2222      	movs	r2, #34	; 0x22
 800af24:	2100      	movs	r1, #0
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f005 fc66 	bl	80107f8 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	f003 031f 	and.w	r3, r3, #31
 800af38:	b2da      	uxtb	r2, r3
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af44:	781b      	ldrb	r3, [r3, #0]
 800af46:	095b      	lsrs	r3, r3, #5
 800af48:	b2da      	uxtb	r2, r3
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af54:	3301      	adds	r3, #1
 800af56:	781b      	ldrb	r3, [r3, #0]
 800af58:	b25b      	sxtb	r3, r3
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	da03      	bge.n	800af66 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2201      	movs	r2, #1
 800af62:	709a      	strb	r2, [r3, #2]
 800af64:	e002      	b.n	800af6c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2200      	movs	r2, #0
 800af6a:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	1cd8      	adds	r0, r3, #3
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af76:	3308      	adds	r3, #8
 800af78:	2208      	movs	r2, #8
 800af7a:	4619      	mov	r1, r3
 800af7c:	f005 fc2e 	bl	80107dc <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f103 000c 	add.w	r0, r3, #12
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af8c:	3310      	adds	r3, #16
 800af8e:	2210      	movs	r2, #16
 800af90:	4619      	mov	r1, r3
 800af92:	f005 fc23 	bl	80107dc <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	331d      	adds	r3, #29
 800af9a:	693a      	ldr	r2, [r7, #16]
 800af9c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800afa0:	3220      	adds	r2, #32
 800afa2:	6812      	ldr	r2, [r2, #0]
 800afa4:	601a      	str	r2, [r3, #0]
      break;
 800afa6:	bf00      	nop
  }

  return error;
 800afa8:	7dfb      	ldrb	r3, [r7, #23]
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3718      	adds	r7, #24
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}

0800afb2 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800afb2:	b580      	push	{r7, lr}
 800afb4:	b086      	sub	sp, #24
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	60f8      	str	r0, [r7, #12]
 800afba:	460b      	mov	r3, r1
 800afbc:	607a      	str	r2, [r7, #4]
 800afbe:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800afc0:	2302      	movs	r3, #2
 800afc2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800afca:	69db      	ldr	r3, [r3, #28]
 800afcc:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800afd4:	2b01      	cmp	r3, #1
 800afd6:	d002      	beq.n	800afde <USBH_MSC_SCSI_RequestSense+0x2c>
 800afd8:	2b02      	cmp	r3, #2
 800afda:	d03d      	beq.n	800b058 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800afdc:	e05d      	b.n	800b09a <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	220e      	movs	r2, #14
 800afe2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	2280      	movs	r2, #128	; 0x80
 800afe8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	220a      	movs	r2, #10
 800aff0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	3363      	adds	r3, #99	; 0x63
 800aff8:	2210      	movs	r2, #16
 800affa:	2100      	movs	r1, #0
 800affc:	4618      	mov	r0, r3
 800affe:	f005 fbfb 	bl	80107f8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	2203      	movs	r2, #3
 800b006:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800b00a:	7afb      	ldrb	r3, [r7, #11]
 800b00c:	015b      	lsls	r3, r3, #5
 800b00e:	b2da      	uxtb	r2, r3
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	2200      	movs	r2, #0
 800b01a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	2200      	movs	r2, #0
 800b022:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	220e      	movs	r2, #14
 800b02a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	2200      	movs	r2, #0
 800b032:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	2201      	movs	r2, #1
 800b03a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	2202      	movs	r2, #2
 800b042:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	f103 0210 	add.w	r2, r3, #16
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b052:	2301      	movs	r3, #1
 800b054:	75fb      	strb	r3, [r7, #23]
      break;
 800b056:	e020      	b.n	800b09a <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b058:	7afb      	ldrb	r3, [r7, #11]
 800b05a:	4619      	mov	r1, r3
 800b05c:	68f8      	ldr	r0, [r7, #12]
 800b05e:	f7ff fc07 	bl	800a870 <USBH_MSC_BOT_Process>
 800b062:	4603      	mov	r3, r0
 800b064:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b066:	7dfb      	ldrb	r3, [r7, #23]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d115      	bne.n	800b098 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b072:	3302      	adds	r3, #2
 800b074:	781b      	ldrb	r3, [r3, #0]
 800b076:	f003 030f 	and.w	r3, r3, #15
 800b07a:	b2da      	uxtb	r2, r3
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b086:	7b1a      	ldrb	r2, [r3, #12]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b092:	7b5a      	ldrb	r2, [r3, #13]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	709a      	strb	r2, [r3, #2]
      break;
 800b098:	bf00      	nop
  }

  return error;
 800b09a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3718      	adds	r7, #24
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}

0800b0a4 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b086      	sub	sp, #24
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	60f8      	str	r0, [r7, #12]
 800b0ac:	607a      	str	r2, [r7, #4]
 800b0ae:	603b      	str	r3, [r7, #0]
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b0b4:	2302      	movs	r3, #2
 800b0b6:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b0be:	69db      	ldr	r3, [r3, #28]
 800b0c0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	d002      	beq.n	800b0d2 <USBH_MSC_SCSI_Write+0x2e>
 800b0cc:	2b02      	cmp	r3, #2
 800b0ce:	d047      	beq.n	800b160 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b0d0:	e04e      	b.n	800b170 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800b0d8:	461a      	mov	r2, r3
 800b0da:	6a3b      	ldr	r3, [r7, #32]
 800b0dc:	fb03 f202 	mul.w	r2, r3, r2
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	220a      	movs	r2, #10
 800b0f0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	3363      	adds	r3, #99	; 0x63
 800b0f8:	2210      	movs	r2, #16
 800b0fa:	2100      	movs	r1, #0
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f005 fb7b 	bl	80107f8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	222a      	movs	r2, #42	; 0x2a
 800b106:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800b10a:	79fa      	ldrb	r2, [r7, #7]
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800b112:	79ba      	ldrb	r2, [r7, #6]
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800b11a:	797a      	ldrb	r2, [r7, #5]
 800b11c:	693b      	ldr	r3, [r7, #16]
 800b11e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800b122:	1d3b      	adds	r3, r7, #4
 800b124:	781a      	ldrb	r2, [r3, #0]
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800b12c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800b136:	f107 0320 	add.w	r3, r7, #32
 800b13a:	781a      	ldrb	r2, [r3, #0]
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	2201      	movs	r2, #1
 800b146:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	2202      	movs	r2, #2
 800b14e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	683a      	ldr	r2, [r7, #0]
 800b156:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b15a:	2301      	movs	r3, #1
 800b15c:	75fb      	strb	r3, [r7, #23]
      break;
 800b15e:	e007      	b.n	800b170 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b160:	7afb      	ldrb	r3, [r7, #11]
 800b162:	4619      	mov	r1, r3
 800b164:	68f8      	ldr	r0, [r7, #12]
 800b166:	f7ff fb83 	bl	800a870 <USBH_MSC_BOT_Process>
 800b16a:	4603      	mov	r3, r0
 800b16c:	75fb      	strb	r3, [r7, #23]
      break;
 800b16e:	bf00      	nop
  }

  return error;
 800b170:	7dfb      	ldrb	r3, [r7, #23]
}
 800b172:	4618      	mov	r0, r3
 800b174:	3718      	adds	r7, #24
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}

0800b17a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800b17a:	b580      	push	{r7, lr}
 800b17c:	b086      	sub	sp, #24
 800b17e:	af00      	add	r7, sp, #0
 800b180:	60f8      	str	r0, [r7, #12]
 800b182:	607a      	str	r2, [r7, #4]
 800b184:	603b      	str	r3, [r7, #0]
 800b186:	460b      	mov	r3, r1
 800b188:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b18a:	2302      	movs	r3, #2
 800b18c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b194:	69db      	ldr	r3, [r3, #28]
 800b196:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b19e:	2b01      	cmp	r3, #1
 800b1a0:	d002      	beq.n	800b1a8 <USBH_MSC_SCSI_Read+0x2e>
 800b1a2:	2b02      	cmp	r3, #2
 800b1a4:	d047      	beq.n	800b236 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b1a6:	e04e      	b.n	800b246 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800b1ae:	461a      	mov	r2, r3
 800b1b0:	6a3b      	ldr	r3, [r7, #32]
 800b1b2:	fb03 f202 	mul.w	r2, r3, r2
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	2280      	movs	r2, #128	; 0x80
 800b1be:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	220a      	movs	r2, #10
 800b1c6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	3363      	adds	r3, #99	; 0x63
 800b1ce:	2210      	movs	r2, #16
 800b1d0:	2100      	movs	r1, #0
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f005 fb10 	bl	80107f8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	2228      	movs	r2, #40	; 0x28
 800b1dc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800b1e0:	79fa      	ldrb	r2, [r7, #7]
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800b1e8:	79ba      	ldrb	r2, [r7, #6]
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800b1f0:	797a      	ldrb	r2, [r7, #5]
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800b1f8:	1d3b      	adds	r3, r7, #4
 800b1fa:	781a      	ldrb	r2, [r3, #0]
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800b202:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800b20c:	f107 0320 	add.w	r3, r7, #32
 800b210:	781a      	ldrb	r2, [r3, #0]
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	2201      	movs	r2, #1
 800b21c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	2202      	movs	r2, #2
 800b224:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	683a      	ldr	r2, [r7, #0]
 800b22c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b230:	2301      	movs	r3, #1
 800b232:	75fb      	strb	r3, [r7, #23]
      break;
 800b234:	e007      	b.n	800b246 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b236:	7afb      	ldrb	r3, [r7, #11]
 800b238:	4619      	mov	r1, r3
 800b23a:	68f8      	ldr	r0, [r7, #12]
 800b23c:	f7ff fb18 	bl	800a870 <USBH_MSC_BOT_Process>
 800b240:	4603      	mov	r3, r0
 800b242:	75fb      	strb	r3, [r7, #23]
      break;
 800b244:	bf00      	nop
  }

  return error;
 800b246:	7dfb      	ldrb	r3, [r7, #23]
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3718      	adds	r7, #24
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b084      	sub	sp, #16
 800b254:	af00      	add	r7, sp, #0
 800b256:	60f8      	str	r0, [r7, #12]
 800b258:	60b9      	str	r1, [r7, #8]
 800b25a:	4613      	mov	r3, r2
 800b25c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d101      	bne.n	800b268 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b264:	2302      	movs	r3, #2
 800b266:	e029      	b.n	800b2bc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	79fa      	ldrb	r2, [r7, #7]
 800b26c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	2200      	movs	r2, #0
 800b274:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	2200      	movs	r2, #0
 800b27c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800b280:	68f8      	ldr	r0, [r7, #12]
 800b282:	f000 f81f 	bl	800b2c4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2200      	movs	r2, #0
 800b28a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2200      	movs	r2, #0
 800b292:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	2200      	movs	r2, #0
 800b29a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d003      	beq.n	800b2b4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	68ba      	ldr	r2, [r7, #8]
 800b2b0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800b2b4:	68f8      	ldr	r0, [r7, #12]
 800b2b6:	f005 f833 	bl	8010320 <USBH_LL_Init>

  return USBH_OK;
 800b2ba:	2300      	movs	r3, #0
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3710      	adds	r7, #16
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b085      	sub	sp, #20
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	60fb      	str	r3, [r7, #12]
 800b2d4:	e009      	b.n	800b2ea <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800b2d6:	687a      	ldr	r2, [r7, #4]
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	33e0      	adds	r3, #224	; 0xe0
 800b2dc:	009b      	lsls	r3, r3, #2
 800b2de:	4413      	add	r3, r2
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	3301      	adds	r3, #1
 800b2e8:	60fb      	str	r3, [r7, #12]
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	2b0f      	cmp	r3, #15
 800b2ee:	d9f2      	bls.n	800b2d6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	60fb      	str	r3, [r7, #12]
 800b2f4:	e009      	b.n	800b30a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800b2f6:	687a      	ldr	r2, [r7, #4]
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	4413      	add	r3, r2
 800b2fc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b300:	2200      	movs	r2, #0
 800b302:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	3301      	adds	r3, #1
 800b308:	60fb      	str	r3, [r7, #12]
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b310:	d3f1      	bcc.n	800b2f6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2200      	movs	r2, #0
 800b316:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2200      	movs	r2, #0
 800b31c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2201      	movs	r2, #1
 800b322:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2200      	movs	r2, #0
 800b328:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2201      	movs	r2, #1
 800b330:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2240      	movs	r2, #64	; 0x40
 800b336:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2200      	movs	r2, #0
 800b33c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2200      	movs	r2, #0
 800b342:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2201      	movs	r2, #1
 800b34a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2200      	movs	r2, #0
 800b352:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2200      	movs	r2, #0
 800b35a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800b35e:	2300      	movs	r3, #0
}
 800b360:	4618      	mov	r0, r3
 800b362:	3714      	adds	r7, #20
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	4770      	bx	lr

0800b36c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b085      	sub	sp, #20
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b376:	2300      	movs	r3, #0
 800b378:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d016      	beq.n	800b3ae <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b386:	2b00      	cmp	r3, #0
 800b388:	d10e      	bne.n	800b3a8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b390:	1c59      	adds	r1, r3, #1
 800b392:	687a      	ldr	r2, [r7, #4]
 800b394:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800b398:	687a      	ldr	r2, [r7, #4]
 800b39a:	33de      	adds	r3, #222	; 0xde
 800b39c:	6839      	ldr	r1, [r7, #0]
 800b39e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	73fb      	strb	r3, [r7, #15]
 800b3a6:	e004      	b.n	800b3b2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b3a8:	2302      	movs	r3, #2
 800b3aa:	73fb      	strb	r3, [r7, #15]
 800b3ac:	e001      	b.n	800b3b2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b3ae:	2302      	movs	r3, #2
 800b3b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b3b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	3714      	adds	r7, #20
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr

0800b3c0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b085      	sub	sp, #20
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	460b      	mov	r3, r1
 800b3ca:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800b3d6:	78fa      	ldrb	r2, [r7, #3]
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d204      	bcs.n	800b3e6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	78fa      	ldrb	r2, [r7, #3]
 800b3e0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800b3e4:	e001      	b.n	800b3ea <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b3e6:	2302      	movs	r3, #2
 800b3e8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b3ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3714      	adds	r7, #20
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f6:	4770      	bx	lr

0800b3f8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b087      	sub	sp, #28
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	4608      	mov	r0, r1
 800b402:	4611      	mov	r1, r2
 800b404:	461a      	mov	r2, r3
 800b406:	4603      	mov	r3, r0
 800b408:	70fb      	strb	r3, [r7, #3]
 800b40a:	460b      	mov	r3, r1
 800b40c:	70bb      	strb	r3, [r7, #2]
 800b40e:	4613      	mov	r3, r2
 800b410:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b412:	2300      	movs	r3, #0
 800b414:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b416:	2300      	movs	r3, #0
 800b418:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b420:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b422:	e025      	b.n	800b470 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b424:	7dfb      	ldrb	r3, [r7, #23]
 800b426:	221a      	movs	r2, #26
 800b428:	fb02 f303 	mul.w	r3, r2, r3
 800b42c:	3308      	adds	r3, #8
 800b42e:	68fa      	ldr	r2, [r7, #12]
 800b430:	4413      	add	r3, r2
 800b432:	3302      	adds	r3, #2
 800b434:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	795b      	ldrb	r3, [r3, #5]
 800b43a:	78fa      	ldrb	r2, [r7, #3]
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d002      	beq.n	800b446 <USBH_FindInterface+0x4e>
 800b440:	78fb      	ldrb	r3, [r7, #3]
 800b442:	2bff      	cmp	r3, #255	; 0xff
 800b444:	d111      	bne.n	800b46a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b446:	693b      	ldr	r3, [r7, #16]
 800b448:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b44a:	78ba      	ldrb	r2, [r7, #2]
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d002      	beq.n	800b456 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b450:	78bb      	ldrb	r3, [r7, #2]
 800b452:	2bff      	cmp	r3, #255	; 0xff
 800b454:	d109      	bne.n	800b46a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b456:	693b      	ldr	r3, [r7, #16]
 800b458:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b45a:	787a      	ldrb	r2, [r7, #1]
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d002      	beq.n	800b466 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b460:	787b      	ldrb	r3, [r7, #1]
 800b462:	2bff      	cmp	r3, #255	; 0xff
 800b464:	d101      	bne.n	800b46a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b466:	7dfb      	ldrb	r3, [r7, #23]
 800b468:	e006      	b.n	800b478 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b46a:	7dfb      	ldrb	r3, [r7, #23]
 800b46c:	3301      	adds	r3, #1
 800b46e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b470:	7dfb      	ldrb	r3, [r7, #23]
 800b472:	2b01      	cmp	r3, #1
 800b474:	d9d6      	bls.n	800b424 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b476:	23ff      	movs	r3, #255	; 0xff
}
 800b478:	4618      	mov	r0, r3
 800b47a:	371c      	adds	r7, #28
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr

0800b484 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b082      	sub	sp, #8
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f004 ff83 	bl	8010398 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800b492:	2101      	movs	r1, #1
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f005 f89c 	bl	80105d2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b49a:	2300      	movs	r3, #0
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3708      	adds	r7, #8
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b088      	sub	sp, #32
 800b4a8:	af04      	add	r7, sp, #16
 800b4aa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b4ac:	2302      	movs	r3, #2
 800b4ae:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b4ba:	b2db      	uxtb	r3, r3
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d102      	bne.n	800b4c6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2203      	movs	r2, #3
 800b4c4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	b2db      	uxtb	r3, r3
 800b4cc:	2b0b      	cmp	r3, #11
 800b4ce:	f200 81be 	bhi.w	800b84e <USBH_Process+0x3aa>
 800b4d2:	a201      	add	r2, pc, #4	; (adr r2, 800b4d8 <USBH_Process+0x34>)
 800b4d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4d8:	0800b509 	.word	0x0800b509
 800b4dc:	0800b53b 	.word	0x0800b53b
 800b4e0:	0800b5a3 	.word	0x0800b5a3
 800b4e4:	0800b7e9 	.word	0x0800b7e9
 800b4e8:	0800b84f 	.word	0x0800b84f
 800b4ec:	0800b647 	.word	0x0800b647
 800b4f0:	0800b78f 	.word	0x0800b78f
 800b4f4:	0800b67d 	.word	0x0800b67d
 800b4f8:	0800b69d 	.word	0x0800b69d
 800b4fc:	0800b6bd 	.word	0x0800b6bd
 800b500:	0800b701 	.word	0x0800b701
 800b504:	0800b7d1 	.word	0x0800b7d1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b50e:	b2db      	uxtb	r3, r3
 800b510:	2b00      	cmp	r3, #0
 800b512:	f000 819e 	beq.w	800b852 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2201      	movs	r2, #1
 800b51a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b51c:	20c8      	movs	r0, #200	; 0xc8
 800b51e:	f005 f8cf 	bl	80106c0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f004 ff95 	bl	8010452 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2200      	movs	r2, #0
 800b52c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2200      	movs	r2, #0
 800b534:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b538:	e18b      	b.n	800b852 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800b540:	2b01      	cmp	r3, #1
 800b542:	d107      	bne.n	800b554 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2200      	movs	r2, #0
 800b548:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2202      	movs	r2, #2
 800b550:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b552:	e18d      	b.n	800b870 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b55a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b55e:	d914      	bls.n	800b58a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b566:	3301      	adds	r3, #1
 800b568:	b2da      	uxtb	r2, r3
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b576:	2b03      	cmp	r3, #3
 800b578:	d903      	bls.n	800b582 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	220d      	movs	r2, #13
 800b57e:	701a      	strb	r2, [r3, #0]
      break;
 800b580:	e176      	b.n	800b870 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2200      	movs	r2, #0
 800b586:	701a      	strb	r2, [r3, #0]
      break;
 800b588:	e172      	b.n	800b870 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b590:	f103 020a 	add.w	r2, r3, #10
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800b59a:	200a      	movs	r0, #10
 800b59c:	f005 f890 	bl	80106c0 <USBH_Delay>
      break;
 800b5a0:	e166      	b.n	800b870 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d005      	beq.n	800b5b8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b5b2:	2104      	movs	r1, #4
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b5b8:	2064      	movs	r0, #100	; 0x64
 800b5ba:	f005 f881 	bl	80106c0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f004 ff20 	bl	8010404 <USBH_LL_GetSpeed>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	461a      	mov	r2, r3
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2205      	movs	r2, #5
 800b5d2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b5d4:	2100      	movs	r1, #0
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f001 fa29 	bl	800ca2e <USBH_AllocPipe>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	461a      	mov	r2, r3
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b5e4:	2180      	movs	r1, #128	; 0x80
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f001 fa21 	bl	800ca2e <USBH_AllocPipe>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	461a      	mov	r2, r3
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	7919      	ldrb	r1, [r3, #4]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b604:	687a      	ldr	r2, [r7, #4]
 800b606:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b608:	b292      	uxth	r2, r2
 800b60a:	9202      	str	r2, [sp, #8]
 800b60c:	2200      	movs	r2, #0
 800b60e:	9201      	str	r2, [sp, #4]
 800b610:	9300      	str	r3, [sp, #0]
 800b612:	4603      	mov	r3, r0
 800b614:	2280      	movs	r2, #128	; 0x80
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f001 f9da 	bl	800c9d0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	7959      	ldrb	r1, [r3, #5]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b62c:	687a      	ldr	r2, [r7, #4]
 800b62e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b630:	b292      	uxth	r2, r2
 800b632:	9202      	str	r2, [sp, #8]
 800b634:	2200      	movs	r2, #0
 800b636:	9201      	str	r2, [sp, #4]
 800b638:	9300      	str	r3, [sp, #0]
 800b63a:	4603      	mov	r3, r0
 800b63c:	2200      	movs	r2, #0
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f001 f9c6 	bl	800c9d0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b644:	e114      	b.n	800b870 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f000 f918 	bl	800b87c <USBH_HandleEnum>
 800b64c:	4603      	mov	r3, r0
 800b64e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b650:	7bbb      	ldrb	r3, [r7, #14]
 800b652:	b2db      	uxtb	r3, r3
 800b654:	2b00      	cmp	r3, #0
 800b656:	f040 80fe 	bne.w	800b856 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2200      	movs	r2, #0
 800b65e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800b668:	2b01      	cmp	r3, #1
 800b66a:	d103      	bne.n	800b674 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2208      	movs	r2, #8
 800b670:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b672:	e0f0      	b.n	800b856 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2207      	movs	r2, #7
 800b678:	701a      	strb	r2, [r3, #0]
      break;
 800b67a:	e0ec      	b.n	800b856 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b682:	2b00      	cmp	r3, #0
 800b684:	f000 80e9 	beq.w	800b85a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b68e:	2101      	movs	r1, #1
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2208      	movs	r2, #8
 800b698:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800b69a:	e0de      	b.n	800b85a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800b6a2:	b29b      	uxth	r3, r3
 800b6a4:	4619      	mov	r1, r3
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f000 fc2c 	bl	800bf04 <USBH_SetCfg>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	f040 80d5 	bne.w	800b85e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2209      	movs	r2, #9
 800b6b8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b6ba:	e0d0      	b.n	800b85e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800b6c2:	f003 0320 	and.w	r3, r3, #32
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d016      	beq.n	800b6f8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800b6ca:	2101      	movs	r1, #1
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f000 fc3c 	bl	800bf4a <USBH_SetFeature>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b6d6:	7bbb      	ldrb	r3, [r7, #14]
 800b6d8:	b2db      	uxtb	r3, r3
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d103      	bne.n	800b6e6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	220a      	movs	r2, #10
 800b6e2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b6e4:	e0bd      	b.n	800b862 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800b6e6:	7bbb      	ldrb	r3, [r7, #14]
 800b6e8:	b2db      	uxtb	r3, r3
 800b6ea:	2b03      	cmp	r3, #3
 800b6ec:	f040 80b9 	bne.w	800b862 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	220a      	movs	r2, #10
 800b6f4:	701a      	strb	r2, [r3, #0]
      break;
 800b6f6:	e0b4      	b.n	800b862 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	220a      	movs	r2, #10
 800b6fc:	701a      	strb	r2, [r3, #0]
      break;
 800b6fe:	e0b0      	b.n	800b862 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b706:	2b00      	cmp	r3, #0
 800b708:	f000 80ad 	beq.w	800b866 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2200      	movs	r2, #0
 800b710:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b714:	2300      	movs	r3, #0
 800b716:	73fb      	strb	r3, [r7, #15]
 800b718:	e016      	b.n	800b748 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b71a:	7bfa      	ldrb	r2, [r7, #15]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	32de      	adds	r2, #222	; 0xde
 800b720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b724:	791a      	ldrb	r2, [r3, #4]
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800b72c:	429a      	cmp	r2, r3
 800b72e:	d108      	bne.n	800b742 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b730:	7bfa      	ldrb	r2, [r7, #15]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	32de      	adds	r2, #222	; 0xde
 800b736:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800b740:	e005      	b.n	800b74e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b742:	7bfb      	ldrb	r3, [r7, #15]
 800b744:	3301      	adds	r3, #1
 800b746:	73fb      	strb	r3, [r7, #15]
 800b748:	7bfb      	ldrb	r3, [r7, #15]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d0e5      	beq.n	800b71a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b754:	2b00      	cmp	r3, #0
 800b756:	d016      	beq.n	800b786 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b75e:	689b      	ldr	r3, [r3, #8]
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	4798      	blx	r3
 800b764:	4603      	mov	r3, r0
 800b766:	2b00      	cmp	r3, #0
 800b768:	d109      	bne.n	800b77e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2206      	movs	r2, #6
 800b76e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b776:	2103      	movs	r1, #3
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b77c:	e073      	b.n	800b866 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	220d      	movs	r2, #13
 800b782:	701a      	strb	r2, [r3, #0]
      break;
 800b784:	e06f      	b.n	800b866 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	220d      	movs	r2, #13
 800b78a:	701a      	strb	r2, [r3, #0]
      break;
 800b78c:	e06b      	b.n	800b866 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b794:	2b00      	cmp	r3, #0
 800b796:	d017      	beq.n	800b7c8 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b79e:	691b      	ldr	r3, [r3, #16]
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	4798      	blx	r3
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b7a8:	7bbb      	ldrb	r3, [r7, #14]
 800b7aa:	b2db      	uxtb	r3, r3
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d103      	bne.n	800b7b8 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	220b      	movs	r2, #11
 800b7b4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b7b6:	e058      	b.n	800b86a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800b7b8:	7bbb      	ldrb	r3, [r7, #14]
 800b7ba:	b2db      	uxtb	r3, r3
 800b7bc:	2b02      	cmp	r3, #2
 800b7be:	d154      	bne.n	800b86a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	220d      	movs	r2, #13
 800b7c4:	701a      	strb	r2, [r3, #0]
      break;
 800b7c6:	e050      	b.n	800b86a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	220d      	movs	r2, #13
 800b7cc:	701a      	strb	r2, [r3, #0]
      break;
 800b7ce:	e04c      	b.n	800b86a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d049      	beq.n	800b86e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b7e0:	695b      	ldr	r3, [r3, #20]
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	4798      	blx	r3
      }
      break;
 800b7e6:	e042      	b.n	800b86e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f7ff fd67 	bl	800b2c4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d009      	beq.n	800b814 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b806:	68db      	ldr	r3, [r3, #12]
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2200      	movs	r2, #0
 800b810:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d005      	beq.n	800b82a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b824:	2105      	movs	r1, #5
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800b830:	b2db      	uxtb	r3, r3
 800b832:	2b01      	cmp	r3, #1
 800b834:	d107      	bne.n	800b846 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2200      	movs	r2, #0
 800b83a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f7ff fe20 	bl	800b484 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b844:	e014      	b.n	800b870 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f004 fda6 	bl	8010398 <USBH_LL_Start>
      break;
 800b84c:	e010      	b.n	800b870 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800b84e:	bf00      	nop
 800b850:	e00e      	b.n	800b870 <USBH_Process+0x3cc>
      break;
 800b852:	bf00      	nop
 800b854:	e00c      	b.n	800b870 <USBH_Process+0x3cc>
      break;
 800b856:	bf00      	nop
 800b858:	e00a      	b.n	800b870 <USBH_Process+0x3cc>
    break;
 800b85a:	bf00      	nop
 800b85c:	e008      	b.n	800b870 <USBH_Process+0x3cc>
      break;
 800b85e:	bf00      	nop
 800b860:	e006      	b.n	800b870 <USBH_Process+0x3cc>
      break;
 800b862:	bf00      	nop
 800b864:	e004      	b.n	800b870 <USBH_Process+0x3cc>
      break;
 800b866:	bf00      	nop
 800b868:	e002      	b.n	800b870 <USBH_Process+0x3cc>
      break;
 800b86a:	bf00      	nop
 800b86c:	e000      	b.n	800b870 <USBH_Process+0x3cc>
      break;
 800b86e:	bf00      	nop
  }
  return USBH_OK;
 800b870:	2300      	movs	r3, #0
}
 800b872:	4618      	mov	r0, r3
 800b874:	3710      	adds	r7, #16
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}
 800b87a:	bf00      	nop

0800b87c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b088      	sub	sp, #32
 800b880:	af04      	add	r7, sp, #16
 800b882:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b884:	2301      	movs	r3, #1
 800b886:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b888:	2301      	movs	r3, #1
 800b88a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	785b      	ldrb	r3, [r3, #1]
 800b890:	2b07      	cmp	r3, #7
 800b892:	f200 81c1 	bhi.w	800bc18 <USBH_HandleEnum+0x39c>
 800b896:	a201      	add	r2, pc, #4	; (adr r2, 800b89c <USBH_HandleEnum+0x20>)
 800b898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b89c:	0800b8bd 	.word	0x0800b8bd
 800b8a0:	0800b97b 	.word	0x0800b97b
 800b8a4:	0800b9e5 	.word	0x0800b9e5
 800b8a8:	0800ba73 	.word	0x0800ba73
 800b8ac:	0800badd 	.word	0x0800badd
 800b8b0:	0800bb4d 	.word	0x0800bb4d
 800b8b4:	0800bb93 	.word	0x0800bb93
 800b8b8:	0800bbd9 	.word	0x0800bbd9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b8bc:	2108      	movs	r1, #8
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f000 fa50 	bl	800bd64 <USBH_Get_DevDesc>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b8c8:	7bbb      	ldrb	r3, [r7, #14]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d130      	bne.n	800b930 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2201      	movs	r2, #1
 800b8dc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	7919      	ldrb	r1, [r3, #4]
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b8ee:	687a      	ldr	r2, [r7, #4]
 800b8f0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b8f2:	b292      	uxth	r2, r2
 800b8f4:	9202      	str	r2, [sp, #8]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	9201      	str	r2, [sp, #4]
 800b8fa:	9300      	str	r3, [sp, #0]
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	2280      	movs	r2, #128	; 0x80
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f001 f865 	bl	800c9d0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	7959      	ldrb	r1, [r3, #5]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b916:	687a      	ldr	r2, [r7, #4]
 800b918:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b91a:	b292      	uxth	r2, r2
 800b91c:	9202      	str	r2, [sp, #8]
 800b91e:	2200      	movs	r2, #0
 800b920:	9201      	str	r2, [sp, #4]
 800b922:	9300      	str	r3, [sp, #0]
 800b924:	4603      	mov	r3, r0
 800b926:	2200      	movs	r2, #0
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f001 f851 	bl	800c9d0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b92e:	e175      	b.n	800bc1c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b930:	7bbb      	ldrb	r3, [r7, #14]
 800b932:	2b03      	cmp	r3, #3
 800b934:	f040 8172 	bne.w	800bc1c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b93e:	3301      	adds	r3, #1
 800b940:	b2da      	uxtb	r2, r3
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b94e:	2b03      	cmp	r3, #3
 800b950:	d903      	bls.n	800b95a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	220d      	movs	r2, #13
 800b956:	701a      	strb	r2, [r3, #0]
      break;
 800b958:	e160      	b.n	800bc1c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	795b      	ldrb	r3, [r3, #5]
 800b95e:	4619      	mov	r1, r3
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f001 f885 	bl	800ca70 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	791b      	ldrb	r3, [r3, #4]
 800b96a:	4619      	mov	r1, r3
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f001 f87f 	bl	800ca70 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2200      	movs	r2, #0
 800b976:	701a      	strb	r2, [r3, #0]
      break;
 800b978:	e150      	b.n	800bc1c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b97a:	2112      	movs	r1, #18
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f000 f9f1 	bl	800bd64 <USBH_Get_DevDesc>
 800b982:	4603      	mov	r3, r0
 800b984:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b986:	7bbb      	ldrb	r3, [r7, #14]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d103      	bne.n	800b994 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2202      	movs	r2, #2
 800b990:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b992:	e145      	b.n	800bc20 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b994:	7bbb      	ldrb	r3, [r7, #14]
 800b996:	2b03      	cmp	r3, #3
 800b998:	f040 8142 	bne.w	800bc20 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	b2da      	uxtb	r2, r3
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b9b2:	2b03      	cmp	r3, #3
 800b9b4:	d903      	bls.n	800b9be <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	220d      	movs	r2, #13
 800b9ba:	701a      	strb	r2, [r3, #0]
      break;
 800b9bc:	e130      	b.n	800bc20 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	795b      	ldrb	r3, [r3, #5]
 800b9c2:	4619      	mov	r1, r3
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f001 f853 	bl	800ca70 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	791b      	ldrb	r3, [r3, #4]
 800b9ce:	4619      	mov	r1, r3
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f001 f84d 	bl	800ca70 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2200      	movs	r2, #0
 800b9da:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	701a      	strb	r2, [r3, #0]
      break;
 800b9e2:	e11d      	b.n	800bc20 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b9e4:	2101      	movs	r1, #1
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f000 fa68 	bl	800bebc <USBH_SetAddress>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b9f0:	7bbb      	ldrb	r3, [r7, #14]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d132      	bne.n	800ba5c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800b9f6:	2002      	movs	r0, #2
 800b9f8:	f004 fe62 	bl	80106c0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2201      	movs	r2, #1
 800ba00:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2203      	movs	r2, #3
 800ba08:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	7919      	ldrb	r1, [r3, #4]
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ba1a:	687a      	ldr	r2, [r7, #4]
 800ba1c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ba1e:	b292      	uxth	r2, r2
 800ba20:	9202      	str	r2, [sp, #8]
 800ba22:	2200      	movs	r2, #0
 800ba24:	9201      	str	r2, [sp, #4]
 800ba26:	9300      	str	r3, [sp, #0]
 800ba28:	4603      	mov	r3, r0
 800ba2a:	2280      	movs	r2, #128	; 0x80
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f000 ffcf 	bl	800c9d0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	7959      	ldrb	r1, [r3, #5]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ba42:	687a      	ldr	r2, [r7, #4]
 800ba44:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ba46:	b292      	uxth	r2, r2
 800ba48:	9202      	str	r2, [sp, #8]
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	9201      	str	r2, [sp, #4]
 800ba4e:	9300      	str	r3, [sp, #0]
 800ba50:	4603      	mov	r3, r0
 800ba52:	2200      	movs	r2, #0
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f000 ffbb 	bl	800c9d0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ba5a:	e0e3      	b.n	800bc24 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ba5c:	7bbb      	ldrb	r3, [r7, #14]
 800ba5e:	2b03      	cmp	r3, #3
 800ba60:	f040 80e0 	bne.w	800bc24 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	220d      	movs	r2, #13
 800ba68:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	705a      	strb	r2, [r3, #1]
      break;
 800ba70:	e0d8      	b.n	800bc24 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ba72:	2109      	movs	r1, #9
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f000 f99d 	bl	800bdb4 <USBH_Get_CfgDesc>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ba7e:	7bbb      	ldrb	r3, [r7, #14]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d103      	bne.n	800ba8c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2204      	movs	r2, #4
 800ba88:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ba8a:	e0cd      	b.n	800bc28 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ba8c:	7bbb      	ldrb	r3, [r7, #14]
 800ba8e:	2b03      	cmp	r3, #3
 800ba90:	f040 80ca 	bne.w	800bc28 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ba9a:	3301      	adds	r3, #1
 800ba9c:	b2da      	uxtb	r2, r3
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800baaa:	2b03      	cmp	r3, #3
 800baac:	d903      	bls.n	800bab6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	220d      	movs	r2, #13
 800bab2:	701a      	strb	r2, [r3, #0]
      break;
 800bab4:	e0b8      	b.n	800bc28 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	795b      	ldrb	r3, [r3, #5]
 800baba:	4619      	mov	r1, r3
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f000 ffd7 	bl	800ca70 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	791b      	ldrb	r3, [r3, #4]
 800bac6:	4619      	mov	r1, r3
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f000 ffd1 	bl	800ca70 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2200      	movs	r2, #0
 800bad2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2200      	movs	r2, #0
 800bad8:	701a      	strb	r2, [r3, #0]
      break;
 800bada:	e0a5      	b.n	800bc28 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800bae2:	4619      	mov	r1, r3
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f000 f965 	bl	800bdb4 <USBH_Get_CfgDesc>
 800baea:	4603      	mov	r3, r0
 800baec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800baee:	7bbb      	ldrb	r3, [r7, #14]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d103      	bne.n	800bafc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2205      	movs	r2, #5
 800baf8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bafa:	e097      	b.n	800bc2c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bafc:	7bbb      	ldrb	r3, [r7, #14]
 800bafe:	2b03      	cmp	r3, #3
 800bb00:	f040 8094 	bne.w	800bc2c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	b2da      	uxtb	r2, r3
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bb1a:	2b03      	cmp	r3, #3
 800bb1c:	d903      	bls.n	800bb26 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	220d      	movs	r2, #13
 800bb22:	701a      	strb	r2, [r3, #0]
      break;
 800bb24:	e082      	b.n	800bc2c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	795b      	ldrb	r3, [r3, #5]
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f000 ff9f 	bl	800ca70 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	791b      	ldrb	r3, [r3, #4]
 800bb36:	4619      	mov	r1, r3
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f000 ff99 	bl	800ca70 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2200      	movs	r2, #0
 800bb42:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2200      	movs	r2, #0
 800bb48:	701a      	strb	r2, [r3, #0]
      break;
 800bb4a:	e06f      	b.n	800bc2c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d019      	beq.n	800bb8a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800bb62:	23ff      	movs	r3, #255	; 0xff
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f000 f949 	bl	800bdfc <USBH_Get_StringDesc>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bb6e:	7bbb      	ldrb	r3, [r7, #14]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d103      	bne.n	800bb7c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2206      	movs	r2, #6
 800bb78:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bb7a:	e059      	b.n	800bc30 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bb7c:	7bbb      	ldrb	r3, [r7, #14]
 800bb7e:	2b03      	cmp	r3, #3
 800bb80:	d156      	bne.n	800bc30 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2206      	movs	r2, #6
 800bb86:	705a      	strb	r2, [r3, #1]
      break;
 800bb88:	e052      	b.n	800bc30 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2206      	movs	r2, #6
 800bb8e:	705a      	strb	r2, [r3, #1]
      break;
 800bb90:	e04e      	b.n	800bc30 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d019      	beq.n	800bbd0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800bba8:	23ff      	movs	r3, #255	; 0xff
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f000 f926 	bl	800bdfc <USBH_Get_StringDesc>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bbb4:	7bbb      	ldrb	r3, [r7, #14]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d103      	bne.n	800bbc2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2207      	movs	r2, #7
 800bbbe:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bbc0:	e038      	b.n	800bc34 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bbc2:	7bbb      	ldrb	r3, [r7, #14]
 800bbc4:	2b03      	cmp	r3, #3
 800bbc6:	d135      	bne.n	800bc34 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2207      	movs	r2, #7
 800bbcc:	705a      	strb	r2, [r3, #1]
      break;
 800bbce:	e031      	b.n	800bc34 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2207      	movs	r2, #7
 800bbd4:	705a      	strb	r2, [r3, #1]
      break;
 800bbd6:	e02d      	b.n	800bc34 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d017      	beq.n	800bc12 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800bbee:	23ff      	movs	r3, #255	; 0xff
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f000 f903 	bl	800bdfc <USBH_Get_StringDesc>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bbfa:	7bbb      	ldrb	r3, [r7, #14]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d102      	bne.n	800bc06 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800bc00:	2300      	movs	r3, #0
 800bc02:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800bc04:	e018      	b.n	800bc38 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bc06:	7bbb      	ldrb	r3, [r7, #14]
 800bc08:	2b03      	cmp	r3, #3
 800bc0a:	d115      	bne.n	800bc38 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	73fb      	strb	r3, [r7, #15]
      break;
 800bc10:	e012      	b.n	800bc38 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800bc12:	2300      	movs	r3, #0
 800bc14:	73fb      	strb	r3, [r7, #15]
      break;
 800bc16:	e00f      	b.n	800bc38 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800bc18:	bf00      	nop
 800bc1a:	e00e      	b.n	800bc3a <USBH_HandleEnum+0x3be>
      break;
 800bc1c:	bf00      	nop
 800bc1e:	e00c      	b.n	800bc3a <USBH_HandleEnum+0x3be>
      break;
 800bc20:	bf00      	nop
 800bc22:	e00a      	b.n	800bc3a <USBH_HandleEnum+0x3be>
      break;
 800bc24:	bf00      	nop
 800bc26:	e008      	b.n	800bc3a <USBH_HandleEnum+0x3be>
      break;
 800bc28:	bf00      	nop
 800bc2a:	e006      	b.n	800bc3a <USBH_HandleEnum+0x3be>
      break;
 800bc2c:	bf00      	nop
 800bc2e:	e004      	b.n	800bc3a <USBH_HandleEnum+0x3be>
      break;
 800bc30:	bf00      	nop
 800bc32:	e002      	b.n	800bc3a <USBH_HandleEnum+0x3be>
      break;
 800bc34:	bf00      	nop
 800bc36:	e000      	b.n	800bc3a <USBH_HandleEnum+0x3be>
      break;
 800bc38:	bf00      	nop
  }
  return Status;
 800bc3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3710      	adds	r7, #16
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}

0800bc44 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800bc44:	b480      	push	{r7}
 800bc46:	b083      	sub	sp, #12
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	683a      	ldr	r2, [r7, #0]
 800bc52:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800bc56:	bf00      	nop
 800bc58:	370c      	adds	r7, #12
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc60:	4770      	bx	lr

0800bc62 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800bc62:	b580      	push	{r7, lr}
 800bc64:	b082      	sub	sp, #8
 800bc66:	af00      	add	r7, sp, #0
 800bc68:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bc70:	1c5a      	adds	r2, r3, #1
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f000 f804 	bl	800bc86 <USBH_HandleSof>
}
 800bc7e:	bf00      	nop
 800bc80:	3708      	adds	r7, #8
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}

0800bc86 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800bc86:	b580      	push	{r7, lr}
 800bc88:	b082      	sub	sp, #8
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	781b      	ldrb	r3, [r3, #0]
 800bc92:	b2db      	uxtb	r3, r3
 800bc94:	2b0b      	cmp	r3, #11
 800bc96:	d10a      	bne.n	800bcae <USBH_HandleSof+0x28>
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d005      	beq.n	800bcae <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bca8:	699b      	ldr	r3, [r3, #24]
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	4798      	blx	r3
  }
}
 800bcae:	bf00      	nop
 800bcb0:	3708      	adds	r7, #8
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}

0800bcb6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800bcb6:	b480      	push	{r7}
 800bcb8:	b083      	sub	sp, #12
 800bcba:	af00      	add	r7, sp, #0
 800bcbc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2201      	movs	r2, #1
 800bcc2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800bcc6:	bf00      	nop
}
 800bcc8:	370c      	adds	r7, #12
 800bcca:	46bd      	mov	sp, r7
 800bccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd0:	4770      	bx	lr

0800bcd2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800bcd2:	b480      	push	{r7}
 800bcd4:	b083      	sub	sp, #12
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800bce2:	bf00      	nop
}
 800bce4:	370c      	adds	r7, #12
 800bce6:	46bd      	mov	sp, r7
 800bce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcec:	4770      	bx	lr

0800bcee <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800bcee:	b480      	push	{r7}
 800bcf0:	b083      	sub	sp, #12
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2201      	movs	r2, #1
 800bcfa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2200      	movs	r2, #0
 800bd02:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800bd0e:	2300      	movs	r3, #0
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	370c      	adds	r7, #12
 800bd14:	46bd      	mov	sp, r7
 800bd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1a:	4770      	bx	lr

0800bd1c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b082      	sub	sp, #8
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2201      	movs	r2, #1
 800bd28:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2200      	movs	r2, #0
 800bd38:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f004 fb46 	bl	80103ce <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	791b      	ldrb	r3, [r3, #4]
 800bd46:	4619      	mov	r1, r3
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f000 fe91 	bl	800ca70 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	795b      	ldrb	r3, [r3, #5]
 800bd52:	4619      	mov	r1, r3
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f000 fe8b 	bl	800ca70 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800bd5a:	2300      	movs	r3, #0
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3708      	adds	r7, #8
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}

0800bd64 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b086      	sub	sp, #24
 800bd68:	af02      	add	r7, sp, #8
 800bd6a:	6078      	str	r0, [r7, #4]
 800bd6c:	460b      	mov	r3, r1
 800bd6e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800bd76:	78fb      	ldrb	r3, [r7, #3]
 800bd78:	b29b      	uxth	r3, r3
 800bd7a:	9300      	str	r3, [sp, #0]
 800bd7c:	4613      	mov	r3, r2
 800bd7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bd82:	2100      	movs	r1, #0
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f000 f864 	bl	800be52 <USBH_GetDescriptor>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800bd8e:	7bfb      	ldrb	r3, [r7, #15]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d10a      	bne.n	800bdaa <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f203 3026 	addw	r0, r3, #806	; 0x326
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bda0:	78fa      	ldrb	r2, [r7, #3]
 800bda2:	b292      	uxth	r2, r2
 800bda4:	4619      	mov	r1, r3
 800bda6:	f000 f918 	bl	800bfda <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800bdaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3710      	adds	r7, #16
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b086      	sub	sp, #24
 800bdb8:	af02      	add	r7, sp, #8
 800bdba:	6078      	str	r0, [r7, #4]
 800bdbc:	460b      	mov	r3, r1
 800bdbe:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	331c      	adds	r3, #28
 800bdc4:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800bdc6:	887b      	ldrh	r3, [r7, #2]
 800bdc8:	9300      	str	r3, [sp, #0]
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bdd0:	2100      	movs	r1, #0
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f000 f83d 	bl	800be52 <USBH_GetDescriptor>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800bddc:	7bfb      	ldrb	r3, [r7, #15]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d107      	bne.n	800bdf2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800bde2:	887b      	ldrh	r3, [r7, #2]
 800bde4:	461a      	mov	r2, r3
 800bde6:	68b9      	ldr	r1, [r7, #8]
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f000 f987 	bl	800c0fc <USBH_ParseCfgDesc>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bdf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3710      	adds	r7, #16
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}

0800bdfc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b088      	sub	sp, #32
 800be00:	af02      	add	r7, sp, #8
 800be02:	60f8      	str	r0, [r7, #12]
 800be04:	607a      	str	r2, [r7, #4]
 800be06:	461a      	mov	r2, r3
 800be08:	460b      	mov	r3, r1
 800be0a:	72fb      	strb	r3, [r7, #11]
 800be0c:	4613      	mov	r3, r2
 800be0e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800be10:	7afb      	ldrb	r3, [r7, #11]
 800be12:	b29b      	uxth	r3, r3
 800be14:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800be18:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800be20:	893b      	ldrh	r3, [r7, #8]
 800be22:	9300      	str	r3, [sp, #0]
 800be24:	460b      	mov	r3, r1
 800be26:	2100      	movs	r1, #0
 800be28:	68f8      	ldr	r0, [r7, #12]
 800be2a:	f000 f812 	bl	800be52 <USBH_GetDescriptor>
 800be2e:	4603      	mov	r3, r0
 800be30:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800be32:	7dfb      	ldrb	r3, [r7, #23]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d107      	bne.n	800be48 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800be3e:	893a      	ldrh	r2, [r7, #8]
 800be40:	6879      	ldr	r1, [r7, #4]
 800be42:	4618      	mov	r0, r3
 800be44:	f000 fb24 	bl	800c490 <USBH_ParseStringDesc>
  }

  return status;
 800be48:	7dfb      	ldrb	r3, [r7, #23]
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3718      	adds	r7, #24
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}

0800be52 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800be52:	b580      	push	{r7, lr}
 800be54:	b084      	sub	sp, #16
 800be56:	af00      	add	r7, sp, #0
 800be58:	60f8      	str	r0, [r7, #12]
 800be5a:	607b      	str	r3, [r7, #4]
 800be5c:	460b      	mov	r3, r1
 800be5e:	72fb      	strb	r3, [r7, #11]
 800be60:	4613      	mov	r3, r2
 800be62:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	789b      	ldrb	r3, [r3, #2]
 800be68:	2b01      	cmp	r3, #1
 800be6a:	d11c      	bne.n	800bea6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800be6c:	7afb      	ldrb	r3, [r7, #11]
 800be6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800be72:	b2da      	uxtb	r2, r3
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	2206      	movs	r2, #6
 800be7c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	893a      	ldrh	r2, [r7, #8]
 800be82:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800be84:	893b      	ldrh	r3, [r7, #8]
 800be86:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800be8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be8e:	d104      	bne.n	800be9a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	f240 4209 	movw	r2, #1033	; 0x409
 800be96:	829a      	strh	r2, [r3, #20]
 800be98:	e002      	b.n	800bea0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	2200      	movs	r2, #0
 800be9e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	8b3a      	ldrh	r2, [r7, #24]
 800bea4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800bea6:	8b3b      	ldrh	r3, [r7, #24]
 800bea8:	461a      	mov	r2, r3
 800beaa:	6879      	ldr	r1, [r7, #4]
 800beac:	68f8      	ldr	r0, [r7, #12]
 800beae:	f000 fb3d 	bl	800c52c <USBH_CtlReq>
 800beb2:	4603      	mov	r3, r0
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	3710      	adds	r7, #16
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}

0800bebc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b082      	sub	sp, #8
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
 800bec4:	460b      	mov	r3, r1
 800bec6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	789b      	ldrb	r3, [r3, #2]
 800becc:	2b01      	cmp	r3, #1
 800bece:	d10f      	bne.n	800bef0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2200      	movs	r2, #0
 800bed4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2205      	movs	r2, #5
 800beda:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800bedc:	78fb      	ldrb	r3, [r7, #3]
 800bede:	b29a      	uxth	r2, r3
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2200      	movs	r2, #0
 800bee8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2200      	movs	r2, #0
 800beee:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bef0:	2200      	movs	r2, #0
 800bef2:	2100      	movs	r1, #0
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f000 fb19 	bl	800c52c <USBH_CtlReq>
 800befa:	4603      	mov	r3, r0
}
 800befc:	4618      	mov	r0, r3
 800befe:	3708      	adds	r7, #8
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b082      	sub	sp, #8
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	460b      	mov	r3, r1
 800bf0e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	789b      	ldrb	r3, [r3, #2]
 800bf14:	2b01      	cmp	r3, #1
 800bf16:	d10e      	bne.n	800bf36 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2209      	movs	r2, #9
 800bf22:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	887a      	ldrh	r2, [r7, #2]
 800bf28:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2200      	movs	r2, #0
 800bf34:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bf36:	2200      	movs	r2, #0
 800bf38:	2100      	movs	r1, #0
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f000 faf6 	bl	800c52c <USBH_CtlReq>
 800bf40:	4603      	mov	r3, r0
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	3708      	adds	r7, #8
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}

0800bf4a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800bf4a:	b580      	push	{r7, lr}
 800bf4c:	b082      	sub	sp, #8
 800bf4e:	af00      	add	r7, sp, #0
 800bf50:	6078      	str	r0, [r7, #4]
 800bf52:	460b      	mov	r3, r1
 800bf54:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	789b      	ldrb	r3, [r3, #2]
 800bf5a:	2b01      	cmp	r3, #1
 800bf5c:	d10f      	bne.n	800bf7e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2200      	movs	r2, #0
 800bf62:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2203      	movs	r2, #3
 800bf68:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800bf6a:	78fb      	ldrb	r3, [r7, #3]
 800bf6c:	b29a      	uxth	r2, r3
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2200      	movs	r2, #0
 800bf76:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bf7e:	2200      	movs	r2, #0
 800bf80:	2100      	movs	r1, #0
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f000 fad2 	bl	800c52c <USBH_CtlReq>
 800bf88:	4603      	mov	r3, r0
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	3708      	adds	r7, #8
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}

0800bf92 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800bf92:	b580      	push	{r7, lr}
 800bf94:	b082      	sub	sp, #8
 800bf96:	af00      	add	r7, sp, #0
 800bf98:	6078      	str	r0, [r7, #4]
 800bf9a:	460b      	mov	r3, r1
 800bf9c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	789b      	ldrb	r3, [r3, #2]
 800bfa2:	2b01      	cmp	r3, #1
 800bfa4:	d10f      	bne.n	800bfc6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2202      	movs	r2, #2
 800bfaa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2201      	movs	r2, #1
 800bfb0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800bfb8:	78fb      	ldrb	r3, [r7, #3]
 800bfba:	b29a      	uxth	r2, r3
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	2100      	movs	r1, #0
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f000 faae 	bl	800c52c <USBH_CtlReq>
 800bfd0:	4603      	mov	r3, r0
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3708      	adds	r7, #8
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}

0800bfda <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800bfda:	b480      	push	{r7}
 800bfdc:	b085      	sub	sp, #20
 800bfde:	af00      	add	r7, sp, #0
 800bfe0:	60f8      	str	r0, [r7, #12]
 800bfe2:	60b9      	str	r1, [r7, #8]
 800bfe4:	4613      	mov	r3, r2
 800bfe6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	781a      	ldrb	r2, [r3, #0]
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	785a      	ldrb	r2, [r3, #1]
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	3302      	adds	r3, #2
 800bffc:	781b      	ldrb	r3, [r3, #0]
 800bffe:	b29a      	uxth	r2, r3
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	3303      	adds	r3, #3
 800c004:	781b      	ldrb	r3, [r3, #0]
 800c006:	b29b      	uxth	r3, r3
 800c008:	021b      	lsls	r3, r3, #8
 800c00a:	b29b      	uxth	r3, r3
 800c00c:	4313      	orrs	r3, r2
 800c00e:	b29a      	uxth	r2, r3
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	791a      	ldrb	r2, [r3, #4]
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	795a      	ldrb	r2, [r3, #5]
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	799a      	ldrb	r2, [r3, #6]
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	79da      	ldrb	r2, [r3, #7]
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	79db      	ldrb	r3, [r3, #7]
 800c038:	2b20      	cmp	r3, #32
 800c03a:	dc11      	bgt.n	800c060 <USBH_ParseDevDesc+0x86>
 800c03c:	2b08      	cmp	r3, #8
 800c03e:	db16      	blt.n	800c06e <USBH_ParseDevDesc+0x94>
 800c040:	3b08      	subs	r3, #8
 800c042:	2201      	movs	r2, #1
 800c044:	fa02 f303 	lsl.w	r3, r2, r3
 800c048:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800c04c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c050:	2b00      	cmp	r3, #0
 800c052:	bf14      	ite	ne
 800c054:	2301      	movne	r3, #1
 800c056:	2300      	moveq	r3, #0
 800c058:	b2db      	uxtb	r3, r3
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d102      	bne.n	800c064 <USBH_ParseDevDesc+0x8a>
 800c05e:	e006      	b.n	800c06e <USBH_ParseDevDesc+0x94>
 800c060:	2b40      	cmp	r3, #64	; 0x40
 800c062:	d104      	bne.n	800c06e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	79da      	ldrb	r2, [r3, #7]
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	71da      	strb	r2, [r3, #7]
      break;
 800c06c:	e003      	b.n	800c076 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	2240      	movs	r2, #64	; 0x40
 800c072:	71da      	strb	r2, [r3, #7]
      break;
 800c074:	bf00      	nop
  }

  if (length > 8U)
 800c076:	88fb      	ldrh	r3, [r7, #6]
 800c078:	2b08      	cmp	r3, #8
 800c07a:	d939      	bls.n	800c0f0 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	3308      	adds	r3, #8
 800c080:	781b      	ldrb	r3, [r3, #0]
 800c082:	b29a      	uxth	r2, r3
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	3309      	adds	r3, #9
 800c088:	781b      	ldrb	r3, [r3, #0]
 800c08a:	b29b      	uxth	r3, r3
 800c08c:	021b      	lsls	r3, r3, #8
 800c08e:	b29b      	uxth	r3, r3
 800c090:	4313      	orrs	r3, r2
 800c092:	b29a      	uxth	r2, r3
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	330a      	adds	r3, #10
 800c09c:	781b      	ldrb	r3, [r3, #0]
 800c09e:	b29a      	uxth	r2, r3
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	330b      	adds	r3, #11
 800c0a4:	781b      	ldrb	r3, [r3, #0]
 800c0a6:	b29b      	uxth	r3, r3
 800c0a8:	021b      	lsls	r3, r3, #8
 800c0aa:	b29b      	uxth	r3, r3
 800c0ac:	4313      	orrs	r3, r2
 800c0ae:	b29a      	uxth	r2, r3
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	330c      	adds	r3, #12
 800c0b8:	781b      	ldrb	r3, [r3, #0]
 800c0ba:	b29a      	uxth	r2, r3
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	330d      	adds	r3, #13
 800c0c0:	781b      	ldrb	r3, [r3, #0]
 800c0c2:	b29b      	uxth	r3, r3
 800c0c4:	021b      	lsls	r3, r3, #8
 800c0c6:	b29b      	uxth	r3, r3
 800c0c8:	4313      	orrs	r3, r2
 800c0ca:	b29a      	uxth	r2, r3
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800c0d0:	68bb      	ldr	r3, [r7, #8]
 800c0d2:	7b9a      	ldrb	r2, [r3, #14]
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	7bda      	ldrb	r2, [r3, #15]
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	7c1a      	ldrb	r2, [r3, #16]
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	7c5a      	ldrb	r2, [r3, #17]
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	745a      	strb	r2, [r3, #17]
  }
}
 800c0f0:	bf00      	nop
 800c0f2:	3714      	adds	r7, #20
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fa:	4770      	bx	lr

0800c0fc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b08c      	sub	sp, #48	; 0x30
 800c100:	af00      	add	r7, sp, #0
 800c102:	60f8      	str	r0, [r7, #12]
 800c104:	60b9      	str	r1, [r7, #8]
 800c106:	4613      	mov	r3, r2
 800c108:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c110:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800c112:	2300      	movs	r3, #0
 800c114:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c11c:	2300      	movs	r3, #0
 800c11e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800c122:	2300      	movs	r3, #0
 800c124:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	781a      	ldrb	r2, [r3, #0]
 800c130:	6a3b      	ldr	r3, [r7, #32]
 800c132:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	785a      	ldrb	r2, [r3, #1]
 800c138:	6a3b      	ldr	r3, [r7, #32]
 800c13a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	3302      	adds	r3, #2
 800c140:	781b      	ldrb	r3, [r3, #0]
 800c142:	b29a      	uxth	r2, r3
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	3303      	adds	r3, #3
 800c148:	781b      	ldrb	r3, [r3, #0]
 800c14a:	b29b      	uxth	r3, r3
 800c14c:	021b      	lsls	r3, r3, #8
 800c14e:	b29b      	uxth	r3, r3
 800c150:	4313      	orrs	r3, r2
 800c152:	b29b      	uxth	r3, r3
 800c154:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c158:	bf28      	it	cs
 800c15a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800c15e:	b29a      	uxth	r2, r3
 800c160:	6a3b      	ldr	r3, [r7, #32]
 800c162:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	791a      	ldrb	r2, [r3, #4]
 800c168:	6a3b      	ldr	r3, [r7, #32]
 800c16a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	795a      	ldrb	r2, [r3, #5]
 800c170:	6a3b      	ldr	r3, [r7, #32]
 800c172:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	799a      	ldrb	r2, [r3, #6]
 800c178:	6a3b      	ldr	r3, [r7, #32]
 800c17a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	79da      	ldrb	r2, [r3, #7]
 800c180:	6a3b      	ldr	r3, [r7, #32]
 800c182:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	7a1a      	ldrb	r2, [r3, #8]
 800c188:	6a3b      	ldr	r3, [r7, #32]
 800c18a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800c18c:	6a3b      	ldr	r3, [r7, #32]
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	2b09      	cmp	r3, #9
 800c192:	d002      	beq.n	800c19a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800c194:	6a3b      	ldr	r3, [r7, #32]
 800c196:	2209      	movs	r2, #9
 800c198:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c19a:	88fb      	ldrh	r3, [r7, #6]
 800c19c:	2b09      	cmp	r3, #9
 800c19e:	f240 809d 	bls.w	800c2dc <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800c1a2:	2309      	movs	r3, #9
 800c1a4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c1aa:	e081      	b.n	800c2b0 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c1ac:	f107 0316 	add.w	r3, r7, #22
 800c1b0:	4619      	mov	r1, r3
 800c1b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1b4:	f000 f99f 	bl	800c4f6 <USBH_GetNextDesc>
 800c1b8:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800c1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1bc:	785b      	ldrb	r3, [r3, #1]
 800c1be:	2b04      	cmp	r3, #4
 800c1c0:	d176      	bne.n	800c2b0 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800c1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1c4:	781b      	ldrb	r3, [r3, #0]
 800c1c6:	2b09      	cmp	r3, #9
 800c1c8:	d002      	beq.n	800c1d0 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800c1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1cc:	2209      	movs	r2, #9
 800c1ce:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800c1d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1d4:	221a      	movs	r2, #26
 800c1d6:	fb02 f303 	mul.w	r3, r2, r3
 800c1da:	3308      	adds	r3, #8
 800c1dc:	6a3a      	ldr	r2, [r7, #32]
 800c1de:	4413      	add	r3, r2
 800c1e0:	3302      	adds	r3, #2
 800c1e2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c1e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c1e6:	69f8      	ldr	r0, [r7, #28]
 800c1e8:	f000 f87e 	bl	800c2e8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c1f6:	e043      	b.n	800c280 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c1f8:	f107 0316 	add.w	r3, r7, #22
 800c1fc:	4619      	mov	r1, r3
 800c1fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c200:	f000 f979 	bl	800c4f6 <USBH_GetNextDesc>
 800c204:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c208:	785b      	ldrb	r3, [r3, #1]
 800c20a:	2b05      	cmp	r3, #5
 800c20c:	d138      	bne.n	800c280 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800c20e:	69fb      	ldr	r3, [r7, #28]
 800c210:	795b      	ldrb	r3, [r3, #5]
 800c212:	2b01      	cmp	r3, #1
 800c214:	d10f      	bne.n	800c236 <USBH_ParseCfgDesc+0x13a>
 800c216:	69fb      	ldr	r3, [r7, #28]
 800c218:	799b      	ldrb	r3, [r3, #6]
 800c21a:	2b02      	cmp	r3, #2
 800c21c:	d10b      	bne.n	800c236 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c21e:	69fb      	ldr	r3, [r7, #28]
 800c220:	79db      	ldrb	r3, [r3, #7]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d10f      	bne.n	800c246 <USBH_ParseCfgDesc+0x14a>
 800c226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c228:	781b      	ldrb	r3, [r3, #0]
 800c22a:	2b09      	cmp	r3, #9
 800c22c:	d00b      	beq.n	800c246 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800c22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c230:	2209      	movs	r2, #9
 800c232:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c234:	e007      	b.n	800c246 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800c236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c238:	781b      	ldrb	r3, [r3, #0]
 800c23a:	2b07      	cmp	r3, #7
 800c23c:	d004      	beq.n	800c248 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800c23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c240:	2207      	movs	r2, #7
 800c242:	701a      	strb	r2, [r3, #0]
 800c244:	e000      	b.n	800c248 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c246:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c248:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c24c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c250:	3201      	adds	r2, #1
 800c252:	00d2      	lsls	r2, r2, #3
 800c254:	211a      	movs	r1, #26
 800c256:	fb01 f303 	mul.w	r3, r1, r3
 800c25a:	4413      	add	r3, r2
 800c25c:	3308      	adds	r3, #8
 800c25e:	6a3a      	ldr	r2, [r7, #32]
 800c260:	4413      	add	r3, r2
 800c262:	3304      	adds	r3, #4
 800c264:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800c266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c268:	69b9      	ldr	r1, [r7, #24]
 800c26a:	68f8      	ldr	r0, [r7, #12]
 800c26c:	f000 f86b 	bl	800c346 <USBH_ParseEPDesc>
 800c270:	4603      	mov	r3, r0
 800c272:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800c276:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c27a:	3301      	adds	r3, #1
 800c27c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c280:	69fb      	ldr	r3, [r7, #28]
 800c282:	791b      	ldrb	r3, [r3, #4]
 800c284:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c288:	429a      	cmp	r2, r3
 800c28a:	d204      	bcs.n	800c296 <USBH_ParseCfgDesc+0x19a>
 800c28c:	6a3b      	ldr	r3, [r7, #32]
 800c28e:	885a      	ldrh	r2, [r3, #2]
 800c290:	8afb      	ldrh	r3, [r7, #22]
 800c292:	429a      	cmp	r2, r3
 800c294:	d8b0      	bhi.n	800c1f8 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800c296:	69fb      	ldr	r3, [r7, #28]
 800c298:	791b      	ldrb	r3, [r3, #4]
 800c29a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d201      	bcs.n	800c2a6 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800c2a2:	2303      	movs	r3, #3
 800c2a4:	e01c      	b.n	800c2e0 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800c2a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2aa:	3301      	adds	r3, #1
 800c2ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c2b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	d805      	bhi.n	800c2c4 <USBH_ParseCfgDesc+0x1c8>
 800c2b8:	6a3b      	ldr	r3, [r7, #32]
 800c2ba:	885a      	ldrh	r2, [r3, #2]
 800c2bc:	8afb      	ldrh	r3, [r7, #22]
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	f63f af74 	bhi.w	800c1ac <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800c2c4:	6a3b      	ldr	r3, [r7, #32]
 800c2c6:	791b      	ldrb	r3, [r3, #4]
 800c2c8:	2b02      	cmp	r3, #2
 800c2ca:	bf28      	it	cs
 800c2cc:	2302      	movcs	r3, #2
 800c2ce:	b2db      	uxtb	r3, r3
 800c2d0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	d201      	bcs.n	800c2dc <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800c2d8:	2303      	movs	r3, #3
 800c2da:	e001      	b.n	800c2e0 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800c2dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	3730      	adds	r7, #48	; 0x30
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}

0800c2e8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b083      	sub	sp, #12
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
 800c2f0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	781a      	ldrb	r2, [r3, #0]
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	785a      	ldrb	r2, [r3, #1]
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	789a      	ldrb	r2, [r3, #2]
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	78da      	ldrb	r2, [r3, #3]
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	791a      	ldrb	r2, [r3, #4]
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	795a      	ldrb	r2, [r3, #5]
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	799a      	ldrb	r2, [r3, #6]
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	79da      	ldrb	r2, [r3, #7]
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	7a1a      	ldrb	r2, [r3, #8]
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	721a      	strb	r2, [r3, #8]
}
 800c33a:	bf00      	nop
 800c33c:	370c      	adds	r7, #12
 800c33e:	46bd      	mov	sp, r7
 800c340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c344:	4770      	bx	lr

0800c346 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800c346:	b480      	push	{r7}
 800c348:	b087      	sub	sp, #28
 800c34a:	af00      	add	r7, sp, #0
 800c34c:	60f8      	str	r0, [r7, #12]
 800c34e:	60b9      	str	r1, [r7, #8]
 800c350:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800c352:	2300      	movs	r3, #0
 800c354:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	781a      	ldrb	r2, [r3, #0]
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	785a      	ldrb	r2, [r3, #1]
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	789a      	ldrb	r2, [r3, #2]
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	78da      	ldrb	r2, [r3, #3]
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	3304      	adds	r3, #4
 800c37a:	781b      	ldrb	r3, [r3, #0]
 800c37c:	b29a      	uxth	r2, r3
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	3305      	adds	r3, #5
 800c382:	781b      	ldrb	r3, [r3, #0]
 800c384:	b29b      	uxth	r3, r3
 800c386:	021b      	lsls	r3, r3, #8
 800c388:	b29b      	uxth	r3, r3
 800c38a:	4313      	orrs	r3, r2
 800c38c:	b29a      	uxth	r2, r3
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	799a      	ldrb	r2, [r3, #6]
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	889b      	ldrh	r3, [r3, #4]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d102      	bne.n	800c3a8 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800c3a2:	2303      	movs	r3, #3
 800c3a4:	75fb      	strb	r3, [r7, #23]
 800c3a6:	e033      	b.n	800c410 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	889b      	ldrh	r3, [r3, #4]
 800c3ac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c3b0:	f023 0307 	bic.w	r3, r3, #7
 800c3b4:	b29a      	uxth	r2, r3
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	889b      	ldrh	r3, [r3, #4]
 800c3be:	b21a      	sxth	r2, r3
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	3304      	adds	r3, #4
 800c3c4:	781b      	ldrb	r3, [r3, #0]
 800c3c6:	b299      	uxth	r1, r3
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	3305      	adds	r3, #5
 800c3cc:	781b      	ldrb	r3, [r3, #0]
 800c3ce:	b29b      	uxth	r3, r3
 800c3d0:	021b      	lsls	r3, r3, #8
 800c3d2:	b29b      	uxth	r3, r3
 800c3d4:	430b      	orrs	r3, r1
 800c3d6:	b29b      	uxth	r3, r3
 800c3d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d110      	bne.n	800c402 <USBH_ParseEPDesc+0xbc>
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	3304      	adds	r3, #4
 800c3e4:	781b      	ldrb	r3, [r3, #0]
 800c3e6:	b299      	uxth	r1, r3
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	3305      	adds	r3, #5
 800c3ec:	781b      	ldrb	r3, [r3, #0]
 800c3ee:	b29b      	uxth	r3, r3
 800c3f0:	021b      	lsls	r3, r3, #8
 800c3f2:	b29b      	uxth	r3, r3
 800c3f4:	430b      	orrs	r3, r1
 800c3f6:	b29b      	uxth	r3, r3
 800c3f8:	b21b      	sxth	r3, r3
 800c3fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c3fe:	b21b      	sxth	r3, r3
 800c400:	e001      	b.n	800c406 <USBH_ParseEPDesc+0xc0>
 800c402:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c406:	4313      	orrs	r3, r2
 800c408:	b21b      	sxth	r3, r3
 800c40a:	b29a      	uxth	r2, r3
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c416:	2b00      	cmp	r3, #0
 800c418:	d116      	bne.n	800c448 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	78db      	ldrb	r3, [r3, #3]
 800c41e:	f003 0303 	and.w	r3, r3, #3
 800c422:	2b01      	cmp	r3, #1
 800c424:	d005      	beq.n	800c432 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	78db      	ldrb	r3, [r3, #3]
 800c42a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c42e:	2b03      	cmp	r3, #3
 800c430:	d127      	bne.n	800c482 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	799b      	ldrb	r3, [r3, #6]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d003      	beq.n	800c442 <USBH_ParseEPDesc+0xfc>
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	799b      	ldrb	r3, [r3, #6]
 800c43e:	2b10      	cmp	r3, #16
 800c440:	d91f      	bls.n	800c482 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800c442:	2303      	movs	r3, #3
 800c444:	75fb      	strb	r3, [r7, #23]
 800c446:	e01c      	b.n	800c482 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	78db      	ldrb	r3, [r3, #3]
 800c44c:	f003 0303 	and.w	r3, r3, #3
 800c450:	2b01      	cmp	r3, #1
 800c452:	d10a      	bne.n	800c46a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	799b      	ldrb	r3, [r3, #6]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d003      	beq.n	800c464 <USBH_ParseEPDesc+0x11e>
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	799b      	ldrb	r3, [r3, #6]
 800c460:	2b10      	cmp	r3, #16
 800c462:	d90e      	bls.n	800c482 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800c464:	2303      	movs	r3, #3
 800c466:	75fb      	strb	r3, [r7, #23]
 800c468:	e00b      	b.n	800c482 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	78db      	ldrb	r3, [r3, #3]
 800c46e:	f003 0303 	and.w	r3, r3, #3
 800c472:	2b03      	cmp	r3, #3
 800c474:	d105      	bne.n	800c482 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	799b      	ldrb	r3, [r3, #6]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d101      	bne.n	800c482 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800c47e:	2303      	movs	r3, #3
 800c480:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800c482:	7dfb      	ldrb	r3, [r7, #23]
}
 800c484:	4618      	mov	r0, r3
 800c486:	371c      	adds	r7, #28
 800c488:	46bd      	mov	sp, r7
 800c48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48e:	4770      	bx	lr

0800c490 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c490:	b480      	push	{r7}
 800c492:	b087      	sub	sp, #28
 800c494:	af00      	add	r7, sp, #0
 800c496:	60f8      	str	r0, [r7, #12]
 800c498:	60b9      	str	r1, [r7, #8]
 800c49a:	4613      	mov	r3, r2
 800c49c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	3301      	adds	r3, #1
 800c4a2:	781b      	ldrb	r3, [r3, #0]
 800c4a4:	2b03      	cmp	r3, #3
 800c4a6:	d120      	bne.n	800c4ea <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	781b      	ldrb	r3, [r3, #0]
 800c4ac:	1e9a      	subs	r2, r3, #2
 800c4ae:	88fb      	ldrh	r3, [r7, #6]
 800c4b0:	4293      	cmp	r3, r2
 800c4b2:	bf28      	it	cs
 800c4b4:	4613      	movcs	r3, r2
 800c4b6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	3302      	adds	r3, #2
 800c4bc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c4be:	2300      	movs	r3, #0
 800c4c0:	82fb      	strh	r3, [r7, #22]
 800c4c2:	e00b      	b.n	800c4dc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c4c4:	8afb      	ldrh	r3, [r7, #22]
 800c4c6:	68fa      	ldr	r2, [r7, #12]
 800c4c8:	4413      	add	r3, r2
 800c4ca:	781a      	ldrb	r2, [r3, #0]
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c4d0:	68bb      	ldr	r3, [r7, #8]
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c4d6:	8afb      	ldrh	r3, [r7, #22]
 800c4d8:	3302      	adds	r3, #2
 800c4da:	82fb      	strh	r3, [r7, #22]
 800c4dc:	8afa      	ldrh	r2, [r7, #22]
 800c4de:	8abb      	ldrh	r3, [r7, #20]
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d3ef      	bcc.n	800c4c4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	701a      	strb	r2, [r3, #0]
  }
}
 800c4ea:	bf00      	nop
 800c4ec:	371c      	adds	r7, #28
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f4:	4770      	bx	lr

0800c4f6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800c4f6:	b480      	push	{r7}
 800c4f8:	b085      	sub	sp, #20
 800c4fa:	af00      	add	r7, sp, #0
 800c4fc:	6078      	str	r0, [r7, #4]
 800c4fe:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	881a      	ldrh	r2, [r3, #0]
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	781b      	ldrb	r3, [r3, #0]
 800c508:	b29b      	uxth	r3, r3
 800c50a:	4413      	add	r3, r2
 800c50c:	b29a      	uxth	r2, r3
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	781b      	ldrb	r3, [r3, #0]
 800c516:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	4413      	add	r3, r2
 800c51c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c51e:	68fb      	ldr	r3, [r7, #12]
}
 800c520:	4618      	mov	r0, r3
 800c522:	3714      	adds	r7, #20
 800c524:	46bd      	mov	sp, r7
 800c526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52a:	4770      	bx	lr

0800c52c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b086      	sub	sp, #24
 800c530:	af00      	add	r7, sp, #0
 800c532:	60f8      	str	r0, [r7, #12]
 800c534:	60b9      	str	r1, [r7, #8]
 800c536:	4613      	mov	r3, r2
 800c538:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c53a:	2301      	movs	r3, #1
 800c53c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	789b      	ldrb	r3, [r3, #2]
 800c542:	2b01      	cmp	r3, #1
 800c544:	d002      	beq.n	800c54c <USBH_CtlReq+0x20>
 800c546:	2b02      	cmp	r3, #2
 800c548:	d00f      	beq.n	800c56a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800c54a:	e027      	b.n	800c59c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	68ba      	ldr	r2, [r7, #8]
 800c550:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	88fa      	ldrh	r2, [r7, #6]
 800c556:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	2201      	movs	r2, #1
 800c55c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	2202      	movs	r2, #2
 800c562:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c564:	2301      	movs	r3, #1
 800c566:	75fb      	strb	r3, [r7, #23]
      break;
 800c568:	e018      	b.n	800c59c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800c56a:	68f8      	ldr	r0, [r7, #12]
 800c56c:	f000 f81c 	bl	800c5a8 <USBH_HandleControl>
 800c570:	4603      	mov	r3, r0
 800c572:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c574:	7dfb      	ldrb	r3, [r7, #23]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d002      	beq.n	800c580 <USBH_CtlReq+0x54>
 800c57a:	7dfb      	ldrb	r3, [r7, #23]
 800c57c:	2b03      	cmp	r3, #3
 800c57e:	d106      	bne.n	800c58e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	2201      	movs	r2, #1
 800c584:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	2200      	movs	r2, #0
 800c58a:	761a      	strb	r2, [r3, #24]
      break;
 800c58c:	e005      	b.n	800c59a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800c58e:	7dfb      	ldrb	r3, [r7, #23]
 800c590:	2b02      	cmp	r3, #2
 800c592:	d102      	bne.n	800c59a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	2201      	movs	r2, #1
 800c598:	709a      	strb	r2, [r3, #2]
      break;
 800c59a:	bf00      	nop
  }
  return status;
 800c59c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3718      	adds	r7, #24
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
	...

0800c5a8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b086      	sub	sp, #24
 800c5ac:	af02      	add	r7, sp, #8
 800c5ae:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	7e1b      	ldrb	r3, [r3, #24]
 800c5bc:	3b01      	subs	r3, #1
 800c5be:	2b0a      	cmp	r3, #10
 800c5c0:	f200 8156 	bhi.w	800c870 <USBH_HandleControl+0x2c8>
 800c5c4:	a201      	add	r2, pc, #4	; (adr r2, 800c5cc <USBH_HandleControl+0x24>)
 800c5c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5ca:	bf00      	nop
 800c5cc:	0800c5f9 	.word	0x0800c5f9
 800c5d0:	0800c613 	.word	0x0800c613
 800c5d4:	0800c67d 	.word	0x0800c67d
 800c5d8:	0800c6a3 	.word	0x0800c6a3
 800c5dc:	0800c6db 	.word	0x0800c6db
 800c5e0:	0800c705 	.word	0x0800c705
 800c5e4:	0800c757 	.word	0x0800c757
 800c5e8:	0800c779 	.word	0x0800c779
 800c5ec:	0800c7b5 	.word	0x0800c7b5
 800c5f0:	0800c7db 	.word	0x0800c7db
 800c5f4:	0800c819 	.word	0x0800c819
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f103 0110 	add.w	r1, r3, #16
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	795b      	ldrb	r3, [r3, #5]
 800c602:	461a      	mov	r2, r3
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f000 f943 	bl	800c890 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2202      	movs	r2, #2
 800c60e:	761a      	strb	r2, [r3, #24]
      break;
 800c610:	e139      	b.n	800c886 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	795b      	ldrb	r3, [r3, #5]
 800c616:	4619      	mov	r1, r3
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	f003 ffc7 	bl	80105ac <USBH_LL_GetURBState>
 800c61e:	4603      	mov	r3, r0
 800c620:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c622:	7bbb      	ldrb	r3, [r7, #14]
 800c624:	2b01      	cmp	r3, #1
 800c626:	d11e      	bne.n	800c666 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	7c1b      	ldrb	r3, [r3, #16]
 800c62c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c630:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	8adb      	ldrh	r3, [r3, #22]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d00a      	beq.n	800c650 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c63a:	7b7b      	ldrb	r3, [r7, #13]
 800c63c:	2b80      	cmp	r3, #128	; 0x80
 800c63e:	d103      	bne.n	800c648 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2203      	movs	r2, #3
 800c644:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c646:	e115      	b.n	800c874 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2205      	movs	r2, #5
 800c64c:	761a      	strb	r2, [r3, #24]
      break;
 800c64e:	e111      	b.n	800c874 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800c650:	7b7b      	ldrb	r3, [r7, #13]
 800c652:	2b80      	cmp	r3, #128	; 0x80
 800c654:	d103      	bne.n	800c65e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2209      	movs	r2, #9
 800c65a:	761a      	strb	r2, [r3, #24]
      break;
 800c65c:	e10a      	b.n	800c874 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2207      	movs	r2, #7
 800c662:	761a      	strb	r2, [r3, #24]
      break;
 800c664:	e106      	b.n	800c874 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c666:	7bbb      	ldrb	r3, [r7, #14]
 800c668:	2b04      	cmp	r3, #4
 800c66a:	d003      	beq.n	800c674 <USBH_HandleControl+0xcc>
 800c66c:	7bbb      	ldrb	r3, [r7, #14]
 800c66e:	2b02      	cmp	r3, #2
 800c670:	f040 8100 	bne.w	800c874 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	220b      	movs	r2, #11
 800c678:	761a      	strb	r2, [r3, #24]
      break;
 800c67a:	e0fb      	b.n	800c874 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c682:	b29a      	uxth	r2, r3
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6899      	ldr	r1, [r3, #8]
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	899a      	ldrh	r2, [r3, #12]
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	791b      	ldrb	r3, [r3, #4]
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f000 f93a 	bl	800c90e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2204      	movs	r2, #4
 800c69e:	761a      	strb	r2, [r3, #24]
      break;
 800c6a0:	e0f1      	b.n	800c886 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	791b      	ldrb	r3, [r3, #4]
 800c6a6:	4619      	mov	r1, r3
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f003 ff7f 	bl	80105ac <USBH_LL_GetURBState>
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c6b2:	7bbb      	ldrb	r3, [r7, #14]
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	d102      	bne.n	800c6be <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2209      	movs	r2, #9
 800c6bc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c6be:	7bbb      	ldrb	r3, [r7, #14]
 800c6c0:	2b05      	cmp	r3, #5
 800c6c2:	d102      	bne.n	800c6ca <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c6c4:	2303      	movs	r3, #3
 800c6c6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c6c8:	e0d6      	b.n	800c878 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800c6ca:	7bbb      	ldrb	r3, [r7, #14]
 800c6cc:	2b04      	cmp	r3, #4
 800c6ce:	f040 80d3 	bne.w	800c878 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	220b      	movs	r2, #11
 800c6d6:	761a      	strb	r2, [r3, #24]
      break;
 800c6d8:	e0ce      	b.n	800c878 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	6899      	ldr	r1, [r3, #8]
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	899a      	ldrh	r2, [r3, #12]
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	795b      	ldrb	r3, [r3, #5]
 800c6e6:	2001      	movs	r0, #1
 800c6e8:	9000      	str	r0, [sp, #0]
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f000 f8ea 	bl	800c8c4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c6f6:	b29a      	uxth	r2, r3
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2206      	movs	r2, #6
 800c700:	761a      	strb	r2, [r3, #24]
      break;
 800c702:	e0c0      	b.n	800c886 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	795b      	ldrb	r3, [r3, #5]
 800c708:	4619      	mov	r1, r3
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f003 ff4e 	bl	80105ac <USBH_LL_GetURBState>
 800c710:	4603      	mov	r3, r0
 800c712:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c714:	7bbb      	ldrb	r3, [r7, #14]
 800c716:	2b01      	cmp	r3, #1
 800c718:	d103      	bne.n	800c722 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	2207      	movs	r2, #7
 800c71e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c720:	e0ac      	b.n	800c87c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800c722:	7bbb      	ldrb	r3, [r7, #14]
 800c724:	2b05      	cmp	r3, #5
 800c726:	d105      	bne.n	800c734 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	220c      	movs	r2, #12
 800c72c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c72e:	2303      	movs	r3, #3
 800c730:	73fb      	strb	r3, [r7, #15]
      break;
 800c732:	e0a3      	b.n	800c87c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c734:	7bbb      	ldrb	r3, [r7, #14]
 800c736:	2b02      	cmp	r3, #2
 800c738:	d103      	bne.n	800c742 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2205      	movs	r2, #5
 800c73e:	761a      	strb	r2, [r3, #24]
      break;
 800c740:	e09c      	b.n	800c87c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800c742:	7bbb      	ldrb	r3, [r7, #14]
 800c744:	2b04      	cmp	r3, #4
 800c746:	f040 8099 	bne.w	800c87c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	220b      	movs	r2, #11
 800c74e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c750:	2302      	movs	r3, #2
 800c752:	73fb      	strb	r3, [r7, #15]
      break;
 800c754:	e092      	b.n	800c87c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	791b      	ldrb	r3, [r3, #4]
 800c75a:	2200      	movs	r2, #0
 800c75c:	2100      	movs	r1, #0
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f000 f8d5 	bl	800c90e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c76a:	b29a      	uxth	r2, r3
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2208      	movs	r2, #8
 800c774:	761a      	strb	r2, [r3, #24]

      break;
 800c776:	e086      	b.n	800c886 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	791b      	ldrb	r3, [r3, #4]
 800c77c:	4619      	mov	r1, r3
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f003 ff14 	bl	80105ac <USBH_LL_GetURBState>
 800c784:	4603      	mov	r3, r0
 800c786:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c788:	7bbb      	ldrb	r3, [r7, #14]
 800c78a:	2b01      	cmp	r3, #1
 800c78c:	d105      	bne.n	800c79a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	220d      	movs	r2, #13
 800c792:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c794:	2300      	movs	r3, #0
 800c796:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c798:	e072      	b.n	800c880 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800c79a:	7bbb      	ldrb	r3, [r7, #14]
 800c79c:	2b04      	cmp	r3, #4
 800c79e:	d103      	bne.n	800c7a8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	220b      	movs	r2, #11
 800c7a4:	761a      	strb	r2, [r3, #24]
      break;
 800c7a6:	e06b      	b.n	800c880 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800c7a8:	7bbb      	ldrb	r3, [r7, #14]
 800c7aa:	2b05      	cmp	r3, #5
 800c7ac:	d168      	bne.n	800c880 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800c7ae:	2303      	movs	r3, #3
 800c7b0:	73fb      	strb	r3, [r7, #15]
      break;
 800c7b2:	e065      	b.n	800c880 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	795b      	ldrb	r3, [r3, #5]
 800c7b8:	2201      	movs	r2, #1
 800c7ba:	9200      	str	r2, [sp, #0]
 800c7bc:	2200      	movs	r2, #0
 800c7be:	2100      	movs	r1, #0
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f000 f87f 	bl	800c8c4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c7cc:	b29a      	uxth	r2, r3
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	220a      	movs	r2, #10
 800c7d6:	761a      	strb	r2, [r3, #24]
      break;
 800c7d8:	e055      	b.n	800c886 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	795b      	ldrb	r3, [r3, #5]
 800c7de:	4619      	mov	r1, r3
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f003 fee3 	bl	80105ac <USBH_LL_GetURBState>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c7ea:	7bbb      	ldrb	r3, [r7, #14]
 800c7ec:	2b01      	cmp	r3, #1
 800c7ee:	d105      	bne.n	800c7fc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	220d      	movs	r2, #13
 800c7f8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c7fa:	e043      	b.n	800c884 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c7fc:	7bbb      	ldrb	r3, [r7, #14]
 800c7fe:	2b02      	cmp	r3, #2
 800c800:	d103      	bne.n	800c80a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2209      	movs	r2, #9
 800c806:	761a      	strb	r2, [r3, #24]
      break;
 800c808:	e03c      	b.n	800c884 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800c80a:	7bbb      	ldrb	r3, [r7, #14]
 800c80c:	2b04      	cmp	r3, #4
 800c80e:	d139      	bne.n	800c884 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	220b      	movs	r2, #11
 800c814:	761a      	strb	r2, [r3, #24]
      break;
 800c816:	e035      	b.n	800c884 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	7e5b      	ldrb	r3, [r3, #25]
 800c81c:	3301      	adds	r3, #1
 800c81e:	b2da      	uxtb	r2, r3
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	765a      	strb	r2, [r3, #25]
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	7e5b      	ldrb	r3, [r3, #25]
 800c828:	2b02      	cmp	r3, #2
 800c82a:	d806      	bhi.n	800c83a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2201      	movs	r2, #1
 800c830:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2201      	movs	r2, #1
 800c836:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c838:	e025      	b.n	800c886 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c840:	2106      	movs	r1, #6
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2200      	movs	r2, #0
 800c84a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	795b      	ldrb	r3, [r3, #5]
 800c850:	4619      	mov	r1, r3
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f000 f90c 	bl	800ca70 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	791b      	ldrb	r3, [r3, #4]
 800c85c:	4619      	mov	r1, r3
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f000 f906 	bl	800ca70 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2200      	movs	r2, #0
 800c868:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c86a:	2302      	movs	r3, #2
 800c86c:	73fb      	strb	r3, [r7, #15]
      break;
 800c86e:	e00a      	b.n	800c886 <USBH_HandleControl+0x2de>

    default:
      break;
 800c870:	bf00      	nop
 800c872:	e008      	b.n	800c886 <USBH_HandleControl+0x2de>
      break;
 800c874:	bf00      	nop
 800c876:	e006      	b.n	800c886 <USBH_HandleControl+0x2de>
      break;
 800c878:	bf00      	nop
 800c87a:	e004      	b.n	800c886 <USBH_HandleControl+0x2de>
      break;
 800c87c:	bf00      	nop
 800c87e:	e002      	b.n	800c886 <USBH_HandleControl+0x2de>
      break;
 800c880:	bf00      	nop
 800c882:	e000      	b.n	800c886 <USBH_HandleControl+0x2de>
      break;
 800c884:	bf00      	nop
  }

  return status;
 800c886:	7bfb      	ldrb	r3, [r7, #15]
}
 800c888:	4618      	mov	r0, r3
 800c88a:	3710      	adds	r7, #16
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}

0800c890 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b088      	sub	sp, #32
 800c894:	af04      	add	r7, sp, #16
 800c896:	60f8      	str	r0, [r7, #12]
 800c898:	60b9      	str	r1, [r7, #8]
 800c89a:	4613      	mov	r3, r2
 800c89c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c89e:	79f9      	ldrb	r1, [r7, #7]
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	9303      	str	r3, [sp, #12]
 800c8a4:	2308      	movs	r3, #8
 800c8a6:	9302      	str	r3, [sp, #8]
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	9301      	str	r3, [sp, #4]
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	9300      	str	r3, [sp, #0]
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	68f8      	ldr	r0, [r7, #12]
 800c8b6:	f003 fe48 	bl	801054a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800c8ba:	2300      	movs	r3, #0
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3710      	adds	r7, #16
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}

0800c8c4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b088      	sub	sp, #32
 800c8c8:	af04      	add	r7, sp, #16
 800c8ca:	60f8      	str	r0, [r7, #12]
 800c8cc:	60b9      	str	r1, [r7, #8]
 800c8ce:	4611      	mov	r1, r2
 800c8d0:	461a      	mov	r2, r3
 800c8d2:	460b      	mov	r3, r1
 800c8d4:	80fb      	strh	r3, [r7, #6]
 800c8d6:	4613      	mov	r3, r2
 800c8d8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d001      	beq.n	800c8e8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c8e8:	7979      	ldrb	r1, [r7, #5]
 800c8ea:	7e3b      	ldrb	r3, [r7, #24]
 800c8ec:	9303      	str	r3, [sp, #12]
 800c8ee:	88fb      	ldrh	r3, [r7, #6]
 800c8f0:	9302      	str	r3, [sp, #8]
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	9301      	str	r3, [sp, #4]
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	9300      	str	r3, [sp, #0]
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	68f8      	ldr	r0, [r7, #12]
 800c900:	f003 fe23 	bl	801054a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c904:	2300      	movs	r3, #0
}
 800c906:	4618      	mov	r0, r3
 800c908:	3710      	adds	r7, #16
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}

0800c90e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c90e:	b580      	push	{r7, lr}
 800c910:	b088      	sub	sp, #32
 800c912:	af04      	add	r7, sp, #16
 800c914:	60f8      	str	r0, [r7, #12]
 800c916:	60b9      	str	r1, [r7, #8]
 800c918:	4611      	mov	r1, r2
 800c91a:	461a      	mov	r2, r3
 800c91c:	460b      	mov	r3, r1
 800c91e:	80fb      	strh	r3, [r7, #6]
 800c920:	4613      	mov	r3, r2
 800c922:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c924:	7979      	ldrb	r1, [r7, #5]
 800c926:	2300      	movs	r3, #0
 800c928:	9303      	str	r3, [sp, #12]
 800c92a:	88fb      	ldrh	r3, [r7, #6]
 800c92c:	9302      	str	r3, [sp, #8]
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	9301      	str	r3, [sp, #4]
 800c932:	2301      	movs	r3, #1
 800c934:	9300      	str	r3, [sp, #0]
 800c936:	2300      	movs	r3, #0
 800c938:	2201      	movs	r2, #1
 800c93a:	68f8      	ldr	r0, [r7, #12]
 800c93c:	f003 fe05 	bl	801054a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c940:	2300      	movs	r3, #0

}
 800c942:	4618      	mov	r0, r3
 800c944:	3710      	adds	r7, #16
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}

0800c94a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c94a:	b580      	push	{r7, lr}
 800c94c:	b088      	sub	sp, #32
 800c94e:	af04      	add	r7, sp, #16
 800c950:	60f8      	str	r0, [r7, #12]
 800c952:	60b9      	str	r1, [r7, #8]
 800c954:	4611      	mov	r1, r2
 800c956:	461a      	mov	r2, r3
 800c958:	460b      	mov	r3, r1
 800c95a:	80fb      	strh	r3, [r7, #6]
 800c95c:	4613      	mov	r3, r2
 800c95e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c966:	2b00      	cmp	r3, #0
 800c968:	d001      	beq.n	800c96e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c96a:	2300      	movs	r3, #0
 800c96c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c96e:	7979      	ldrb	r1, [r7, #5]
 800c970:	7e3b      	ldrb	r3, [r7, #24]
 800c972:	9303      	str	r3, [sp, #12]
 800c974:	88fb      	ldrh	r3, [r7, #6]
 800c976:	9302      	str	r3, [sp, #8]
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	9301      	str	r3, [sp, #4]
 800c97c:	2301      	movs	r3, #1
 800c97e:	9300      	str	r3, [sp, #0]
 800c980:	2302      	movs	r3, #2
 800c982:	2200      	movs	r2, #0
 800c984:	68f8      	ldr	r0, [r7, #12]
 800c986:	f003 fde0 	bl	801054a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c98a:	2300      	movs	r3, #0
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	3710      	adds	r7, #16
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}

0800c994 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b088      	sub	sp, #32
 800c998:	af04      	add	r7, sp, #16
 800c99a:	60f8      	str	r0, [r7, #12]
 800c99c:	60b9      	str	r1, [r7, #8]
 800c99e:	4611      	mov	r1, r2
 800c9a0:	461a      	mov	r2, r3
 800c9a2:	460b      	mov	r3, r1
 800c9a4:	80fb      	strh	r3, [r7, #6]
 800c9a6:	4613      	mov	r3, r2
 800c9a8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c9aa:	7979      	ldrb	r1, [r7, #5]
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	9303      	str	r3, [sp, #12]
 800c9b0:	88fb      	ldrh	r3, [r7, #6]
 800c9b2:	9302      	str	r3, [sp, #8]
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	9301      	str	r3, [sp, #4]
 800c9b8:	2301      	movs	r3, #1
 800c9ba:	9300      	str	r3, [sp, #0]
 800c9bc:	2302      	movs	r3, #2
 800c9be:	2201      	movs	r2, #1
 800c9c0:	68f8      	ldr	r0, [r7, #12]
 800c9c2:	f003 fdc2 	bl	801054a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c9c6:	2300      	movs	r3, #0
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	3710      	adds	r7, #16
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}

0800c9d0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b086      	sub	sp, #24
 800c9d4:	af04      	add	r7, sp, #16
 800c9d6:	6078      	str	r0, [r7, #4]
 800c9d8:	4608      	mov	r0, r1
 800c9da:	4611      	mov	r1, r2
 800c9dc:	461a      	mov	r2, r3
 800c9de:	4603      	mov	r3, r0
 800c9e0:	70fb      	strb	r3, [r7, #3]
 800c9e2:	460b      	mov	r3, r1
 800c9e4:	70bb      	strb	r3, [r7, #2]
 800c9e6:	4613      	mov	r3, r2
 800c9e8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c9ea:	7878      	ldrb	r0, [r7, #1]
 800c9ec:	78ba      	ldrb	r2, [r7, #2]
 800c9ee:	78f9      	ldrb	r1, [r7, #3]
 800c9f0:	8b3b      	ldrh	r3, [r7, #24]
 800c9f2:	9302      	str	r3, [sp, #8]
 800c9f4:	7d3b      	ldrb	r3, [r7, #20]
 800c9f6:	9301      	str	r3, [sp, #4]
 800c9f8:	7c3b      	ldrb	r3, [r7, #16]
 800c9fa:	9300      	str	r3, [sp, #0]
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f003 fd55 	bl	80104ae <USBH_LL_OpenPipe>

  return USBH_OK;
 800ca04:	2300      	movs	r3, #0
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	3708      	adds	r7, #8
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}

0800ca0e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ca0e:	b580      	push	{r7, lr}
 800ca10:	b082      	sub	sp, #8
 800ca12:	af00      	add	r7, sp, #0
 800ca14:	6078      	str	r0, [r7, #4]
 800ca16:	460b      	mov	r3, r1
 800ca18:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800ca1a:	78fb      	ldrb	r3, [r7, #3]
 800ca1c:	4619      	mov	r1, r3
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f003 fd74 	bl	801050c <USBH_LL_ClosePipe>

  return USBH_OK;
 800ca24:	2300      	movs	r3, #0
}
 800ca26:	4618      	mov	r0, r3
 800ca28:	3708      	adds	r7, #8
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}

0800ca2e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ca2e:	b580      	push	{r7, lr}
 800ca30:	b084      	sub	sp, #16
 800ca32:	af00      	add	r7, sp, #0
 800ca34:	6078      	str	r0, [r7, #4]
 800ca36:	460b      	mov	r3, r1
 800ca38:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f000 f836 	bl	800caac <USBH_GetFreePipe>
 800ca40:	4603      	mov	r3, r0
 800ca42:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ca44:	89fb      	ldrh	r3, [r7, #14]
 800ca46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ca4a:	4293      	cmp	r3, r2
 800ca4c:	d00a      	beq.n	800ca64 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800ca4e:	78fa      	ldrb	r2, [r7, #3]
 800ca50:	89fb      	ldrh	r3, [r7, #14]
 800ca52:	f003 030f 	and.w	r3, r3, #15
 800ca56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ca5a:	6879      	ldr	r1, [r7, #4]
 800ca5c:	33e0      	adds	r3, #224	; 0xe0
 800ca5e:	009b      	lsls	r3, r3, #2
 800ca60:	440b      	add	r3, r1
 800ca62:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ca64:	89fb      	ldrh	r3, [r7, #14]
 800ca66:	b2db      	uxtb	r3, r3
}
 800ca68:	4618      	mov	r0, r3
 800ca6a:	3710      	adds	r7, #16
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}

0800ca70 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ca70:	b480      	push	{r7}
 800ca72:	b083      	sub	sp, #12
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
 800ca78:	460b      	mov	r3, r1
 800ca7a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800ca7c:	78fb      	ldrb	r3, [r7, #3]
 800ca7e:	2b0f      	cmp	r3, #15
 800ca80:	d80d      	bhi.n	800ca9e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ca82:	78fb      	ldrb	r3, [r7, #3]
 800ca84:	687a      	ldr	r2, [r7, #4]
 800ca86:	33e0      	adds	r3, #224	; 0xe0
 800ca88:	009b      	lsls	r3, r3, #2
 800ca8a:	4413      	add	r3, r2
 800ca8c:	685a      	ldr	r2, [r3, #4]
 800ca8e:	78fb      	ldrb	r3, [r7, #3]
 800ca90:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ca94:	6879      	ldr	r1, [r7, #4]
 800ca96:	33e0      	adds	r3, #224	; 0xe0
 800ca98:	009b      	lsls	r3, r3, #2
 800ca9a:	440b      	add	r3, r1
 800ca9c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ca9e:	2300      	movs	r3, #0
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	370c      	adds	r7, #12
 800caa4:	46bd      	mov	sp, r7
 800caa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caaa:	4770      	bx	lr

0800caac <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800caac:	b480      	push	{r7}
 800caae:	b085      	sub	sp, #20
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800cab4:	2300      	movs	r3, #0
 800cab6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800cab8:	2300      	movs	r3, #0
 800caba:	73fb      	strb	r3, [r7, #15]
 800cabc:	e00f      	b.n	800cade <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800cabe:	7bfb      	ldrb	r3, [r7, #15]
 800cac0:	687a      	ldr	r2, [r7, #4]
 800cac2:	33e0      	adds	r3, #224	; 0xe0
 800cac4:	009b      	lsls	r3, r3, #2
 800cac6:	4413      	add	r3, r2
 800cac8:	685b      	ldr	r3, [r3, #4]
 800caca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d102      	bne.n	800cad8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800cad2:	7bfb      	ldrb	r3, [r7, #15]
 800cad4:	b29b      	uxth	r3, r3
 800cad6:	e007      	b.n	800cae8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800cad8:	7bfb      	ldrb	r3, [r7, #15]
 800cada:	3301      	adds	r3, #1
 800cadc:	73fb      	strb	r3, [r7, #15]
 800cade:	7bfb      	ldrb	r3, [r7, #15]
 800cae0:	2b0f      	cmp	r3, #15
 800cae2:	d9ec      	bls.n	800cabe <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800cae4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800cae8:	4618      	mov	r0, r3
 800caea:	3714      	adds	r7, #20
 800caec:	46bd      	mov	sp, r7
 800caee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf2:	4770      	bx	lr

0800caf4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b084      	sub	sp, #16
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	4603      	mov	r3, r0
 800cafc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cafe:	79fb      	ldrb	r3, [r7, #7]
 800cb00:	4a08      	ldr	r2, [pc, #32]	; (800cb24 <disk_status+0x30>)
 800cb02:	009b      	lsls	r3, r3, #2
 800cb04:	4413      	add	r3, r2
 800cb06:	685b      	ldr	r3, [r3, #4]
 800cb08:	685b      	ldr	r3, [r3, #4]
 800cb0a:	79fa      	ldrb	r2, [r7, #7]
 800cb0c:	4905      	ldr	r1, [pc, #20]	; (800cb24 <disk_status+0x30>)
 800cb0e:	440a      	add	r2, r1
 800cb10:	7a12      	ldrb	r2, [r2, #8]
 800cb12:	4610      	mov	r0, r2
 800cb14:	4798      	blx	r3
 800cb16:	4603      	mov	r3, r0
 800cb18:	73fb      	strb	r3, [r7, #15]
  return stat;
 800cb1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	3710      	adds	r7, #16
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}
 800cb24:	20001e70 	.word	0x20001e70

0800cb28 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b084      	sub	sp, #16
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	4603      	mov	r3, r0
 800cb30:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800cb32:	2300      	movs	r3, #0
 800cb34:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800cb36:	79fb      	ldrb	r3, [r7, #7]
 800cb38:	4a0d      	ldr	r2, [pc, #52]	; (800cb70 <disk_initialize+0x48>)
 800cb3a:	5cd3      	ldrb	r3, [r2, r3]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d111      	bne.n	800cb64 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800cb40:	79fb      	ldrb	r3, [r7, #7]
 800cb42:	4a0b      	ldr	r2, [pc, #44]	; (800cb70 <disk_initialize+0x48>)
 800cb44:	2101      	movs	r1, #1
 800cb46:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cb48:	79fb      	ldrb	r3, [r7, #7]
 800cb4a:	4a09      	ldr	r2, [pc, #36]	; (800cb70 <disk_initialize+0x48>)
 800cb4c:	009b      	lsls	r3, r3, #2
 800cb4e:	4413      	add	r3, r2
 800cb50:	685b      	ldr	r3, [r3, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	79fa      	ldrb	r2, [r7, #7]
 800cb56:	4906      	ldr	r1, [pc, #24]	; (800cb70 <disk_initialize+0x48>)
 800cb58:	440a      	add	r2, r1
 800cb5a:	7a12      	ldrb	r2, [r2, #8]
 800cb5c:	4610      	mov	r0, r2
 800cb5e:	4798      	blx	r3
 800cb60:	4603      	mov	r3, r0
 800cb62:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800cb64:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb66:	4618      	mov	r0, r3
 800cb68:	3710      	adds	r7, #16
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}
 800cb6e:	bf00      	nop
 800cb70:	20001e70 	.word	0x20001e70

0800cb74 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cb74:	b590      	push	{r4, r7, lr}
 800cb76:	b087      	sub	sp, #28
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	60b9      	str	r1, [r7, #8]
 800cb7c:	607a      	str	r2, [r7, #4]
 800cb7e:	603b      	str	r3, [r7, #0]
 800cb80:	4603      	mov	r3, r0
 800cb82:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cb84:	7bfb      	ldrb	r3, [r7, #15]
 800cb86:	4a0a      	ldr	r2, [pc, #40]	; (800cbb0 <disk_read+0x3c>)
 800cb88:	009b      	lsls	r3, r3, #2
 800cb8a:	4413      	add	r3, r2
 800cb8c:	685b      	ldr	r3, [r3, #4]
 800cb8e:	689c      	ldr	r4, [r3, #8]
 800cb90:	7bfb      	ldrb	r3, [r7, #15]
 800cb92:	4a07      	ldr	r2, [pc, #28]	; (800cbb0 <disk_read+0x3c>)
 800cb94:	4413      	add	r3, r2
 800cb96:	7a18      	ldrb	r0, [r3, #8]
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	687a      	ldr	r2, [r7, #4]
 800cb9c:	68b9      	ldr	r1, [r7, #8]
 800cb9e:	47a0      	blx	r4
 800cba0:	4603      	mov	r3, r0
 800cba2:	75fb      	strb	r3, [r7, #23]
  return res;
 800cba4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	371c      	adds	r7, #28
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd90      	pop	{r4, r7, pc}
 800cbae:	bf00      	nop
 800cbb0:	20001e70 	.word	0x20001e70

0800cbb4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cbb4:	b590      	push	{r4, r7, lr}
 800cbb6:	b087      	sub	sp, #28
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	60b9      	str	r1, [r7, #8]
 800cbbc:	607a      	str	r2, [r7, #4]
 800cbbe:	603b      	str	r3, [r7, #0]
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cbc4:	7bfb      	ldrb	r3, [r7, #15]
 800cbc6:	4a0a      	ldr	r2, [pc, #40]	; (800cbf0 <disk_write+0x3c>)
 800cbc8:	009b      	lsls	r3, r3, #2
 800cbca:	4413      	add	r3, r2
 800cbcc:	685b      	ldr	r3, [r3, #4]
 800cbce:	68dc      	ldr	r4, [r3, #12]
 800cbd0:	7bfb      	ldrb	r3, [r7, #15]
 800cbd2:	4a07      	ldr	r2, [pc, #28]	; (800cbf0 <disk_write+0x3c>)
 800cbd4:	4413      	add	r3, r2
 800cbd6:	7a18      	ldrb	r0, [r3, #8]
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	687a      	ldr	r2, [r7, #4]
 800cbdc:	68b9      	ldr	r1, [r7, #8]
 800cbde:	47a0      	blx	r4
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	75fb      	strb	r3, [r7, #23]
  return res;
 800cbe4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	371c      	adds	r7, #28
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd90      	pop	{r4, r7, pc}
 800cbee:	bf00      	nop
 800cbf0:	20001e70 	.word	0x20001e70

0800cbf4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b084      	sub	sp, #16
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	603a      	str	r2, [r7, #0]
 800cbfe:	71fb      	strb	r3, [r7, #7]
 800cc00:	460b      	mov	r3, r1
 800cc02:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cc04:	79fb      	ldrb	r3, [r7, #7]
 800cc06:	4a09      	ldr	r2, [pc, #36]	; (800cc2c <disk_ioctl+0x38>)
 800cc08:	009b      	lsls	r3, r3, #2
 800cc0a:	4413      	add	r3, r2
 800cc0c:	685b      	ldr	r3, [r3, #4]
 800cc0e:	691b      	ldr	r3, [r3, #16]
 800cc10:	79fa      	ldrb	r2, [r7, #7]
 800cc12:	4906      	ldr	r1, [pc, #24]	; (800cc2c <disk_ioctl+0x38>)
 800cc14:	440a      	add	r2, r1
 800cc16:	7a10      	ldrb	r0, [r2, #8]
 800cc18:	79b9      	ldrb	r1, [r7, #6]
 800cc1a:	683a      	ldr	r2, [r7, #0]
 800cc1c:	4798      	blx	r3
 800cc1e:	4603      	mov	r3, r0
 800cc20:	73fb      	strb	r3, [r7, #15]
  return res;
 800cc22:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc24:	4618      	mov	r0, r3
 800cc26:	3710      	adds	r7, #16
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd80      	pop	{r7, pc}
 800cc2c:	20001e70 	.word	0x20001e70

0800cc30 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800cc30:	b480      	push	{r7}
 800cc32:	b085      	sub	sp, #20
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	3301      	adds	r3, #1
 800cc3c:	781b      	ldrb	r3, [r3, #0]
 800cc3e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800cc40:	89fb      	ldrh	r3, [r7, #14]
 800cc42:	021b      	lsls	r3, r3, #8
 800cc44:	b21a      	sxth	r2, r3
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	781b      	ldrb	r3, [r3, #0]
 800cc4a:	b21b      	sxth	r3, r3
 800cc4c:	4313      	orrs	r3, r2
 800cc4e:	b21b      	sxth	r3, r3
 800cc50:	81fb      	strh	r3, [r7, #14]
	return rv;
 800cc52:	89fb      	ldrh	r3, [r7, #14]
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	3714      	adds	r7, #20
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5e:	4770      	bx	lr

0800cc60 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800cc60:	b480      	push	{r7}
 800cc62:	b085      	sub	sp, #20
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	3303      	adds	r3, #3
 800cc6c:	781b      	ldrb	r3, [r3, #0]
 800cc6e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	021b      	lsls	r3, r3, #8
 800cc74:	687a      	ldr	r2, [r7, #4]
 800cc76:	3202      	adds	r2, #2
 800cc78:	7812      	ldrb	r2, [r2, #0]
 800cc7a:	4313      	orrs	r3, r2
 800cc7c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	021b      	lsls	r3, r3, #8
 800cc82:	687a      	ldr	r2, [r7, #4]
 800cc84:	3201      	adds	r2, #1
 800cc86:	7812      	ldrb	r2, [r2, #0]
 800cc88:	4313      	orrs	r3, r2
 800cc8a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	021b      	lsls	r3, r3, #8
 800cc90:	687a      	ldr	r2, [r7, #4]
 800cc92:	7812      	ldrb	r2, [r2, #0]
 800cc94:	4313      	orrs	r3, r2
 800cc96:	60fb      	str	r3, [r7, #12]
	return rv;
 800cc98:	68fb      	ldr	r3, [r7, #12]
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3714      	adds	r7, #20
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca4:	4770      	bx	lr

0800cca6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800cca6:	b480      	push	{r7}
 800cca8:	b083      	sub	sp, #12
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	6078      	str	r0, [r7, #4]
 800ccae:	460b      	mov	r3, r1
 800ccb0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	1c5a      	adds	r2, r3, #1
 800ccb6:	607a      	str	r2, [r7, #4]
 800ccb8:	887a      	ldrh	r2, [r7, #2]
 800ccba:	b2d2      	uxtb	r2, r2
 800ccbc:	701a      	strb	r2, [r3, #0]
 800ccbe:	887b      	ldrh	r3, [r7, #2]
 800ccc0:	0a1b      	lsrs	r3, r3, #8
 800ccc2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	1c5a      	adds	r2, r3, #1
 800ccc8:	607a      	str	r2, [r7, #4]
 800ccca:	887a      	ldrh	r2, [r7, #2]
 800cccc:	b2d2      	uxtb	r2, r2
 800ccce:	701a      	strb	r2, [r3, #0]
}
 800ccd0:	bf00      	nop
 800ccd2:	370c      	adds	r7, #12
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccda:	4770      	bx	lr

0800ccdc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ccdc:	b480      	push	{r7}
 800ccde:	b083      	sub	sp, #12
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
 800cce4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	1c5a      	adds	r2, r3, #1
 800ccea:	607a      	str	r2, [r7, #4]
 800ccec:	683a      	ldr	r2, [r7, #0]
 800ccee:	b2d2      	uxtb	r2, r2
 800ccf0:	701a      	strb	r2, [r3, #0]
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	0a1b      	lsrs	r3, r3, #8
 800ccf6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	1c5a      	adds	r2, r3, #1
 800ccfc:	607a      	str	r2, [r7, #4]
 800ccfe:	683a      	ldr	r2, [r7, #0]
 800cd00:	b2d2      	uxtb	r2, r2
 800cd02:	701a      	strb	r2, [r3, #0]
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	0a1b      	lsrs	r3, r3, #8
 800cd08:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	1c5a      	adds	r2, r3, #1
 800cd0e:	607a      	str	r2, [r7, #4]
 800cd10:	683a      	ldr	r2, [r7, #0]
 800cd12:	b2d2      	uxtb	r2, r2
 800cd14:	701a      	strb	r2, [r3, #0]
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	0a1b      	lsrs	r3, r3, #8
 800cd1a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	1c5a      	adds	r2, r3, #1
 800cd20:	607a      	str	r2, [r7, #4]
 800cd22:	683a      	ldr	r2, [r7, #0]
 800cd24:	b2d2      	uxtb	r2, r2
 800cd26:	701a      	strb	r2, [r3, #0]
}
 800cd28:	bf00      	nop
 800cd2a:	370c      	adds	r7, #12
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd32:	4770      	bx	lr

0800cd34 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800cd34:	b480      	push	{r7}
 800cd36:	b087      	sub	sp, #28
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	60f8      	str	r0, [r7, #12]
 800cd3c:	60b9      	str	r1, [r7, #8]
 800cd3e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d00d      	beq.n	800cd6a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800cd4e:	693a      	ldr	r2, [r7, #16]
 800cd50:	1c53      	adds	r3, r2, #1
 800cd52:	613b      	str	r3, [r7, #16]
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	1c59      	adds	r1, r3, #1
 800cd58:	6179      	str	r1, [r7, #20]
 800cd5a:	7812      	ldrb	r2, [r2, #0]
 800cd5c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	3b01      	subs	r3, #1
 800cd62:	607b      	str	r3, [r7, #4]
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d1f1      	bne.n	800cd4e <mem_cpy+0x1a>
	}
}
 800cd6a:	bf00      	nop
 800cd6c:	371c      	adds	r7, #28
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd74:	4770      	bx	lr

0800cd76 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800cd76:	b480      	push	{r7}
 800cd78:	b087      	sub	sp, #28
 800cd7a:	af00      	add	r7, sp, #0
 800cd7c:	60f8      	str	r0, [r7, #12]
 800cd7e:	60b9      	str	r1, [r7, #8]
 800cd80:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	1c5a      	adds	r2, r3, #1
 800cd8a:	617a      	str	r2, [r7, #20]
 800cd8c:	68ba      	ldr	r2, [r7, #8]
 800cd8e:	b2d2      	uxtb	r2, r2
 800cd90:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	3b01      	subs	r3, #1
 800cd96:	607b      	str	r3, [r7, #4]
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d1f3      	bne.n	800cd86 <mem_set+0x10>
}
 800cd9e:	bf00      	nop
 800cda0:	bf00      	nop
 800cda2:	371c      	adds	r7, #28
 800cda4:	46bd      	mov	sp, r7
 800cda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdaa:	4770      	bx	lr

0800cdac <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800cdac:	b480      	push	{r7}
 800cdae:	b089      	sub	sp, #36	; 0x24
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	60f8      	str	r0, [r7, #12]
 800cdb4:	60b9      	str	r1, [r7, #8]
 800cdb6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	61fb      	str	r3, [r7, #28]
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800cdc4:	69fb      	ldr	r3, [r7, #28]
 800cdc6:	1c5a      	adds	r2, r3, #1
 800cdc8:	61fa      	str	r2, [r7, #28]
 800cdca:	781b      	ldrb	r3, [r3, #0]
 800cdcc:	4619      	mov	r1, r3
 800cdce:	69bb      	ldr	r3, [r7, #24]
 800cdd0:	1c5a      	adds	r2, r3, #1
 800cdd2:	61ba      	str	r2, [r7, #24]
 800cdd4:	781b      	ldrb	r3, [r3, #0]
 800cdd6:	1acb      	subs	r3, r1, r3
 800cdd8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	3b01      	subs	r3, #1
 800cdde:	607b      	str	r3, [r7, #4]
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d002      	beq.n	800cdec <mem_cmp+0x40>
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d0eb      	beq.n	800cdc4 <mem_cmp+0x18>

	return r;
 800cdec:	697b      	ldr	r3, [r7, #20]
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3724      	adds	r7, #36	; 0x24
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf8:	4770      	bx	lr

0800cdfa <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800cdfa:	b480      	push	{r7}
 800cdfc:	b083      	sub	sp, #12
 800cdfe:	af00      	add	r7, sp, #0
 800ce00:	6078      	str	r0, [r7, #4]
 800ce02:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ce04:	e002      	b.n	800ce0c <chk_chr+0x12>
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	3301      	adds	r3, #1
 800ce0a:	607b      	str	r3, [r7, #4]
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	781b      	ldrb	r3, [r3, #0]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d005      	beq.n	800ce20 <chk_chr+0x26>
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	781b      	ldrb	r3, [r3, #0]
 800ce18:	461a      	mov	r2, r3
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	4293      	cmp	r3, r2
 800ce1e:	d1f2      	bne.n	800ce06 <chk_chr+0xc>
	return *str;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	781b      	ldrb	r3, [r3, #0]
}
 800ce24:	4618      	mov	r0, r3
 800ce26:	370c      	adds	r7, #12
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2e:	4770      	bx	lr

0800ce30 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ce30:	b480      	push	{r7}
 800ce32:	b085      	sub	sp, #20
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	60bb      	str	r3, [r7, #8]
 800ce3e:	68bb      	ldr	r3, [r7, #8]
 800ce40:	60fb      	str	r3, [r7, #12]
 800ce42:	e029      	b.n	800ce98 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ce44:	4a27      	ldr	r2, [pc, #156]	; (800cee4 <chk_lock+0xb4>)
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	011b      	lsls	r3, r3, #4
 800ce4a:	4413      	add	r3, r2
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d01d      	beq.n	800ce8e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ce52:	4a24      	ldr	r2, [pc, #144]	; (800cee4 <chk_lock+0xb4>)
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	011b      	lsls	r3, r3, #4
 800ce58:	4413      	add	r3, r2
 800ce5a:	681a      	ldr	r2, [r3, #0]
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	429a      	cmp	r2, r3
 800ce62:	d116      	bne.n	800ce92 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ce64:	4a1f      	ldr	r2, [pc, #124]	; (800cee4 <chk_lock+0xb4>)
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	011b      	lsls	r3, r3, #4
 800ce6a:	4413      	add	r3, r2
 800ce6c:	3304      	adds	r3, #4
 800ce6e:	681a      	ldr	r2, [r3, #0]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ce74:	429a      	cmp	r2, r3
 800ce76:	d10c      	bne.n	800ce92 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ce78:	4a1a      	ldr	r2, [pc, #104]	; (800cee4 <chk_lock+0xb4>)
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	011b      	lsls	r3, r3, #4
 800ce7e:	4413      	add	r3, r2
 800ce80:	3308      	adds	r3, #8
 800ce82:	681a      	ldr	r2, [r3, #0]
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ce88:	429a      	cmp	r2, r3
 800ce8a:	d102      	bne.n	800ce92 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ce8c:	e007      	b.n	800ce9e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ce8e:	2301      	movs	r3, #1
 800ce90:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	3301      	adds	r3, #1
 800ce96:	60fb      	str	r3, [r7, #12]
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	2b01      	cmp	r3, #1
 800ce9c:	d9d2      	bls.n	800ce44 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	2b02      	cmp	r3, #2
 800cea2:	d109      	bne.n	800ceb8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d102      	bne.n	800ceb0 <chk_lock+0x80>
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	2b02      	cmp	r3, #2
 800ceae:	d101      	bne.n	800ceb4 <chk_lock+0x84>
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	e010      	b.n	800ced6 <chk_lock+0xa6>
 800ceb4:	2312      	movs	r3, #18
 800ceb6:	e00e      	b.n	800ced6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d108      	bne.n	800ced0 <chk_lock+0xa0>
 800cebe:	4a09      	ldr	r2, [pc, #36]	; (800cee4 <chk_lock+0xb4>)
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	011b      	lsls	r3, r3, #4
 800cec4:	4413      	add	r3, r2
 800cec6:	330c      	adds	r3, #12
 800cec8:	881b      	ldrh	r3, [r3, #0]
 800ceca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cece:	d101      	bne.n	800ced4 <chk_lock+0xa4>
 800ced0:	2310      	movs	r3, #16
 800ced2:	e000      	b.n	800ced6 <chk_lock+0xa6>
 800ced4:	2300      	movs	r3, #0
}
 800ced6:	4618      	mov	r0, r3
 800ced8:	3714      	adds	r7, #20
 800ceda:	46bd      	mov	sp, r7
 800cedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee0:	4770      	bx	lr
 800cee2:	bf00      	nop
 800cee4:	20001c50 	.word	0x20001c50

0800cee8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800cee8:	b480      	push	{r7}
 800ceea:	b083      	sub	sp, #12
 800ceec:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ceee:	2300      	movs	r3, #0
 800cef0:	607b      	str	r3, [r7, #4]
 800cef2:	e002      	b.n	800cefa <enq_lock+0x12>
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	3301      	adds	r3, #1
 800cef8:	607b      	str	r3, [r7, #4]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	2b01      	cmp	r3, #1
 800cefe:	d806      	bhi.n	800cf0e <enq_lock+0x26>
 800cf00:	4a09      	ldr	r2, [pc, #36]	; (800cf28 <enq_lock+0x40>)
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	011b      	lsls	r3, r3, #4
 800cf06:	4413      	add	r3, r2
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d1f2      	bne.n	800cef4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2b02      	cmp	r3, #2
 800cf12:	bf14      	ite	ne
 800cf14:	2301      	movne	r3, #1
 800cf16:	2300      	moveq	r3, #0
 800cf18:	b2db      	uxtb	r3, r3
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	370c      	adds	r7, #12
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf24:	4770      	bx	lr
 800cf26:	bf00      	nop
 800cf28:	20001c50 	.word	0x20001c50

0800cf2c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cf2c:	b480      	push	{r7}
 800cf2e:	b085      	sub	sp, #20
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
 800cf34:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cf36:	2300      	movs	r3, #0
 800cf38:	60fb      	str	r3, [r7, #12]
 800cf3a:	e01f      	b.n	800cf7c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800cf3c:	4a41      	ldr	r2, [pc, #260]	; (800d044 <inc_lock+0x118>)
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	011b      	lsls	r3, r3, #4
 800cf42:	4413      	add	r3, r2
 800cf44:	681a      	ldr	r2, [r3, #0]
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	429a      	cmp	r2, r3
 800cf4c:	d113      	bne.n	800cf76 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800cf4e:	4a3d      	ldr	r2, [pc, #244]	; (800d044 <inc_lock+0x118>)
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	011b      	lsls	r3, r3, #4
 800cf54:	4413      	add	r3, r2
 800cf56:	3304      	adds	r3, #4
 800cf58:	681a      	ldr	r2, [r3, #0]
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800cf5e:	429a      	cmp	r2, r3
 800cf60:	d109      	bne.n	800cf76 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800cf62:	4a38      	ldr	r2, [pc, #224]	; (800d044 <inc_lock+0x118>)
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	011b      	lsls	r3, r3, #4
 800cf68:	4413      	add	r3, r2
 800cf6a:	3308      	adds	r3, #8
 800cf6c:	681a      	ldr	r2, [r3, #0]
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800cf72:	429a      	cmp	r2, r3
 800cf74:	d006      	beq.n	800cf84 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	3301      	adds	r3, #1
 800cf7a:	60fb      	str	r3, [r7, #12]
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	2b01      	cmp	r3, #1
 800cf80:	d9dc      	bls.n	800cf3c <inc_lock+0x10>
 800cf82:	e000      	b.n	800cf86 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800cf84:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	2b02      	cmp	r3, #2
 800cf8a:	d132      	bne.n	800cff2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	60fb      	str	r3, [r7, #12]
 800cf90:	e002      	b.n	800cf98 <inc_lock+0x6c>
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	3301      	adds	r3, #1
 800cf96:	60fb      	str	r3, [r7, #12]
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	2b01      	cmp	r3, #1
 800cf9c:	d806      	bhi.n	800cfac <inc_lock+0x80>
 800cf9e:	4a29      	ldr	r2, [pc, #164]	; (800d044 <inc_lock+0x118>)
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	011b      	lsls	r3, r3, #4
 800cfa4:	4413      	add	r3, r2
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d1f2      	bne.n	800cf92 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	2b02      	cmp	r3, #2
 800cfb0:	d101      	bne.n	800cfb6 <inc_lock+0x8a>
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	e040      	b.n	800d038 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681a      	ldr	r2, [r3, #0]
 800cfba:	4922      	ldr	r1, [pc, #136]	; (800d044 <inc_lock+0x118>)
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	011b      	lsls	r3, r3, #4
 800cfc0:	440b      	add	r3, r1
 800cfc2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	689a      	ldr	r2, [r3, #8]
 800cfc8:	491e      	ldr	r1, [pc, #120]	; (800d044 <inc_lock+0x118>)
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	011b      	lsls	r3, r3, #4
 800cfce:	440b      	add	r3, r1
 800cfd0:	3304      	adds	r3, #4
 800cfd2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	695a      	ldr	r2, [r3, #20]
 800cfd8:	491a      	ldr	r1, [pc, #104]	; (800d044 <inc_lock+0x118>)
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	011b      	lsls	r3, r3, #4
 800cfde:	440b      	add	r3, r1
 800cfe0:	3308      	adds	r3, #8
 800cfe2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800cfe4:	4a17      	ldr	r2, [pc, #92]	; (800d044 <inc_lock+0x118>)
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	011b      	lsls	r3, r3, #4
 800cfea:	4413      	add	r3, r2
 800cfec:	330c      	adds	r3, #12
 800cfee:	2200      	movs	r2, #0
 800cff0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d009      	beq.n	800d00c <inc_lock+0xe0>
 800cff8:	4a12      	ldr	r2, [pc, #72]	; (800d044 <inc_lock+0x118>)
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	011b      	lsls	r3, r3, #4
 800cffe:	4413      	add	r3, r2
 800d000:	330c      	adds	r3, #12
 800d002:	881b      	ldrh	r3, [r3, #0]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d001      	beq.n	800d00c <inc_lock+0xe0>
 800d008:	2300      	movs	r3, #0
 800d00a:	e015      	b.n	800d038 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d108      	bne.n	800d024 <inc_lock+0xf8>
 800d012:	4a0c      	ldr	r2, [pc, #48]	; (800d044 <inc_lock+0x118>)
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	011b      	lsls	r3, r3, #4
 800d018:	4413      	add	r3, r2
 800d01a:	330c      	adds	r3, #12
 800d01c:	881b      	ldrh	r3, [r3, #0]
 800d01e:	3301      	adds	r3, #1
 800d020:	b29a      	uxth	r2, r3
 800d022:	e001      	b.n	800d028 <inc_lock+0xfc>
 800d024:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d028:	4906      	ldr	r1, [pc, #24]	; (800d044 <inc_lock+0x118>)
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	011b      	lsls	r3, r3, #4
 800d02e:	440b      	add	r3, r1
 800d030:	330c      	adds	r3, #12
 800d032:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	3301      	adds	r3, #1
}
 800d038:	4618      	mov	r0, r3
 800d03a:	3714      	adds	r7, #20
 800d03c:	46bd      	mov	sp, r7
 800d03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d042:	4770      	bx	lr
 800d044:	20001c50 	.word	0x20001c50

0800d048 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d048:	b480      	push	{r7}
 800d04a:	b085      	sub	sp, #20
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	3b01      	subs	r3, #1
 800d054:	607b      	str	r3, [r7, #4]
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2b01      	cmp	r3, #1
 800d05a:	d825      	bhi.n	800d0a8 <dec_lock+0x60>
		n = Files[i].ctr;
 800d05c:	4a17      	ldr	r2, [pc, #92]	; (800d0bc <dec_lock+0x74>)
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	011b      	lsls	r3, r3, #4
 800d062:	4413      	add	r3, r2
 800d064:	330c      	adds	r3, #12
 800d066:	881b      	ldrh	r3, [r3, #0]
 800d068:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d06a:	89fb      	ldrh	r3, [r7, #14]
 800d06c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d070:	d101      	bne.n	800d076 <dec_lock+0x2e>
 800d072:	2300      	movs	r3, #0
 800d074:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d076:	89fb      	ldrh	r3, [r7, #14]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d002      	beq.n	800d082 <dec_lock+0x3a>
 800d07c:	89fb      	ldrh	r3, [r7, #14]
 800d07e:	3b01      	subs	r3, #1
 800d080:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d082:	4a0e      	ldr	r2, [pc, #56]	; (800d0bc <dec_lock+0x74>)
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	011b      	lsls	r3, r3, #4
 800d088:	4413      	add	r3, r2
 800d08a:	330c      	adds	r3, #12
 800d08c:	89fa      	ldrh	r2, [r7, #14]
 800d08e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d090:	89fb      	ldrh	r3, [r7, #14]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d105      	bne.n	800d0a2 <dec_lock+0x5a>
 800d096:	4a09      	ldr	r2, [pc, #36]	; (800d0bc <dec_lock+0x74>)
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	011b      	lsls	r3, r3, #4
 800d09c:	4413      	add	r3, r2
 800d09e:	2200      	movs	r2, #0
 800d0a0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	737b      	strb	r3, [r7, #13]
 800d0a6:	e001      	b.n	800d0ac <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d0a8:	2302      	movs	r3, #2
 800d0aa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d0ac:	7b7b      	ldrb	r3, [r7, #13]
}
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	3714      	adds	r7, #20
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b8:	4770      	bx	lr
 800d0ba:	bf00      	nop
 800d0bc:	20001c50 	.word	0x20001c50

0800d0c0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d0c0:	b480      	push	{r7}
 800d0c2:	b085      	sub	sp, #20
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	60fb      	str	r3, [r7, #12]
 800d0cc:	e010      	b.n	800d0f0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d0ce:	4a0d      	ldr	r2, [pc, #52]	; (800d104 <clear_lock+0x44>)
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	011b      	lsls	r3, r3, #4
 800d0d4:	4413      	add	r3, r2
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	687a      	ldr	r2, [r7, #4]
 800d0da:	429a      	cmp	r2, r3
 800d0dc:	d105      	bne.n	800d0ea <clear_lock+0x2a>
 800d0de:	4a09      	ldr	r2, [pc, #36]	; (800d104 <clear_lock+0x44>)
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	011b      	lsls	r3, r3, #4
 800d0e4:	4413      	add	r3, r2
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	3301      	adds	r3, #1
 800d0ee:	60fb      	str	r3, [r7, #12]
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	2b01      	cmp	r3, #1
 800d0f4:	d9eb      	bls.n	800d0ce <clear_lock+0xe>
	}
}
 800d0f6:	bf00      	nop
 800d0f8:	bf00      	nop
 800d0fa:	3714      	adds	r7, #20
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d102:	4770      	bx	lr
 800d104:	20001c50 	.word	0x20001c50

0800d108 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b086      	sub	sp, #24
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d110:	2300      	movs	r3, #0
 800d112:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	78db      	ldrb	r3, [r3, #3]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d034      	beq.n	800d186 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d120:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	7858      	ldrb	r0, [r3, #1]
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d12c:	2301      	movs	r3, #1
 800d12e:	697a      	ldr	r2, [r7, #20]
 800d130:	f7ff fd40 	bl	800cbb4 <disk_write>
 800d134:	4603      	mov	r3, r0
 800d136:	2b00      	cmp	r3, #0
 800d138:	d002      	beq.n	800d140 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d13a:	2301      	movs	r3, #1
 800d13c:	73fb      	strb	r3, [r7, #15]
 800d13e:	e022      	b.n	800d186 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2200      	movs	r2, #0
 800d144:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d14a:	697a      	ldr	r2, [r7, #20]
 800d14c:	1ad2      	subs	r2, r2, r3
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	69db      	ldr	r3, [r3, #28]
 800d152:	429a      	cmp	r2, r3
 800d154:	d217      	bcs.n	800d186 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	789b      	ldrb	r3, [r3, #2]
 800d15a:	613b      	str	r3, [r7, #16]
 800d15c:	e010      	b.n	800d180 <sync_window+0x78>
					wsect += fs->fsize;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	69db      	ldr	r3, [r3, #28]
 800d162:	697a      	ldr	r2, [r7, #20]
 800d164:	4413      	add	r3, r2
 800d166:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	7858      	ldrb	r0, [r3, #1]
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d172:	2301      	movs	r3, #1
 800d174:	697a      	ldr	r2, [r7, #20]
 800d176:	f7ff fd1d 	bl	800cbb4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d17a:	693b      	ldr	r3, [r7, #16]
 800d17c:	3b01      	subs	r3, #1
 800d17e:	613b      	str	r3, [r7, #16]
 800d180:	693b      	ldr	r3, [r7, #16]
 800d182:	2b01      	cmp	r3, #1
 800d184:	d8eb      	bhi.n	800d15e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d186:	7bfb      	ldrb	r3, [r7, #15]
}
 800d188:	4618      	mov	r0, r3
 800d18a:	3718      	adds	r7, #24
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd80      	pop	{r7, pc}

0800d190 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b084      	sub	sp, #16
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
 800d198:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d19a:	2300      	movs	r3, #0
 800d19c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1a2:	683a      	ldr	r2, [r7, #0]
 800d1a4:	429a      	cmp	r2, r3
 800d1a6:	d01b      	beq.n	800d1e0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f7ff ffad 	bl	800d108 <sync_window>
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d1b2:	7bfb      	ldrb	r3, [r7, #15]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d113      	bne.n	800d1e0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	7858      	ldrb	r0, [r3, #1]
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	683a      	ldr	r2, [r7, #0]
 800d1c6:	f7ff fcd5 	bl	800cb74 <disk_read>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d004      	beq.n	800d1da <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d1d0:	f04f 33ff 	mov.w	r3, #4294967295
 800d1d4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d1d6:	2301      	movs	r3, #1
 800d1d8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	683a      	ldr	r2, [r7, #0]
 800d1de:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800d1e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	3710      	adds	r7, #16
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}
	...

0800d1ec <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b084      	sub	sp, #16
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f7ff ff87 	bl	800d108 <sync_window>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d1fe:	7bfb      	ldrb	r3, [r7, #15]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d158      	bne.n	800d2b6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	781b      	ldrb	r3, [r3, #0]
 800d208:	2b03      	cmp	r3, #3
 800d20a:	d148      	bne.n	800d29e <sync_fs+0xb2>
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	791b      	ldrb	r3, [r3, #4]
 800d210:	2b01      	cmp	r3, #1
 800d212:	d144      	bne.n	800d29e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	3334      	adds	r3, #52	; 0x34
 800d218:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d21c:	2100      	movs	r1, #0
 800d21e:	4618      	mov	r0, r3
 800d220:	f7ff fda9 	bl	800cd76 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	3334      	adds	r3, #52	; 0x34
 800d228:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d22c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d230:	4618      	mov	r0, r3
 800d232:	f7ff fd38 	bl	800cca6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	3334      	adds	r3, #52	; 0x34
 800d23a:	4921      	ldr	r1, [pc, #132]	; (800d2c0 <sync_fs+0xd4>)
 800d23c:	4618      	mov	r0, r3
 800d23e:	f7ff fd4d 	bl	800ccdc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	3334      	adds	r3, #52	; 0x34
 800d246:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d24a:	491e      	ldr	r1, [pc, #120]	; (800d2c4 <sync_fs+0xd8>)
 800d24c:	4618      	mov	r0, r3
 800d24e:	f7ff fd45 	bl	800ccdc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	3334      	adds	r3, #52	; 0x34
 800d256:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	695b      	ldr	r3, [r3, #20]
 800d25e:	4619      	mov	r1, r3
 800d260:	4610      	mov	r0, r2
 800d262:	f7ff fd3b 	bl	800ccdc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	3334      	adds	r3, #52	; 0x34
 800d26a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	691b      	ldr	r3, [r3, #16]
 800d272:	4619      	mov	r1, r3
 800d274:	4610      	mov	r0, r2
 800d276:	f7ff fd31 	bl	800ccdc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6a1b      	ldr	r3, [r3, #32]
 800d27e:	1c5a      	adds	r2, r3, #1
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	7858      	ldrb	r0, [r3, #1]
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d292:	2301      	movs	r3, #1
 800d294:	f7ff fc8e 	bl	800cbb4 <disk_write>
			fs->fsi_flag = 0;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2200      	movs	r2, #0
 800d29c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	785b      	ldrb	r3, [r3, #1]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	2100      	movs	r1, #0
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f7ff fca4 	bl	800cbf4 <disk_ioctl>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d001      	beq.n	800d2b6 <sync_fs+0xca>
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d2b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	3710      	adds	r7, #16
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bd80      	pop	{r7, pc}
 800d2c0:	41615252 	.word	0x41615252
 800d2c4:	61417272 	.word	0x61417272

0800d2c8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d2c8:	b480      	push	{r7}
 800d2ca:	b083      	sub	sp, #12
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
 800d2d0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	3b02      	subs	r3, #2
 800d2d6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	699b      	ldr	r3, [r3, #24]
 800d2dc:	3b02      	subs	r3, #2
 800d2de:	683a      	ldr	r2, [r7, #0]
 800d2e0:	429a      	cmp	r2, r3
 800d2e2:	d301      	bcc.n	800d2e8 <clust2sect+0x20>
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	e008      	b.n	800d2fa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	895b      	ldrh	r3, [r3, #10]
 800d2ec:	461a      	mov	r2, r3
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	fb03 f202 	mul.w	r2, r3, r2
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2f8:	4413      	add	r3, r2
}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	370c      	adds	r7, #12
 800d2fe:	46bd      	mov	sp, r7
 800d300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d304:	4770      	bx	lr

0800d306 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d306:	b580      	push	{r7, lr}
 800d308:	b086      	sub	sp, #24
 800d30a:	af00      	add	r7, sp, #0
 800d30c:	6078      	str	r0, [r7, #4]
 800d30e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	2b01      	cmp	r3, #1
 800d31a:	d904      	bls.n	800d326 <get_fat+0x20>
 800d31c:	693b      	ldr	r3, [r7, #16]
 800d31e:	699b      	ldr	r3, [r3, #24]
 800d320:	683a      	ldr	r2, [r7, #0]
 800d322:	429a      	cmp	r2, r3
 800d324:	d302      	bcc.n	800d32c <get_fat+0x26>
		val = 1;	/* Internal error */
 800d326:	2301      	movs	r3, #1
 800d328:	617b      	str	r3, [r7, #20]
 800d32a:	e08f      	b.n	800d44c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d32c:	f04f 33ff 	mov.w	r3, #4294967295
 800d330:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d332:	693b      	ldr	r3, [r7, #16]
 800d334:	781b      	ldrb	r3, [r3, #0]
 800d336:	2b03      	cmp	r3, #3
 800d338:	d062      	beq.n	800d400 <get_fat+0xfa>
 800d33a:	2b03      	cmp	r3, #3
 800d33c:	dc7c      	bgt.n	800d438 <get_fat+0x132>
 800d33e:	2b01      	cmp	r3, #1
 800d340:	d002      	beq.n	800d348 <get_fat+0x42>
 800d342:	2b02      	cmp	r3, #2
 800d344:	d042      	beq.n	800d3cc <get_fat+0xc6>
 800d346:	e077      	b.n	800d438 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	60fb      	str	r3, [r7, #12]
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	085b      	lsrs	r3, r3, #1
 800d350:	68fa      	ldr	r2, [r7, #12]
 800d352:	4413      	add	r3, r2
 800d354:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d356:	693b      	ldr	r3, [r7, #16]
 800d358:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	0a5b      	lsrs	r3, r3, #9
 800d35e:	4413      	add	r3, r2
 800d360:	4619      	mov	r1, r3
 800d362:	6938      	ldr	r0, [r7, #16]
 800d364:	f7ff ff14 	bl	800d190 <move_window>
 800d368:	4603      	mov	r3, r0
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d167      	bne.n	800d43e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	1c5a      	adds	r2, r3, #1
 800d372:	60fa      	str	r2, [r7, #12]
 800d374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d378:	693a      	ldr	r2, [r7, #16]
 800d37a:	4413      	add	r3, r2
 800d37c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d380:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d382:	693b      	ldr	r3, [r7, #16]
 800d384:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	0a5b      	lsrs	r3, r3, #9
 800d38a:	4413      	add	r3, r2
 800d38c:	4619      	mov	r1, r3
 800d38e:	6938      	ldr	r0, [r7, #16]
 800d390:	f7ff fefe 	bl	800d190 <move_window>
 800d394:	4603      	mov	r3, r0
 800d396:	2b00      	cmp	r3, #0
 800d398:	d153      	bne.n	800d442 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3a0:	693a      	ldr	r2, [r7, #16]
 800d3a2:	4413      	add	r3, r2
 800d3a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d3a8:	021b      	lsls	r3, r3, #8
 800d3aa:	461a      	mov	r2, r3
 800d3ac:	68bb      	ldr	r3, [r7, #8]
 800d3ae:	4313      	orrs	r3, r2
 800d3b0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	f003 0301 	and.w	r3, r3, #1
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d002      	beq.n	800d3c2 <get_fat+0xbc>
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	091b      	lsrs	r3, r3, #4
 800d3c0:	e002      	b.n	800d3c8 <get_fat+0xc2>
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d3c8:	617b      	str	r3, [r7, #20]
			break;
 800d3ca:	e03f      	b.n	800d44c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d3cc:	693b      	ldr	r3, [r7, #16]
 800d3ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	0a1b      	lsrs	r3, r3, #8
 800d3d4:	4413      	add	r3, r2
 800d3d6:	4619      	mov	r1, r3
 800d3d8:	6938      	ldr	r0, [r7, #16]
 800d3da:	f7ff fed9 	bl	800d190 <move_window>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d130      	bne.n	800d446 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d3e4:	693b      	ldr	r3, [r7, #16]
 800d3e6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	005b      	lsls	r3, r3, #1
 800d3ee:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d3f2:	4413      	add	r3, r2
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f7ff fc1b 	bl	800cc30 <ld_word>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	617b      	str	r3, [r7, #20]
			break;
 800d3fe:	e025      	b.n	800d44c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d400:	693b      	ldr	r3, [r7, #16]
 800d402:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	09db      	lsrs	r3, r3, #7
 800d408:	4413      	add	r3, r2
 800d40a:	4619      	mov	r1, r3
 800d40c:	6938      	ldr	r0, [r7, #16]
 800d40e:	f7ff febf 	bl	800d190 <move_window>
 800d412:	4603      	mov	r3, r0
 800d414:	2b00      	cmp	r3, #0
 800d416:	d118      	bne.n	800d44a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	009b      	lsls	r3, r3, #2
 800d422:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d426:	4413      	add	r3, r2
 800d428:	4618      	mov	r0, r3
 800d42a:	f7ff fc19 	bl	800cc60 <ld_dword>
 800d42e:	4603      	mov	r3, r0
 800d430:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d434:	617b      	str	r3, [r7, #20]
			break;
 800d436:	e009      	b.n	800d44c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d438:	2301      	movs	r3, #1
 800d43a:	617b      	str	r3, [r7, #20]
 800d43c:	e006      	b.n	800d44c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d43e:	bf00      	nop
 800d440:	e004      	b.n	800d44c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d442:	bf00      	nop
 800d444:	e002      	b.n	800d44c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d446:	bf00      	nop
 800d448:	e000      	b.n	800d44c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d44a:	bf00      	nop
		}
	}

	return val;
 800d44c:	697b      	ldr	r3, [r7, #20]
}
 800d44e:	4618      	mov	r0, r3
 800d450:	3718      	adds	r7, #24
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}

0800d456 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d456:	b590      	push	{r4, r7, lr}
 800d458:	b089      	sub	sp, #36	; 0x24
 800d45a:	af00      	add	r7, sp, #0
 800d45c:	60f8      	str	r0, [r7, #12]
 800d45e:	60b9      	str	r1, [r7, #8]
 800d460:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d462:	2302      	movs	r3, #2
 800d464:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	2b01      	cmp	r3, #1
 800d46a:	f240 80d2 	bls.w	800d612 <put_fat+0x1bc>
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	699b      	ldr	r3, [r3, #24]
 800d472:	68ba      	ldr	r2, [r7, #8]
 800d474:	429a      	cmp	r2, r3
 800d476:	f080 80cc 	bcs.w	800d612 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	781b      	ldrb	r3, [r3, #0]
 800d47e:	2b03      	cmp	r3, #3
 800d480:	f000 8096 	beq.w	800d5b0 <put_fat+0x15a>
 800d484:	2b03      	cmp	r3, #3
 800d486:	f300 80cd 	bgt.w	800d624 <put_fat+0x1ce>
 800d48a:	2b01      	cmp	r3, #1
 800d48c:	d002      	beq.n	800d494 <put_fat+0x3e>
 800d48e:	2b02      	cmp	r3, #2
 800d490:	d06e      	beq.n	800d570 <put_fat+0x11a>
 800d492:	e0c7      	b.n	800d624 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	61bb      	str	r3, [r7, #24]
 800d498:	69bb      	ldr	r3, [r7, #24]
 800d49a:	085b      	lsrs	r3, r3, #1
 800d49c:	69ba      	ldr	r2, [r7, #24]
 800d49e:	4413      	add	r3, r2
 800d4a0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d4a6:	69bb      	ldr	r3, [r7, #24]
 800d4a8:	0a5b      	lsrs	r3, r3, #9
 800d4aa:	4413      	add	r3, r2
 800d4ac:	4619      	mov	r1, r3
 800d4ae:	68f8      	ldr	r0, [r7, #12]
 800d4b0:	f7ff fe6e 	bl	800d190 <move_window>
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d4b8:	7ffb      	ldrb	r3, [r7, #31]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	f040 80ab 	bne.w	800d616 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d4c6:	69bb      	ldr	r3, [r7, #24]
 800d4c8:	1c59      	adds	r1, r3, #1
 800d4ca:	61b9      	str	r1, [r7, #24]
 800d4cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4d0:	4413      	add	r3, r2
 800d4d2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	f003 0301 	and.w	r3, r3, #1
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d00d      	beq.n	800d4fa <put_fat+0xa4>
 800d4de:	697b      	ldr	r3, [r7, #20]
 800d4e0:	781b      	ldrb	r3, [r3, #0]
 800d4e2:	b25b      	sxtb	r3, r3
 800d4e4:	f003 030f 	and.w	r3, r3, #15
 800d4e8:	b25a      	sxtb	r2, r3
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	b2db      	uxtb	r3, r3
 800d4ee:	011b      	lsls	r3, r3, #4
 800d4f0:	b25b      	sxtb	r3, r3
 800d4f2:	4313      	orrs	r3, r2
 800d4f4:	b25b      	sxtb	r3, r3
 800d4f6:	b2db      	uxtb	r3, r3
 800d4f8:	e001      	b.n	800d4fe <put_fat+0xa8>
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	b2db      	uxtb	r3, r3
 800d4fe:	697a      	ldr	r2, [r7, #20]
 800d500:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	2201      	movs	r2, #1
 800d506:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d50c:	69bb      	ldr	r3, [r7, #24]
 800d50e:	0a5b      	lsrs	r3, r3, #9
 800d510:	4413      	add	r3, r2
 800d512:	4619      	mov	r1, r3
 800d514:	68f8      	ldr	r0, [r7, #12]
 800d516:	f7ff fe3b 	bl	800d190 <move_window>
 800d51a:	4603      	mov	r3, r0
 800d51c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d51e:	7ffb      	ldrb	r3, [r7, #31]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d17a      	bne.n	800d61a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d52a:	69bb      	ldr	r3, [r7, #24]
 800d52c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d530:	4413      	add	r3, r2
 800d532:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	f003 0301 	and.w	r3, r3, #1
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d003      	beq.n	800d546 <put_fat+0xf0>
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	091b      	lsrs	r3, r3, #4
 800d542:	b2db      	uxtb	r3, r3
 800d544:	e00e      	b.n	800d564 <put_fat+0x10e>
 800d546:	697b      	ldr	r3, [r7, #20]
 800d548:	781b      	ldrb	r3, [r3, #0]
 800d54a:	b25b      	sxtb	r3, r3
 800d54c:	f023 030f 	bic.w	r3, r3, #15
 800d550:	b25a      	sxtb	r2, r3
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	0a1b      	lsrs	r3, r3, #8
 800d556:	b25b      	sxtb	r3, r3
 800d558:	f003 030f 	and.w	r3, r3, #15
 800d55c:	b25b      	sxtb	r3, r3
 800d55e:	4313      	orrs	r3, r2
 800d560:	b25b      	sxtb	r3, r3
 800d562:	b2db      	uxtb	r3, r3
 800d564:	697a      	ldr	r2, [r7, #20]
 800d566:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	2201      	movs	r2, #1
 800d56c:	70da      	strb	r2, [r3, #3]
			break;
 800d56e:	e059      	b.n	800d624 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	0a1b      	lsrs	r3, r3, #8
 800d578:	4413      	add	r3, r2
 800d57a:	4619      	mov	r1, r3
 800d57c:	68f8      	ldr	r0, [r7, #12]
 800d57e:	f7ff fe07 	bl	800d190 <move_window>
 800d582:	4603      	mov	r3, r0
 800d584:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d586:	7ffb      	ldrb	r3, [r7, #31]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d148      	bne.n	800d61e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	005b      	lsls	r3, r3, #1
 800d596:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d59a:	4413      	add	r3, r2
 800d59c:	687a      	ldr	r2, [r7, #4]
 800d59e:	b292      	uxth	r2, r2
 800d5a0:	4611      	mov	r1, r2
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f7ff fb7f 	bl	800cca6 <st_word>
			fs->wflag = 1;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	2201      	movs	r2, #1
 800d5ac:	70da      	strb	r2, [r3, #3]
			break;
 800d5ae:	e039      	b.n	800d624 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	09db      	lsrs	r3, r3, #7
 800d5b8:	4413      	add	r3, r2
 800d5ba:	4619      	mov	r1, r3
 800d5bc:	68f8      	ldr	r0, [r7, #12]
 800d5be:	f7ff fde7 	bl	800d190 <move_window>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d5c6:	7ffb      	ldrb	r3, [r7, #31]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d12a      	bne.n	800d622 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	009b      	lsls	r3, r3, #2
 800d5dc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d5e0:	4413      	add	r3, r2
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f7ff fb3c 	bl	800cc60 <ld_dword>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d5ee:	4323      	orrs	r3, r4
 800d5f0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	009b      	lsls	r3, r3, #2
 800d5fc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d600:	4413      	add	r3, r2
 800d602:	6879      	ldr	r1, [r7, #4]
 800d604:	4618      	mov	r0, r3
 800d606:	f7ff fb69 	bl	800ccdc <st_dword>
			fs->wflag = 1;
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	2201      	movs	r2, #1
 800d60e:	70da      	strb	r2, [r3, #3]
			break;
 800d610:	e008      	b.n	800d624 <put_fat+0x1ce>
		}
	}
 800d612:	bf00      	nop
 800d614:	e006      	b.n	800d624 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d616:	bf00      	nop
 800d618:	e004      	b.n	800d624 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d61a:	bf00      	nop
 800d61c:	e002      	b.n	800d624 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d61e:	bf00      	nop
 800d620:	e000      	b.n	800d624 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d622:	bf00      	nop
	return res;
 800d624:	7ffb      	ldrb	r3, [r7, #31]
}
 800d626:	4618      	mov	r0, r3
 800d628:	3724      	adds	r7, #36	; 0x24
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd90      	pop	{r4, r7, pc}

0800d62e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d62e:	b580      	push	{r7, lr}
 800d630:	b088      	sub	sp, #32
 800d632:	af00      	add	r7, sp, #0
 800d634:	60f8      	str	r0, [r7, #12]
 800d636:	60b9      	str	r1, [r7, #8]
 800d638:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d63a:	2300      	movs	r3, #0
 800d63c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	2b01      	cmp	r3, #1
 800d648:	d904      	bls.n	800d654 <remove_chain+0x26>
 800d64a:	69bb      	ldr	r3, [r7, #24]
 800d64c:	699b      	ldr	r3, [r3, #24]
 800d64e:	68ba      	ldr	r2, [r7, #8]
 800d650:	429a      	cmp	r2, r3
 800d652:	d301      	bcc.n	800d658 <remove_chain+0x2a>
 800d654:	2302      	movs	r3, #2
 800d656:	e04b      	b.n	800d6f0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d00c      	beq.n	800d678 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d65e:	f04f 32ff 	mov.w	r2, #4294967295
 800d662:	6879      	ldr	r1, [r7, #4]
 800d664:	69b8      	ldr	r0, [r7, #24]
 800d666:	f7ff fef6 	bl	800d456 <put_fat>
 800d66a:	4603      	mov	r3, r0
 800d66c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d66e:	7ffb      	ldrb	r3, [r7, #31]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d001      	beq.n	800d678 <remove_chain+0x4a>
 800d674:	7ffb      	ldrb	r3, [r7, #31]
 800d676:	e03b      	b.n	800d6f0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d678:	68b9      	ldr	r1, [r7, #8]
 800d67a:	68f8      	ldr	r0, [r7, #12]
 800d67c:	f7ff fe43 	bl	800d306 <get_fat>
 800d680:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d031      	beq.n	800d6ec <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	2b01      	cmp	r3, #1
 800d68c:	d101      	bne.n	800d692 <remove_chain+0x64>
 800d68e:	2302      	movs	r3, #2
 800d690:	e02e      	b.n	800d6f0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d692:	697b      	ldr	r3, [r7, #20]
 800d694:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d698:	d101      	bne.n	800d69e <remove_chain+0x70>
 800d69a:	2301      	movs	r3, #1
 800d69c:	e028      	b.n	800d6f0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d69e:	2200      	movs	r2, #0
 800d6a0:	68b9      	ldr	r1, [r7, #8]
 800d6a2:	69b8      	ldr	r0, [r7, #24]
 800d6a4:	f7ff fed7 	bl	800d456 <put_fat>
 800d6a8:	4603      	mov	r3, r0
 800d6aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d6ac:	7ffb      	ldrb	r3, [r7, #31]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d001      	beq.n	800d6b6 <remove_chain+0x88>
 800d6b2:	7ffb      	ldrb	r3, [r7, #31]
 800d6b4:	e01c      	b.n	800d6f0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d6b6:	69bb      	ldr	r3, [r7, #24]
 800d6b8:	695a      	ldr	r2, [r3, #20]
 800d6ba:	69bb      	ldr	r3, [r7, #24]
 800d6bc:	699b      	ldr	r3, [r3, #24]
 800d6be:	3b02      	subs	r3, #2
 800d6c0:	429a      	cmp	r2, r3
 800d6c2:	d20b      	bcs.n	800d6dc <remove_chain+0xae>
			fs->free_clst++;
 800d6c4:	69bb      	ldr	r3, [r7, #24]
 800d6c6:	695b      	ldr	r3, [r3, #20]
 800d6c8:	1c5a      	adds	r2, r3, #1
 800d6ca:	69bb      	ldr	r3, [r7, #24]
 800d6cc:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800d6ce:	69bb      	ldr	r3, [r7, #24]
 800d6d0:	791b      	ldrb	r3, [r3, #4]
 800d6d2:	f043 0301 	orr.w	r3, r3, #1
 800d6d6:	b2da      	uxtb	r2, r3
 800d6d8:	69bb      	ldr	r3, [r7, #24]
 800d6da:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d6dc:	697b      	ldr	r3, [r7, #20]
 800d6de:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d6e0:	69bb      	ldr	r3, [r7, #24]
 800d6e2:	699b      	ldr	r3, [r3, #24]
 800d6e4:	68ba      	ldr	r2, [r7, #8]
 800d6e6:	429a      	cmp	r2, r3
 800d6e8:	d3c6      	bcc.n	800d678 <remove_chain+0x4a>
 800d6ea:	e000      	b.n	800d6ee <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d6ec:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d6ee:	2300      	movs	r3, #0
}
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	3720      	adds	r7, #32
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bd80      	pop	{r7, pc}

0800d6f8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b088      	sub	sp, #32
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
 800d700:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d10d      	bne.n	800d72a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d70e:	693b      	ldr	r3, [r7, #16]
 800d710:	691b      	ldr	r3, [r3, #16]
 800d712:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d714:	69bb      	ldr	r3, [r7, #24]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d004      	beq.n	800d724 <create_chain+0x2c>
 800d71a:	693b      	ldr	r3, [r7, #16]
 800d71c:	699b      	ldr	r3, [r3, #24]
 800d71e:	69ba      	ldr	r2, [r7, #24]
 800d720:	429a      	cmp	r2, r3
 800d722:	d31b      	bcc.n	800d75c <create_chain+0x64>
 800d724:	2301      	movs	r3, #1
 800d726:	61bb      	str	r3, [r7, #24]
 800d728:	e018      	b.n	800d75c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d72a:	6839      	ldr	r1, [r7, #0]
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	f7ff fdea 	bl	800d306 <get_fat>
 800d732:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	2b01      	cmp	r3, #1
 800d738:	d801      	bhi.n	800d73e <create_chain+0x46>
 800d73a:	2301      	movs	r3, #1
 800d73c:	e070      	b.n	800d820 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d744:	d101      	bne.n	800d74a <create_chain+0x52>
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	e06a      	b.n	800d820 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d74a:	693b      	ldr	r3, [r7, #16]
 800d74c:	699b      	ldr	r3, [r3, #24]
 800d74e:	68fa      	ldr	r2, [r7, #12]
 800d750:	429a      	cmp	r2, r3
 800d752:	d201      	bcs.n	800d758 <create_chain+0x60>
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	e063      	b.n	800d820 <create_chain+0x128>
		scl = clst;
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d75c:	69bb      	ldr	r3, [r7, #24]
 800d75e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d760:	69fb      	ldr	r3, [r7, #28]
 800d762:	3301      	adds	r3, #1
 800d764:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d766:	693b      	ldr	r3, [r7, #16]
 800d768:	699b      	ldr	r3, [r3, #24]
 800d76a:	69fa      	ldr	r2, [r7, #28]
 800d76c:	429a      	cmp	r2, r3
 800d76e:	d307      	bcc.n	800d780 <create_chain+0x88>
				ncl = 2;
 800d770:	2302      	movs	r3, #2
 800d772:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d774:	69fa      	ldr	r2, [r7, #28]
 800d776:	69bb      	ldr	r3, [r7, #24]
 800d778:	429a      	cmp	r2, r3
 800d77a:	d901      	bls.n	800d780 <create_chain+0x88>
 800d77c:	2300      	movs	r3, #0
 800d77e:	e04f      	b.n	800d820 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d780:	69f9      	ldr	r1, [r7, #28]
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f7ff fdbf 	bl	800d306 <get_fat>
 800d788:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d00e      	beq.n	800d7ae <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	2b01      	cmp	r3, #1
 800d794:	d003      	beq.n	800d79e <create_chain+0xa6>
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d79c:	d101      	bne.n	800d7a2 <create_chain+0xaa>
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	e03e      	b.n	800d820 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d7a2:	69fa      	ldr	r2, [r7, #28]
 800d7a4:	69bb      	ldr	r3, [r7, #24]
 800d7a6:	429a      	cmp	r2, r3
 800d7a8:	d1da      	bne.n	800d760 <create_chain+0x68>
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	e038      	b.n	800d820 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d7ae:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d7b0:	f04f 32ff 	mov.w	r2, #4294967295
 800d7b4:	69f9      	ldr	r1, [r7, #28]
 800d7b6:	6938      	ldr	r0, [r7, #16]
 800d7b8:	f7ff fe4d 	bl	800d456 <put_fat>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d7c0:	7dfb      	ldrb	r3, [r7, #23]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d109      	bne.n	800d7da <create_chain+0xe2>
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d006      	beq.n	800d7da <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d7cc:	69fa      	ldr	r2, [r7, #28]
 800d7ce:	6839      	ldr	r1, [r7, #0]
 800d7d0:	6938      	ldr	r0, [r7, #16]
 800d7d2:	f7ff fe40 	bl	800d456 <put_fat>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d7da:	7dfb      	ldrb	r3, [r7, #23]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d116      	bne.n	800d80e <create_chain+0x116>
		fs->last_clst = ncl;
 800d7e0:	693b      	ldr	r3, [r7, #16]
 800d7e2:	69fa      	ldr	r2, [r7, #28]
 800d7e4:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d7e6:	693b      	ldr	r3, [r7, #16]
 800d7e8:	695a      	ldr	r2, [r3, #20]
 800d7ea:	693b      	ldr	r3, [r7, #16]
 800d7ec:	699b      	ldr	r3, [r3, #24]
 800d7ee:	3b02      	subs	r3, #2
 800d7f0:	429a      	cmp	r2, r3
 800d7f2:	d804      	bhi.n	800d7fe <create_chain+0x106>
 800d7f4:	693b      	ldr	r3, [r7, #16]
 800d7f6:	695b      	ldr	r3, [r3, #20]
 800d7f8:	1e5a      	subs	r2, r3, #1
 800d7fa:	693b      	ldr	r3, [r7, #16]
 800d7fc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800d7fe:	693b      	ldr	r3, [r7, #16]
 800d800:	791b      	ldrb	r3, [r3, #4]
 800d802:	f043 0301 	orr.w	r3, r3, #1
 800d806:	b2da      	uxtb	r2, r3
 800d808:	693b      	ldr	r3, [r7, #16]
 800d80a:	711a      	strb	r2, [r3, #4]
 800d80c:	e007      	b.n	800d81e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d80e:	7dfb      	ldrb	r3, [r7, #23]
 800d810:	2b01      	cmp	r3, #1
 800d812:	d102      	bne.n	800d81a <create_chain+0x122>
 800d814:	f04f 33ff 	mov.w	r3, #4294967295
 800d818:	e000      	b.n	800d81c <create_chain+0x124>
 800d81a:	2301      	movs	r3, #1
 800d81c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d81e:	69fb      	ldr	r3, [r7, #28]
}
 800d820:	4618      	mov	r0, r3
 800d822:	3720      	adds	r7, #32
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}

0800d828 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d828:	b480      	push	{r7}
 800d82a:	b087      	sub	sp, #28
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
 800d830:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d83c:	3304      	adds	r3, #4
 800d83e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	0a5b      	lsrs	r3, r3, #9
 800d844:	68fa      	ldr	r2, [r7, #12]
 800d846:	8952      	ldrh	r2, [r2, #10]
 800d848:	fbb3 f3f2 	udiv	r3, r3, r2
 800d84c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d84e:	693b      	ldr	r3, [r7, #16]
 800d850:	1d1a      	adds	r2, r3, #4
 800d852:	613a      	str	r2, [r7, #16]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d858:	68bb      	ldr	r3, [r7, #8]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d101      	bne.n	800d862 <clmt_clust+0x3a>
 800d85e:	2300      	movs	r3, #0
 800d860:	e010      	b.n	800d884 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d862:	697a      	ldr	r2, [r7, #20]
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	429a      	cmp	r2, r3
 800d868:	d307      	bcc.n	800d87a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d86a:	697a      	ldr	r2, [r7, #20]
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	1ad3      	subs	r3, r2, r3
 800d870:	617b      	str	r3, [r7, #20]
 800d872:	693b      	ldr	r3, [r7, #16]
 800d874:	3304      	adds	r3, #4
 800d876:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d878:	e7e9      	b.n	800d84e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d87a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d87c:	693b      	ldr	r3, [r7, #16]
 800d87e:	681a      	ldr	r2, [r3, #0]
 800d880:	697b      	ldr	r3, [r7, #20]
 800d882:	4413      	add	r3, r2
}
 800d884:	4618      	mov	r0, r3
 800d886:	371c      	adds	r7, #28
 800d888:	46bd      	mov	sp, r7
 800d88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88e:	4770      	bx	lr

0800d890 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b086      	sub	sp, #24
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
 800d898:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d8a6:	d204      	bcs.n	800d8b2 <dir_sdi+0x22>
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	f003 031f 	and.w	r3, r3, #31
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d001      	beq.n	800d8b6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d8b2:	2302      	movs	r3, #2
 800d8b4:	e063      	b.n	800d97e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	683a      	ldr	r2, [r7, #0]
 800d8ba:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	689b      	ldr	r3, [r3, #8]
 800d8c0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d8c2:	697b      	ldr	r3, [r7, #20]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d106      	bne.n	800d8d6 <dir_sdi+0x46>
 800d8c8:	693b      	ldr	r3, [r7, #16]
 800d8ca:	781b      	ldrb	r3, [r3, #0]
 800d8cc:	2b02      	cmp	r3, #2
 800d8ce:	d902      	bls.n	800d8d6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d8d0:	693b      	ldr	r3, [r7, #16]
 800d8d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8d4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d8d6:	697b      	ldr	r3, [r7, #20]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d10c      	bne.n	800d8f6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	095b      	lsrs	r3, r3, #5
 800d8e0:	693a      	ldr	r2, [r7, #16]
 800d8e2:	8912      	ldrh	r2, [r2, #8]
 800d8e4:	4293      	cmp	r3, r2
 800d8e6:	d301      	bcc.n	800d8ec <dir_sdi+0x5c>
 800d8e8:	2302      	movs	r3, #2
 800d8ea:	e048      	b.n	800d97e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	61da      	str	r2, [r3, #28]
 800d8f4:	e029      	b.n	800d94a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d8f6:	693b      	ldr	r3, [r7, #16]
 800d8f8:	895b      	ldrh	r3, [r3, #10]
 800d8fa:	025b      	lsls	r3, r3, #9
 800d8fc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d8fe:	e019      	b.n	800d934 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	6979      	ldr	r1, [r7, #20]
 800d904:	4618      	mov	r0, r3
 800d906:	f7ff fcfe 	bl	800d306 <get_fat>
 800d90a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d90c:	697b      	ldr	r3, [r7, #20]
 800d90e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d912:	d101      	bne.n	800d918 <dir_sdi+0x88>
 800d914:	2301      	movs	r3, #1
 800d916:	e032      	b.n	800d97e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	2b01      	cmp	r3, #1
 800d91c:	d904      	bls.n	800d928 <dir_sdi+0x98>
 800d91e:	693b      	ldr	r3, [r7, #16]
 800d920:	699b      	ldr	r3, [r3, #24]
 800d922:	697a      	ldr	r2, [r7, #20]
 800d924:	429a      	cmp	r2, r3
 800d926:	d301      	bcc.n	800d92c <dir_sdi+0x9c>
 800d928:	2302      	movs	r3, #2
 800d92a:	e028      	b.n	800d97e <dir_sdi+0xee>
			ofs -= csz;
 800d92c:	683a      	ldr	r2, [r7, #0]
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	1ad3      	subs	r3, r2, r3
 800d932:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d934:	683a      	ldr	r2, [r7, #0]
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	429a      	cmp	r2, r3
 800d93a:	d2e1      	bcs.n	800d900 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d93c:	6979      	ldr	r1, [r7, #20]
 800d93e:	6938      	ldr	r0, [r7, #16]
 800d940:	f7ff fcc2 	bl	800d2c8 <clust2sect>
 800d944:	4602      	mov	r2, r0
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	697a      	ldr	r2, [r7, #20]
 800d94e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	69db      	ldr	r3, [r3, #28]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d101      	bne.n	800d95c <dir_sdi+0xcc>
 800d958:	2302      	movs	r3, #2
 800d95a:	e010      	b.n	800d97e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	69da      	ldr	r2, [r3, #28]
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	0a5b      	lsrs	r3, r3, #9
 800d964:	441a      	add	r2, r3
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d976:	441a      	add	r2, r3
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d97c:	2300      	movs	r3, #0
}
 800d97e:	4618      	mov	r0, r3
 800d980:	3718      	adds	r7, #24
 800d982:	46bd      	mov	sp, r7
 800d984:	bd80      	pop	{r7, pc}

0800d986 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d986:	b580      	push	{r7, lr}
 800d988:	b086      	sub	sp, #24
 800d98a:	af00      	add	r7, sp, #0
 800d98c:	6078      	str	r0, [r7, #4]
 800d98e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	695b      	ldr	r3, [r3, #20]
 800d99a:	3320      	adds	r3, #32
 800d99c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	69db      	ldr	r3, [r3, #28]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d003      	beq.n	800d9ae <dir_next+0x28>
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d9ac:	d301      	bcc.n	800d9b2 <dir_next+0x2c>
 800d9ae:	2304      	movs	r3, #4
 800d9b0:	e0aa      	b.n	800db08 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	f040 8098 	bne.w	800daee <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	69db      	ldr	r3, [r3, #28]
 800d9c2:	1c5a      	adds	r2, r3, #1
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	699b      	ldr	r3, [r3, #24]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d10b      	bne.n	800d9e8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	095b      	lsrs	r3, r3, #5
 800d9d4:	68fa      	ldr	r2, [r7, #12]
 800d9d6:	8912      	ldrh	r2, [r2, #8]
 800d9d8:	4293      	cmp	r3, r2
 800d9da:	f0c0 8088 	bcc.w	800daee <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	61da      	str	r2, [r3, #28]
 800d9e4:	2304      	movs	r3, #4
 800d9e6:	e08f      	b.n	800db08 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	0a5b      	lsrs	r3, r3, #9
 800d9ec:	68fa      	ldr	r2, [r7, #12]
 800d9ee:	8952      	ldrh	r2, [r2, #10]
 800d9f0:	3a01      	subs	r2, #1
 800d9f2:	4013      	ands	r3, r2
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d17a      	bne.n	800daee <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d9f8:	687a      	ldr	r2, [r7, #4]
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	699b      	ldr	r3, [r3, #24]
 800d9fe:	4619      	mov	r1, r3
 800da00:	4610      	mov	r0, r2
 800da02:	f7ff fc80 	bl	800d306 <get_fat>
 800da06:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	2b01      	cmp	r3, #1
 800da0c:	d801      	bhi.n	800da12 <dir_next+0x8c>
 800da0e:	2302      	movs	r3, #2
 800da10:	e07a      	b.n	800db08 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800da12:	697b      	ldr	r3, [r7, #20]
 800da14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da18:	d101      	bne.n	800da1e <dir_next+0x98>
 800da1a:	2301      	movs	r3, #1
 800da1c:	e074      	b.n	800db08 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	699b      	ldr	r3, [r3, #24]
 800da22:	697a      	ldr	r2, [r7, #20]
 800da24:	429a      	cmp	r2, r3
 800da26:	d358      	bcc.n	800dada <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800da28:	683b      	ldr	r3, [r7, #0]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d104      	bne.n	800da38 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2200      	movs	r2, #0
 800da32:	61da      	str	r2, [r3, #28]
 800da34:	2304      	movs	r3, #4
 800da36:	e067      	b.n	800db08 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800da38:	687a      	ldr	r2, [r7, #4]
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	699b      	ldr	r3, [r3, #24]
 800da3e:	4619      	mov	r1, r3
 800da40:	4610      	mov	r0, r2
 800da42:	f7ff fe59 	bl	800d6f8 <create_chain>
 800da46:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800da48:	697b      	ldr	r3, [r7, #20]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d101      	bne.n	800da52 <dir_next+0xcc>
 800da4e:	2307      	movs	r3, #7
 800da50:	e05a      	b.n	800db08 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800da52:	697b      	ldr	r3, [r7, #20]
 800da54:	2b01      	cmp	r3, #1
 800da56:	d101      	bne.n	800da5c <dir_next+0xd6>
 800da58:	2302      	movs	r3, #2
 800da5a:	e055      	b.n	800db08 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da62:	d101      	bne.n	800da68 <dir_next+0xe2>
 800da64:	2301      	movs	r3, #1
 800da66:	e04f      	b.n	800db08 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800da68:	68f8      	ldr	r0, [r7, #12]
 800da6a:	f7ff fb4d 	bl	800d108 <sync_window>
 800da6e:	4603      	mov	r3, r0
 800da70:	2b00      	cmp	r3, #0
 800da72:	d001      	beq.n	800da78 <dir_next+0xf2>
 800da74:	2301      	movs	r3, #1
 800da76:	e047      	b.n	800db08 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	3334      	adds	r3, #52	; 0x34
 800da7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da80:	2100      	movs	r1, #0
 800da82:	4618      	mov	r0, r3
 800da84:	f7ff f977 	bl	800cd76 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800da88:	2300      	movs	r3, #0
 800da8a:	613b      	str	r3, [r7, #16]
 800da8c:	6979      	ldr	r1, [r7, #20]
 800da8e:	68f8      	ldr	r0, [r7, #12]
 800da90:	f7ff fc1a 	bl	800d2c8 <clust2sect>
 800da94:	4602      	mov	r2, r0
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	631a      	str	r2, [r3, #48]	; 0x30
 800da9a:	e012      	b.n	800dac2 <dir_next+0x13c>
						fs->wflag = 1;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	2201      	movs	r2, #1
 800daa0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800daa2:	68f8      	ldr	r0, [r7, #12]
 800daa4:	f7ff fb30 	bl	800d108 <sync_window>
 800daa8:	4603      	mov	r3, r0
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d001      	beq.n	800dab2 <dir_next+0x12c>
 800daae:	2301      	movs	r3, #1
 800dab0:	e02a      	b.n	800db08 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800dab2:	693b      	ldr	r3, [r7, #16]
 800dab4:	3301      	adds	r3, #1
 800dab6:	613b      	str	r3, [r7, #16]
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dabc:	1c5a      	adds	r2, r3, #1
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	631a      	str	r2, [r3, #48]	; 0x30
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	895b      	ldrh	r3, [r3, #10]
 800dac6:	461a      	mov	r2, r3
 800dac8:	693b      	ldr	r3, [r7, #16]
 800daca:	4293      	cmp	r3, r2
 800dacc:	d3e6      	bcc.n	800da9c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dad2:	693b      	ldr	r3, [r7, #16]
 800dad4:	1ad2      	subs	r2, r2, r3
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	697a      	ldr	r2, [r7, #20]
 800dade:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800dae0:	6979      	ldr	r1, [r7, #20]
 800dae2:	68f8      	ldr	r0, [r7, #12]
 800dae4:	f7ff fbf0 	bl	800d2c8 <clust2sect>
 800dae8:	4602      	mov	r2, r0
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	68ba      	ldr	r2, [r7, #8]
 800daf2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db00:	441a      	add	r2, r3
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800db06:	2300      	movs	r3, #0
}
 800db08:	4618      	mov	r0, r3
 800db0a:	3718      	adds	r7, #24
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bd80      	pop	{r7, pc}

0800db10 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b086      	sub	sp, #24
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
 800db18:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800db20:	2100      	movs	r1, #0
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f7ff feb4 	bl	800d890 <dir_sdi>
 800db28:	4603      	mov	r3, r0
 800db2a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800db2c:	7dfb      	ldrb	r3, [r7, #23]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d12b      	bne.n	800db8a <dir_alloc+0x7a>
		n = 0;
 800db32:	2300      	movs	r3, #0
 800db34:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	69db      	ldr	r3, [r3, #28]
 800db3a:	4619      	mov	r1, r3
 800db3c:	68f8      	ldr	r0, [r7, #12]
 800db3e:	f7ff fb27 	bl	800d190 <move_window>
 800db42:	4603      	mov	r3, r0
 800db44:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800db46:	7dfb      	ldrb	r3, [r7, #23]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d11d      	bne.n	800db88 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6a1b      	ldr	r3, [r3, #32]
 800db50:	781b      	ldrb	r3, [r3, #0]
 800db52:	2be5      	cmp	r3, #229	; 0xe5
 800db54:	d004      	beq.n	800db60 <dir_alloc+0x50>
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	6a1b      	ldr	r3, [r3, #32]
 800db5a:	781b      	ldrb	r3, [r3, #0]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d107      	bne.n	800db70 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800db60:	693b      	ldr	r3, [r7, #16]
 800db62:	3301      	adds	r3, #1
 800db64:	613b      	str	r3, [r7, #16]
 800db66:	693a      	ldr	r2, [r7, #16]
 800db68:	683b      	ldr	r3, [r7, #0]
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d102      	bne.n	800db74 <dir_alloc+0x64>
 800db6e:	e00c      	b.n	800db8a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800db70:	2300      	movs	r3, #0
 800db72:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800db74:	2101      	movs	r1, #1
 800db76:	6878      	ldr	r0, [r7, #4]
 800db78:	f7ff ff05 	bl	800d986 <dir_next>
 800db7c:	4603      	mov	r3, r0
 800db7e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800db80:	7dfb      	ldrb	r3, [r7, #23]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d0d7      	beq.n	800db36 <dir_alloc+0x26>
 800db86:	e000      	b.n	800db8a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800db88:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800db8a:	7dfb      	ldrb	r3, [r7, #23]
 800db8c:	2b04      	cmp	r3, #4
 800db8e:	d101      	bne.n	800db94 <dir_alloc+0x84>
 800db90:	2307      	movs	r3, #7
 800db92:	75fb      	strb	r3, [r7, #23]
	return res;
 800db94:	7dfb      	ldrb	r3, [r7, #23]
}
 800db96:	4618      	mov	r0, r3
 800db98:	3718      	adds	r7, #24
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}

0800db9e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800db9e:	b580      	push	{r7, lr}
 800dba0:	b084      	sub	sp, #16
 800dba2:	af00      	add	r7, sp, #0
 800dba4:	6078      	str	r0, [r7, #4]
 800dba6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	331a      	adds	r3, #26
 800dbac:	4618      	mov	r0, r3
 800dbae:	f7ff f83f 	bl	800cc30 <ld_word>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	781b      	ldrb	r3, [r3, #0]
 800dbba:	2b03      	cmp	r3, #3
 800dbbc:	d109      	bne.n	800dbd2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	3314      	adds	r3, #20
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f7ff f834 	bl	800cc30 <ld_word>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	041b      	lsls	r3, r3, #16
 800dbcc:	68fa      	ldr	r2, [r7, #12]
 800dbce:	4313      	orrs	r3, r2
 800dbd0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
}
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	3710      	adds	r7, #16
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}

0800dbdc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b084      	sub	sp, #16
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	60f8      	str	r0, [r7, #12]
 800dbe4:	60b9      	str	r1, [r7, #8]
 800dbe6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	331a      	adds	r3, #26
 800dbec:	687a      	ldr	r2, [r7, #4]
 800dbee:	b292      	uxth	r2, r2
 800dbf0:	4611      	mov	r1, r2
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f7ff f857 	bl	800cca6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	781b      	ldrb	r3, [r3, #0]
 800dbfc:	2b03      	cmp	r3, #3
 800dbfe:	d109      	bne.n	800dc14 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800dc00:	68bb      	ldr	r3, [r7, #8]
 800dc02:	f103 0214 	add.w	r2, r3, #20
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	0c1b      	lsrs	r3, r3, #16
 800dc0a:	b29b      	uxth	r3, r3
 800dc0c:	4619      	mov	r1, r3
 800dc0e:	4610      	mov	r0, r2
 800dc10:	f7ff f849 	bl	800cca6 <st_word>
	}
}
 800dc14:	bf00      	nop
 800dc16:	3710      	adds	r7, #16
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}

0800dc1c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800dc1c:	b590      	push	{r4, r7, lr}
 800dc1e:	b087      	sub	sp, #28
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
 800dc24:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800dc26:	683b      	ldr	r3, [r7, #0]
 800dc28:	331a      	adds	r3, #26
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f7ff f800 	bl	800cc30 <ld_word>
 800dc30:	4603      	mov	r3, r0
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d001      	beq.n	800dc3a <cmp_lfn+0x1e>
 800dc36:	2300      	movs	r3, #0
 800dc38:	e059      	b.n	800dcee <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800dc3a:	683b      	ldr	r3, [r7, #0]
 800dc3c:	781b      	ldrb	r3, [r3, #0]
 800dc3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dc42:	1e5a      	subs	r2, r3, #1
 800dc44:	4613      	mov	r3, r2
 800dc46:	005b      	lsls	r3, r3, #1
 800dc48:	4413      	add	r3, r2
 800dc4a:	009b      	lsls	r3, r3, #2
 800dc4c:	4413      	add	r3, r2
 800dc4e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800dc50:	2301      	movs	r3, #1
 800dc52:	81fb      	strh	r3, [r7, #14]
 800dc54:	2300      	movs	r3, #0
 800dc56:	613b      	str	r3, [r7, #16]
 800dc58:	e033      	b.n	800dcc2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800dc5a:	4a27      	ldr	r2, [pc, #156]	; (800dcf8 <cmp_lfn+0xdc>)
 800dc5c:	693b      	ldr	r3, [r7, #16]
 800dc5e:	4413      	add	r3, r2
 800dc60:	781b      	ldrb	r3, [r3, #0]
 800dc62:	461a      	mov	r2, r3
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	4413      	add	r3, r2
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f7fe ffe1 	bl	800cc30 <ld_word>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800dc72:	89fb      	ldrh	r3, [r7, #14]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d01a      	beq.n	800dcae <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800dc78:	697b      	ldr	r3, [r7, #20]
 800dc7a:	2bfe      	cmp	r3, #254	; 0xfe
 800dc7c:	d812      	bhi.n	800dca4 <cmp_lfn+0x88>
 800dc7e:	89bb      	ldrh	r3, [r7, #12]
 800dc80:	4618      	mov	r0, r3
 800dc82:	f002 f99f 	bl	800ffc4 <ff_wtoupper>
 800dc86:	4603      	mov	r3, r0
 800dc88:	461c      	mov	r4, r3
 800dc8a:	697b      	ldr	r3, [r7, #20]
 800dc8c:	1c5a      	adds	r2, r3, #1
 800dc8e:	617a      	str	r2, [r7, #20]
 800dc90:	005b      	lsls	r3, r3, #1
 800dc92:	687a      	ldr	r2, [r7, #4]
 800dc94:	4413      	add	r3, r2
 800dc96:	881b      	ldrh	r3, [r3, #0]
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f002 f993 	bl	800ffc4 <ff_wtoupper>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	429c      	cmp	r4, r3
 800dca2:	d001      	beq.n	800dca8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800dca4:	2300      	movs	r3, #0
 800dca6:	e022      	b.n	800dcee <cmp_lfn+0xd2>
			}
			wc = uc;
 800dca8:	89bb      	ldrh	r3, [r7, #12]
 800dcaa:	81fb      	strh	r3, [r7, #14]
 800dcac:	e006      	b.n	800dcbc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800dcae:	89bb      	ldrh	r3, [r7, #12]
 800dcb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dcb4:	4293      	cmp	r3, r2
 800dcb6:	d001      	beq.n	800dcbc <cmp_lfn+0xa0>
 800dcb8:	2300      	movs	r3, #0
 800dcba:	e018      	b.n	800dcee <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800dcbc:	693b      	ldr	r3, [r7, #16]
 800dcbe:	3301      	adds	r3, #1
 800dcc0:	613b      	str	r3, [r7, #16]
 800dcc2:	693b      	ldr	r3, [r7, #16]
 800dcc4:	2b0c      	cmp	r3, #12
 800dcc6:	d9c8      	bls.n	800dc5a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	781b      	ldrb	r3, [r3, #0]
 800dccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d00b      	beq.n	800dcec <cmp_lfn+0xd0>
 800dcd4:	89fb      	ldrh	r3, [r7, #14]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d008      	beq.n	800dcec <cmp_lfn+0xd0>
 800dcda:	697b      	ldr	r3, [r7, #20]
 800dcdc:	005b      	lsls	r3, r3, #1
 800dcde:	687a      	ldr	r2, [r7, #4]
 800dce0:	4413      	add	r3, r2
 800dce2:	881b      	ldrh	r3, [r3, #0]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d001      	beq.n	800dcec <cmp_lfn+0xd0>
 800dce8:	2300      	movs	r3, #0
 800dcea:	e000      	b.n	800dcee <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800dcec:	2301      	movs	r3, #1
}
 800dcee:	4618      	mov	r0, r3
 800dcf0:	371c      	adds	r7, #28
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd90      	pop	{r4, r7, pc}
 800dcf6:	bf00      	nop
 800dcf8:	08010bd8 	.word	0x08010bd8

0800dcfc <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b086      	sub	sp, #24
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
 800dd04:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	331a      	adds	r3, #26
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	f7fe ff90 	bl	800cc30 <ld_word>
 800dd10:	4603      	mov	r3, r0
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d001      	beq.n	800dd1a <pick_lfn+0x1e>
 800dd16:	2300      	movs	r3, #0
 800dd18:	e04d      	b.n	800ddb6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	781b      	ldrb	r3, [r3, #0]
 800dd1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dd22:	1e5a      	subs	r2, r3, #1
 800dd24:	4613      	mov	r3, r2
 800dd26:	005b      	lsls	r3, r3, #1
 800dd28:	4413      	add	r3, r2
 800dd2a:	009b      	lsls	r3, r3, #2
 800dd2c:	4413      	add	r3, r2
 800dd2e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800dd30:	2301      	movs	r3, #1
 800dd32:	81fb      	strh	r3, [r7, #14]
 800dd34:	2300      	movs	r3, #0
 800dd36:	613b      	str	r3, [r7, #16]
 800dd38:	e028      	b.n	800dd8c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800dd3a:	4a21      	ldr	r2, [pc, #132]	; (800ddc0 <pick_lfn+0xc4>)
 800dd3c:	693b      	ldr	r3, [r7, #16]
 800dd3e:	4413      	add	r3, r2
 800dd40:	781b      	ldrb	r3, [r3, #0]
 800dd42:	461a      	mov	r2, r3
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	4413      	add	r3, r2
 800dd48:	4618      	mov	r0, r3
 800dd4a:	f7fe ff71 	bl	800cc30 <ld_word>
 800dd4e:	4603      	mov	r3, r0
 800dd50:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800dd52:	89fb      	ldrh	r3, [r7, #14]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d00f      	beq.n	800dd78 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800dd58:	697b      	ldr	r3, [r7, #20]
 800dd5a:	2bfe      	cmp	r3, #254	; 0xfe
 800dd5c:	d901      	bls.n	800dd62 <pick_lfn+0x66>
 800dd5e:	2300      	movs	r3, #0
 800dd60:	e029      	b.n	800ddb6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800dd62:	89bb      	ldrh	r3, [r7, #12]
 800dd64:	81fb      	strh	r3, [r7, #14]
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	1c5a      	adds	r2, r3, #1
 800dd6a:	617a      	str	r2, [r7, #20]
 800dd6c:	005b      	lsls	r3, r3, #1
 800dd6e:	687a      	ldr	r2, [r7, #4]
 800dd70:	4413      	add	r3, r2
 800dd72:	89fa      	ldrh	r2, [r7, #14]
 800dd74:	801a      	strh	r2, [r3, #0]
 800dd76:	e006      	b.n	800dd86 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800dd78:	89bb      	ldrh	r3, [r7, #12]
 800dd7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd7e:	4293      	cmp	r3, r2
 800dd80:	d001      	beq.n	800dd86 <pick_lfn+0x8a>
 800dd82:	2300      	movs	r3, #0
 800dd84:	e017      	b.n	800ddb6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800dd86:	693b      	ldr	r3, [r7, #16]
 800dd88:	3301      	adds	r3, #1
 800dd8a:	613b      	str	r3, [r7, #16]
 800dd8c:	693b      	ldr	r3, [r7, #16]
 800dd8e:	2b0c      	cmp	r3, #12
 800dd90:	d9d3      	bls.n	800dd3a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	781b      	ldrb	r3, [r3, #0]
 800dd96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d00a      	beq.n	800ddb4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800dd9e:	697b      	ldr	r3, [r7, #20]
 800dda0:	2bfe      	cmp	r3, #254	; 0xfe
 800dda2:	d901      	bls.n	800dda8 <pick_lfn+0xac>
 800dda4:	2300      	movs	r3, #0
 800dda6:	e006      	b.n	800ddb6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800dda8:	697b      	ldr	r3, [r7, #20]
 800ddaa:	005b      	lsls	r3, r3, #1
 800ddac:	687a      	ldr	r2, [r7, #4]
 800ddae:	4413      	add	r3, r2
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800ddb4:	2301      	movs	r3, #1
}
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	3718      	adds	r7, #24
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	bd80      	pop	{r7, pc}
 800ddbe:	bf00      	nop
 800ddc0:	08010bd8 	.word	0x08010bd8

0800ddc4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b088      	sub	sp, #32
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	60f8      	str	r0, [r7, #12]
 800ddcc:	60b9      	str	r1, [r7, #8]
 800ddce:	4611      	mov	r1, r2
 800ddd0:	461a      	mov	r2, r3
 800ddd2:	460b      	mov	r3, r1
 800ddd4:	71fb      	strb	r3, [r7, #7]
 800ddd6:	4613      	mov	r3, r2
 800ddd8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	330d      	adds	r3, #13
 800ddde:	79ba      	ldrb	r2, [r7, #6]
 800dde0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800dde2:	68bb      	ldr	r3, [r7, #8]
 800dde4:	330b      	adds	r3, #11
 800dde6:	220f      	movs	r2, #15
 800dde8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ddea:	68bb      	ldr	r3, [r7, #8]
 800ddec:	330c      	adds	r3, #12
 800ddee:	2200      	movs	r2, #0
 800ddf0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800ddf2:	68bb      	ldr	r3, [r7, #8]
 800ddf4:	331a      	adds	r3, #26
 800ddf6:	2100      	movs	r1, #0
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	f7fe ff54 	bl	800cca6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ddfe:	79fb      	ldrb	r3, [r7, #7]
 800de00:	1e5a      	subs	r2, r3, #1
 800de02:	4613      	mov	r3, r2
 800de04:	005b      	lsls	r3, r3, #1
 800de06:	4413      	add	r3, r2
 800de08:	009b      	lsls	r3, r3, #2
 800de0a:	4413      	add	r3, r2
 800de0c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800de0e:	2300      	movs	r3, #0
 800de10:	82fb      	strh	r3, [r7, #22]
 800de12:	2300      	movs	r3, #0
 800de14:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800de16:	8afb      	ldrh	r3, [r7, #22]
 800de18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de1c:	4293      	cmp	r3, r2
 800de1e:	d007      	beq.n	800de30 <put_lfn+0x6c>
 800de20:	69fb      	ldr	r3, [r7, #28]
 800de22:	1c5a      	adds	r2, r3, #1
 800de24:	61fa      	str	r2, [r7, #28]
 800de26:	005b      	lsls	r3, r3, #1
 800de28:	68fa      	ldr	r2, [r7, #12]
 800de2a:	4413      	add	r3, r2
 800de2c:	881b      	ldrh	r3, [r3, #0]
 800de2e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800de30:	4a17      	ldr	r2, [pc, #92]	; (800de90 <put_lfn+0xcc>)
 800de32:	69bb      	ldr	r3, [r7, #24]
 800de34:	4413      	add	r3, r2
 800de36:	781b      	ldrb	r3, [r3, #0]
 800de38:	461a      	mov	r2, r3
 800de3a:	68bb      	ldr	r3, [r7, #8]
 800de3c:	4413      	add	r3, r2
 800de3e:	8afa      	ldrh	r2, [r7, #22]
 800de40:	4611      	mov	r1, r2
 800de42:	4618      	mov	r0, r3
 800de44:	f7fe ff2f 	bl	800cca6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800de48:	8afb      	ldrh	r3, [r7, #22]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d102      	bne.n	800de54 <put_lfn+0x90>
 800de4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800de52:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800de54:	69bb      	ldr	r3, [r7, #24]
 800de56:	3301      	adds	r3, #1
 800de58:	61bb      	str	r3, [r7, #24]
 800de5a:	69bb      	ldr	r3, [r7, #24]
 800de5c:	2b0c      	cmp	r3, #12
 800de5e:	d9da      	bls.n	800de16 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800de60:	8afb      	ldrh	r3, [r7, #22]
 800de62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de66:	4293      	cmp	r3, r2
 800de68:	d006      	beq.n	800de78 <put_lfn+0xb4>
 800de6a:	69fb      	ldr	r3, [r7, #28]
 800de6c:	005b      	lsls	r3, r3, #1
 800de6e:	68fa      	ldr	r2, [r7, #12]
 800de70:	4413      	add	r3, r2
 800de72:	881b      	ldrh	r3, [r3, #0]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d103      	bne.n	800de80 <put_lfn+0xbc>
 800de78:	79fb      	ldrb	r3, [r7, #7]
 800de7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de7e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	79fa      	ldrb	r2, [r7, #7]
 800de84:	701a      	strb	r2, [r3, #0]
}
 800de86:	bf00      	nop
 800de88:	3720      	adds	r7, #32
 800de8a:	46bd      	mov	sp, r7
 800de8c:	bd80      	pop	{r7, pc}
 800de8e:	bf00      	nop
 800de90:	08010bd8 	.word	0x08010bd8

0800de94 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b08c      	sub	sp, #48	; 0x30
 800de98:	af00      	add	r7, sp, #0
 800de9a:	60f8      	str	r0, [r7, #12]
 800de9c:	60b9      	str	r1, [r7, #8]
 800de9e:	607a      	str	r2, [r7, #4]
 800dea0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800dea2:	220b      	movs	r2, #11
 800dea4:	68b9      	ldr	r1, [r7, #8]
 800dea6:	68f8      	ldr	r0, [r7, #12]
 800dea8:	f7fe ff44 	bl	800cd34 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	2b05      	cmp	r3, #5
 800deb0:	d92b      	bls.n	800df0a <gen_numname+0x76>
		sr = seq;
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800deb6:	e022      	b.n	800defe <gen_numname+0x6a>
			wc = *lfn++;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	1c9a      	adds	r2, r3, #2
 800debc:	607a      	str	r2, [r7, #4]
 800debe:	881b      	ldrh	r3, [r3, #0]
 800dec0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800dec2:	2300      	movs	r3, #0
 800dec4:	62bb      	str	r3, [r7, #40]	; 0x28
 800dec6:	e017      	b.n	800def8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800dec8:	69fb      	ldr	r3, [r7, #28]
 800deca:	005a      	lsls	r2, r3, #1
 800decc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dece:	f003 0301 	and.w	r3, r3, #1
 800ded2:	4413      	add	r3, r2
 800ded4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ded6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ded8:	085b      	lsrs	r3, r3, #1
 800deda:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800dedc:	69fb      	ldr	r3, [r7, #28]
 800dede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d005      	beq.n	800def2 <gen_numname+0x5e>
 800dee6:	69fb      	ldr	r3, [r7, #28]
 800dee8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800deec:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800def0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800def2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def4:	3301      	adds	r3, #1
 800def6:	62bb      	str	r3, [r7, #40]	; 0x28
 800def8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800defa:	2b0f      	cmp	r3, #15
 800defc:	d9e4      	bls.n	800dec8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	881b      	ldrh	r3, [r3, #0]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d1d8      	bne.n	800deb8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800df06:	69fb      	ldr	r3, [r7, #28]
 800df08:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800df0a:	2307      	movs	r3, #7
 800df0c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	b2db      	uxtb	r3, r3
 800df12:	f003 030f 	and.w	r3, r3, #15
 800df16:	b2db      	uxtb	r3, r3
 800df18:	3330      	adds	r3, #48	; 0x30
 800df1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800df1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800df22:	2b39      	cmp	r3, #57	; 0x39
 800df24:	d904      	bls.n	800df30 <gen_numname+0x9c>
 800df26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800df2a:	3307      	adds	r3, #7
 800df2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800df30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df32:	1e5a      	subs	r2, r3, #1
 800df34:	62ba      	str	r2, [r7, #40]	; 0x28
 800df36:	3330      	adds	r3, #48	; 0x30
 800df38:	443b      	add	r3, r7
 800df3a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800df3e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	091b      	lsrs	r3, r3, #4
 800df46:	603b      	str	r3, [r7, #0]
	} while (seq);
 800df48:	683b      	ldr	r3, [r7, #0]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d1df      	bne.n	800df0e <gen_numname+0x7a>
	ns[i] = '~';
 800df4e:	f107 0214 	add.w	r2, r7, #20
 800df52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df54:	4413      	add	r3, r2
 800df56:	227e      	movs	r2, #126	; 0x7e
 800df58:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800df5a:	2300      	movs	r3, #0
 800df5c:	627b      	str	r3, [r7, #36]	; 0x24
 800df5e:	e002      	b.n	800df66 <gen_numname+0xd2>
 800df60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df62:	3301      	adds	r3, #1
 800df64:	627b      	str	r3, [r7, #36]	; 0x24
 800df66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df6a:	429a      	cmp	r2, r3
 800df6c:	d205      	bcs.n	800df7a <gen_numname+0xe6>
 800df6e:	68fa      	ldr	r2, [r7, #12]
 800df70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df72:	4413      	add	r3, r2
 800df74:	781b      	ldrb	r3, [r3, #0]
 800df76:	2b20      	cmp	r3, #32
 800df78:	d1f2      	bne.n	800df60 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800df7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df7c:	2b07      	cmp	r3, #7
 800df7e:	d807      	bhi.n	800df90 <gen_numname+0xfc>
 800df80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df82:	1c5a      	adds	r2, r3, #1
 800df84:	62ba      	str	r2, [r7, #40]	; 0x28
 800df86:	3330      	adds	r3, #48	; 0x30
 800df88:	443b      	add	r3, r7
 800df8a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800df8e:	e000      	b.n	800df92 <gen_numname+0xfe>
 800df90:	2120      	movs	r1, #32
 800df92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df94:	1c5a      	adds	r2, r3, #1
 800df96:	627a      	str	r2, [r7, #36]	; 0x24
 800df98:	68fa      	ldr	r2, [r7, #12]
 800df9a:	4413      	add	r3, r2
 800df9c:	460a      	mov	r2, r1
 800df9e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800dfa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa2:	2b07      	cmp	r3, #7
 800dfa4:	d9e9      	bls.n	800df7a <gen_numname+0xe6>
}
 800dfa6:	bf00      	nop
 800dfa8:	bf00      	nop
 800dfaa:	3730      	adds	r7, #48	; 0x30
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd80      	pop	{r7, pc}

0800dfb0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800dfb0:	b480      	push	{r7}
 800dfb2:	b085      	sub	sp, #20
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800dfb8:	2300      	movs	r3, #0
 800dfba:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800dfbc:	230b      	movs	r3, #11
 800dfbe:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800dfc0:	7bfb      	ldrb	r3, [r7, #15]
 800dfc2:	b2da      	uxtb	r2, r3
 800dfc4:	0852      	lsrs	r2, r2, #1
 800dfc6:	01db      	lsls	r3, r3, #7
 800dfc8:	4313      	orrs	r3, r2
 800dfca:	b2da      	uxtb	r2, r3
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	1c59      	adds	r1, r3, #1
 800dfd0:	6079      	str	r1, [r7, #4]
 800dfd2:	781b      	ldrb	r3, [r3, #0]
 800dfd4:	4413      	add	r3, r2
 800dfd6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800dfd8:	68bb      	ldr	r3, [r7, #8]
 800dfda:	3b01      	subs	r3, #1
 800dfdc:	60bb      	str	r3, [r7, #8]
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d1ed      	bne.n	800dfc0 <sum_sfn+0x10>
	return sum;
 800dfe4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	3714      	adds	r7, #20
 800dfea:	46bd      	mov	sp, r7
 800dfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff0:	4770      	bx	lr

0800dff2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800dff2:	b580      	push	{r7, lr}
 800dff4:	b086      	sub	sp, #24
 800dff6:	af00      	add	r7, sp, #0
 800dff8:	6078      	str	r0, [r7, #4]
 800dffa:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800dffc:	2304      	movs	r3, #4
 800dffe:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800e006:	23ff      	movs	r3, #255	; 0xff
 800e008:	757b      	strb	r3, [r7, #21]
 800e00a:	23ff      	movs	r3, #255	; 0xff
 800e00c:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800e00e:	e081      	b.n	800e114 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	69db      	ldr	r3, [r3, #28]
 800e014:	4619      	mov	r1, r3
 800e016:	6938      	ldr	r0, [r7, #16]
 800e018:	f7ff f8ba 	bl	800d190 <move_window>
 800e01c:	4603      	mov	r3, r0
 800e01e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e020:	7dfb      	ldrb	r3, [r7, #23]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d17c      	bne.n	800e120 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	6a1b      	ldr	r3, [r3, #32]
 800e02a:	781b      	ldrb	r3, [r3, #0]
 800e02c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800e02e:	7dbb      	ldrb	r3, [r7, #22]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d102      	bne.n	800e03a <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800e034:	2304      	movs	r3, #4
 800e036:	75fb      	strb	r3, [r7, #23]
 800e038:	e077      	b.n	800e12a <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	6a1b      	ldr	r3, [r3, #32]
 800e03e:	330b      	adds	r3, #11
 800e040:	781b      	ldrb	r3, [r3, #0]
 800e042:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e046:	73fb      	strb	r3, [r7, #15]
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	7bfa      	ldrb	r2, [r7, #15]
 800e04c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800e04e:	7dbb      	ldrb	r3, [r7, #22]
 800e050:	2be5      	cmp	r3, #229	; 0xe5
 800e052:	d00e      	beq.n	800e072 <dir_read+0x80>
 800e054:	7dbb      	ldrb	r3, [r7, #22]
 800e056:	2b2e      	cmp	r3, #46	; 0x2e
 800e058:	d00b      	beq.n	800e072 <dir_read+0x80>
 800e05a:	7bfb      	ldrb	r3, [r7, #15]
 800e05c:	f023 0320 	bic.w	r3, r3, #32
 800e060:	2b08      	cmp	r3, #8
 800e062:	bf0c      	ite	eq
 800e064:	2301      	moveq	r3, #1
 800e066:	2300      	movne	r3, #0
 800e068:	b2db      	uxtb	r3, r3
 800e06a:	461a      	mov	r2, r3
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	4293      	cmp	r3, r2
 800e070:	d002      	beq.n	800e078 <dir_read+0x86>
				ord = 0xFF;
 800e072:	23ff      	movs	r3, #255	; 0xff
 800e074:	757b      	strb	r3, [r7, #21]
 800e076:	e044      	b.n	800e102 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800e078:	7bfb      	ldrb	r3, [r7, #15]
 800e07a:	2b0f      	cmp	r3, #15
 800e07c:	d12f      	bne.n	800e0de <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800e07e:	7dbb      	ldrb	r3, [r7, #22]
 800e080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e084:	2b00      	cmp	r3, #0
 800e086:	d00d      	beq.n	800e0a4 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	6a1b      	ldr	r3, [r3, #32]
 800e08c:	7b5b      	ldrb	r3, [r3, #13]
 800e08e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800e090:	7dbb      	ldrb	r3, [r7, #22]
 800e092:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e096:	75bb      	strb	r3, [r7, #22]
 800e098:	7dbb      	ldrb	r3, [r7, #22]
 800e09a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	695a      	ldr	r2, [r3, #20]
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e0a4:	7dba      	ldrb	r2, [r7, #22]
 800e0a6:	7d7b      	ldrb	r3, [r7, #21]
 800e0a8:	429a      	cmp	r2, r3
 800e0aa:	d115      	bne.n	800e0d8 <dir_read+0xe6>
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	6a1b      	ldr	r3, [r3, #32]
 800e0b0:	330d      	adds	r3, #13
 800e0b2:	781b      	ldrb	r3, [r3, #0]
 800e0b4:	7d3a      	ldrb	r2, [r7, #20]
 800e0b6:	429a      	cmp	r2, r3
 800e0b8:	d10e      	bne.n	800e0d8 <dir_read+0xe6>
 800e0ba:	693b      	ldr	r3, [r7, #16]
 800e0bc:	68da      	ldr	r2, [r3, #12]
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	6a1b      	ldr	r3, [r3, #32]
 800e0c2:	4619      	mov	r1, r3
 800e0c4:	4610      	mov	r0, r2
 800e0c6:	f7ff fe19 	bl	800dcfc <pick_lfn>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d003      	beq.n	800e0d8 <dir_read+0xe6>
 800e0d0:	7d7b      	ldrb	r3, [r7, #21]
 800e0d2:	3b01      	subs	r3, #1
 800e0d4:	b2db      	uxtb	r3, r3
 800e0d6:	e000      	b.n	800e0da <dir_read+0xe8>
 800e0d8:	23ff      	movs	r3, #255	; 0xff
 800e0da:	757b      	strb	r3, [r7, #21]
 800e0dc:	e011      	b.n	800e102 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800e0de:	7d7b      	ldrb	r3, [r7, #21]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d109      	bne.n	800e0f8 <dir_read+0x106>
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	6a1b      	ldr	r3, [r3, #32]
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	f7ff ff61 	bl	800dfb0 <sum_sfn>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	461a      	mov	r2, r3
 800e0f2:	7d3b      	ldrb	r3, [r7, #20]
 800e0f4:	4293      	cmp	r3, r2
 800e0f6:	d015      	beq.n	800e124 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f04f 32ff 	mov.w	r2, #4294967295
 800e0fe:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800e100:	e010      	b.n	800e124 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800e102:	2100      	movs	r1, #0
 800e104:	6878      	ldr	r0, [r7, #4]
 800e106:	f7ff fc3e 	bl	800d986 <dir_next>
 800e10a:	4603      	mov	r3, r0
 800e10c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e10e:	7dfb      	ldrb	r3, [r7, #23]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d109      	bne.n	800e128 <dir_read+0x136>
	while (dp->sect) {
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	69db      	ldr	r3, [r3, #28]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	f47f af79 	bne.w	800e010 <dir_read+0x1e>
 800e11e:	e004      	b.n	800e12a <dir_read+0x138>
		if (res != FR_OK) break;
 800e120:	bf00      	nop
 800e122:	e002      	b.n	800e12a <dir_read+0x138>
					break;
 800e124:	bf00      	nop
 800e126:	e000      	b.n	800e12a <dir_read+0x138>
		if (res != FR_OK) break;
 800e128:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800e12a:	7dfb      	ldrb	r3, [r7, #23]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d002      	beq.n	800e136 <dir_read+0x144>
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	2200      	movs	r2, #0
 800e134:	61da      	str	r2, [r3, #28]
	return res;
 800e136:	7dfb      	ldrb	r3, [r7, #23]
}
 800e138:	4618      	mov	r0, r3
 800e13a:	3718      	adds	r7, #24
 800e13c:	46bd      	mov	sp, r7
 800e13e:	bd80      	pop	{r7, pc}

0800e140 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b086      	sub	sp, #24
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e14e:	2100      	movs	r1, #0
 800e150:	6878      	ldr	r0, [r7, #4]
 800e152:	f7ff fb9d 	bl	800d890 <dir_sdi>
 800e156:	4603      	mov	r3, r0
 800e158:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e15a:	7dfb      	ldrb	r3, [r7, #23]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d001      	beq.n	800e164 <dir_find+0x24>
 800e160:	7dfb      	ldrb	r3, [r7, #23]
 800e162:	e0a9      	b.n	800e2b8 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e164:	23ff      	movs	r3, #255	; 0xff
 800e166:	753b      	strb	r3, [r7, #20]
 800e168:	7d3b      	ldrb	r3, [r7, #20]
 800e16a:	757b      	strb	r3, [r7, #21]
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f04f 32ff 	mov.w	r2, #4294967295
 800e172:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	69db      	ldr	r3, [r3, #28]
 800e178:	4619      	mov	r1, r3
 800e17a:	6938      	ldr	r0, [r7, #16]
 800e17c:	f7ff f808 	bl	800d190 <move_window>
 800e180:	4603      	mov	r3, r0
 800e182:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e184:	7dfb      	ldrb	r3, [r7, #23]
 800e186:	2b00      	cmp	r3, #0
 800e188:	f040 8090 	bne.w	800e2ac <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	6a1b      	ldr	r3, [r3, #32]
 800e190:	781b      	ldrb	r3, [r3, #0]
 800e192:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e194:	7dbb      	ldrb	r3, [r7, #22]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d102      	bne.n	800e1a0 <dir_find+0x60>
 800e19a:	2304      	movs	r3, #4
 800e19c:	75fb      	strb	r3, [r7, #23]
 800e19e:	e08a      	b.n	800e2b6 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	6a1b      	ldr	r3, [r3, #32]
 800e1a4:	330b      	adds	r3, #11
 800e1a6:	781b      	ldrb	r3, [r3, #0]
 800e1a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e1ac:	73fb      	strb	r3, [r7, #15]
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	7bfa      	ldrb	r2, [r7, #15]
 800e1b2:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e1b4:	7dbb      	ldrb	r3, [r7, #22]
 800e1b6:	2be5      	cmp	r3, #229	; 0xe5
 800e1b8:	d007      	beq.n	800e1ca <dir_find+0x8a>
 800e1ba:	7bfb      	ldrb	r3, [r7, #15]
 800e1bc:	f003 0308 	and.w	r3, r3, #8
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d009      	beq.n	800e1d8 <dir_find+0x98>
 800e1c4:	7bfb      	ldrb	r3, [r7, #15]
 800e1c6:	2b0f      	cmp	r3, #15
 800e1c8:	d006      	beq.n	800e1d8 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e1ca:	23ff      	movs	r3, #255	; 0xff
 800e1cc:	757b      	strb	r3, [r7, #21]
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	f04f 32ff 	mov.w	r2, #4294967295
 800e1d4:	631a      	str	r2, [r3, #48]	; 0x30
 800e1d6:	e05e      	b.n	800e296 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e1d8:	7bfb      	ldrb	r3, [r7, #15]
 800e1da:	2b0f      	cmp	r3, #15
 800e1dc:	d136      	bne.n	800e24c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e1e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d154      	bne.n	800e296 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e1ec:	7dbb      	ldrb	r3, [r7, #22]
 800e1ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d00d      	beq.n	800e212 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	6a1b      	ldr	r3, [r3, #32]
 800e1fa:	7b5b      	ldrb	r3, [r3, #13]
 800e1fc:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e1fe:	7dbb      	ldrb	r3, [r7, #22]
 800e200:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e204:	75bb      	strb	r3, [r7, #22]
 800e206:	7dbb      	ldrb	r3, [r7, #22]
 800e208:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	695a      	ldr	r2, [r3, #20]
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e212:	7dba      	ldrb	r2, [r7, #22]
 800e214:	7d7b      	ldrb	r3, [r7, #21]
 800e216:	429a      	cmp	r2, r3
 800e218:	d115      	bne.n	800e246 <dir_find+0x106>
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	6a1b      	ldr	r3, [r3, #32]
 800e21e:	330d      	adds	r3, #13
 800e220:	781b      	ldrb	r3, [r3, #0]
 800e222:	7d3a      	ldrb	r2, [r7, #20]
 800e224:	429a      	cmp	r2, r3
 800e226:	d10e      	bne.n	800e246 <dir_find+0x106>
 800e228:	693b      	ldr	r3, [r7, #16]
 800e22a:	68da      	ldr	r2, [r3, #12]
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	6a1b      	ldr	r3, [r3, #32]
 800e230:	4619      	mov	r1, r3
 800e232:	4610      	mov	r0, r2
 800e234:	f7ff fcf2 	bl	800dc1c <cmp_lfn>
 800e238:	4603      	mov	r3, r0
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d003      	beq.n	800e246 <dir_find+0x106>
 800e23e:	7d7b      	ldrb	r3, [r7, #21]
 800e240:	3b01      	subs	r3, #1
 800e242:	b2db      	uxtb	r3, r3
 800e244:	e000      	b.n	800e248 <dir_find+0x108>
 800e246:	23ff      	movs	r3, #255	; 0xff
 800e248:	757b      	strb	r3, [r7, #21]
 800e24a:	e024      	b.n	800e296 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e24c:	7d7b      	ldrb	r3, [r7, #21]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d109      	bne.n	800e266 <dir_find+0x126>
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	6a1b      	ldr	r3, [r3, #32]
 800e256:	4618      	mov	r0, r3
 800e258:	f7ff feaa 	bl	800dfb0 <sum_sfn>
 800e25c:	4603      	mov	r3, r0
 800e25e:	461a      	mov	r2, r3
 800e260:	7d3b      	ldrb	r3, [r7, #20]
 800e262:	4293      	cmp	r3, r2
 800e264:	d024      	beq.n	800e2b0 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e26c:	f003 0301 	and.w	r3, r3, #1
 800e270:	2b00      	cmp	r3, #0
 800e272:	d10a      	bne.n	800e28a <dir_find+0x14a>
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	6a18      	ldr	r0, [r3, #32]
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	3324      	adds	r3, #36	; 0x24
 800e27c:	220b      	movs	r2, #11
 800e27e:	4619      	mov	r1, r3
 800e280:	f7fe fd94 	bl	800cdac <mem_cmp>
 800e284:	4603      	mov	r3, r0
 800e286:	2b00      	cmp	r3, #0
 800e288:	d014      	beq.n	800e2b4 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e28a:	23ff      	movs	r3, #255	; 0xff
 800e28c:	757b      	strb	r3, [r7, #21]
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	f04f 32ff 	mov.w	r2, #4294967295
 800e294:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e296:	2100      	movs	r1, #0
 800e298:	6878      	ldr	r0, [r7, #4]
 800e29a:	f7ff fb74 	bl	800d986 <dir_next>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e2a2:	7dfb      	ldrb	r3, [r7, #23]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	f43f af65 	beq.w	800e174 <dir_find+0x34>
 800e2aa:	e004      	b.n	800e2b6 <dir_find+0x176>
		if (res != FR_OK) break;
 800e2ac:	bf00      	nop
 800e2ae:	e002      	b.n	800e2b6 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e2b0:	bf00      	nop
 800e2b2:	e000      	b.n	800e2b6 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e2b4:	bf00      	nop

	return res;
 800e2b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	3718      	adds	r7, #24
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	bd80      	pop	{r7, pc}

0800e2c0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b08c      	sub	sp, #48	; 0x30
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e2d4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d001      	beq.n	800e2e0 <dir_register+0x20>
 800e2dc:	2306      	movs	r3, #6
 800e2de:	e0e0      	b.n	800e4a2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	627b      	str	r3, [r7, #36]	; 0x24
 800e2e4:	e002      	b.n	800e2ec <dir_register+0x2c>
 800e2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e8:	3301      	adds	r3, #1
 800e2ea:	627b      	str	r3, [r7, #36]	; 0x24
 800e2ec:	69fb      	ldr	r3, [r7, #28]
 800e2ee:	68da      	ldr	r2, [r3, #12]
 800e2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f2:	005b      	lsls	r3, r3, #1
 800e2f4:	4413      	add	r3, r2
 800e2f6:	881b      	ldrh	r3, [r3, #0]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d1f4      	bne.n	800e2e6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800e302:	f107 030c 	add.w	r3, r7, #12
 800e306:	220c      	movs	r2, #12
 800e308:	4618      	mov	r0, r3
 800e30a:	f7fe fd13 	bl	800cd34 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e30e:	7dfb      	ldrb	r3, [r7, #23]
 800e310:	f003 0301 	and.w	r3, r3, #1
 800e314:	2b00      	cmp	r3, #0
 800e316:	d032      	beq.n	800e37e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2240      	movs	r2, #64	; 0x40
 800e31c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800e320:	2301      	movs	r3, #1
 800e322:	62bb      	str	r3, [r7, #40]	; 0x28
 800e324:	e016      	b.n	800e354 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800e32c:	69fb      	ldr	r3, [r7, #28]
 800e32e:	68da      	ldr	r2, [r3, #12]
 800e330:	f107 010c 	add.w	r1, r7, #12
 800e334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e336:	f7ff fdad 	bl	800de94 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e33a:	6878      	ldr	r0, [r7, #4]
 800e33c:	f7ff ff00 	bl	800e140 <dir_find>
 800e340:	4603      	mov	r3, r0
 800e342:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800e346:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d106      	bne.n	800e35c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800e34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e350:	3301      	adds	r3, #1
 800e352:	62bb      	str	r3, [r7, #40]	; 0x28
 800e354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e356:	2b63      	cmp	r3, #99	; 0x63
 800e358:	d9e5      	bls.n	800e326 <dir_register+0x66>
 800e35a:	e000      	b.n	800e35e <dir_register+0x9e>
			if (res != FR_OK) break;
 800e35c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e360:	2b64      	cmp	r3, #100	; 0x64
 800e362:	d101      	bne.n	800e368 <dir_register+0xa8>
 800e364:	2307      	movs	r3, #7
 800e366:	e09c      	b.n	800e4a2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e368:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e36c:	2b04      	cmp	r3, #4
 800e36e:	d002      	beq.n	800e376 <dir_register+0xb6>
 800e370:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e374:	e095      	b.n	800e4a2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e376:	7dfa      	ldrb	r2, [r7, #23]
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e37e:	7dfb      	ldrb	r3, [r7, #23]
 800e380:	f003 0302 	and.w	r3, r3, #2
 800e384:	2b00      	cmp	r3, #0
 800e386:	d007      	beq.n	800e398 <dir_register+0xd8>
 800e388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e38a:	330c      	adds	r3, #12
 800e38c:	4a47      	ldr	r2, [pc, #284]	; (800e4ac <dir_register+0x1ec>)
 800e38e:	fba2 2303 	umull	r2, r3, r2, r3
 800e392:	089b      	lsrs	r3, r3, #2
 800e394:	3301      	adds	r3, #1
 800e396:	e000      	b.n	800e39a <dir_register+0xda>
 800e398:	2301      	movs	r3, #1
 800e39a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e39c:	6a39      	ldr	r1, [r7, #32]
 800e39e:	6878      	ldr	r0, [r7, #4]
 800e3a0:	f7ff fbb6 	bl	800db10 <dir_alloc>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e3aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d148      	bne.n	800e444 <dir_register+0x184>
 800e3b2:	6a3b      	ldr	r3, [r7, #32]
 800e3b4:	3b01      	subs	r3, #1
 800e3b6:	623b      	str	r3, [r7, #32]
 800e3b8:	6a3b      	ldr	r3, [r7, #32]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d042      	beq.n	800e444 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	695a      	ldr	r2, [r3, #20]
 800e3c2:	6a3b      	ldr	r3, [r7, #32]
 800e3c4:	015b      	lsls	r3, r3, #5
 800e3c6:	1ad3      	subs	r3, r2, r3
 800e3c8:	4619      	mov	r1, r3
 800e3ca:	6878      	ldr	r0, [r7, #4]
 800e3cc:	f7ff fa60 	bl	800d890 <dir_sdi>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e3d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d132      	bne.n	800e444 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	3324      	adds	r3, #36	; 0x24
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f7ff fde4 	bl	800dfb0 <sum_sfn>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	69db      	ldr	r3, [r3, #28]
 800e3f0:	4619      	mov	r1, r3
 800e3f2:	69f8      	ldr	r0, [r7, #28]
 800e3f4:	f7fe fecc 	bl	800d190 <move_window>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800e3fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e402:	2b00      	cmp	r3, #0
 800e404:	d11d      	bne.n	800e442 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e406:	69fb      	ldr	r3, [r7, #28]
 800e408:	68d8      	ldr	r0, [r3, #12]
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	6a19      	ldr	r1, [r3, #32]
 800e40e:	6a3b      	ldr	r3, [r7, #32]
 800e410:	b2da      	uxtb	r2, r3
 800e412:	7efb      	ldrb	r3, [r7, #27]
 800e414:	f7ff fcd6 	bl	800ddc4 <put_lfn>
				fs->wflag = 1;
 800e418:	69fb      	ldr	r3, [r7, #28]
 800e41a:	2201      	movs	r2, #1
 800e41c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e41e:	2100      	movs	r1, #0
 800e420:	6878      	ldr	r0, [r7, #4]
 800e422:	f7ff fab0 	bl	800d986 <dir_next>
 800e426:	4603      	mov	r3, r0
 800e428:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800e42c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e430:	2b00      	cmp	r3, #0
 800e432:	d107      	bne.n	800e444 <dir_register+0x184>
 800e434:	6a3b      	ldr	r3, [r7, #32]
 800e436:	3b01      	subs	r3, #1
 800e438:	623b      	str	r3, [r7, #32]
 800e43a:	6a3b      	ldr	r3, [r7, #32]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d1d5      	bne.n	800e3ec <dir_register+0x12c>
 800e440:	e000      	b.n	800e444 <dir_register+0x184>
				if (res != FR_OK) break;
 800e442:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e444:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d128      	bne.n	800e49e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	69db      	ldr	r3, [r3, #28]
 800e450:	4619      	mov	r1, r3
 800e452:	69f8      	ldr	r0, [r7, #28]
 800e454:	f7fe fe9c 	bl	800d190 <move_window>
 800e458:	4603      	mov	r3, r0
 800e45a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e45e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e462:	2b00      	cmp	r3, #0
 800e464:	d11b      	bne.n	800e49e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	6a1b      	ldr	r3, [r3, #32]
 800e46a:	2220      	movs	r2, #32
 800e46c:	2100      	movs	r1, #0
 800e46e:	4618      	mov	r0, r3
 800e470:	f7fe fc81 	bl	800cd76 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	6a18      	ldr	r0, [r3, #32]
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	3324      	adds	r3, #36	; 0x24
 800e47c:	220b      	movs	r2, #11
 800e47e:	4619      	mov	r1, r3
 800e480:	f7fe fc58 	bl	800cd34 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	6a1b      	ldr	r3, [r3, #32]
 800e48e:	330c      	adds	r3, #12
 800e490:	f002 0218 	and.w	r2, r2, #24
 800e494:	b2d2      	uxtb	r2, r2
 800e496:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800e498:	69fb      	ldr	r3, [r7, #28]
 800e49a:	2201      	movs	r2, #1
 800e49c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e49e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	3730      	adds	r7, #48	; 0x30
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	bd80      	pop	{r7, pc}
 800e4aa:	bf00      	nop
 800e4ac:	4ec4ec4f 	.word	0x4ec4ec4f

0800e4b0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b088      	sub	sp, #32
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
 800e4b8:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800e4c0:	683b      	ldr	r3, [r7, #0]
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	69db      	ldr	r3, [r3, #28]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	f000 80c9 	beq.w	800e662 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4d8:	d032      	beq.n	800e540 <get_fileinfo+0x90>
			i = j = 0;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	61bb      	str	r3, [r7, #24]
 800e4de:	69bb      	ldr	r3, [r7, #24]
 800e4e0:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800e4e2:	e01b      	b.n	800e51c <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800e4e4:	89fb      	ldrh	r3, [r7, #14]
 800e4e6:	2100      	movs	r1, #0
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	f001 fd2f 	bl	800ff4c <ff_convert>
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800e4f2:	89fb      	ldrh	r3, [r7, #14]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d102      	bne.n	800e4fe <get_fileinfo+0x4e>
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	61fb      	str	r3, [r7, #28]
 800e4fc:	e01a      	b.n	800e534 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800e4fe:	69fb      	ldr	r3, [r7, #28]
 800e500:	2bfe      	cmp	r3, #254	; 0xfe
 800e502:	d902      	bls.n	800e50a <get_fileinfo+0x5a>
 800e504:	2300      	movs	r3, #0
 800e506:	61fb      	str	r3, [r7, #28]
 800e508:	e014      	b.n	800e534 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800e50a:	69fb      	ldr	r3, [r7, #28]
 800e50c:	1c5a      	adds	r2, r3, #1
 800e50e:	61fa      	str	r2, [r7, #28]
 800e510:	89fa      	ldrh	r2, [r7, #14]
 800e512:	b2d1      	uxtb	r1, r2
 800e514:	683a      	ldr	r2, [r7, #0]
 800e516:	4413      	add	r3, r2
 800e518:	460a      	mov	r2, r1
 800e51a:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800e51c:	693b      	ldr	r3, [r7, #16]
 800e51e:	68da      	ldr	r2, [r3, #12]
 800e520:	69bb      	ldr	r3, [r7, #24]
 800e522:	1c59      	adds	r1, r3, #1
 800e524:	61b9      	str	r1, [r7, #24]
 800e526:	005b      	lsls	r3, r3, #1
 800e528:	4413      	add	r3, r2
 800e52a:	881b      	ldrh	r3, [r3, #0]
 800e52c:	81fb      	strh	r3, [r7, #14]
 800e52e:	89fb      	ldrh	r3, [r7, #14]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d1d7      	bne.n	800e4e4 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800e534:	683a      	ldr	r2, [r7, #0]
 800e536:	69fb      	ldr	r3, [r7, #28]
 800e538:	4413      	add	r3, r2
 800e53a:	3316      	adds	r3, #22
 800e53c:	2200      	movs	r2, #0
 800e53e:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800e540:	2300      	movs	r3, #0
 800e542:	61bb      	str	r3, [r7, #24]
 800e544:	69bb      	ldr	r3, [r7, #24]
 800e546:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800e548:	683a      	ldr	r2, [r7, #0]
 800e54a:	69fb      	ldr	r3, [r7, #28]
 800e54c:	4413      	add	r3, r2
 800e54e:	3316      	adds	r3, #22
 800e550:	781b      	ldrb	r3, [r3, #0]
 800e552:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800e554:	e04c      	b.n	800e5f0 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	6a1a      	ldr	r2, [r3, #32]
 800e55a:	69fb      	ldr	r3, [r7, #28]
 800e55c:	1c59      	adds	r1, r3, #1
 800e55e:	61f9      	str	r1, [r7, #28]
 800e560:	4413      	add	r3, r2
 800e562:	781b      	ldrb	r3, [r3, #0]
 800e564:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800e566:	7dfb      	ldrb	r3, [r7, #23]
 800e568:	2b20      	cmp	r3, #32
 800e56a:	d100      	bne.n	800e56e <get_fileinfo+0xbe>
 800e56c:	e040      	b.n	800e5f0 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800e56e:	7dfb      	ldrb	r3, [r7, #23]
 800e570:	2b05      	cmp	r3, #5
 800e572:	d101      	bne.n	800e578 <get_fileinfo+0xc8>
 800e574:	23e5      	movs	r3, #229	; 0xe5
 800e576:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800e578:	69fb      	ldr	r3, [r7, #28]
 800e57a:	2b09      	cmp	r3, #9
 800e57c:	d10f      	bne.n	800e59e <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800e57e:	89bb      	ldrh	r3, [r7, #12]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d105      	bne.n	800e590 <get_fileinfo+0xe0>
 800e584:	683a      	ldr	r2, [r7, #0]
 800e586:	69bb      	ldr	r3, [r7, #24]
 800e588:	4413      	add	r3, r2
 800e58a:	3316      	adds	r3, #22
 800e58c:	222e      	movs	r2, #46	; 0x2e
 800e58e:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800e590:	69bb      	ldr	r3, [r7, #24]
 800e592:	1c5a      	adds	r2, r3, #1
 800e594:	61ba      	str	r2, [r7, #24]
 800e596:	683a      	ldr	r2, [r7, #0]
 800e598:	4413      	add	r3, r2
 800e59a:	222e      	movs	r2, #46	; 0x2e
 800e59c:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800e59e:	683a      	ldr	r2, [r7, #0]
 800e5a0:	69bb      	ldr	r3, [r7, #24]
 800e5a2:	4413      	add	r3, r2
 800e5a4:	3309      	adds	r3, #9
 800e5a6:	7dfa      	ldrb	r2, [r7, #23]
 800e5a8:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800e5aa:	89bb      	ldrh	r3, [r7, #12]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d11c      	bne.n	800e5ea <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800e5b0:	7dfb      	ldrb	r3, [r7, #23]
 800e5b2:	2b40      	cmp	r3, #64	; 0x40
 800e5b4:	d913      	bls.n	800e5de <get_fileinfo+0x12e>
 800e5b6:	7dfb      	ldrb	r3, [r7, #23]
 800e5b8:	2b5a      	cmp	r3, #90	; 0x5a
 800e5ba:	d810      	bhi.n	800e5de <get_fileinfo+0x12e>
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	6a1b      	ldr	r3, [r3, #32]
 800e5c0:	330c      	adds	r3, #12
 800e5c2:	781b      	ldrb	r3, [r3, #0]
 800e5c4:	461a      	mov	r2, r3
 800e5c6:	69fb      	ldr	r3, [r7, #28]
 800e5c8:	2b08      	cmp	r3, #8
 800e5ca:	d901      	bls.n	800e5d0 <get_fileinfo+0x120>
 800e5cc:	2310      	movs	r3, #16
 800e5ce:	e000      	b.n	800e5d2 <get_fileinfo+0x122>
 800e5d0:	2308      	movs	r3, #8
 800e5d2:	4013      	ands	r3, r2
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d002      	beq.n	800e5de <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800e5d8:	7dfb      	ldrb	r3, [r7, #23]
 800e5da:	3320      	adds	r3, #32
 800e5dc:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800e5de:	683a      	ldr	r2, [r7, #0]
 800e5e0:	69bb      	ldr	r3, [r7, #24]
 800e5e2:	4413      	add	r3, r2
 800e5e4:	3316      	adds	r3, #22
 800e5e6:	7dfa      	ldrb	r2, [r7, #23]
 800e5e8:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800e5ea:	69bb      	ldr	r3, [r7, #24]
 800e5ec:	3301      	adds	r3, #1
 800e5ee:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800e5f0:	69fb      	ldr	r3, [r7, #28]
 800e5f2:	2b0a      	cmp	r3, #10
 800e5f4:	d9af      	bls.n	800e556 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800e5f6:	89bb      	ldrh	r3, [r7, #12]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d10d      	bne.n	800e618 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800e5fc:	683a      	ldr	r2, [r7, #0]
 800e5fe:	69bb      	ldr	r3, [r7, #24]
 800e600:	4413      	add	r3, r2
 800e602:	3316      	adds	r3, #22
 800e604:	2200      	movs	r2, #0
 800e606:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	6a1b      	ldr	r3, [r3, #32]
 800e60c:	330c      	adds	r3, #12
 800e60e:	781b      	ldrb	r3, [r3, #0]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d101      	bne.n	800e618 <get_fileinfo+0x168>
 800e614:	2300      	movs	r3, #0
 800e616:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800e618:	683a      	ldr	r2, [r7, #0]
 800e61a:	69bb      	ldr	r3, [r7, #24]
 800e61c:	4413      	add	r3, r2
 800e61e:	3309      	adds	r3, #9
 800e620:	2200      	movs	r2, #0
 800e622:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	6a1b      	ldr	r3, [r3, #32]
 800e628:	7ada      	ldrb	r2, [r3, #11]
 800e62a:	683b      	ldr	r3, [r7, #0]
 800e62c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	6a1b      	ldr	r3, [r3, #32]
 800e632:	331c      	adds	r3, #28
 800e634:	4618      	mov	r0, r3
 800e636:	f7fe fb13 	bl	800cc60 <ld_dword>
 800e63a:	4602      	mov	r2, r0
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	6a1b      	ldr	r3, [r3, #32]
 800e644:	3316      	adds	r3, #22
 800e646:	4618      	mov	r0, r3
 800e648:	f7fe fb0a 	bl	800cc60 <ld_dword>
 800e64c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800e64e:	68bb      	ldr	r3, [r7, #8]
 800e650:	b29a      	uxth	r2, r3
 800e652:	683b      	ldr	r3, [r7, #0]
 800e654:	80da      	strh	r2, [r3, #6]
 800e656:	68bb      	ldr	r3, [r7, #8]
 800e658:	0c1b      	lsrs	r3, r3, #16
 800e65a:	b29a      	uxth	r2, r3
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	809a      	strh	r2, [r3, #4]
 800e660:	e000      	b.n	800e664 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e662:	bf00      	nop
}
 800e664:	3720      	adds	r7, #32
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}
	...

0800e66c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b08a      	sub	sp, #40	; 0x28
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
 800e674:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	613b      	str	r3, [r7, #16]
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	68db      	ldr	r3, [r3, #12]
 800e682:	60fb      	str	r3, [r7, #12]
 800e684:	2300      	movs	r3, #0
 800e686:	617b      	str	r3, [r7, #20]
 800e688:	697b      	ldr	r3, [r7, #20]
 800e68a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e68c:	69bb      	ldr	r3, [r7, #24]
 800e68e:	1c5a      	adds	r2, r3, #1
 800e690:	61ba      	str	r2, [r7, #24]
 800e692:	693a      	ldr	r2, [r7, #16]
 800e694:	4413      	add	r3, r2
 800e696:	781b      	ldrb	r3, [r3, #0]
 800e698:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800e69a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e69c:	2b1f      	cmp	r3, #31
 800e69e:	d940      	bls.n	800e722 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800e6a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e6a2:	2b2f      	cmp	r3, #47	; 0x2f
 800e6a4:	d006      	beq.n	800e6b4 <create_name+0x48>
 800e6a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e6a8:	2b5c      	cmp	r3, #92	; 0x5c
 800e6aa:	d110      	bne.n	800e6ce <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e6ac:	e002      	b.n	800e6b4 <create_name+0x48>
 800e6ae:	69bb      	ldr	r3, [r7, #24]
 800e6b0:	3301      	adds	r3, #1
 800e6b2:	61bb      	str	r3, [r7, #24]
 800e6b4:	693a      	ldr	r2, [r7, #16]
 800e6b6:	69bb      	ldr	r3, [r7, #24]
 800e6b8:	4413      	add	r3, r2
 800e6ba:	781b      	ldrb	r3, [r3, #0]
 800e6bc:	2b2f      	cmp	r3, #47	; 0x2f
 800e6be:	d0f6      	beq.n	800e6ae <create_name+0x42>
 800e6c0:	693a      	ldr	r2, [r7, #16]
 800e6c2:	69bb      	ldr	r3, [r7, #24]
 800e6c4:	4413      	add	r3, r2
 800e6c6:	781b      	ldrb	r3, [r3, #0]
 800e6c8:	2b5c      	cmp	r3, #92	; 0x5c
 800e6ca:	d0f0      	beq.n	800e6ae <create_name+0x42>
			break;
 800e6cc:	e02a      	b.n	800e724 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800e6ce:	697b      	ldr	r3, [r7, #20]
 800e6d0:	2bfe      	cmp	r3, #254	; 0xfe
 800e6d2:	d901      	bls.n	800e6d8 <create_name+0x6c>
 800e6d4:	2306      	movs	r3, #6
 800e6d6:	e17d      	b.n	800e9d4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800e6d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e6da:	b2db      	uxtb	r3, r3
 800e6dc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e6de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e6e0:	2101      	movs	r1, #1
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f001 fc32 	bl	800ff4c <ff_convert>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e6ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d101      	bne.n	800e6f6 <create_name+0x8a>
 800e6f2:	2306      	movs	r3, #6
 800e6f4:	e16e      	b.n	800e9d4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800e6f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e6f8:	2b7f      	cmp	r3, #127	; 0x7f
 800e6fa:	d809      	bhi.n	800e710 <create_name+0xa4>
 800e6fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e6fe:	4619      	mov	r1, r3
 800e700:	488d      	ldr	r0, [pc, #564]	; (800e938 <create_name+0x2cc>)
 800e702:	f7fe fb7a 	bl	800cdfa <chk_chr>
 800e706:	4603      	mov	r3, r0
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d001      	beq.n	800e710 <create_name+0xa4>
 800e70c:	2306      	movs	r3, #6
 800e70e:	e161      	b.n	800e9d4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800e710:	697b      	ldr	r3, [r7, #20]
 800e712:	1c5a      	adds	r2, r3, #1
 800e714:	617a      	str	r2, [r7, #20]
 800e716:	005b      	lsls	r3, r3, #1
 800e718:	68fa      	ldr	r2, [r7, #12]
 800e71a:	4413      	add	r3, r2
 800e71c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e71e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e720:	e7b4      	b.n	800e68c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800e722:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e724:	693a      	ldr	r2, [r7, #16]
 800e726:	69bb      	ldr	r3, [r7, #24]
 800e728:	441a      	add	r2, r3
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e72e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e730:	2b1f      	cmp	r3, #31
 800e732:	d801      	bhi.n	800e738 <create_name+0xcc>
 800e734:	2304      	movs	r3, #4
 800e736:	e000      	b.n	800e73a <create_name+0xce>
 800e738:	2300      	movs	r3, #0
 800e73a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e73e:	e011      	b.n	800e764 <create_name+0xf8>
		w = lfn[di - 1];
 800e740:	697b      	ldr	r3, [r7, #20]
 800e742:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e746:	3b01      	subs	r3, #1
 800e748:	005b      	lsls	r3, r3, #1
 800e74a:	68fa      	ldr	r2, [r7, #12]
 800e74c:	4413      	add	r3, r2
 800e74e:	881b      	ldrh	r3, [r3, #0]
 800e750:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800e752:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e754:	2b20      	cmp	r3, #32
 800e756:	d002      	beq.n	800e75e <create_name+0xf2>
 800e758:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e75a:	2b2e      	cmp	r3, #46	; 0x2e
 800e75c:	d106      	bne.n	800e76c <create_name+0x100>
		di--;
 800e75e:	697b      	ldr	r3, [r7, #20]
 800e760:	3b01      	subs	r3, #1
 800e762:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e764:	697b      	ldr	r3, [r7, #20]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d1ea      	bne.n	800e740 <create_name+0xd4>
 800e76a:	e000      	b.n	800e76e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800e76c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800e76e:	697b      	ldr	r3, [r7, #20]
 800e770:	005b      	lsls	r3, r3, #1
 800e772:	68fa      	ldr	r2, [r7, #12]
 800e774:	4413      	add	r3, r2
 800e776:	2200      	movs	r2, #0
 800e778:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800e77a:	697b      	ldr	r3, [r7, #20]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d101      	bne.n	800e784 <create_name+0x118>
 800e780:	2306      	movs	r3, #6
 800e782:	e127      	b.n	800e9d4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	3324      	adds	r3, #36	; 0x24
 800e788:	220b      	movs	r2, #11
 800e78a:	2120      	movs	r1, #32
 800e78c:	4618      	mov	r0, r3
 800e78e:	f7fe faf2 	bl	800cd76 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e792:	2300      	movs	r3, #0
 800e794:	61bb      	str	r3, [r7, #24]
 800e796:	e002      	b.n	800e79e <create_name+0x132>
 800e798:	69bb      	ldr	r3, [r7, #24]
 800e79a:	3301      	adds	r3, #1
 800e79c:	61bb      	str	r3, [r7, #24]
 800e79e:	69bb      	ldr	r3, [r7, #24]
 800e7a0:	005b      	lsls	r3, r3, #1
 800e7a2:	68fa      	ldr	r2, [r7, #12]
 800e7a4:	4413      	add	r3, r2
 800e7a6:	881b      	ldrh	r3, [r3, #0]
 800e7a8:	2b20      	cmp	r3, #32
 800e7aa:	d0f5      	beq.n	800e798 <create_name+0x12c>
 800e7ac:	69bb      	ldr	r3, [r7, #24]
 800e7ae:	005b      	lsls	r3, r3, #1
 800e7b0:	68fa      	ldr	r2, [r7, #12]
 800e7b2:	4413      	add	r3, r2
 800e7b4:	881b      	ldrh	r3, [r3, #0]
 800e7b6:	2b2e      	cmp	r3, #46	; 0x2e
 800e7b8:	d0ee      	beq.n	800e798 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800e7ba:	69bb      	ldr	r3, [r7, #24]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d009      	beq.n	800e7d4 <create_name+0x168>
 800e7c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7c4:	f043 0303 	orr.w	r3, r3, #3
 800e7c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e7cc:	e002      	b.n	800e7d4 <create_name+0x168>
 800e7ce:	697b      	ldr	r3, [r7, #20]
 800e7d0:	3b01      	subs	r3, #1
 800e7d2:	617b      	str	r3, [r7, #20]
 800e7d4:	697b      	ldr	r3, [r7, #20]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d009      	beq.n	800e7ee <create_name+0x182>
 800e7da:	697b      	ldr	r3, [r7, #20]
 800e7dc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e7e0:	3b01      	subs	r3, #1
 800e7e2:	005b      	lsls	r3, r3, #1
 800e7e4:	68fa      	ldr	r2, [r7, #12]
 800e7e6:	4413      	add	r3, r2
 800e7e8:	881b      	ldrh	r3, [r3, #0]
 800e7ea:	2b2e      	cmp	r3, #46	; 0x2e
 800e7ec:	d1ef      	bne.n	800e7ce <create_name+0x162>

	i = b = 0; ni = 8;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	623b      	str	r3, [r7, #32]
 800e7f8:	2308      	movs	r3, #8
 800e7fa:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800e7fc:	69bb      	ldr	r3, [r7, #24]
 800e7fe:	1c5a      	adds	r2, r3, #1
 800e800:	61ba      	str	r2, [r7, #24]
 800e802:	005b      	lsls	r3, r3, #1
 800e804:	68fa      	ldr	r2, [r7, #12]
 800e806:	4413      	add	r3, r2
 800e808:	881b      	ldrh	r3, [r3, #0]
 800e80a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800e80c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e80e:	2b00      	cmp	r3, #0
 800e810:	f000 8090 	beq.w	800e934 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e814:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e816:	2b20      	cmp	r3, #32
 800e818:	d006      	beq.n	800e828 <create_name+0x1bc>
 800e81a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e81c:	2b2e      	cmp	r3, #46	; 0x2e
 800e81e:	d10a      	bne.n	800e836 <create_name+0x1ca>
 800e820:	69ba      	ldr	r2, [r7, #24]
 800e822:	697b      	ldr	r3, [r7, #20]
 800e824:	429a      	cmp	r2, r3
 800e826:	d006      	beq.n	800e836 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800e828:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e82c:	f043 0303 	orr.w	r3, r3, #3
 800e830:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e834:	e07d      	b.n	800e932 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e836:	6a3a      	ldr	r2, [r7, #32]
 800e838:	69fb      	ldr	r3, [r7, #28]
 800e83a:	429a      	cmp	r2, r3
 800e83c:	d203      	bcs.n	800e846 <create_name+0x1da>
 800e83e:	69ba      	ldr	r2, [r7, #24]
 800e840:	697b      	ldr	r3, [r7, #20]
 800e842:	429a      	cmp	r2, r3
 800e844:	d123      	bne.n	800e88e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800e846:	69fb      	ldr	r3, [r7, #28]
 800e848:	2b0b      	cmp	r3, #11
 800e84a:	d106      	bne.n	800e85a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800e84c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e850:	f043 0303 	orr.w	r3, r3, #3
 800e854:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e858:	e075      	b.n	800e946 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e85a:	69ba      	ldr	r2, [r7, #24]
 800e85c:	697b      	ldr	r3, [r7, #20]
 800e85e:	429a      	cmp	r2, r3
 800e860:	d005      	beq.n	800e86e <create_name+0x202>
 800e862:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e866:	f043 0303 	orr.w	r3, r3, #3
 800e86a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800e86e:	69ba      	ldr	r2, [r7, #24]
 800e870:	697b      	ldr	r3, [r7, #20]
 800e872:	429a      	cmp	r2, r3
 800e874:	d866      	bhi.n	800e944 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e876:	697b      	ldr	r3, [r7, #20]
 800e878:	61bb      	str	r3, [r7, #24]
 800e87a:	2308      	movs	r3, #8
 800e87c:	623b      	str	r3, [r7, #32]
 800e87e:	230b      	movs	r3, #11
 800e880:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800e882:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e886:	009b      	lsls	r3, r3, #2
 800e888:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e88c:	e051      	b.n	800e932 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800e88e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e890:	2b7f      	cmp	r3, #127	; 0x7f
 800e892:	d914      	bls.n	800e8be <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e894:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e896:	2100      	movs	r1, #0
 800e898:	4618      	mov	r0, r3
 800e89a:	f001 fb57 	bl	800ff4c <ff_convert>
 800e89e:	4603      	mov	r3, r0
 800e8a0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e8a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d004      	beq.n	800e8b2 <create_name+0x246>
 800e8a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8aa:	3b80      	subs	r3, #128	; 0x80
 800e8ac:	4a23      	ldr	r2, [pc, #140]	; (800e93c <create_name+0x2d0>)
 800e8ae:	5cd3      	ldrb	r3, [r2, r3]
 800e8b0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800e8b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8b6:	f043 0302 	orr.w	r3, r3, #2
 800e8ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e8be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d007      	beq.n	800e8d4 <create_name+0x268>
 800e8c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8c6:	4619      	mov	r1, r3
 800e8c8:	481d      	ldr	r0, [pc, #116]	; (800e940 <create_name+0x2d4>)
 800e8ca:	f7fe fa96 	bl	800cdfa <chk_chr>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d008      	beq.n	800e8e6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e8d4:	235f      	movs	r3, #95	; 0x5f
 800e8d6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e8d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8dc:	f043 0303 	orr.w	r3, r3, #3
 800e8e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e8e4:	e01b      	b.n	800e91e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800e8e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8e8:	2b40      	cmp	r3, #64	; 0x40
 800e8ea:	d909      	bls.n	800e900 <create_name+0x294>
 800e8ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8ee:	2b5a      	cmp	r3, #90	; 0x5a
 800e8f0:	d806      	bhi.n	800e900 <create_name+0x294>
					b |= 2;
 800e8f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e8f6:	f043 0302 	orr.w	r3, r3, #2
 800e8fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e8fe:	e00e      	b.n	800e91e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800e900:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e902:	2b60      	cmp	r3, #96	; 0x60
 800e904:	d90b      	bls.n	800e91e <create_name+0x2b2>
 800e906:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e908:	2b7a      	cmp	r3, #122	; 0x7a
 800e90a:	d808      	bhi.n	800e91e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800e90c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e910:	f043 0301 	orr.w	r3, r3, #1
 800e914:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e918:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e91a:	3b20      	subs	r3, #32
 800e91c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800e91e:	6a3b      	ldr	r3, [r7, #32]
 800e920:	1c5a      	adds	r2, r3, #1
 800e922:	623a      	str	r2, [r7, #32]
 800e924:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e926:	b2d1      	uxtb	r1, r2
 800e928:	687a      	ldr	r2, [r7, #4]
 800e92a:	4413      	add	r3, r2
 800e92c:	460a      	mov	r2, r1
 800e92e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800e932:	e763      	b.n	800e7fc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800e934:	bf00      	nop
 800e936:	e006      	b.n	800e946 <create_name+0x2da>
 800e938:	08010a7c 	.word	0x08010a7c
 800e93c:	08010b58 	.word	0x08010b58
 800e940:	08010a88 	.word	0x08010a88
			if (si > di) break;			/* No extension */
 800e944:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e94c:	2be5      	cmp	r3, #229	; 0xe5
 800e94e:	d103      	bne.n	800e958 <create_name+0x2ec>
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2205      	movs	r2, #5
 800e954:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800e958:	69fb      	ldr	r3, [r7, #28]
 800e95a:	2b08      	cmp	r3, #8
 800e95c:	d104      	bne.n	800e968 <create_name+0x2fc>
 800e95e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e962:	009b      	lsls	r3, r3, #2
 800e964:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e968:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e96c:	f003 030c 	and.w	r3, r3, #12
 800e970:	2b0c      	cmp	r3, #12
 800e972:	d005      	beq.n	800e980 <create_name+0x314>
 800e974:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e978:	f003 0303 	and.w	r3, r3, #3
 800e97c:	2b03      	cmp	r3, #3
 800e97e:	d105      	bne.n	800e98c <create_name+0x320>
 800e980:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e984:	f043 0302 	orr.w	r3, r3, #2
 800e988:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e98c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e990:	f003 0302 	and.w	r3, r3, #2
 800e994:	2b00      	cmp	r3, #0
 800e996:	d117      	bne.n	800e9c8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800e998:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e99c:	f003 0303 	and.w	r3, r3, #3
 800e9a0:	2b01      	cmp	r3, #1
 800e9a2:	d105      	bne.n	800e9b0 <create_name+0x344>
 800e9a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9a8:	f043 0310 	orr.w	r3, r3, #16
 800e9ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800e9b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e9b4:	f003 030c 	and.w	r3, r3, #12
 800e9b8:	2b04      	cmp	r3, #4
 800e9ba:	d105      	bne.n	800e9c8 <create_name+0x35c>
 800e9bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9c0:	f043 0308 	orr.w	r3, r3, #8
 800e9c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e9ce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800e9d2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	3728      	adds	r7, #40	; 0x28
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	bd80      	pop	{r7, pc}

0800e9dc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b086      	sub	sp, #24
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
 800e9e4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e9ea:	693b      	ldr	r3, [r7, #16]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e9f0:	e002      	b.n	800e9f8 <follow_path+0x1c>
 800e9f2:	683b      	ldr	r3, [r7, #0]
 800e9f4:	3301      	adds	r3, #1
 800e9f6:	603b      	str	r3, [r7, #0]
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	781b      	ldrb	r3, [r3, #0]
 800e9fc:	2b2f      	cmp	r3, #47	; 0x2f
 800e9fe:	d0f8      	beq.n	800e9f2 <follow_path+0x16>
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	781b      	ldrb	r3, [r3, #0]
 800ea04:	2b5c      	cmp	r3, #92	; 0x5c
 800ea06:	d0f4      	beq.n	800e9f2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ea08:	693b      	ldr	r3, [r7, #16]
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	781b      	ldrb	r3, [r3, #0]
 800ea12:	2b1f      	cmp	r3, #31
 800ea14:	d80a      	bhi.n	800ea2c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	2280      	movs	r2, #128	; 0x80
 800ea1a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ea1e:	2100      	movs	r1, #0
 800ea20:	6878      	ldr	r0, [r7, #4]
 800ea22:	f7fe ff35 	bl	800d890 <dir_sdi>
 800ea26:	4603      	mov	r3, r0
 800ea28:	75fb      	strb	r3, [r7, #23]
 800ea2a:	e043      	b.n	800eab4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ea2c:	463b      	mov	r3, r7
 800ea2e:	4619      	mov	r1, r3
 800ea30:	6878      	ldr	r0, [r7, #4]
 800ea32:	f7ff fe1b 	bl	800e66c <create_name>
 800ea36:	4603      	mov	r3, r0
 800ea38:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ea3a:	7dfb      	ldrb	r3, [r7, #23]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d134      	bne.n	800eaaa <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ea40:	6878      	ldr	r0, [r7, #4]
 800ea42:	f7ff fb7d 	bl	800e140 <dir_find>
 800ea46:	4603      	mov	r3, r0
 800ea48:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ea50:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ea52:	7dfb      	ldrb	r3, [r7, #23]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d00a      	beq.n	800ea6e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ea58:	7dfb      	ldrb	r3, [r7, #23]
 800ea5a:	2b04      	cmp	r3, #4
 800ea5c:	d127      	bne.n	800eaae <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ea5e:	7afb      	ldrb	r3, [r7, #11]
 800ea60:	f003 0304 	and.w	r3, r3, #4
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d122      	bne.n	800eaae <follow_path+0xd2>
 800ea68:	2305      	movs	r3, #5
 800ea6a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ea6c:	e01f      	b.n	800eaae <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ea6e:	7afb      	ldrb	r3, [r7, #11]
 800ea70:	f003 0304 	and.w	r3, r3, #4
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d11c      	bne.n	800eab2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ea78:	693b      	ldr	r3, [r7, #16]
 800ea7a:	799b      	ldrb	r3, [r3, #6]
 800ea7c:	f003 0310 	and.w	r3, r3, #16
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d102      	bne.n	800ea8a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ea84:	2305      	movs	r3, #5
 800ea86:	75fb      	strb	r3, [r7, #23]
 800ea88:	e014      	b.n	800eab4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	695b      	ldr	r3, [r3, #20]
 800ea94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea98:	4413      	add	r3, r2
 800ea9a:	4619      	mov	r1, r3
 800ea9c:	68f8      	ldr	r0, [r7, #12]
 800ea9e:	f7ff f87e 	bl	800db9e <ld_clust>
 800eaa2:	4602      	mov	r2, r0
 800eaa4:	693b      	ldr	r3, [r7, #16]
 800eaa6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800eaa8:	e7c0      	b.n	800ea2c <follow_path+0x50>
			if (res != FR_OK) break;
 800eaaa:	bf00      	nop
 800eaac:	e002      	b.n	800eab4 <follow_path+0xd8>
				break;
 800eaae:	bf00      	nop
 800eab0:	e000      	b.n	800eab4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800eab2:	bf00      	nop
			}
		}
	}

	return res;
 800eab4:	7dfb      	ldrb	r3, [r7, #23]
}
 800eab6:	4618      	mov	r0, r3
 800eab8:	3718      	adds	r7, #24
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bd80      	pop	{r7, pc}

0800eabe <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800eabe:	b480      	push	{r7}
 800eac0:	b087      	sub	sp, #28
 800eac2:	af00      	add	r7, sp, #0
 800eac4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800eac6:	f04f 33ff 	mov.w	r3, #4294967295
 800eaca:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d031      	beq.n	800eb38 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	617b      	str	r3, [r7, #20]
 800eada:	e002      	b.n	800eae2 <get_ldnumber+0x24>
 800eadc:	697b      	ldr	r3, [r7, #20]
 800eade:	3301      	adds	r3, #1
 800eae0:	617b      	str	r3, [r7, #20]
 800eae2:	697b      	ldr	r3, [r7, #20]
 800eae4:	781b      	ldrb	r3, [r3, #0]
 800eae6:	2b1f      	cmp	r3, #31
 800eae8:	d903      	bls.n	800eaf2 <get_ldnumber+0x34>
 800eaea:	697b      	ldr	r3, [r7, #20]
 800eaec:	781b      	ldrb	r3, [r3, #0]
 800eaee:	2b3a      	cmp	r3, #58	; 0x3a
 800eaf0:	d1f4      	bne.n	800eadc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800eaf2:	697b      	ldr	r3, [r7, #20]
 800eaf4:	781b      	ldrb	r3, [r3, #0]
 800eaf6:	2b3a      	cmp	r3, #58	; 0x3a
 800eaf8:	d11c      	bne.n	800eb34 <get_ldnumber+0x76>
			tp = *path;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	1c5a      	adds	r2, r3, #1
 800eb04:	60fa      	str	r2, [r7, #12]
 800eb06:	781b      	ldrb	r3, [r3, #0]
 800eb08:	3b30      	subs	r3, #48	; 0x30
 800eb0a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800eb0c:	68bb      	ldr	r3, [r7, #8]
 800eb0e:	2b09      	cmp	r3, #9
 800eb10:	d80e      	bhi.n	800eb30 <get_ldnumber+0x72>
 800eb12:	68fa      	ldr	r2, [r7, #12]
 800eb14:	697b      	ldr	r3, [r7, #20]
 800eb16:	429a      	cmp	r2, r3
 800eb18:	d10a      	bne.n	800eb30 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d107      	bne.n	800eb30 <get_ldnumber+0x72>
					vol = (int)i;
 800eb20:	68bb      	ldr	r3, [r7, #8]
 800eb22:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800eb24:	697b      	ldr	r3, [r7, #20]
 800eb26:	3301      	adds	r3, #1
 800eb28:	617b      	str	r3, [r7, #20]
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	697a      	ldr	r2, [r7, #20]
 800eb2e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800eb30:	693b      	ldr	r3, [r7, #16]
 800eb32:	e002      	b.n	800eb3a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800eb34:	2300      	movs	r3, #0
 800eb36:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800eb38:	693b      	ldr	r3, [r7, #16]
}
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	371c      	adds	r7, #28
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb44:	4770      	bx	lr
	...

0800eb48 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b082      	sub	sp, #8
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
 800eb50:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	2200      	movs	r2, #0
 800eb56:	70da      	strb	r2, [r3, #3]
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	f04f 32ff 	mov.w	r2, #4294967295
 800eb5e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800eb60:	6839      	ldr	r1, [r7, #0]
 800eb62:	6878      	ldr	r0, [r7, #4]
 800eb64:	f7fe fb14 	bl	800d190 <move_window>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d001      	beq.n	800eb72 <check_fs+0x2a>
 800eb6e:	2304      	movs	r3, #4
 800eb70:	e038      	b.n	800ebe4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	3334      	adds	r3, #52	; 0x34
 800eb76:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f7fe f858 	bl	800cc30 <ld_word>
 800eb80:	4603      	mov	r3, r0
 800eb82:	461a      	mov	r2, r3
 800eb84:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800eb88:	429a      	cmp	r2, r3
 800eb8a:	d001      	beq.n	800eb90 <check_fs+0x48>
 800eb8c:	2303      	movs	r3, #3
 800eb8e:	e029      	b.n	800ebe4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800eb96:	2be9      	cmp	r3, #233	; 0xe9
 800eb98:	d009      	beq.n	800ebae <check_fs+0x66>
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800eba0:	2beb      	cmp	r3, #235	; 0xeb
 800eba2:	d11e      	bne.n	800ebe2 <check_fs+0x9a>
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800ebaa:	2b90      	cmp	r3, #144	; 0x90
 800ebac:	d119      	bne.n	800ebe2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	3334      	adds	r3, #52	; 0x34
 800ebb2:	3336      	adds	r3, #54	; 0x36
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	f7fe f853 	bl	800cc60 <ld_dword>
 800ebba:	4603      	mov	r3, r0
 800ebbc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ebc0:	4a0a      	ldr	r2, [pc, #40]	; (800ebec <check_fs+0xa4>)
 800ebc2:	4293      	cmp	r3, r2
 800ebc4:	d101      	bne.n	800ebca <check_fs+0x82>
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	e00c      	b.n	800ebe4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	3334      	adds	r3, #52	; 0x34
 800ebce:	3352      	adds	r3, #82	; 0x52
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	f7fe f845 	bl	800cc60 <ld_dword>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	4a05      	ldr	r2, [pc, #20]	; (800ebf0 <check_fs+0xa8>)
 800ebda:	4293      	cmp	r3, r2
 800ebdc:	d101      	bne.n	800ebe2 <check_fs+0x9a>
 800ebde:	2300      	movs	r3, #0
 800ebe0:	e000      	b.n	800ebe4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ebe2:	2302      	movs	r3, #2
}
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	3708      	adds	r7, #8
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	bd80      	pop	{r7, pc}
 800ebec:	00544146 	.word	0x00544146
 800ebf0:	33544146 	.word	0x33544146

0800ebf4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b096      	sub	sp, #88	; 0x58
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	60f8      	str	r0, [r7, #12]
 800ebfc:	60b9      	str	r1, [r7, #8]
 800ebfe:	4613      	mov	r3, r2
 800ec00:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ec02:	68bb      	ldr	r3, [r7, #8]
 800ec04:	2200      	movs	r2, #0
 800ec06:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ec08:	68f8      	ldr	r0, [r7, #12]
 800ec0a:	f7ff ff58 	bl	800eabe <get_ldnumber>
 800ec0e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ec10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	da01      	bge.n	800ec1a <find_volume+0x26>
 800ec16:	230b      	movs	r3, #11
 800ec18:	e230      	b.n	800f07c <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ec1a:	4aa1      	ldr	r2, [pc, #644]	; (800eea0 <find_volume+0x2ac>)
 800ec1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec22:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ec24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d101      	bne.n	800ec2e <find_volume+0x3a>
 800ec2a:	230c      	movs	r3, #12
 800ec2c:	e226      	b.n	800f07c <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ec2e:	68bb      	ldr	r3, [r7, #8]
 800ec30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec32:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ec34:	79fb      	ldrb	r3, [r7, #7]
 800ec36:	f023 0301 	bic.w	r3, r3, #1
 800ec3a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ec3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec3e:	781b      	ldrb	r3, [r3, #0]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d01a      	beq.n	800ec7a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ec44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec46:	785b      	ldrb	r3, [r3, #1]
 800ec48:	4618      	mov	r0, r3
 800ec4a:	f7fd ff53 	bl	800caf4 <disk_status>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ec54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ec58:	f003 0301 	and.w	r3, r3, #1
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d10c      	bne.n	800ec7a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ec60:	79fb      	ldrb	r3, [r7, #7]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d007      	beq.n	800ec76 <find_volume+0x82>
 800ec66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ec6a:	f003 0304 	and.w	r3, r3, #4
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d001      	beq.n	800ec76 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ec72:	230a      	movs	r3, #10
 800ec74:	e202      	b.n	800f07c <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800ec76:	2300      	movs	r3, #0
 800ec78:	e200      	b.n	800f07c <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ec7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ec80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec82:	b2da      	uxtb	r2, r3
 800ec84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec86:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ec88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec8a:	785b      	ldrb	r3, [r3, #1]
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f7fd ff4b 	bl	800cb28 <disk_initialize>
 800ec92:	4603      	mov	r3, r0
 800ec94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ec98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ec9c:	f003 0301 	and.w	r3, r3, #1
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d001      	beq.n	800eca8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800eca4:	2303      	movs	r3, #3
 800eca6:	e1e9      	b.n	800f07c <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800eca8:	79fb      	ldrb	r3, [r7, #7]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d007      	beq.n	800ecbe <find_volume+0xca>
 800ecae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ecb2:	f003 0304 	and.w	r3, r3, #4
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d001      	beq.n	800ecbe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ecba:	230a      	movs	r3, #10
 800ecbc:	e1de      	b.n	800f07c <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ecc2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ecc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ecc6:	f7ff ff3f 	bl	800eb48 <check_fs>
 800ecca:	4603      	mov	r3, r0
 800eccc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ecd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ecd4:	2b02      	cmp	r3, #2
 800ecd6:	d149      	bne.n	800ed6c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ecd8:	2300      	movs	r3, #0
 800ecda:	643b      	str	r3, [r7, #64]	; 0x40
 800ecdc:	e01e      	b.n	800ed1c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ecde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ece0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ece4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ece6:	011b      	lsls	r3, r3, #4
 800ece8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ecec:	4413      	add	r3, r2
 800ecee:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ecf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecf2:	3304      	adds	r3, #4
 800ecf4:	781b      	ldrb	r3, [r3, #0]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d006      	beq.n	800ed08 <find_volume+0x114>
 800ecfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecfc:	3308      	adds	r3, #8
 800ecfe:	4618      	mov	r0, r3
 800ed00:	f7fd ffae 	bl	800cc60 <ld_dword>
 800ed04:	4602      	mov	r2, r0
 800ed06:	e000      	b.n	800ed0a <find_volume+0x116>
 800ed08:	2200      	movs	r2, #0
 800ed0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed0c:	009b      	lsls	r3, r3, #2
 800ed0e:	3358      	adds	r3, #88	; 0x58
 800ed10:	443b      	add	r3, r7
 800ed12:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ed16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed18:	3301      	adds	r3, #1
 800ed1a:	643b      	str	r3, [r7, #64]	; 0x40
 800ed1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed1e:	2b03      	cmp	r3, #3
 800ed20:	d9dd      	bls.n	800ecde <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ed22:	2300      	movs	r3, #0
 800ed24:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ed26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d002      	beq.n	800ed32 <find_volume+0x13e>
 800ed2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed2e:	3b01      	subs	r3, #1
 800ed30:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ed32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed34:	009b      	lsls	r3, r3, #2
 800ed36:	3358      	adds	r3, #88	; 0x58
 800ed38:	443b      	add	r3, r7
 800ed3a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ed3e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ed40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d005      	beq.n	800ed52 <find_volume+0x15e>
 800ed46:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ed48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ed4a:	f7ff fefd 	bl	800eb48 <check_fs>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	e000      	b.n	800ed54 <find_volume+0x160>
 800ed52:	2303      	movs	r3, #3
 800ed54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ed58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ed5c:	2b01      	cmp	r3, #1
 800ed5e:	d905      	bls.n	800ed6c <find_volume+0x178>
 800ed60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed62:	3301      	adds	r3, #1
 800ed64:	643b      	str	r3, [r7, #64]	; 0x40
 800ed66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed68:	2b03      	cmp	r3, #3
 800ed6a:	d9e2      	bls.n	800ed32 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ed6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ed70:	2b04      	cmp	r3, #4
 800ed72:	d101      	bne.n	800ed78 <find_volume+0x184>
 800ed74:	2301      	movs	r3, #1
 800ed76:	e181      	b.n	800f07c <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ed78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ed7c:	2b01      	cmp	r3, #1
 800ed7e:	d901      	bls.n	800ed84 <find_volume+0x190>
 800ed80:	230d      	movs	r3, #13
 800ed82:	e17b      	b.n	800f07c <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ed84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed86:	3334      	adds	r3, #52	; 0x34
 800ed88:	330b      	adds	r3, #11
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	f7fd ff50 	bl	800cc30 <ld_word>
 800ed90:	4603      	mov	r3, r0
 800ed92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed96:	d001      	beq.n	800ed9c <find_volume+0x1a8>
 800ed98:	230d      	movs	r3, #13
 800ed9a:	e16f      	b.n	800f07c <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ed9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed9e:	3334      	adds	r3, #52	; 0x34
 800eda0:	3316      	adds	r3, #22
 800eda2:	4618      	mov	r0, r3
 800eda4:	f7fd ff44 	bl	800cc30 <ld_word>
 800eda8:	4603      	mov	r3, r0
 800edaa:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800edac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d106      	bne.n	800edc0 <find_volume+0x1cc>
 800edb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edb4:	3334      	adds	r3, #52	; 0x34
 800edb6:	3324      	adds	r3, #36	; 0x24
 800edb8:	4618      	mov	r0, r3
 800edba:	f7fd ff51 	bl	800cc60 <ld_dword>
 800edbe:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800edc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800edc4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800edc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edc8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800edcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edce:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800edd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edd2:	789b      	ldrb	r3, [r3, #2]
 800edd4:	2b01      	cmp	r3, #1
 800edd6:	d005      	beq.n	800ede4 <find_volume+0x1f0>
 800edd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edda:	789b      	ldrb	r3, [r3, #2]
 800eddc:	2b02      	cmp	r3, #2
 800edde:	d001      	beq.n	800ede4 <find_volume+0x1f0>
 800ede0:	230d      	movs	r3, #13
 800ede2:	e14b      	b.n	800f07c <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ede4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ede6:	789b      	ldrb	r3, [r3, #2]
 800ede8:	461a      	mov	r2, r3
 800edea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edec:	fb02 f303 	mul.w	r3, r2, r3
 800edf0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800edf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800edf8:	b29a      	uxth	r2, r3
 800edfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edfc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800edfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee00:	895b      	ldrh	r3, [r3, #10]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d008      	beq.n	800ee18 <find_volume+0x224>
 800ee06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee08:	895b      	ldrh	r3, [r3, #10]
 800ee0a:	461a      	mov	r2, r3
 800ee0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee0e:	895b      	ldrh	r3, [r3, #10]
 800ee10:	3b01      	subs	r3, #1
 800ee12:	4013      	ands	r3, r2
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d001      	beq.n	800ee1c <find_volume+0x228>
 800ee18:	230d      	movs	r3, #13
 800ee1a:	e12f      	b.n	800f07c <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ee1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee1e:	3334      	adds	r3, #52	; 0x34
 800ee20:	3311      	adds	r3, #17
 800ee22:	4618      	mov	r0, r3
 800ee24:	f7fd ff04 	bl	800cc30 <ld_word>
 800ee28:	4603      	mov	r3, r0
 800ee2a:	461a      	mov	r2, r3
 800ee2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee2e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ee30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee32:	891b      	ldrh	r3, [r3, #8]
 800ee34:	f003 030f 	and.w	r3, r3, #15
 800ee38:	b29b      	uxth	r3, r3
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d001      	beq.n	800ee42 <find_volume+0x24e>
 800ee3e:	230d      	movs	r3, #13
 800ee40:	e11c      	b.n	800f07c <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ee42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee44:	3334      	adds	r3, #52	; 0x34
 800ee46:	3313      	adds	r3, #19
 800ee48:	4618      	mov	r0, r3
 800ee4a:	f7fd fef1 	bl	800cc30 <ld_word>
 800ee4e:	4603      	mov	r3, r0
 800ee50:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ee52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d106      	bne.n	800ee66 <find_volume+0x272>
 800ee58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee5a:	3334      	adds	r3, #52	; 0x34
 800ee5c:	3320      	adds	r3, #32
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f7fd fefe 	bl	800cc60 <ld_dword>
 800ee64:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ee66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee68:	3334      	adds	r3, #52	; 0x34
 800ee6a:	330e      	adds	r3, #14
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f7fd fedf 	bl	800cc30 <ld_word>
 800ee72:	4603      	mov	r3, r0
 800ee74:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ee76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d101      	bne.n	800ee80 <find_volume+0x28c>
 800ee7c:	230d      	movs	r3, #13
 800ee7e:	e0fd      	b.n	800f07c <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ee80:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ee82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee84:	4413      	add	r3, r2
 800ee86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee88:	8912      	ldrh	r2, [r2, #8]
 800ee8a:	0912      	lsrs	r2, r2, #4
 800ee8c:	b292      	uxth	r2, r2
 800ee8e:	4413      	add	r3, r2
 800ee90:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ee92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ee94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee96:	429a      	cmp	r2, r3
 800ee98:	d204      	bcs.n	800eea4 <find_volume+0x2b0>
 800ee9a:	230d      	movs	r3, #13
 800ee9c:	e0ee      	b.n	800f07c <find_volume+0x488>
 800ee9e:	bf00      	nop
 800eea0:	20001c48 	.word	0x20001c48
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800eea4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eea8:	1ad3      	subs	r3, r2, r3
 800eeaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eeac:	8952      	ldrh	r2, [r2, #10]
 800eeae:	fbb3 f3f2 	udiv	r3, r3, r2
 800eeb2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800eeb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d101      	bne.n	800eebe <find_volume+0x2ca>
 800eeba:	230d      	movs	r3, #13
 800eebc:	e0de      	b.n	800f07c <find_volume+0x488>
		fmt = FS_FAT32;
 800eebe:	2303      	movs	r3, #3
 800eec0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800eec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800eeca:	4293      	cmp	r3, r2
 800eecc:	d802      	bhi.n	800eed4 <find_volume+0x2e0>
 800eece:	2302      	movs	r3, #2
 800eed0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800eed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eed6:	f640 72f5 	movw	r2, #4085	; 0xff5
 800eeda:	4293      	cmp	r3, r2
 800eedc:	d802      	bhi.n	800eee4 <find_volume+0x2f0>
 800eede:	2301      	movs	r3, #1
 800eee0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800eee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee6:	1c9a      	adds	r2, r3, #2
 800eee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeea:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800eeec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eef0:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800eef2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800eef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eef6:	441a      	add	r2, r3
 800eef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eefa:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800eefc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eefe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef00:	441a      	add	r2, r3
 800ef02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef04:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800ef06:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ef0a:	2b03      	cmp	r3, #3
 800ef0c:	d11e      	bne.n	800ef4c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ef0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef10:	3334      	adds	r3, #52	; 0x34
 800ef12:	332a      	adds	r3, #42	; 0x2a
 800ef14:	4618      	mov	r0, r3
 800ef16:	f7fd fe8b 	bl	800cc30 <ld_word>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d001      	beq.n	800ef24 <find_volume+0x330>
 800ef20:	230d      	movs	r3, #13
 800ef22:	e0ab      	b.n	800f07c <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ef24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef26:	891b      	ldrh	r3, [r3, #8]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d001      	beq.n	800ef30 <find_volume+0x33c>
 800ef2c:	230d      	movs	r3, #13
 800ef2e:	e0a5      	b.n	800f07c <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ef30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef32:	3334      	adds	r3, #52	; 0x34
 800ef34:	332c      	adds	r3, #44	; 0x2c
 800ef36:	4618      	mov	r0, r3
 800ef38:	f7fd fe92 	bl	800cc60 <ld_dword>
 800ef3c:	4602      	mov	r2, r0
 800ef3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef40:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ef42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef44:	699b      	ldr	r3, [r3, #24]
 800ef46:	009b      	lsls	r3, r3, #2
 800ef48:	647b      	str	r3, [r7, #68]	; 0x44
 800ef4a:	e01f      	b.n	800ef8c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ef4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef4e:	891b      	ldrh	r3, [r3, #8]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d101      	bne.n	800ef58 <find_volume+0x364>
 800ef54:	230d      	movs	r3, #13
 800ef56:	e091      	b.n	800f07c <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ef58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ef5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef5e:	441a      	add	r2, r3
 800ef60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef62:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ef64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ef68:	2b02      	cmp	r3, #2
 800ef6a:	d103      	bne.n	800ef74 <find_volume+0x380>
 800ef6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef6e:	699b      	ldr	r3, [r3, #24]
 800ef70:	005b      	lsls	r3, r3, #1
 800ef72:	e00a      	b.n	800ef8a <find_volume+0x396>
 800ef74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef76:	699a      	ldr	r2, [r3, #24]
 800ef78:	4613      	mov	r3, r2
 800ef7a:	005b      	lsls	r3, r3, #1
 800ef7c:	4413      	add	r3, r2
 800ef7e:	085a      	lsrs	r2, r3, #1
 800ef80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef82:	699b      	ldr	r3, [r3, #24]
 800ef84:	f003 0301 	and.w	r3, r3, #1
 800ef88:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ef8a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ef8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef8e:	69da      	ldr	r2, [r3, #28]
 800ef90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef92:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ef96:	0a5b      	lsrs	r3, r3, #9
 800ef98:	429a      	cmp	r2, r3
 800ef9a:	d201      	bcs.n	800efa0 <find_volume+0x3ac>
 800ef9c:	230d      	movs	r3, #13
 800ef9e:	e06d      	b.n	800f07c <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800efa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efa2:	f04f 32ff 	mov.w	r2, #4294967295
 800efa6:	615a      	str	r2, [r3, #20]
 800efa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efaa:	695a      	ldr	r2, [r3, #20]
 800efac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efae:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800efb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efb2:	2280      	movs	r2, #128	; 0x80
 800efb4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800efb6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800efba:	2b03      	cmp	r3, #3
 800efbc:	d149      	bne.n	800f052 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800efbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efc0:	3334      	adds	r3, #52	; 0x34
 800efc2:	3330      	adds	r3, #48	; 0x30
 800efc4:	4618      	mov	r0, r3
 800efc6:	f7fd fe33 	bl	800cc30 <ld_word>
 800efca:	4603      	mov	r3, r0
 800efcc:	2b01      	cmp	r3, #1
 800efce:	d140      	bne.n	800f052 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800efd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efd2:	3301      	adds	r3, #1
 800efd4:	4619      	mov	r1, r3
 800efd6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800efd8:	f7fe f8da 	bl	800d190 <move_window>
 800efdc:	4603      	mov	r3, r0
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d137      	bne.n	800f052 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800efe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efe4:	2200      	movs	r2, #0
 800efe6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800efe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efea:	3334      	adds	r3, #52	; 0x34
 800efec:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800eff0:	4618      	mov	r0, r3
 800eff2:	f7fd fe1d 	bl	800cc30 <ld_word>
 800eff6:	4603      	mov	r3, r0
 800eff8:	461a      	mov	r2, r3
 800effa:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800effe:	429a      	cmp	r2, r3
 800f000:	d127      	bne.n	800f052 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f004:	3334      	adds	r3, #52	; 0x34
 800f006:	4618      	mov	r0, r3
 800f008:	f7fd fe2a 	bl	800cc60 <ld_dword>
 800f00c:	4603      	mov	r3, r0
 800f00e:	4a1d      	ldr	r2, [pc, #116]	; (800f084 <find_volume+0x490>)
 800f010:	4293      	cmp	r3, r2
 800f012:	d11e      	bne.n	800f052 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f016:	3334      	adds	r3, #52	; 0x34
 800f018:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f01c:	4618      	mov	r0, r3
 800f01e:	f7fd fe1f 	bl	800cc60 <ld_dword>
 800f022:	4603      	mov	r3, r0
 800f024:	4a18      	ldr	r2, [pc, #96]	; (800f088 <find_volume+0x494>)
 800f026:	4293      	cmp	r3, r2
 800f028:	d113      	bne.n	800f052 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f02c:	3334      	adds	r3, #52	; 0x34
 800f02e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f032:	4618      	mov	r0, r3
 800f034:	f7fd fe14 	bl	800cc60 <ld_dword>
 800f038:	4602      	mov	r2, r0
 800f03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f03c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f040:	3334      	adds	r3, #52	; 0x34
 800f042:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f046:	4618      	mov	r0, r3
 800f048:	f7fd fe0a 	bl	800cc60 <ld_dword>
 800f04c:	4602      	mov	r2, r0
 800f04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f050:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f054:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f058:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f05a:	4b0c      	ldr	r3, [pc, #48]	; (800f08c <find_volume+0x498>)
 800f05c:	881b      	ldrh	r3, [r3, #0]
 800f05e:	3301      	adds	r3, #1
 800f060:	b29a      	uxth	r2, r3
 800f062:	4b0a      	ldr	r3, [pc, #40]	; (800f08c <find_volume+0x498>)
 800f064:	801a      	strh	r2, [r3, #0]
 800f066:	4b09      	ldr	r3, [pc, #36]	; (800f08c <find_volume+0x498>)
 800f068:	881a      	ldrh	r2, [r3, #0]
 800f06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f06c:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800f06e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f070:	4a07      	ldr	r2, [pc, #28]	; (800f090 <find_volume+0x49c>)
 800f072:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f074:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f076:	f7fe f823 	bl	800d0c0 <clear_lock>
#endif
	return FR_OK;
 800f07a:	2300      	movs	r3, #0
}
 800f07c:	4618      	mov	r0, r3
 800f07e:	3758      	adds	r7, #88	; 0x58
 800f080:	46bd      	mov	sp, r7
 800f082:	bd80      	pop	{r7, pc}
 800f084:	41615252 	.word	0x41615252
 800f088:	61417272 	.word	0x61417272
 800f08c:	20001c4c 	.word	0x20001c4c
 800f090:	20001c70 	.word	0x20001c70

0800f094 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b084      	sub	sp, #16
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
 800f09c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f09e:	2309      	movs	r3, #9
 800f0a0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d01c      	beq.n	800f0e2 <validate+0x4e>
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d018      	beq.n	800f0e2 <validate+0x4e>
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	781b      	ldrb	r3, [r3, #0]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d013      	beq.n	800f0e2 <validate+0x4e>
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	889a      	ldrh	r2, [r3, #4]
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	88db      	ldrh	r3, [r3, #6]
 800f0c4:	429a      	cmp	r2, r3
 800f0c6:	d10c      	bne.n	800f0e2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	785b      	ldrb	r3, [r3, #1]
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	f7fd fd10 	bl	800caf4 <disk_status>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	f003 0301 	and.w	r3, r3, #1
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d101      	bne.n	800f0e2 <validate+0x4e>
			res = FR_OK;
 800f0de:	2300      	movs	r3, #0
 800f0e0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f0e2:	7bfb      	ldrb	r3, [r7, #15]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d102      	bne.n	800f0ee <validate+0x5a>
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	e000      	b.n	800f0f0 <validate+0x5c>
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	683a      	ldr	r2, [r7, #0]
 800f0f2:	6013      	str	r3, [r2, #0]
	return res;
 800f0f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	3710      	adds	r7, #16
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	bd80      	pop	{r7, pc}
	...

0800f100 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b088      	sub	sp, #32
 800f104:	af00      	add	r7, sp, #0
 800f106:	60f8      	str	r0, [r7, #12]
 800f108:	60b9      	str	r1, [r7, #8]
 800f10a:	4613      	mov	r3, r2
 800f10c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f10e:	68bb      	ldr	r3, [r7, #8]
 800f110:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f112:	f107 0310 	add.w	r3, r7, #16
 800f116:	4618      	mov	r0, r3
 800f118:	f7ff fcd1 	bl	800eabe <get_ldnumber>
 800f11c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f11e:	69fb      	ldr	r3, [r7, #28]
 800f120:	2b00      	cmp	r3, #0
 800f122:	da01      	bge.n	800f128 <f_mount+0x28>
 800f124:	230b      	movs	r3, #11
 800f126:	e02b      	b.n	800f180 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f128:	4a17      	ldr	r2, [pc, #92]	; (800f188 <f_mount+0x88>)
 800f12a:	69fb      	ldr	r3, [r7, #28]
 800f12c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f130:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f132:	69bb      	ldr	r3, [r7, #24]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d005      	beq.n	800f144 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f138:	69b8      	ldr	r0, [r7, #24]
 800f13a:	f7fd ffc1 	bl	800d0c0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f13e:	69bb      	ldr	r3, [r7, #24]
 800f140:	2200      	movs	r2, #0
 800f142:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d002      	beq.n	800f150 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	2200      	movs	r2, #0
 800f14e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f150:	68fa      	ldr	r2, [r7, #12]
 800f152:	490d      	ldr	r1, [pc, #52]	; (800f188 <f_mount+0x88>)
 800f154:	69fb      	ldr	r3, [r7, #28]
 800f156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d002      	beq.n	800f166 <f_mount+0x66>
 800f160:	79fb      	ldrb	r3, [r7, #7]
 800f162:	2b01      	cmp	r3, #1
 800f164:	d001      	beq.n	800f16a <f_mount+0x6a>
 800f166:	2300      	movs	r3, #0
 800f168:	e00a      	b.n	800f180 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f16a:	f107 010c 	add.w	r1, r7, #12
 800f16e:	f107 0308 	add.w	r3, r7, #8
 800f172:	2200      	movs	r2, #0
 800f174:	4618      	mov	r0, r3
 800f176:	f7ff fd3d 	bl	800ebf4 <find_volume>
 800f17a:	4603      	mov	r3, r0
 800f17c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f17e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f180:	4618      	mov	r0, r3
 800f182:	3720      	adds	r7, #32
 800f184:	46bd      	mov	sp, r7
 800f186:	bd80      	pop	{r7, pc}
 800f188:	20001c48 	.word	0x20001c48

0800f18c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b09a      	sub	sp, #104	; 0x68
 800f190:	af00      	add	r7, sp, #0
 800f192:	60f8      	str	r0, [r7, #12]
 800f194:	60b9      	str	r1, [r7, #8]
 800f196:	4613      	mov	r3, r2
 800f198:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d101      	bne.n	800f1a4 <f_open+0x18>
 800f1a0:	2309      	movs	r3, #9
 800f1a2:	e1ad      	b.n	800f500 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f1a4:	79fb      	ldrb	r3, [r7, #7]
 800f1a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f1aa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f1ac:	79fa      	ldrb	r2, [r7, #7]
 800f1ae:	f107 0114 	add.w	r1, r7, #20
 800f1b2:	f107 0308 	add.w	r3, r7, #8
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	f7ff fd1c 	bl	800ebf4 <find_volume>
 800f1bc:	4603      	mov	r3, r0
 800f1be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800f1c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	f040 8191 	bne.w	800f4ee <f_open+0x362>
		dj.obj.fs = fs;
 800f1cc:	697b      	ldr	r3, [r7, #20]
 800f1ce:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f1d0:	68ba      	ldr	r2, [r7, #8]
 800f1d2:	f107 0318 	add.w	r3, r7, #24
 800f1d6:	4611      	mov	r1, r2
 800f1d8:	4618      	mov	r0, r3
 800f1da:	f7ff fbff 	bl	800e9dc <follow_path>
 800f1de:	4603      	mov	r3, r0
 800f1e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f1e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d11a      	bne.n	800f222 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f1ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f1f0:	b25b      	sxtb	r3, r3
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	da03      	bge.n	800f1fe <f_open+0x72>
				res = FR_INVALID_NAME;
 800f1f6:	2306      	movs	r3, #6
 800f1f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f1fc:	e011      	b.n	800f222 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f1fe:	79fb      	ldrb	r3, [r7, #7]
 800f200:	f023 0301 	bic.w	r3, r3, #1
 800f204:	2b00      	cmp	r3, #0
 800f206:	bf14      	ite	ne
 800f208:	2301      	movne	r3, #1
 800f20a:	2300      	moveq	r3, #0
 800f20c:	b2db      	uxtb	r3, r3
 800f20e:	461a      	mov	r2, r3
 800f210:	f107 0318 	add.w	r3, r7, #24
 800f214:	4611      	mov	r1, r2
 800f216:	4618      	mov	r0, r3
 800f218:	f7fd fe0a 	bl	800ce30 <chk_lock>
 800f21c:	4603      	mov	r3, r0
 800f21e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f222:	79fb      	ldrb	r3, [r7, #7]
 800f224:	f003 031c 	and.w	r3, r3, #28
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d07f      	beq.n	800f32c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800f22c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f230:	2b00      	cmp	r3, #0
 800f232:	d017      	beq.n	800f264 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f234:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f238:	2b04      	cmp	r3, #4
 800f23a:	d10e      	bne.n	800f25a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f23c:	f7fd fe54 	bl	800cee8 <enq_lock>
 800f240:	4603      	mov	r3, r0
 800f242:	2b00      	cmp	r3, #0
 800f244:	d006      	beq.n	800f254 <f_open+0xc8>
 800f246:	f107 0318 	add.w	r3, r7, #24
 800f24a:	4618      	mov	r0, r3
 800f24c:	f7ff f838 	bl	800e2c0 <dir_register>
 800f250:	4603      	mov	r3, r0
 800f252:	e000      	b.n	800f256 <f_open+0xca>
 800f254:	2312      	movs	r3, #18
 800f256:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f25a:	79fb      	ldrb	r3, [r7, #7]
 800f25c:	f043 0308 	orr.w	r3, r3, #8
 800f260:	71fb      	strb	r3, [r7, #7]
 800f262:	e010      	b.n	800f286 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f264:	7fbb      	ldrb	r3, [r7, #30]
 800f266:	f003 0311 	and.w	r3, r3, #17
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d003      	beq.n	800f276 <f_open+0xea>
					res = FR_DENIED;
 800f26e:	2307      	movs	r3, #7
 800f270:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f274:	e007      	b.n	800f286 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f276:	79fb      	ldrb	r3, [r7, #7]
 800f278:	f003 0304 	and.w	r3, r3, #4
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d002      	beq.n	800f286 <f_open+0xfa>
 800f280:	2308      	movs	r3, #8
 800f282:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f286:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d168      	bne.n	800f360 <f_open+0x1d4>
 800f28e:	79fb      	ldrb	r3, [r7, #7]
 800f290:	f003 0308 	and.w	r3, r3, #8
 800f294:	2b00      	cmp	r3, #0
 800f296:	d063      	beq.n	800f360 <f_open+0x1d4>
				dw = GET_FATTIME();
 800f298:	f7fa fb1e 	bl	80098d8 <get_fattime>
 800f29c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2a0:	330e      	adds	r3, #14
 800f2a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	f7fd fd19 	bl	800ccdc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2ac:	3316      	adds	r3, #22
 800f2ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	f7fd fd13 	bl	800ccdc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f2b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2b8:	330b      	adds	r3, #11
 800f2ba:	2220      	movs	r2, #32
 800f2bc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f2be:	697b      	ldr	r3, [r7, #20]
 800f2c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f2c2:	4611      	mov	r1, r2
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	f7fe fc6a 	bl	800db9e <ld_clust>
 800f2ca:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f2cc:	697b      	ldr	r3, [r7, #20]
 800f2ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f7fe fc82 	bl	800dbdc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2da:	331c      	adds	r3, #28
 800f2dc:	2100      	movs	r1, #0
 800f2de:	4618      	mov	r0, r3
 800f2e0:	f7fd fcfc 	bl	800ccdc <st_dword>
					fs->wflag = 1;
 800f2e4:	697b      	ldr	r3, [r7, #20]
 800f2e6:	2201      	movs	r2, #1
 800f2e8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f2ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d037      	beq.n	800f360 <f_open+0x1d4>
						dw = fs->winsect;
 800f2f0:	697b      	ldr	r3, [r7, #20]
 800f2f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2f4:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800f2f6:	f107 0318 	add.w	r3, r7, #24
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f2fe:	4618      	mov	r0, r3
 800f300:	f7fe f995 	bl	800d62e <remove_chain>
 800f304:	4603      	mov	r3, r0
 800f306:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800f30a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d126      	bne.n	800f360 <f_open+0x1d4>
							res = move_window(fs, dw);
 800f312:	697b      	ldr	r3, [r7, #20]
 800f314:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f316:	4618      	mov	r0, r3
 800f318:	f7fd ff3a 	bl	800d190 <move_window>
 800f31c:	4603      	mov	r3, r0
 800f31e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f322:	697b      	ldr	r3, [r7, #20]
 800f324:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f326:	3a01      	subs	r2, #1
 800f328:	611a      	str	r2, [r3, #16]
 800f32a:	e019      	b.n	800f360 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f32c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f330:	2b00      	cmp	r3, #0
 800f332:	d115      	bne.n	800f360 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f334:	7fbb      	ldrb	r3, [r7, #30]
 800f336:	f003 0310 	and.w	r3, r3, #16
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d003      	beq.n	800f346 <f_open+0x1ba>
					res = FR_NO_FILE;
 800f33e:	2304      	movs	r3, #4
 800f340:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f344:	e00c      	b.n	800f360 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f346:	79fb      	ldrb	r3, [r7, #7]
 800f348:	f003 0302 	and.w	r3, r3, #2
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d007      	beq.n	800f360 <f_open+0x1d4>
 800f350:	7fbb      	ldrb	r3, [r7, #30]
 800f352:	f003 0301 	and.w	r3, r3, #1
 800f356:	2b00      	cmp	r3, #0
 800f358:	d002      	beq.n	800f360 <f_open+0x1d4>
						res = FR_DENIED;
 800f35a:	2307      	movs	r3, #7
 800f35c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800f360:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f364:	2b00      	cmp	r3, #0
 800f366:	d128      	bne.n	800f3ba <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f368:	79fb      	ldrb	r3, [r7, #7]
 800f36a:	f003 0308 	and.w	r3, r3, #8
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d003      	beq.n	800f37a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800f372:	79fb      	ldrb	r3, [r7, #7]
 800f374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f378:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f37a:	697b      	ldr	r3, [r7, #20]
 800f37c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800f382:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f388:	79fb      	ldrb	r3, [r7, #7]
 800f38a:	f023 0301 	bic.w	r3, r3, #1
 800f38e:	2b00      	cmp	r3, #0
 800f390:	bf14      	ite	ne
 800f392:	2301      	movne	r3, #1
 800f394:	2300      	moveq	r3, #0
 800f396:	b2db      	uxtb	r3, r3
 800f398:	461a      	mov	r2, r3
 800f39a:	f107 0318 	add.w	r3, r7, #24
 800f39e:	4611      	mov	r1, r2
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	f7fd fdc3 	bl	800cf2c <inc_lock>
 800f3a6:	4602      	mov	r2, r0
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	691b      	ldr	r3, [r3, #16]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d102      	bne.n	800f3ba <f_open+0x22e>
 800f3b4:	2302      	movs	r3, #2
 800f3b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f3ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	f040 8095 	bne.w	800f4ee <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f3c4:	697b      	ldr	r3, [r7, #20]
 800f3c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f3c8:	4611      	mov	r1, r2
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	f7fe fbe7 	bl	800db9e <ld_clust>
 800f3d0:	4602      	mov	r2, r0
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3d8:	331c      	adds	r3, #28
 800f3da:	4618      	mov	r0, r3
 800f3dc:	f7fd fc40 	bl	800cc60 <ld_dword>
 800f3e0:	4602      	mov	r2, r0
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f3ec:	697a      	ldr	r2, [r7, #20]
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f3f2:	697b      	ldr	r3, [r7, #20]
 800f3f4:	88da      	ldrh	r2, [r3, #6]
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	79fa      	ldrb	r2, [r7, #7]
 800f3fe:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	2200      	movs	r2, #0
 800f404:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	2200      	movs	r2, #0
 800f40a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	2200      	movs	r2, #0
 800f410:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	3330      	adds	r3, #48	; 0x30
 800f416:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f41a:	2100      	movs	r1, #0
 800f41c:	4618      	mov	r0, r3
 800f41e:	f7fd fcaa 	bl	800cd76 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f422:	79fb      	ldrb	r3, [r7, #7]
 800f424:	f003 0320 	and.w	r3, r3, #32
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d060      	beq.n	800f4ee <f_open+0x362>
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	68db      	ldr	r3, [r3, #12]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d05c      	beq.n	800f4ee <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	68da      	ldr	r2, [r3, #12]
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f43c:	697b      	ldr	r3, [r7, #20]
 800f43e:	895b      	ldrh	r3, [r3, #10]
 800f440:	025b      	lsls	r3, r3, #9
 800f442:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	689b      	ldr	r3, [r3, #8]
 800f448:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	68db      	ldr	r3, [r3, #12]
 800f44e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f450:	e016      	b.n	800f480 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f456:	4618      	mov	r0, r3
 800f458:	f7fd ff55 	bl	800d306 <get_fat>
 800f45c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800f45e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f460:	2b01      	cmp	r3, #1
 800f462:	d802      	bhi.n	800f46a <f_open+0x2de>
 800f464:	2302      	movs	r3, #2
 800f466:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f46a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f46c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f470:	d102      	bne.n	800f478 <f_open+0x2ec>
 800f472:	2301      	movs	r3, #1
 800f474:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f478:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f47a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f47c:	1ad3      	subs	r3, r2, r3
 800f47e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f480:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f484:	2b00      	cmp	r3, #0
 800f486:	d103      	bne.n	800f490 <f_open+0x304>
 800f488:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f48a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f48c:	429a      	cmp	r2, r3
 800f48e:	d8e0      	bhi.n	800f452 <f_open+0x2c6>
				}
				fp->clust = clst;
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f494:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f496:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d127      	bne.n	800f4ee <f_open+0x362>
 800f49e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f4a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d022      	beq.n	800f4ee <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f7fd ff0b 	bl	800d2c8 <clust2sect>
 800f4b2:	64f8      	str	r0, [r7, #76]	; 0x4c
 800f4b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d103      	bne.n	800f4c2 <f_open+0x336>
						res = FR_INT_ERR;
 800f4ba:	2302      	movs	r3, #2
 800f4bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f4c0:	e015      	b.n	800f4ee <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f4c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f4c4:	0a5a      	lsrs	r2, r3, #9
 800f4c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4c8:	441a      	add	r2, r3
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f4ce:	697b      	ldr	r3, [r7, #20]
 800f4d0:	7858      	ldrb	r0, [r3, #1]
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	6a1a      	ldr	r2, [r3, #32]
 800f4dc:	2301      	movs	r3, #1
 800f4de:	f7fd fb49 	bl	800cb74 <disk_read>
 800f4e2:	4603      	mov	r3, r0
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d002      	beq.n	800f4ee <f_open+0x362>
 800f4e8:	2301      	movs	r3, #1
 800f4ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f4ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d002      	beq.n	800f4fc <f_open+0x370>
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f4fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800f500:	4618      	mov	r0, r3
 800f502:	3768      	adds	r7, #104	; 0x68
 800f504:	46bd      	mov	sp, r7
 800f506:	bd80      	pop	{r7, pc}

0800f508 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b08e      	sub	sp, #56	; 0x38
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	60f8      	str	r0, [r7, #12]
 800f510:	60b9      	str	r1, [r7, #8]
 800f512:	607a      	str	r2, [r7, #4]
 800f514:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	2200      	movs	r2, #0
 800f51e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	f107 0214 	add.w	r2, r7, #20
 800f526:	4611      	mov	r1, r2
 800f528:	4618      	mov	r0, r3
 800f52a:	f7ff fdb3 	bl	800f094 <validate>
 800f52e:	4603      	mov	r3, r0
 800f530:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f534:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d107      	bne.n	800f54c <f_read+0x44>
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	7d5b      	ldrb	r3, [r3, #21]
 800f540:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f544:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d002      	beq.n	800f552 <f_read+0x4a>
 800f54c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f550:	e115      	b.n	800f77e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	7d1b      	ldrb	r3, [r3, #20]
 800f556:	f003 0301 	and.w	r3, r3, #1
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d101      	bne.n	800f562 <f_read+0x5a>
 800f55e:	2307      	movs	r3, #7
 800f560:	e10d      	b.n	800f77e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	68da      	ldr	r2, [r3, #12]
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	699b      	ldr	r3, [r3, #24]
 800f56a:	1ad3      	subs	r3, r2, r3
 800f56c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800f56e:	687a      	ldr	r2, [r7, #4]
 800f570:	6a3b      	ldr	r3, [r7, #32]
 800f572:	429a      	cmp	r2, r3
 800f574:	f240 80fe 	bls.w	800f774 <f_read+0x26c>
 800f578:	6a3b      	ldr	r3, [r7, #32]
 800f57a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800f57c:	e0fa      	b.n	800f774 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	699b      	ldr	r3, [r3, #24]
 800f582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f586:	2b00      	cmp	r3, #0
 800f588:	f040 80c6 	bne.w	800f718 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	699b      	ldr	r3, [r3, #24]
 800f590:	0a5b      	lsrs	r3, r3, #9
 800f592:	697a      	ldr	r2, [r7, #20]
 800f594:	8952      	ldrh	r2, [r2, #10]
 800f596:	3a01      	subs	r2, #1
 800f598:	4013      	ands	r3, r2
 800f59a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800f59c:	69fb      	ldr	r3, [r7, #28]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d12f      	bne.n	800f602 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	699b      	ldr	r3, [r3, #24]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d103      	bne.n	800f5b2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	689b      	ldr	r3, [r3, #8]
 800f5ae:	633b      	str	r3, [r7, #48]	; 0x30
 800f5b0:	e013      	b.n	800f5da <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d007      	beq.n	800f5ca <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	699b      	ldr	r3, [r3, #24]
 800f5be:	4619      	mov	r1, r3
 800f5c0:	68f8      	ldr	r0, [r7, #12]
 800f5c2:	f7fe f931 	bl	800d828 <clmt_clust>
 800f5c6:	6338      	str	r0, [r7, #48]	; 0x30
 800f5c8:	e007      	b.n	800f5da <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800f5ca:	68fa      	ldr	r2, [r7, #12]
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	69db      	ldr	r3, [r3, #28]
 800f5d0:	4619      	mov	r1, r3
 800f5d2:	4610      	mov	r0, r2
 800f5d4:	f7fd fe97 	bl	800d306 <get_fat>
 800f5d8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800f5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5dc:	2b01      	cmp	r3, #1
 800f5de:	d804      	bhi.n	800f5ea <f_read+0xe2>
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	2202      	movs	r2, #2
 800f5e4:	755a      	strb	r2, [r3, #21]
 800f5e6:	2302      	movs	r3, #2
 800f5e8:	e0c9      	b.n	800f77e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5f0:	d104      	bne.n	800f5fc <f_read+0xf4>
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	2201      	movs	r2, #1
 800f5f6:	755a      	strb	r2, [r3, #21]
 800f5f8:	2301      	movs	r3, #1
 800f5fa:	e0c0      	b.n	800f77e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f600:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f602:	697a      	ldr	r2, [r7, #20]
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	69db      	ldr	r3, [r3, #28]
 800f608:	4619      	mov	r1, r3
 800f60a:	4610      	mov	r0, r2
 800f60c:	f7fd fe5c 	bl	800d2c8 <clust2sect>
 800f610:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f612:	69bb      	ldr	r3, [r7, #24]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d104      	bne.n	800f622 <f_read+0x11a>
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	2202      	movs	r2, #2
 800f61c:	755a      	strb	r2, [r3, #21]
 800f61e:	2302      	movs	r3, #2
 800f620:	e0ad      	b.n	800f77e <f_read+0x276>
			sect += csect;
 800f622:	69ba      	ldr	r2, [r7, #24]
 800f624:	69fb      	ldr	r3, [r7, #28]
 800f626:	4413      	add	r3, r2
 800f628:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	0a5b      	lsrs	r3, r3, #9
 800f62e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800f630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f632:	2b00      	cmp	r3, #0
 800f634:	d039      	beq.n	800f6aa <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f636:	69fa      	ldr	r2, [r7, #28]
 800f638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f63a:	4413      	add	r3, r2
 800f63c:	697a      	ldr	r2, [r7, #20]
 800f63e:	8952      	ldrh	r2, [r2, #10]
 800f640:	4293      	cmp	r3, r2
 800f642:	d905      	bls.n	800f650 <f_read+0x148>
					cc = fs->csize - csect;
 800f644:	697b      	ldr	r3, [r7, #20]
 800f646:	895b      	ldrh	r3, [r3, #10]
 800f648:	461a      	mov	r2, r3
 800f64a:	69fb      	ldr	r3, [r7, #28]
 800f64c:	1ad3      	subs	r3, r2, r3
 800f64e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f650:	697b      	ldr	r3, [r7, #20]
 800f652:	7858      	ldrb	r0, [r3, #1]
 800f654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f656:	69ba      	ldr	r2, [r7, #24]
 800f658:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f65a:	f7fd fa8b 	bl	800cb74 <disk_read>
 800f65e:	4603      	mov	r3, r0
 800f660:	2b00      	cmp	r3, #0
 800f662:	d004      	beq.n	800f66e <f_read+0x166>
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	2201      	movs	r2, #1
 800f668:	755a      	strb	r2, [r3, #21]
 800f66a:	2301      	movs	r3, #1
 800f66c:	e087      	b.n	800f77e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	7d1b      	ldrb	r3, [r3, #20]
 800f672:	b25b      	sxtb	r3, r3
 800f674:	2b00      	cmp	r3, #0
 800f676:	da14      	bge.n	800f6a2 <f_read+0x19a>
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	6a1a      	ldr	r2, [r3, #32]
 800f67c:	69bb      	ldr	r3, [r7, #24]
 800f67e:	1ad3      	subs	r3, r2, r3
 800f680:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f682:	429a      	cmp	r2, r3
 800f684:	d90d      	bls.n	800f6a2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	6a1a      	ldr	r2, [r3, #32]
 800f68a:	69bb      	ldr	r3, [r7, #24]
 800f68c:	1ad3      	subs	r3, r2, r3
 800f68e:	025b      	lsls	r3, r3, #9
 800f690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f692:	18d0      	adds	r0, r2, r3
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	3330      	adds	r3, #48	; 0x30
 800f698:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f69c:	4619      	mov	r1, r3
 800f69e:	f7fd fb49 	bl	800cd34 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800f6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6a4:	025b      	lsls	r3, r3, #9
 800f6a6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800f6a8:	e050      	b.n	800f74c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	6a1b      	ldr	r3, [r3, #32]
 800f6ae:	69ba      	ldr	r2, [r7, #24]
 800f6b0:	429a      	cmp	r2, r3
 800f6b2:	d02e      	beq.n	800f712 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	7d1b      	ldrb	r3, [r3, #20]
 800f6b8:	b25b      	sxtb	r3, r3
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	da18      	bge.n	800f6f0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f6be:	697b      	ldr	r3, [r7, #20]
 800f6c0:	7858      	ldrb	r0, [r3, #1]
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	6a1a      	ldr	r2, [r3, #32]
 800f6cc:	2301      	movs	r3, #1
 800f6ce:	f7fd fa71 	bl	800cbb4 <disk_write>
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d004      	beq.n	800f6e2 <f_read+0x1da>
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	2201      	movs	r2, #1
 800f6dc:	755a      	strb	r2, [r3, #21]
 800f6de:	2301      	movs	r3, #1
 800f6e0:	e04d      	b.n	800f77e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	7d1b      	ldrb	r3, [r3, #20]
 800f6e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f6ea:	b2da      	uxtb	r2, r3
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f6f0:	697b      	ldr	r3, [r7, #20]
 800f6f2:	7858      	ldrb	r0, [r3, #1]
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f6fa:	2301      	movs	r3, #1
 800f6fc:	69ba      	ldr	r2, [r7, #24]
 800f6fe:	f7fd fa39 	bl	800cb74 <disk_read>
 800f702:	4603      	mov	r3, r0
 800f704:	2b00      	cmp	r3, #0
 800f706:	d004      	beq.n	800f712 <f_read+0x20a>
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	2201      	movs	r2, #1
 800f70c:	755a      	strb	r2, [r3, #21]
 800f70e:	2301      	movs	r3, #1
 800f710:	e035      	b.n	800f77e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	69ba      	ldr	r2, [r7, #24]
 800f716:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	699b      	ldr	r3, [r3, #24]
 800f71c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f720:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f724:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800f726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	429a      	cmp	r2, r3
 800f72c:	d901      	bls.n	800f732 <f_read+0x22a>
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	699b      	ldr	r3, [r3, #24]
 800f73c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f740:	4413      	add	r3, r2
 800f742:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f744:	4619      	mov	r1, r3
 800f746:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f748:	f7fd faf4 	bl	800cd34 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800f74c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f750:	4413      	add	r3, r2
 800f752:	627b      	str	r3, [r7, #36]	; 0x24
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	699a      	ldr	r2, [r3, #24]
 800f758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f75a:	441a      	add	r2, r3
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	619a      	str	r2, [r3, #24]
 800f760:	683b      	ldr	r3, [r7, #0]
 800f762:	681a      	ldr	r2, [r3, #0]
 800f764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f766:	441a      	add	r2, r3
 800f768:	683b      	ldr	r3, [r7, #0]
 800f76a:	601a      	str	r2, [r3, #0]
 800f76c:	687a      	ldr	r2, [r7, #4]
 800f76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f770:	1ad3      	subs	r3, r2, r3
 800f772:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	2b00      	cmp	r3, #0
 800f778:	f47f af01 	bne.w	800f57e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800f77c:	2300      	movs	r3, #0
}
 800f77e:	4618      	mov	r0, r3
 800f780:	3738      	adds	r7, #56	; 0x38
 800f782:	46bd      	mov	sp, r7
 800f784:	bd80      	pop	{r7, pc}

0800f786 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f786:	b580      	push	{r7, lr}
 800f788:	b086      	sub	sp, #24
 800f78a:	af00      	add	r7, sp, #0
 800f78c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	f107 0208 	add.w	r2, r7, #8
 800f794:	4611      	mov	r1, r2
 800f796:	4618      	mov	r0, r3
 800f798:	f7ff fc7c 	bl	800f094 <validate>
 800f79c:	4603      	mov	r3, r0
 800f79e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f7a0:	7dfb      	ldrb	r3, [r7, #23]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d168      	bne.n	800f878 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	7d1b      	ldrb	r3, [r3, #20]
 800f7aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d062      	beq.n	800f878 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	7d1b      	ldrb	r3, [r3, #20]
 800f7b6:	b25b      	sxtb	r3, r3
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	da15      	bge.n	800f7e8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f7bc:	68bb      	ldr	r3, [r7, #8]
 800f7be:	7858      	ldrb	r0, [r3, #1]
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	6a1a      	ldr	r2, [r3, #32]
 800f7ca:	2301      	movs	r3, #1
 800f7cc:	f7fd f9f2 	bl	800cbb4 <disk_write>
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d001      	beq.n	800f7da <f_sync+0x54>
 800f7d6:	2301      	movs	r3, #1
 800f7d8:	e04f      	b.n	800f87a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	7d1b      	ldrb	r3, [r3, #20]
 800f7de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f7e2:	b2da      	uxtb	r2, r3
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f7e8:	f7fa f876 	bl	80098d8 <get_fattime>
 800f7ec:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f7ee:	68ba      	ldr	r2, [r7, #8]
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7f4:	4619      	mov	r1, r3
 800f7f6:	4610      	mov	r0, r2
 800f7f8:	f7fd fcca 	bl	800d190 <move_window>
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f800:	7dfb      	ldrb	r3, [r7, #23]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d138      	bne.n	800f878 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f80a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	330b      	adds	r3, #11
 800f810:	781a      	ldrb	r2, [r3, #0]
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	330b      	adds	r3, #11
 800f816:	f042 0220 	orr.w	r2, r2, #32
 800f81a:	b2d2      	uxtb	r2, r2
 800f81c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	6818      	ldr	r0, [r3, #0]
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	689b      	ldr	r3, [r3, #8]
 800f826:	461a      	mov	r2, r3
 800f828:	68f9      	ldr	r1, [r7, #12]
 800f82a:	f7fe f9d7 	bl	800dbdc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	f103 021c 	add.w	r2, r3, #28
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	68db      	ldr	r3, [r3, #12]
 800f838:	4619      	mov	r1, r3
 800f83a:	4610      	mov	r0, r2
 800f83c:	f7fd fa4e 	bl	800ccdc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	3316      	adds	r3, #22
 800f844:	6939      	ldr	r1, [r7, #16]
 800f846:	4618      	mov	r0, r3
 800f848:	f7fd fa48 	bl	800ccdc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	3312      	adds	r3, #18
 800f850:	2100      	movs	r1, #0
 800f852:	4618      	mov	r0, r3
 800f854:	f7fd fa27 	bl	800cca6 <st_word>
					fs->wflag = 1;
 800f858:	68bb      	ldr	r3, [r7, #8]
 800f85a:	2201      	movs	r2, #1
 800f85c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f85e:	68bb      	ldr	r3, [r7, #8]
 800f860:	4618      	mov	r0, r3
 800f862:	f7fd fcc3 	bl	800d1ec <sync_fs>
 800f866:	4603      	mov	r3, r0
 800f868:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	7d1b      	ldrb	r3, [r3, #20]
 800f86e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f872:	b2da      	uxtb	r2, r3
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f878:	7dfb      	ldrb	r3, [r7, #23]
}
 800f87a:	4618      	mov	r0, r3
 800f87c:	3718      	adds	r7, #24
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}

0800f882 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f882:	b580      	push	{r7, lr}
 800f884:	b084      	sub	sp, #16
 800f886:	af00      	add	r7, sp, #0
 800f888:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f88a:	6878      	ldr	r0, [r7, #4]
 800f88c:	f7ff ff7b 	bl	800f786 <f_sync>
 800f890:	4603      	mov	r3, r0
 800f892:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f894:	7bfb      	ldrb	r3, [r7, #15]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d118      	bne.n	800f8cc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	f107 0208 	add.w	r2, r7, #8
 800f8a0:	4611      	mov	r1, r2
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f7ff fbf6 	bl	800f094 <validate>
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f8ac:	7bfb      	ldrb	r3, [r7, #15]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d10c      	bne.n	800f8cc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	691b      	ldr	r3, [r3, #16]
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f7fd fbc6 	bl	800d048 <dec_lock>
 800f8bc:	4603      	mov	r3, r0
 800f8be:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f8c0:	7bfb      	ldrb	r3, [r7, #15]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d102      	bne.n	800f8cc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f8cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	3710      	adds	r7, #16
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	bd80      	pop	{r7, pc}

0800f8d6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800f8d6:	b580      	push	{r7, lr}
 800f8d8:	b090      	sub	sp, #64	; 0x40
 800f8da:	af00      	add	r7, sp, #0
 800f8dc:	6078      	str	r0, [r7, #4]
 800f8de:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	f107 0208 	add.w	r2, r7, #8
 800f8e6:	4611      	mov	r1, r2
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	f7ff fbd3 	bl	800f094 <validate>
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800f8f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d103      	bne.n	800f904 <f_lseek+0x2e>
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	7d5b      	ldrb	r3, [r3, #21]
 800f900:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800f904:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d002      	beq.n	800f912 <f_lseek+0x3c>
 800f90c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f910:	e1e6      	b.n	800fce0 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f916:	2b00      	cmp	r3, #0
 800f918:	f000 80d1 	beq.w	800fabe <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800f91c:	683b      	ldr	r3, [r7, #0]
 800f91e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f922:	d15a      	bne.n	800f9da <f_lseek+0x104>
			tbl = fp->cltbl;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f928:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f92c:	1d1a      	adds	r2, r3, #4
 800f92e:	627a      	str	r2, [r7, #36]	; 0x24
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	617b      	str	r3, [r7, #20]
 800f934:	2302      	movs	r3, #2
 800f936:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	689b      	ldr	r3, [r3, #8]
 800f93c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800f93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f940:	2b00      	cmp	r3, #0
 800f942:	d03a      	beq.n	800f9ba <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800f944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f946:	613b      	str	r3, [r7, #16]
 800f948:	2300      	movs	r3, #0
 800f94a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f94e:	3302      	adds	r3, #2
 800f950:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800f952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f954:	60fb      	str	r3, [r7, #12]
 800f956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f958:	3301      	adds	r3, #1
 800f95a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f960:	4618      	mov	r0, r3
 800f962:	f7fd fcd0 	bl	800d306 <get_fat>
 800f966:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f96a:	2b01      	cmp	r3, #1
 800f96c:	d804      	bhi.n	800f978 <f_lseek+0xa2>
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	2202      	movs	r2, #2
 800f972:	755a      	strb	r2, [r3, #21]
 800f974:	2302      	movs	r3, #2
 800f976:	e1b3      	b.n	800fce0 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f97a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f97e:	d104      	bne.n	800f98a <f_lseek+0xb4>
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	2201      	movs	r2, #1
 800f984:	755a      	strb	r2, [r3, #21]
 800f986:	2301      	movs	r3, #1
 800f988:	e1aa      	b.n	800fce0 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	3301      	adds	r3, #1
 800f98e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f990:	429a      	cmp	r2, r3
 800f992:	d0de      	beq.n	800f952 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800f994:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f996:	697b      	ldr	r3, [r7, #20]
 800f998:	429a      	cmp	r2, r3
 800f99a:	d809      	bhi.n	800f9b0 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800f99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f99e:	1d1a      	adds	r2, r3, #4
 800f9a0:	627a      	str	r2, [r7, #36]	; 0x24
 800f9a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f9a4:	601a      	str	r2, [r3, #0]
 800f9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9a8:	1d1a      	adds	r2, r3, #4
 800f9aa:	627a      	str	r2, [r7, #36]	; 0x24
 800f9ac:	693a      	ldr	r2, [r7, #16]
 800f9ae:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800f9b0:	68bb      	ldr	r3, [r7, #8]
 800f9b2:	699b      	ldr	r3, [r3, #24]
 800f9b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f9b6:	429a      	cmp	r2, r3
 800f9b8:	d3c4      	bcc.n	800f944 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f9c0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800f9c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f9c4:	697b      	ldr	r3, [r7, #20]
 800f9c6:	429a      	cmp	r2, r3
 800f9c8:	d803      	bhi.n	800f9d2 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800f9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	601a      	str	r2, [r3, #0]
 800f9d0:	e184      	b.n	800fcdc <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800f9d2:	2311      	movs	r3, #17
 800f9d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f9d8:	e180      	b.n	800fcdc <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	68db      	ldr	r3, [r3, #12]
 800f9de:	683a      	ldr	r2, [r7, #0]
 800f9e0:	429a      	cmp	r2, r3
 800f9e2:	d902      	bls.n	800f9ea <f_lseek+0x114>
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	68db      	ldr	r3, [r3, #12]
 800f9e8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	683a      	ldr	r2, [r7, #0]
 800f9ee:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800f9f0:	683b      	ldr	r3, [r7, #0]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	f000 8172 	beq.w	800fcdc <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800f9f8:	683b      	ldr	r3, [r7, #0]
 800f9fa:	3b01      	subs	r3, #1
 800f9fc:	4619      	mov	r1, r3
 800f9fe:	6878      	ldr	r0, [r7, #4]
 800fa00:	f7fd ff12 	bl	800d828 <clmt_clust>
 800fa04:	4602      	mov	r2, r0
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800fa0a:	68ba      	ldr	r2, [r7, #8]
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	69db      	ldr	r3, [r3, #28]
 800fa10:	4619      	mov	r1, r3
 800fa12:	4610      	mov	r0, r2
 800fa14:	f7fd fc58 	bl	800d2c8 <clust2sect>
 800fa18:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800fa1a:	69bb      	ldr	r3, [r7, #24]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d104      	bne.n	800fa2a <f_lseek+0x154>
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	2202      	movs	r2, #2
 800fa24:	755a      	strb	r2, [r3, #21]
 800fa26:	2302      	movs	r3, #2
 800fa28:	e15a      	b.n	800fce0 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800fa2a:	683b      	ldr	r3, [r7, #0]
 800fa2c:	3b01      	subs	r3, #1
 800fa2e:	0a5b      	lsrs	r3, r3, #9
 800fa30:	68ba      	ldr	r2, [r7, #8]
 800fa32:	8952      	ldrh	r2, [r2, #10]
 800fa34:	3a01      	subs	r2, #1
 800fa36:	4013      	ands	r3, r2
 800fa38:	69ba      	ldr	r2, [r7, #24]
 800fa3a:	4413      	add	r3, r2
 800fa3c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	699b      	ldr	r3, [r3, #24]
 800fa42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	f000 8148 	beq.w	800fcdc <f_lseek+0x406>
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	6a1b      	ldr	r3, [r3, #32]
 800fa50:	69ba      	ldr	r2, [r7, #24]
 800fa52:	429a      	cmp	r2, r3
 800fa54:	f000 8142 	beq.w	800fcdc <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	7d1b      	ldrb	r3, [r3, #20]
 800fa5c:	b25b      	sxtb	r3, r3
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	da18      	bge.n	800fa94 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fa62:	68bb      	ldr	r3, [r7, #8]
 800fa64:	7858      	ldrb	r0, [r3, #1]
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	6a1a      	ldr	r2, [r3, #32]
 800fa70:	2301      	movs	r3, #1
 800fa72:	f7fd f89f 	bl	800cbb4 <disk_write>
 800fa76:	4603      	mov	r3, r0
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d004      	beq.n	800fa86 <f_lseek+0x1b0>
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	2201      	movs	r2, #1
 800fa80:	755a      	strb	r2, [r3, #21]
 800fa82:	2301      	movs	r3, #1
 800fa84:	e12c      	b.n	800fce0 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	7d1b      	ldrb	r3, [r3, #20]
 800fa8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa8e:	b2da      	uxtb	r2, r3
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800fa94:	68bb      	ldr	r3, [r7, #8]
 800fa96:	7858      	ldrb	r0, [r3, #1]
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fa9e:	2301      	movs	r3, #1
 800faa0:	69ba      	ldr	r2, [r7, #24]
 800faa2:	f7fd f867 	bl	800cb74 <disk_read>
 800faa6:	4603      	mov	r3, r0
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d004      	beq.n	800fab6 <f_lseek+0x1e0>
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	2201      	movs	r2, #1
 800fab0:	755a      	strb	r2, [r3, #21]
 800fab2:	2301      	movs	r3, #1
 800fab4:	e114      	b.n	800fce0 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	69ba      	ldr	r2, [r7, #24]
 800faba:	621a      	str	r2, [r3, #32]
 800fabc:	e10e      	b.n	800fcdc <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	68db      	ldr	r3, [r3, #12]
 800fac2:	683a      	ldr	r2, [r7, #0]
 800fac4:	429a      	cmp	r2, r3
 800fac6:	d908      	bls.n	800fada <f_lseek+0x204>
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	7d1b      	ldrb	r3, [r3, #20]
 800facc:	f003 0302 	and.w	r3, r3, #2
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d102      	bne.n	800fada <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	68db      	ldr	r3, [r3, #12]
 800fad8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	699b      	ldr	r3, [r3, #24]
 800fade:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800fae0:	2300      	movs	r3, #0
 800fae2:	637b      	str	r3, [r7, #52]	; 0x34
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fae8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800faea:	683b      	ldr	r3, [r7, #0]
 800faec:	2b00      	cmp	r3, #0
 800faee:	f000 80a7 	beq.w	800fc40 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800faf2:	68bb      	ldr	r3, [r7, #8]
 800faf4:	895b      	ldrh	r3, [r3, #10]
 800faf6:	025b      	lsls	r3, r3, #9
 800faf8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800fafa:	6a3b      	ldr	r3, [r7, #32]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d01b      	beq.n	800fb38 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800fb00:	683b      	ldr	r3, [r7, #0]
 800fb02:	1e5a      	subs	r2, r3, #1
 800fb04:	69fb      	ldr	r3, [r7, #28]
 800fb06:	fbb2 f2f3 	udiv	r2, r2, r3
 800fb0a:	6a3b      	ldr	r3, [r7, #32]
 800fb0c:	1e59      	subs	r1, r3, #1
 800fb0e:	69fb      	ldr	r3, [r7, #28]
 800fb10:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800fb14:	429a      	cmp	r2, r3
 800fb16:	d30f      	bcc.n	800fb38 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800fb18:	6a3b      	ldr	r3, [r7, #32]
 800fb1a:	1e5a      	subs	r2, r3, #1
 800fb1c:	69fb      	ldr	r3, [r7, #28]
 800fb1e:	425b      	negs	r3, r3
 800fb20:	401a      	ands	r2, r3
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	699b      	ldr	r3, [r3, #24]
 800fb2a:	683a      	ldr	r2, [r7, #0]
 800fb2c:	1ad3      	subs	r3, r2, r3
 800fb2e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	69db      	ldr	r3, [r3, #28]
 800fb34:	63bb      	str	r3, [r7, #56]	; 0x38
 800fb36:	e022      	b.n	800fb7e <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	689b      	ldr	r3, [r3, #8]
 800fb3c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800fb3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d119      	bne.n	800fb78 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2100      	movs	r1, #0
 800fb48:	4618      	mov	r0, r3
 800fb4a:	f7fd fdd5 	bl	800d6f8 <create_chain>
 800fb4e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fb50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb52:	2b01      	cmp	r3, #1
 800fb54:	d104      	bne.n	800fb60 <f_lseek+0x28a>
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	2202      	movs	r2, #2
 800fb5a:	755a      	strb	r2, [r3, #21]
 800fb5c:	2302      	movs	r3, #2
 800fb5e:	e0bf      	b.n	800fce0 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fb60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb66:	d104      	bne.n	800fb72 <f_lseek+0x29c>
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2201      	movs	r2, #1
 800fb6c:	755a      	strb	r2, [r3, #21]
 800fb6e:	2301      	movs	r3, #1
 800fb70:	e0b6      	b.n	800fce0 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb76:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb7c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800fb7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d05d      	beq.n	800fc40 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800fb84:	e03a      	b.n	800fbfc <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800fb86:	683a      	ldr	r2, [r7, #0]
 800fb88:	69fb      	ldr	r3, [r7, #28]
 800fb8a:	1ad3      	subs	r3, r2, r3
 800fb8c:	603b      	str	r3, [r7, #0]
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	699a      	ldr	r2, [r3, #24]
 800fb92:	69fb      	ldr	r3, [r7, #28]
 800fb94:	441a      	add	r2, r3
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	7d1b      	ldrb	r3, [r3, #20]
 800fb9e:	f003 0302 	and.w	r3, r3, #2
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d00b      	beq.n	800fbbe <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fbaa:	4618      	mov	r0, r3
 800fbac:	f7fd fda4 	bl	800d6f8 <create_chain>
 800fbb0:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800fbb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d108      	bne.n	800fbca <f_lseek+0x2f4>
							ofs = 0; break;
 800fbb8:	2300      	movs	r3, #0
 800fbba:	603b      	str	r3, [r7, #0]
 800fbbc:	e022      	b.n	800fc04 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	f7fd fb9f 	bl	800d306 <get_fat>
 800fbc8:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fbca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbd0:	d104      	bne.n	800fbdc <f_lseek+0x306>
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	2201      	movs	r2, #1
 800fbd6:	755a      	strb	r2, [r3, #21]
 800fbd8:	2301      	movs	r3, #1
 800fbda:	e081      	b.n	800fce0 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800fbdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbde:	2b01      	cmp	r3, #1
 800fbe0:	d904      	bls.n	800fbec <f_lseek+0x316>
 800fbe2:	68bb      	ldr	r3, [r7, #8]
 800fbe4:	699b      	ldr	r3, [r3, #24]
 800fbe6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fbe8:	429a      	cmp	r2, r3
 800fbea:	d304      	bcc.n	800fbf6 <f_lseek+0x320>
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	2202      	movs	r2, #2
 800fbf0:	755a      	strb	r2, [r3, #21]
 800fbf2:	2302      	movs	r3, #2
 800fbf4:	e074      	b.n	800fce0 <f_lseek+0x40a>
					fp->clust = clst;
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fbfa:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800fbfc:	683a      	ldr	r2, [r7, #0]
 800fbfe:	69fb      	ldr	r3, [r7, #28]
 800fc00:	429a      	cmp	r2, r3
 800fc02:	d8c0      	bhi.n	800fb86 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	699a      	ldr	r2, [r3, #24]
 800fc08:	683b      	ldr	r3, [r7, #0]
 800fc0a:	441a      	add	r2, r3
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800fc10:	683b      	ldr	r3, [r7, #0]
 800fc12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d012      	beq.n	800fc40 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800fc1a:	68bb      	ldr	r3, [r7, #8]
 800fc1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fc1e:	4618      	mov	r0, r3
 800fc20:	f7fd fb52 	bl	800d2c8 <clust2sect>
 800fc24:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800fc26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d104      	bne.n	800fc36 <f_lseek+0x360>
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	2202      	movs	r2, #2
 800fc30:	755a      	strb	r2, [r3, #21]
 800fc32:	2302      	movs	r3, #2
 800fc34:	e054      	b.n	800fce0 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800fc36:	683b      	ldr	r3, [r7, #0]
 800fc38:	0a5b      	lsrs	r3, r3, #9
 800fc3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fc3c:	4413      	add	r3, r2
 800fc3e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	699a      	ldr	r2, [r3, #24]
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	68db      	ldr	r3, [r3, #12]
 800fc48:	429a      	cmp	r2, r3
 800fc4a:	d90a      	bls.n	800fc62 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	699a      	ldr	r2, [r3, #24]
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	7d1b      	ldrb	r3, [r3, #20]
 800fc58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc5c:	b2da      	uxtb	r2, r3
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	699b      	ldr	r3, [r3, #24]
 800fc66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d036      	beq.n	800fcdc <f_lseek+0x406>
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	6a1b      	ldr	r3, [r3, #32]
 800fc72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fc74:	429a      	cmp	r2, r3
 800fc76:	d031      	beq.n	800fcdc <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	7d1b      	ldrb	r3, [r3, #20]
 800fc7c:	b25b      	sxtb	r3, r3
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	da18      	bge.n	800fcb4 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fc82:	68bb      	ldr	r3, [r7, #8]
 800fc84:	7858      	ldrb	r0, [r3, #1]
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	6a1a      	ldr	r2, [r3, #32]
 800fc90:	2301      	movs	r3, #1
 800fc92:	f7fc ff8f 	bl	800cbb4 <disk_write>
 800fc96:	4603      	mov	r3, r0
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d004      	beq.n	800fca6 <f_lseek+0x3d0>
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	2201      	movs	r2, #1
 800fca0:	755a      	strb	r2, [r3, #21]
 800fca2:	2301      	movs	r3, #1
 800fca4:	e01c      	b.n	800fce0 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	7d1b      	ldrb	r3, [r3, #20]
 800fcaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fcae:	b2da      	uxtb	r2, r3
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800fcb4:	68bb      	ldr	r3, [r7, #8]
 800fcb6:	7858      	ldrb	r0, [r3, #1]
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fcbe:	2301      	movs	r3, #1
 800fcc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fcc2:	f7fc ff57 	bl	800cb74 <disk_read>
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d004      	beq.n	800fcd6 <f_lseek+0x400>
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	2201      	movs	r2, #1
 800fcd0:	755a      	strb	r2, [r3, #21]
 800fcd2:	2301      	movs	r3, #1
 800fcd4:	e004      	b.n	800fce0 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fcda:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800fcdc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800fce0:	4618      	mov	r0, r3
 800fce2:	3740      	adds	r7, #64	; 0x40
 800fce4:	46bd      	mov	sp, r7
 800fce6:	bd80      	pop	{r7, pc}

0800fce8 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b086      	sub	sp, #24
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
 800fcf0:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d101      	bne.n	800fcfc <f_opendir+0x14>
 800fcf8:	2309      	movs	r3, #9
 800fcfa:	e064      	b.n	800fdc6 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800fd00:	f107 010c 	add.w	r1, r7, #12
 800fd04:	463b      	mov	r3, r7
 800fd06:	2200      	movs	r2, #0
 800fd08:	4618      	mov	r0, r3
 800fd0a:	f7fe ff73 	bl	800ebf4 <find_volume>
 800fd0e:	4603      	mov	r3, r0
 800fd10:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fd12:	7dfb      	ldrb	r3, [r7, #23]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d14f      	bne.n	800fdb8 <f_opendir+0xd0>
		obj->fs = fs;
 800fd18:	68fa      	ldr	r2, [r7, #12]
 800fd1a:	693b      	ldr	r3, [r7, #16]
 800fd1c:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800fd1e:	683b      	ldr	r3, [r7, #0]
 800fd20:	4619      	mov	r1, r3
 800fd22:	6878      	ldr	r0, [r7, #4]
 800fd24:	f7fe fe5a 	bl	800e9dc <follow_path>
 800fd28:	4603      	mov	r3, r0
 800fd2a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800fd2c:	7dfb      	ldrb	r3, [r7, #23]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d13d      	bne.n	800fdae <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fd38:	b25b      	sxtb	r3, r3
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	db12      	blt.n	800fd64 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800fd3e:	693b      	ldr	r3, [r7, #16]
 800fd40:	799b      	ldrb	r3, [r3, #6]
 800fd42:	f003 0310 	and.w	r3, r3, #16
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d00a      	beq.n	800fd60 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800fd4a:	68fa      	ldr	r2, [r7, #12]
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	6a1b      	ldr	r3, [r3, #32]
 800fd50:	4619      	mov	r1, r3
 800fd52:	4610      	mov	r0, r2
 800fd54:	f7fd ff23 	bl	800db9e <ld_clust>
 800fd58:	4602      	mov	r2, r0
 800fd5a:	693b      	ldr	r3, [r7, #16]
 800fd5c:	609a      	str	r2, [r3, #8]
 800fd5e:	e001      	b.n	800fd64 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800fd60:	2305      	movs	r3, #5
 800fd62:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800fd64:	7dfb      	ldrb	r3, [r7, #23]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d121      	bne.n	800fdae <f_opendir+0xc6>
				obj->id = fs->id;
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	88da      	ldrh	r2, [r3, #6]
 800fd6e:	693b      	ldr	r3, [r7, #16]
 800fd70:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800fd72:	2100      	movs	r1, #0
 800fd74:	6878      	ldr	r0, [r7, #4]
 800fd76:	f7fd fd8b 	bl	800d890 <dir_sdi>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800fd7e:	7dfb      	ldrb	r3, [r7, #23]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d114      	bne.n	800fdae <f_opendir+0xc6>
					if (obj->sclust) {
 800fd84:	693b      	ldr	r3, [r7, #16]
 800fd86:	689b      	ldr	r3, [r3, #8]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d00d      	beq.n	800fda8 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800fd8c:	2100      	movs	r1, #0
 800fd8e:	6878      	ldr	r0, [r7, #4]
 800fd90:	f7fd f8cc 	bl	800cf2c <inc_lock>
 800fd94:	4602      	mov	r2, r0
 800fd96:	693b      	ldr	r3, [r7, #16]
 800fd98:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800fd9a:	693b      	ldr	r3, [r7, #16]
 800fd9c:	691b      	ldr	r3, [r3, #16]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d105      	bne.n	800fdae <f_opendir+0xc6>
 800fda2:	2312      	movs	r3, #18
 800fda4:	75fb      	strb	r3, [r7, #23]
 800fda6:	e002      	b.n	800fdae <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800fda8:	693b      	ldr	r3, [r7, #16]
 800fdaa:	2200      	movs	r2, #0
 800fdac:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800fdae:	7dfb      	ldrb	r3, [r7, #23]
 800fdb0:	2b04      	cmp	r3, #4
 800fdb2:	d101      	bne.n	800fdb8 <f_opendir+0xd0>
 800fdb4:	2305      	movs	r3, #5
 800fdb6:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800fdb8:	7dfb      	ldrb	r3, [r7, #23]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d002      	beq.n	800fdc4 <f_opendir+0xdc>
 800fdbe:	693b      	ldr	r3, [r7, #16]
 800fdc0:	2200      	movs	r2, #0
 800fdc2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fdc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	3718      	adds	r7, #24
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	bd80      	pop	{r7, pc}

0800fdce <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800fdce:	b580      	push	{r7, lr}
 800fdd0:	b084      	sub	sp, #16
 800fdd2:	af00      	add	r7, sp, #0
 800fdd4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	f107 0208 	add.w	r2, r7, #8
 800fddc:	4611      	mov	r1, r2
 800fdde:	4618      	mov	r0, r3
 800fde0:	f7ff f958 	bl	800f094 <validate>
 800fde4:	4603      	mov	r3, r0
 800fde6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fde8:	7bfb      	ldrb	r3, [r7, #15]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d110      	bne.n	800fe10 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	691b      	ldr	r3, [r3, #16]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d006      	beq.n	800fe04 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	691b      	ldr	r3, [r3, #16]
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	f7fd f924 	bl	800d048 <dec_lock>
 800fe00:	4603      	mov	r3, r0
 800fe02:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800fe04:	7bfb      	ldrb	r3, [r7, #15]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d102      	bne.n	800fe10 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800fe10:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe12:	4618      	mov	r0, r3
 800fe14:	3710      	adds	r7, #16
 800fe16:	46bd      	mov	sp, r7
 800fe18:	bd80      	pop	{r7, pc}

0800fe1a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800fe1a:	b580      	push	{r7, lr}
 800fe1c:	b084      	sub	sp, #16
 800fe1e:	af00      	add	r7, sp, #0
 800fe20:	6078      	str	r0, [r7, #4]
 800fe22:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	f107 0208 	add.w	r2, r7, #8
 800fe2a:	4611      	mov	r1, r2
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	f7ff f931 	bl	800f094 <validate>
 800fe32:	4603      	mov	r3, r0
 800fe34:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fe36:	7bfb      	ldrb	r3, [r7, #15]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d126      	bne.n	800fe8a <f_readdir+0x70>
		if (!fno) {
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d106      	bne.n	800fe50 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800fe42:	2100      	movs	r1, #0
 800fe44:	6878      	ldr	r0, [r7, #4]
 800fe46:	f7fd fd23 	bl	800d890 <dir_sdi>
 800fe4a:	4603      	mov	r3, r0
 800fe4c:	73fb      	strb	r3, [r7, #15]
 800fe4e:	e01c      	b.n	800fe8a <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800fe50:	2100      	movs	r1, #0
 800fe52:	6878      	ldr	r0, [r7, #4]
 800fe54:	f7fe f8cd 	bl	800dff2 <dir_read>
 800fe58:	4603      	mov	r3, r0
 800fe5a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800fe5c:	7bfb      	ldrb	r3, [r7, #15]
 800fe5e:	2b04      	cmp	r3, #4
 800fe60:	d101      	bne.n	800fe66 <f_readdir+0x4c>
 800fe62:	2300      	movs	r3, #0
 800fe64:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800fe66:	7bfb      	ldrb	r3, [r7, #15]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d10e      	bne.n	800fe8a <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800fe6c:	6839      	ldr	r1, [r7, #0]
 800fe6e:	6878      	ldr	r0, [r7, #4]
 800fe70:	f7fe fb1e 	bl	800e4b0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800fe74:	2100      	movs	r1, #0
 800fe76:	6878      	ldr	r0, [r7, #4]
 800fe78:	f7fd fd85 	bl	800d986 <dir_next>
 800fe7c:	4603      	mov	r3, r0
 800fe7e:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800fe80:	7bfb      	ldrb	r3, [r7, #15]
 800fe82:	2b04      	cmp	r3, #4
 800fe84:	d101      	bne.n	800fe8a <f_readdir+0x70>
 800fe86:	2300      	movs	r3, #0
 800fe88:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800fe8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	3710      	adds	r7, #16
 800fe90:	46bd      	mov	sp, r7
 800fe92:	bd80      	pop	{r7, pc}

0800fe94 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fe94:	b480      	push	{r7}
 800fe96:	b087      	sub	sp, #28
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	60f8      	str	r0, [r7, #12]
 800fe9c:	60b9      	str	r1, [r7, #8]
 800fe9e:	4613      	mov	r3, r2
 800fea0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fea2:	2301      	movs	r3, #1
 800fea4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fea6:	2300      	movs	r3, #0
 800fea8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800feaa:	4b1f      	ldr	r3, [pc, #124]	; (800ff28 <FATFS_LinkDriverEx+0x94>)
 800feac:	7a5b      	ldrb	r3, [r3, #9]
 800feae:	b2db      	uxtb	r3, r3
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d131      	bne.n	800ff18 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800feb4:	4b1c      	ldr	r3, [pc, #112]	; (800ff28 <FATFS_LinkDriverEx+0x94>)
 800feb6:	7a5b      	ldrb	r3, [r3, #9]
 800feb8:	b2db      	uxtb	r3, r3
 800feba:	461a      	mov	r2, r3
 800febc:	4b1a      	ldr	r3, [pc, #104]	; (800ff28 <FATFS_LinkDriverEx+0x94>)
 800febe:	2100      	movs	r1, #0
 800fec0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800fec2:	4b19      	ldr	r3, [pc, #100]	; (800ff28 <FATFS_LinkDriverEx+0x94>)
 800fec4:	7a5b      	ldrb	r3, [r3, #9]
 800fec6:	b2db      	uxtb	r3, r3
 800fec8:	4a17      	ldr	r2, [pc, #92]	; (800ff28 <FATFS_LinkDriverEx+0x94>)
 800feca:	009b      	lsls	r3, r3, #2
 800fecc:	4413      	add	r3, r2
 800fece:	68fa      	ldr	r2, [r7, #12]
 800fed0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fed2:	4b15      	ldr	r3, [pc, #84]	; (800ff28 <FATFS_LinkDriverEx+0x94>)
 800fed4:	7a5b      	ldrb	r3, [r3, #9]
 800fed6:	b2db      	uxtb	r3, r3
 800fed8:	461a      	mov	r2, r3
 800feda:	4b13      	ldr	r3, [pc, #76]	; (800ff28 <FATFS_LinkDriverEx+0x94>)
 800fedc:	4413      	add	r3, r2
 800fede:	79fa      	ldrb	r2, [r7, #7]
 800fee0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800fee2:	4b11      	ldr	r3, [pc, #68]	; (800ff28 <FATFS_LinkDriverEx+0x94>)
 800fee4:	7a5b      	ldrb	r3, [r3, #9]
 800fee6:	b2db      	uxtb	r3, r3
 800fee8:	1c5a      	adds	r2, r3, #1
 800feea:	b2d1      	uxtb	r1, r2
 800feec:	4a0e      	ldr	r2, [pc, #56]	; (800ff28 <FATFS_LinkDriverEx+0x94>)
 800feee:	7251      	strb	r1, [r2, #9]
 800fef0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800fef2:	7dbb      	ldrb	r3, [r7, #22]
 800fef4:	3330      	adds	r3, #48	; 0x30
 800fef6:	b2da      	uxtb	r2, r3
 800fef8:	68bb      	ldr	r3, [r7, #8]
 800fefa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fefc:	68bb      	ldr	r3, [r7, #8]
 800fefe:	3301      	adds	r3, #1
 800ff00:	223a      	movs	r2, #58	; 0x3a
 800ff02:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ff04:	68bb      	ldr	r3, [r7, #8]
 800ff06:	3302      	adds	r3, #2
 800ff08:	222f      	movs	r2, #47	; 0x2f
 800ff0a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ff0c:	68bb      	ldr	r3, [r7, #8]
 800ff0e:	3303      	adds	r3, #3
 800ff10:	2200      	movs	r2, #0
 800ff12:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ff14:	2300      	movs	r3, #0
 800ff16:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ff18:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	371c      	adds	r7, #28
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff24:	4770      	bx	lr
 800ff26:	bf00      	nop
 800ff28:	20001e70 	.word	0x20001e70

0800ff2c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b082      	sub	sp, #8
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
 800ff34:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ff36:	2200      	movs	r2, #0
 800ff38:	6839      	ldr	r1, [r7, #0]
 800ff3a:	6878      	ldr	r0, [r7, #4]
 800ff3c:	f7ff ffaa 	bl	800fe94 <FATFS_LinkDriverEx>
 800ff40:	4603      	mov	r3, r0
}
 800ff42:	4618      	mov	r0, r3
 800ff44:	3708      	adds	r7, #8
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bd80      	pop	{r7, pc}
	...

0800ff4c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ff4c:	b480      	push	{r7}
 800ff4e:	b085      	sub	sp, #20
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	4603      	mov	r3, r0
 800ff54:	6039      	str	r1, [r7, #0]
 800ff56:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ff58:	88fb      	ldrh	r3, [r7, #6]
 800ff5a:	2b7f      	cmp	r3, #127	; 0x7f
 800ff5c:	d802      	bhi.n	800ff64 <ff_convert+0x18>
		c = chr;
 800ff5e:	88fb      	ldrh	r3, [r7, #6]
 800ff60:	81fb      	strh	r3, [r7, #14]
 800ff62:	e025      	b.n	800ffb0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ff64:	683b      	ldr	r3, [r7, #0]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d00b      	beq.n	800ff82 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ff6a:	88fb      	ldrh	r3, [r7, #6]
 800ff6c:	2bff      	cmp	r3, #255	; 0xff
 800ff6e:	d805      	bhi.n	800ff7c <ff_convert+0x30>
 800ff70:	88fb      	ldrh	r3, [r7, #6]
 800ff72:	3b80      	subs	r3, #128	; 0x80
 800ff74:	4a12      	ldr	r2, [pc, #72]	; (800ffc0 <ff_convert+0x74>)
 800ff76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff7a:	e000      	b.n	800ff7e <ff_convert+0x32>
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	81fb      	strh	r3, [r7, #14]
 800ff80:	e016      	b.n	800ffb0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ff82:	2300      	movs	r3, #0
 800ff84:	81fb      	strh	r3, [r7, #14]
 800ff86:	e009      	b.n	800ff9c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ff88:	89fb      	ldrh	r3, [r7, #14]
 800ff8a:	4a0d      	ldr	r2, [pc, #52]	; (800ffc0 <ff_convert+0x74>)
 800ff8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff90:	88fa      	ldrh	r2, [r7, #6]
 800ff92:	429a      	cmp	r2, r3
 800ff94:	d006      	beq.n	800ffa4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ff96:	89fb      	ldrh	r3, [r7, #14]
 800ff98:	3301      	adds	r3, #1
 800ff9a:	81fb      	strh	r3, [r7, #14]
 800ff9c:	89fb      	ldrh	r3, [r7, #14]
 800ff9e:	2b7f      	cmp	r3, #127	; 0x7f
 800ffa0:	d9f2      	bls.n	800ff88 <ff_convert+0x3c>
 800ffa2:	e000      	b.n	800ffa6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800ffa4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ffa6:	89fb      	ldrh	r3, [r7, #14]
 800ffa8:	3380      	adds	r3, #128	; 0x80
 800ffaa:	b29b      	uxth	r3, r3
 800ffac:	b2db      	uxtb	r3, r3
 800ffae:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800ffb0:	89fb      	ldrh	r3, [r7, #14]
}
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	3714      	adds	r7, #20
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffbc:	4770      	bx	lr
 800ffbe:	bf00      	nop
 800ffc0:	08010be8 	.word	0x08010be8

0800ffc4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ffc4:	b480      	push	{r7}
 800ffc6:	b087      	sub	sp, #28
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	4603      	mov	r3, r0
 800ffcc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ffce:	88fb      	ldrh	r3, [r7, #6]
 800ffd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ffd4:	d201      	bcs.n	800ffda <ff_wtoupper+0x16>
 800ffd6:	4b3e      	ldr	r3, [pc, #248]	; (80100d0 <ff_wtoupper+0x10c>)
 800ffd8:	e000      	b.n	800ffdc <ff_wtoupper+0x18>
 800ffda:	4b3e      	ldr	r3, [pc, #248]	; (80100d4 <ff_wtoupper+0x110>)
 800ffdc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ffde:	697b      	ldr	r3, [r7, #20]
 800ffe0:	1c9a      	adds	r2, r3, #2
 800ffe2:	617a      	str	r2, [r7, #20]
 800ffe4:	881b      	ldrh	r3, [r3, #0]
 800ffe6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ffe8:	8a7b      	ldrh	r3, [r7, #18]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d068      	beq.n	80100c0 <ff_wtoupper+0xfc>
 800ffee:	88fa      	ldrh	r2, [r7, #6]
 800fff0:	8a7b      	ldrh	r3, [r7, #18]
 800fff2:	429a      	cmp	r2, r3
 800fff4:	d364      	bcc.n	80100c0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800fff6:	697b      	ldr	r3, [r7, #20]
 800fff8:	1c9a      	adds	r2, r3, #2
 800fffa:	617a      	str	r2, [r7, #20]
 800fffc:	881b      	ldrh	r3, [r3, #0]
 800fffe:	823b      	strh	r3, [r7, #16]
 8010000:	8a3b      	ldrh	r3, [r7, #16]
 8010002:	0a1b      	lsrs	r3, r3, #8
 8010004:	81fb      	strh	r3, [r7, #14]
 8010006:	8a3b      	ldrh	r3, [r7, #16]
 8010008:	b2db      	uxtb	r3, r3
 801000a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801000c:	88fa      	ldrh	r2, [r7, #6]
 801000e:	8a79      	ldrh	r1, [r7, #18]
 8010010:	8a3b      	ldrh	r3, [r7, #16]
 8010012:	440b      	add	r3, r1
 8010014:	429a      	cmp	r2, r3
 8010016:	da49      	bge.n	80100ac <ff_wtoupper+0xe8>
			switch (cmd) {
 8010018:	89fb      	ldrh	r3, [r7, #14]
 801001a:	2b08      	cmp	r3, #8
 801001c:	d84f      	bhi.n	80100be <ff_wtoupper+0xfa>
 801001e:	a201      	add	r2, pc, #4	; (adr r2, 8010024 <ff_wtoupper+0x60>)
 8010020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010024:	08010049 	.word	0x08010049
 8010028:	0801005b 	.word	0x0801005b
 801002c:	08010071 	.word	0x08010071
 8010030:	08010079 	.word	0x08010079
 8010034:	08010081 	.word	0x08010081
 8010038:	08010089 	.word	0x08010089
 801003c:	08010091 	.word	0x08010091
 8010040:	08010099 	.word	0x08010099
 8010044:	080100a1 	.word	0x080100a1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8010048:	88fa      	ldrh	r2, [r7, #6]
 801004a:	8a7b      	ldrh	r3, [r7, #18]
 801004c:	1ad3      	subs	r3, r2, r3
 801004e:	005b      	lsls	r3, r3, #1
 8010050:	697a      	ldr	r2, [r7, #20]
 8010052:	4413      	add	r3, r2
 8010054:	881b      	ldrh	r3, [r3, #0]
 8010056:	80fb      	strh	r3, [r7, #6]
 8010058:	e027      	b.n	80100aa <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801005a:	88fa      	ldrh	r2, [r7, #6]
 801005c:	8a7b      	ldrh	r3, [r7, #18]
 801005e:	1ad3      	subs	r3, r2, r3
 8010060:	b29b      	uxth	r3, r3
 8010062:	f003 0301 	and.w	r3, r3, #1
 8010066:	b29b      	uxth	r3, r3
 8010068:	88fa      	ldrh	r2, [r7, #6]
 801006a:	1ad3      	subs	r3, r2, r3
 801006c:	80fb      	strh	r3, [r7, #6]
 801006e:	e01c      	b.n	80100aa <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8010070:	88fb      	ldrh	r3, [r7, #6]
 8010072:	3b10      	subs	r3, #16
 8010074:	80fb      	strh	r3, [r7, #6]
 8010076:	e018      	b.n	80100aa <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8010078:	88fb      	ldrh	r3, [r7, #6]
 801007a:	3b20      	subs	r3, #32
 801007c:	80fb      	strh	r3, [r7, #6]
 801007e:	e014      	b.n	80100aa <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8010080:	88fb      	ldrh	r3, [r7, #6]
 8010082:	3b30      	subs	r3, #48	; 0x30
 8010084:	80fb      	strh	r3, [r7, #6]
 8010086:	e010      	b.n	80100aa <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010088:	88fb      	ldrh	r3, [r7, #6]
 801008a:	3b1a      	subs	r3, #26
 801008c:	80fb      	strh	r3, [r7, #6]
 801008e:	e00c      	b.n	80100aa <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8010090:	88fb      	ldrh	r3, [r7, #6]
 8010092:	3308      	adds	r3, #8
 8010094:	80fb      	strh	r3, [r7, #6]
 8010096:	e008      	b.n	80100aa <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010098:	88fb      	ldrh	r3, [r7, #6]
 801009a:	3b50      	subs	r3, #80	; 0x50
 801009c:	80fb      	strh	r3, [r7, #6]
 801009e:	e004      	b.n	80100aa <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80100a0:	88fb      	ldrh	r3, [r7, #6]
 80100a2:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80100a6:	80fb      	strh	r3, [r7, #6]
 80100a8:	bf00      	nop
			}
			break;
 80100aa:	e008      	b.n	80100be <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80100ac:	89fb      	ldrh	r3, [r7, #14]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d195      	bne.n	800ffde <ff_wtoupper+0x1a>
 80100b2:	8a3b      	ldrh	r3, [r7, #16]
 80100b4:	005b      	lsls	r3, r3, #1
 80100b6:	697a      	ldr	r2, [r7, #20]
 80100b8:	4413      	add	r3, r2
 80100ba:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80100bc:	e78f      	b.n	800ffde <ff_wtoupper+0x1a>
			break;
 80100be:	bf00      	nop
	}

	return chr;
 80100c0:	88fb      	ldrh	r3, [r7, #6]
}
 80100c2:	4618      	mov	r0, r3
 80100c4:	371c      	adds	r7, #28
 80100c6:	46bd      	mov	sp, r7
 80100c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100cc:	4770      	bx	lr
 80100ce:	bf00      	nop
 80100d0:	08010ce8 	.word	0x08010ce8
 80100d4:	08010edc 	.word	0x08010edc

080100d8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80100dc:	2201      	movs	r2, #1
 80100de:	490e      	ldr	r1, [pc, #56]	; (8010118 <MX_USB_HOST_Init+0x40>)
 80100e0:	480e      	ldr	r0, [pc, #56]	; (801011c <MX_USB_HOST_Init+0x44>)
 80100e2:	f7fb f8b5 	bl	800b250 <USBH_Init>
 80100e6:	4603      	mov	r3, r0
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d001      	beq.n	80100f0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80100ec:	f7f1 ffc8 	bl	8002080 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 80100f0:	490b      	ldr	r1, [pc, #44]	; (8010120 <MX_USB_HOST_Init+0x48>)
 80100f2:	480a      	ldr	r0, [pc, #40]	; (801011c <MX_USB_HOST_Init+0x44>)
 80100f4:	f7fb f93a 	bl	800b36c <USBH_RegisterClass>
 80100f8:	4603      	mov	r3, r0
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d001      	beq.n	8010102 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80100fe:	f7f1 ffbf 	bl	8002080 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8010102:	4806      	ldr	r0, [pc, #24]	; (801011c <MX_USB_HOST_Init+0x44>)
 8010104:	f7fb f9be 	bl	800b484 <USBH_Start>
 8010108:	4603      	mov	r3, r0
 801010a:	2b00      	cmp	r3, #0
 801010c:	d001      	beq.n	8010112 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801010e:	f7f1 ffb7 	bl	8002080 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8010112:	bf00      	nop
 8010114:	bd80      	pop	{r7, pc}
 8010116:	bf00      	nop
 8010118:	08010139 	.word	0x08010139
 801011c:	20001e7c 	.word	0x20001e7c
 8010120:	2000004c 	.word	0x2000004c

08010124 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8010124:	b580      	push	{r7, lr}
 8010126:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8010128:	4802      	ldr	r0, [pc, #8]	; (8010134 <MX_USB_HOST_Process+0x10>)
 801012a:	f7fb f9bb 	bl	800b4a4 <USBH_Process>
}
 801012e:	bf00      	nop
 8010130:	bd80      	pop	{r7, pc}
 8010132:	bf00      	nop
 8010134:	20001e7c 	.word	0x20001e7c

08010138 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8010138:	b480      	push	{r7}
 801013a:	b083      	sub	sp, #12
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
 8010140:	460b      	mov	r3, r1
 8010142:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8010144:	78fb      	ldrb	r3, [r7, #3]
 8010146:	3b01      	subs	r3, #1
 8010148:	2b04      	cmp	r3, #4
 801014a:	d819      	bhi.n	8010180 <USBH_UserProcess+0x48>
 801014c:	a201      	add	r2, pc, #4	; (adr r2, 8010154 <USBH_UserProcess+0x1c>)
 801014e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010152:	bf00      	nop
 8010154:	08010181 	.word	0x08010181
 8010158:	08010171 	.word	0x08010171
 801015c:	08010181 	.word	0x08010181
 8010160:	08010179 	.word	0x08010179
 8010164:	08010169 	.word	0x08010169
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8010168:	4b09      	ldr	r3, [pc, #36]	; (8010190 <USBH_UserProcess+0x58>)
 801016a:	2203      	movs	r2, #3
 801016c:	701a      	strb	r2, [r3, #0]
  break;
 801016e:	e008      	b.n	8010182 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8010170:	4b07      	ldr	r3, [pc, #28]	; (8010190 <USBH_UserProcess+0x58>)
 8010172:	2202      	movs	r2, #2
 8010174:	701a      	strb	r2, [r3, #0]
  break;
 8010176:	e004      	b.n	8010182 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8010178:	4b05      	ldr	r3, [pc, #20]	; (8010190 <USBH_UserProcess+0x58>)
 801017a:	2201      	movs	r2, #1
 801017c:	701a      	strb	r2, [r3, #0]
  break;
 801017e:	e000      	b.n	8010182 <USBH_UserProcess+0x4a>

  default:
  break;
 8010180:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8010182:	bf00      	nop
 8010184:	370c      	adds	r7, #12
 8010186:	46bd      	mov	sp, r7
 8010188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018c:	4770      	bx	lr
 801018e:	bf00      	nop
 8010190:	20002254 	.word	0x20002254

08010194 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b08a      	sub	sp, #40	; 0x28
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801019c:	f107 0314 	add.w	r3, r7, #20
 80101a0:	2200      	movs	r2, #0
 80101a2:	601a      	str	r2, [r3, #0]
 80101a4:	605a      	str	r2, [r3, #4]
 80101a6:	609a      	str	r2, [r3, #8]
 80101a8:	60da      	str	r2, [r3, #12]
 80101aa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80101b4:	d158      	bne.n	8010268 <HAL_HCD_MspInit+0xd4>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80101b6:	2300      	movs	r3, #0
 80101b8:	613b      	str	r3, [r7, #16]
 80101ba:	4b2d      	ldr	r3, [pc, #180]	; (8010270 <HAL_HCD_MspInit+0xdc>)
 80101bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101be:	4a2c      	ldr	r2, [pc, #176]	; (8010270 <HAL_HCD_MspInit+0xdc>)
 80101c0:	f043 0301 	orr.w	r3, r3, #1
 80101c4:	6313      	str	r3, [r2, #48]	; 0x30
 80101c6:	4b2a      	ldr	r3, [pc, #168]	; (8010270 <HAL_HCD_MspInit+0xdc>)
 80101c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101ca:	f003 0301 	and.w	r3, r3, #1
 80101ce:	613b      	str	r3, [r7, #16]
 80101d0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80101d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80101d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80101d8:	2300      	movs	r3, #0
 80101da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80101dc:	2300      	movs	r3, #0
 80101de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80101e0:	f107 0314 	add.w	r3, r7, #20
 80101e4:	4619      	mov	r1, r3
 80101e6:	4823      	ldr	r0, [pc, #140]	; (8010274 <HAL_HCD_MspInit+0xe0>)
 80101e8:	f7f3 f85a 	bl	80032a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin;
 80101ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80101f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80101f2:	2302      	movs	r3, #2
 80101f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80101f6:	2300      	movs	r3, #0
 80101f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80101fa:	2300      	movs	r3, #0
 80101fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80101fe:	230a      	movs	r3, #10
 8010200:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(OTG_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8010202:	f107 0314 	add.w	r3, r7, #20
 8010206:	4619      	mov	r1, r3
 8010208:	481a      	ldr	r0, [pc, #104]	; (8010274 <HAL_HCD_MspInit+0xe0>)
 801020a:	f7f3 f849 	bl	80032a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 801020e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010214:	2302      	movs	r3, #2
 8010216:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010218:	2300      	movs	r3, #0
 801021a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801021c:	2303      	movs	r3, #3
 801021e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010220:	230a      	movs	r3, #10
 8010222:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010224:	f107 0314 	add.w	r3, r7, #20
 8010228:	4619      	mov	r1, r3
 801022a:	4812      	ldr	r0, [pc, #72]	; (8010274 <HAL_HCD_MspInit+0xe0>)
 801022c:	f7f3 f838 	bl	80032a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010230:	4b0f      	ldr	r3, [pc, #60]	; (8010270 <HAL_HCD_MspInit+0xdc>)
 8010232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010234:	4a0e      	ldr	r2, [pc, #56]	; (8010270 <HAL_HCD_MspInit+0xdc>)
 8010236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801023a:	6353      	str	r3, [r2, #52]	; 0x34
 801023c:	2300      	movs	r3, #0
 801023e:	60fb      	str	r3, [r7, #12]
 8010240:	4b0b      	ldr	r3, [pc, #44]	; (8010270 <HAL_HCD_MspInit+0xdc>)
 8010242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010244:	4a0a      	ldr	r2, [pc, #40]	; (8010270 <HAL_HCD_MspInit+0xdc>)
 8010246:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801024a:	6453      	str	r3, [r2, #68]	; 0x44
 801024c:	4b08      	ldr	r3, [pc, #32]	; (8010270 <HAL_HCD_MspInit+0xdc>)
 801024e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010250:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010254:	60fb      	str	r3, [r7, #12]
 8010256:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010258:	2200      	movs	r2, #0
 801025a:	2100      	movs	r1, #0
 801025c:	2043      	movs	r0, #67	; 0x43
 801025e:	f7f2 fbaa 	bl	80029b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010262:	2043      	movs	r0, #67	; 0x43
 8010264:	f7f2 fbc3 	bl	80029ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010268:	bf00      	nop
 801026a:	3728      	adds	r7, #40	; 0x28
 801026c:	46bd      	mov	sp, r7
 801026e:	bd80      	pop	{r7, pc}
 8010270:	40023800 	.word	0x40023800
 8010274:	40020000 	.word	0x40020000

08010278 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b082      	sub	sp, #8
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010286:	4618      	mov	r0, r3
 8010288:	f7fb fceb 	bl	800bc62 <USBH_LL_IncTimer>
}
 801028c:	bf00      	nop
 801028e:	3708      	adds	r7, #8
 8010290:	46bd      	mov	sp, r7
 8010292:	bd80      	pop	{r7, pc}

08010294 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010294:	b580      	push	{r7, lr}
 8010296:	b082      	sub	sp, #8
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80102a2:	4618      	mov	r0, r3
 80102a4:	f7fb fd23 	bl	800bcee <USBH_LL_Connect>
}
 80102a8:	bf00      	nop
 80102aa:	3708      	adds	r7, #8
 80102ac:	46bd      	mov	sp, r7
 80102ae:	bd80      	pop	{r7, pc}

080102b0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b082      	sub	sp, #8
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80102be:	4618      	mov	r0, r3
 80102c0:	f7fb fd2c 	bl	800bd1c <USBH_LL_Disconnect>
}
 80102c4:	bf00      	nop
 80102c6:	3708      	adds	r7, #8
 80102c8:	46bd      	mov	sp, r7
 80102ca:	bd80      	pop	{r7, pc}

080102cc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80102cc:	b480      	push	{r7}
 80102ce:	b083      	sub	sp, #12
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
 80102d4:	460b      	mov	r3, r1
 80102d6:	70fb      	strb	r3, [r7, #3]
 80102d8:	4613      	mov	r3, r2
 80102da:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80102dc:	bf00      	nop
 80102de:	370c      	adds	r7, #12
 80102e0:	46bd      	mov	sp, r7
 80102e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e6:	4770      	bx	lr

080102e8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b082      	sub	sp, #8
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80102f6:	4618      	mov	r0, r3
 80102f8:	f7fb fcdd 	bl	800bcb6 <USBH_LL_PortEnabled>
}
 80102fc:	bf00      	nop
 80102fe:	3708      	adds	r7, #8
 8010300:	46bd      	mov	sp, r7
 8010302:	bd80      	pop	{r7, pc}

08010304 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010304:	b580      	push	{r7, lr}
 8010306:	b082      	sub	sp, #8
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010312:	4618      	mov	r0, r3
 8010314:	f7fb fcdd 	bl	800bcd2 <USBH_LL_PortDisabled>
}
 8010318:	bf00      	nop
 801031a:	3708      	adds	r7, #8
 801031c:	46bd      	mov	sp, r7
 801031e:	bd80      	pop	{r7, pc}

08010320 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8010320:	b580      	push	{r7, lr}
 8010322:	b082      	sub	sp, #8
 8010324:	af00      	add	r7, sp, #0
 8010326:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801032e:	2b01      	cmp	r3, #1
 8010330:	d12a      	bne.n	8010388 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8010332:	4a18      	ldr	r2, [pc, #96]	; (8010394 <USBH_LL_Init+0x74>)
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	4a15      	ldr	r2, [pc, #84]	; (8010394 <USBH_LL_Init+0x74>)
 801033e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010342:	4b14      	ldr	r3, [pc, #80]	; (8010394 <USBH_LL_Init+0x74>)
 8010344:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010348:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801034a:	4b12      	ldr	r3, [pc, #72]	; (8010394 <USBH_LL_Init+0x74>)
 801034c:	2208      	movs	r2, #8
 801034e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8010350:	4b10      	ldr	r3, [pc, #64]	; (8010394 <USBH_LL_Init+0x74>)
 8010352:	2201      	movs	r2, #1
 8010354:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010356:	4b0f      	ldr	r3, [pc, #60]	; (8010394 <USBH_LL_Init+0x74>)
 8010358:	2200      	movs	r2, #0
 801035a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801035c:	4b0d      	ldr	r3, [pc, #52]	; (8010394 <USBH_LL_Init+0x74>)
 801035e:	2202      	movs	r2, #2
 8010360:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010362:	4b0c      	ldr	r3, [pc, #48]	; (8010394 <USBH_LL_Init+0x74>)
 8010364:	2200      	movs	r2, #0
 8010366:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8010368:	480a      	ldr	r0, [pc, #40]	; (8010394 <USBH_LL_Init+0x74>)
 801036a:	f7f3 fa7d 	bl	8003868 <HAL_HCD_Init>
 801036e:	4603      	mov	r3, r0
 8010370:	2b00      	cmp	r3, #0
 8010372:	d001      	beq.n	8010378 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8010374:	f7f1 fe84 	bl	8002080 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8010378:	4806      	ldr	r0, [pc, #24]	; (8010394 <USBH_LL_Init+0x74>)
 801037a:	f7f3 fe60 	bl	800403e <HAL_HCD_GetCurrentFrame>
 801037e:	4603      	mov	r3, r0
 8010380:	4619      	mov	r1, r3
 8010382:	6878      	ldr	r0, [r7, #4]
 8010384:	f7fb fc5e 	bl	800bc44 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8010388:	2300      	movs	r3, #0
}
 801038a:	4618      	mov	r0, r3
 801038c:	3708      	adds	r7, #8
 801038e:	46bd      	mov	sp, r7
 8010390:	bd80      	pop	{r7, pc}
 8010392:	bf00      	nop
 8010394:	20002258 	.word	0x20002258

08010398 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b084      	sub	sp, #16
 801039c:	af00      	add	r7, sp, #0
 801039e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80103a0:	2300      	movs	r3, #0
 80103a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80103a4:	2300      	movs	r3, #0
 80103a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80103ae:	4618      	mov	r0, r3
 80103b0:	f7f3 fdcf 	bl	8003f52 <HAL_HCD_Start>
 80103b4:	4603      	mov	r3, r0
 80103b6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80103b8:	7bfb      	ldrb	r3, [r7, #15]
 80103ba:	4618      	mov	r0, r3
 80103bc:	f000 f98c 	bl	80106d8 <USBH_Get_USB_Status>
 80103c0:	4603      	mov	r3, r0
 80103c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80103c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80103c6:	4618      	mov	r0, r3
 80103c8:	3710      	adds	r7, #16
 80103ca:	46bd      	mov	sp, r7
 80103cc:	bd80      	pop	{r7, pc}

080103ce <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80103ce:	b580      	push	{r7, lr}
 80103d0:	b084      	sub	sp, #16
 80103d2:	af00      	add	r7, sp, #0
 80103d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80103d6:	2300      	movs	r3, #0
 80103d8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80103da:	2300      	movs	r3, #0
 80103dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80103e4:	4618      	mov	r0, r3
 80103e6:	f7f3 fdd7 	bl	8003f98 <HAL_HCD_Stop>
 80103ea:	4603      	mov	r3, r0
 80103ec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80103ee:	7bfb      	ldrb	r3, [r7, #15]
 80103f0:	4618      	mov	r0, r3
 80103f2:	f000 f971 	bl	80106d8 <USBH_Get_USB_Status>
 80103f6:	4603      	mov	r3, r0
 80103f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80103fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80103fc:	4618      	mov	r0, r3
 80103fe:	3710      	adds	r7, #16
 8010400:	46bd      	mov	sp, r7
 8010402:	bd80      	pop	{r7, pc}

08010404 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010404:	b580      	push	{r7, lr}
 8010406:	b084      	sub	sp, #16
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 801040c:	2301      	movs	r3, #1
 801040e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010416:	4618      	mov	r0, r3
 8010418:	f7f3 fe1f 	bl	800405a <HAL_HCD_GetCurrentSpeed>
 801041c:	4603      	mov	r3, r0
 801041e:	2b02      	cmp	r3, #2
 8010420:	d00c      	beq.n	801043c <USBH_LL_GetSpeed+0x38>
 8010422:	2b02      	cmp	r3, #2
 8010424:	d80d      	bhi.n	8010442 <USBH_LL_GetSpeed+0x3e>
 8010426:	2b00      	cmp	r3, #0
 8010428:	d002      	beq.n	8010430 <USBH_LL_GetSpeed+0x2c>
 801042a:	2b01      	cmp	r3, #1
 801042c:	d003      	beq.n	8010436 <USBH_LL_GetSpeed+0x32>
 801042e:	e008      	b.n	8010442 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010430:	2300      	movs	r3, #0
 8010432:	73fb      	strb	r3, [r7, #15]
    break;
 8010434:	e008      	b.n	8010448 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8010436:	2301      	movs	r3, #1
 8010438:	73fb      	strb	r3, [r7, #15]
    break;
 801043a:	e005      	b.n	8010448 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 801043c:	2302      	movs	r3, #2
 801043e:	73fb      	strb	r3, [r7, #15]
    break;
 8010440:	e002      	b.n	8010448 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8010442:	2301      	movs	r3, #1
 8010444:	73fb      	strb	r3, [r7, #15]
    break;
 8010446:	bf00      	nop
  }
  return  speed;
 8010448:	7bfb      	ldrb	r3, [r7, #15]
}
 801044a:	4618      	mov	r0, r3
 801044c:	3710      	adds	r7, #16
 801044e:	46bd      	mov	sp, r7
 8010450:	bd80      	pop	{r7, pc}

08010452 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8010452:	b580      	push	{r7, lr}
 8010454:	b084      	sub	sp, #16
 8010456:	af00      	add	r7, sp, #0
 8010458:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801045a:	2300      	movs	r3, #0
 801045c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801045e:	2300      	movs	r3, #0
 8010460:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010468:	4618      	mov	r0, r3
 801046a:	f7f3 fdb2 	bl	8003fd2 <HAL_HCD_ResetPort>
 801046e:	4603      	mov	r3, r0
 8010470:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010472:	7bfb      	ldrb	r3, [r7, #15]
 8010474:	4618      	mov	r0, r3
 8010476:	f000 f92f 	bl	80106d8 <USBH_Get_USB_Status>
 801047a:	4603      	mov	r3, r0
 801047c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801047e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010480:	4618      	mov	r0, r3
 8010482:	3710      	adds	r7, #16
 8010484:	46bd      	mov	sp, r7
 8010486:	bd80      	pop	{r7, pc}

08010488 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b082      	sub	sp, #8
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
 8010490:	460b      	mov	r3, r1
 8010492:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801049a:	78fa      	ldrb	r2, [r7, #3]
 801049c:	4611      	mov	r1, r2
 801049e:	4618      	mov	r0, r3
 80104a0:	f7f3 fdb9 	bl	8004016 <HAL_HCD_HC_GetXferCount>
 80104a4:	4603      	mov	r3, r0
}
 80104a6:	4618      	mov	r0, r3
 80104a8:	3708      	adds	r7, #8
 80104aa:	46bd      	mov	sp, r7
 80104ac:	bd80      	pop	{r7, pc}

080104ae <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80104ae:	b590      	push	{r4, r7, lr}
 80104b0:	b089      	sub	sp, #36	; 0x24
 80104b2:	af04      	add	r7, sp, #16
 80104b4:	6078      	str	r0, [r7, #4]
 80104b6:	4608      	mov	r0, r1
 80104b8:	4611      	mov	r1, r2
 80104ba:	461a      	mov	r2, r3
 80104bc:	4603      	mov	r3, r0
 80104be:	70fb      	strb	r3, [r7, #3]
 80104c0:	460b      	mov	r3, r1
 80104c2:	70bb      	strb	r3, [r7, #2]
 80104c4:	4613      	mov	r3, r2
 80104c6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104c8:	2300      	movs	r3, #0
 80104ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80104cc:	2300      	movs	r3, #0
 80104ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80104d6:	787c      	ldrb	r4, [r7, #1]
 80104d8:	78ba      	ldrb	r2, [r7, #2]
 80104da:	78f9      	ldrb	r1, [r7, #3]
 80104dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80104de:	9302      	str	r3, [sp, #8]
 80104e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80104e4:	9301      	str	r3, [sp, #4]
 80104e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80104ea:	9300      	str	r3, [sp, #0]
 80104ec:	4623      	mov	r3, r4
 80104ee:	f7f3 fa1d 	bl	800392c <HAL_HCD_HC_Init>
 80104f2:	4603      	mov	r3, r0
 80104f4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80104f6:	7bfb      	ldrb	r3, [r7, #15]
 80104f8:	4618      	mov	r0, r3
 80104fa:	f000 f8ed 	bl	80106d8 <USBH_Get_USB_Status>
 80104fe:	4603      	mov	r3, r0
 8010500:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010502:	7bbb      	ldrb	r3, [r7, #14]
}
 8010504:	4618      	mov	r0, r3
 8010506:	3714      	adds	r7, #20
 8010508:	46bd      	mov	sp, r7
 801050a:	bd90      	pop	{r4, r7, pc}

0801050c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801050c:	b580      	push	{r7, lr}
 801050e:	b084      	sub	sp, #16
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
 8010514:	460b      	mov	r3, r1
 8010516:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010518:	2300      	movs	r3, #0
 801051a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801051c:	2300      	movs	r3, #0
 801051e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010526:	78fa      	ldrb	r2, [r7, #3]
 8010528:	4611      	mov	r1, r2
 801052a:	4618      	mov	r0, r3
 801052c:	f7f3 fa8d 	bl	8003a4a <HAL_HCD_HC_Halt>
 8010530:	4603      	mov	r3, r0
 8010532:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010534:	7bfb      	ldrb	r3, [r7, #15]
 8010536:	4618      	mov	r0, r3
 8010538:	f000 f8ce 	bl	80106d8 <USBH_Get_USB_Status>
 801053c:	4603      	mov	r3, r0
 801053e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010540:	7bbb      	ldrb	r3, [r7, #14]
}
 8010542:	4618      	mov	r0, r3
 8010544:	3710      	adds	r7, #16
 8010546:	46bd      	mov	sp, r7
 8010548:	bd80      	pop	{r7, pc}

0801054a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801054a:	b590      	push	{r4, r7, lr}
 801054c:	b089      	sub	sp, #36	; 0x24
 801054e:	af04      	add	r7, sp, #16
 8010550:	6078      	str	r0, [r7, #4]
 8010552:	4608      	mov	r0, r1
 8010554:	4611      	mov	r1, r2
 8010556:	461a      	mov	r2, r3
 8010558:	4603      	mov	r3, r0
 801055a:	70fb      	strb	r3, [r7, #3]
 801055c:	460b      	mov	r3, r1
 801055e:	70bb      	strb	r3, [r7, #2]
 8010560:	4613      	mov	r3, r2
 8010562:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010564:	2300      	movs	r3, #0
 8010566:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010568:	2300      	movs	r3, #0
 801056a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010572:	787c      	ldrb	r4, [r7, #1]
 8010574:	78ba      	ldrb	r2, [r7, #2]
 8010576:	78f9      	ldrb	r1, [r7, #3]
 8010578:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801057c:	9303      	str	r3, [sp, #12]
 801057e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010580:	9302      	str	r3, [sp, #8]
 8010582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010584:	9301      	str	r3, [sp, #4]
 8010586:	f897 3020 	ldrb.w	r3, [r7, #32]
 801058a:	9300      	str	r3, [sp, #0]
 801058c:	4623      	mov	r3, r4
 801058e:	f7f3 fa7f 	bl	8003a90 <HAL_HCD_HC_SubmitRequest>
 8010592:	4603      	mov	r3, r0
 8010594:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8010596:	7bfb      	ldrb	r3, [r7, #15]
 8010598:	4618      	mov	r0, r3
 801059a:	f000 f89d 	bl	80106d8 <USBH_Get_USB_Status>
 801059e:	4603      	mov	r3, r0
 80105a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80105a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80105a4:	4618      	mov	r0, r3
 80105a6:	3714      	adds	r7, #20
 80105a8:	46bd      	mov	sp, r7
 80105aa:	bd90      	pop	{r4, r7, pc}

080105ac <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b082      	sub	sp, #8
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]
 80105b4:	460b      	mov	r3, r1
 80105b6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80105be:	78fa      	ldrb	r2, [r7, #3]
 80105c0:	4611      	mov	r1, r2
 80105c2:	4618      	mov	r0, r3
 80105c4:	f7f3 fd13 	bl	8003fee <HAL_HCD_HC_GetURBState>
 80105c8:	4603      	mov	r3, r0
}
 80105ca:	4618      	mov	r0, r3
 80105cc:	3708      	adds	r7, #8
 80105ce:	46bd      	mov	sp, r7
 80105d0:	bd80      	pop	{r7, pc}

080105d2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80105d2:	b580      	push	{r7, lr}
 80105d4:	b082      	sub	sp, #8
 80105d6:	af00      	add	r7, sp, #0
 80105d8:	6078      	str	r0, [r7, #4]
 80105da:	460b      	mov	r3, r1
 80105dc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80105e4:	2b01      	cmp	r3, #1
 80105e6:	d103      	bne.n	80105f0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80105e8:	78fb      	ldrb	r3, [r7, #3]
 80105ea:	4618      	mov	r0, r3
 80105ec:	f000 f8a0 	bl	8010730 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80105f0:	20c8      	movs	r0, #200	; 0xc8
 80105f2:	f7f2 f8e1 	bl	80027b8 <HAL_Delay>
  return USBH_OK;
 80105f6:	2300      	movs	r3, #0
}
 80105f8:	4618      	mov	r0, r3
 80105fa:	3708      	adds	r7, #8
 80105fc:	46bd      	mov	sp, r7
 80105fe:	bd80      	pop	{r7, pc}

08010600 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010600:	b480      	push	{r7}
 8010602:	b085      	sub	sp, #20
 8010604:	af00      	add	r7, sp, #0
 8010606:	6078      	str	r0, [r7, #4]
 8010608:	460b      	mov	r3, r1
 801060a:	70fb      	strb	r3, [r7, #3]
 801060c:	4613      	mov	r3, r2
 801060e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010616:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8010618:	78fb      	ldrb	r3, [r7, #3]
 801061a:	68fa      	ldr	r2, [r7, #12]
 801061c:	212c      	movs	r1, #44	; 0x2c
 801061e:	fb01 f303 	mul.w	r3, r1, r3
 8010622:	4413      	add	r3, r2
 8010624:	333b      	adds	r3, #59	; 0x3b
 8010626:	781b      	ldrb	r3, [r3, #0]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d009      	beq.n	8010640 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 801062c:	78fb      	ldrb	r3, [r7, #3]
 801062e:	68fa      	ldr	r2, [r7, #12]
 8010630:	212c      	movs	r1, #44	; 0x2c
 8010632:	fb01 f303 	mul.w	r3, r1, r3
 8010636:	4413      	add	r3, r2
 8010638:	3354      	adds	r3, #84	; 0x54
 801063a:	78ba      	ldrb	r2, [r7, #2]
 801063c:	701a      	strb	r2, [r3, #0]
 801063e:	e008      	b.n	8010652 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8010640:	78fb      	ldrb	r3, [r7, #3]
 8010642:	68fa      	ldr	r2, [r7, #12]
 8010644:	212c      	movs	r1, #44	; 0x2c
 8010646:	fb01 f303 	mul.w	r3, r1, r3
 801064a:	4413      	add	r3, r2
 801064c:	3355      	adds	r3, #85	; 0x55
 801064e:	78ba      	ldrb	r2, [r7, #2]
 8010650:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8010652:	2300      	movs	r3, #0
}
 8010654:	4618      	mov	r0, r3
 8010656:	3714      	adds	r7, #20
 8010658:	46bd      	mov	sp, r7
 801065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801065e:	4770      	bx	lr

08010660 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010660:	b480      	push	{r7}
 8010662:	b085      	sub	sp, #20
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
 8010668:	460b      	mov	r3, r1
 801066a:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 801066c:	2300      	movs	r3, #0
 801066e:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010676:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8010678:	78fb      	ldrb	r3, [r7, #3]
 801067a:	68ba      	ldr	r2, [r7, #8]
 801067c:	212c      	movs	r1, #44	; 0x2c
 801067e:	fb01 f303 	mul.w	r3, r1, r3
 8010682:	4413      	add	r3, r2
 8010684:	333b      	adds	r3, #59	; 0x3b
 8010686:	781b      	ldrb	r3, [r3, #0]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d009      	beq.n	80106a0 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 801068c:	78fb      	ldrb	r3, [r7, #3]
 801068e:	68ba      	ldr	r2, [r7, #8]
 8010690:	212c      	movs	r1, #44	; 0x2c
 8010692:	fb01 f303 	mul.w	r3, r1, r3
 8010696:	4413      	add	r3, r2
 8010698:	3354      	adds	r3, #84	; 0x54
 801069a:	781b      	ldrb	r3, [r3, #0]
 801069c:	73fb      	strb	r3, [r7, #15]
 801069e:	e008      	b.n	80106b2 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 80106a0:	78fb      	ldrb	r3, [r7, #3]
 80106a2:	68ba      	ldr	r2, [r7, #8]
 80106a4:	212c      	movs	r1, #44	; 0x2c
 80106a6:	fb01 f303 	mul.w	r3, r1, r3
 80106aa:	4413      	add	r3, r2
 80106ac:	3355      	adds	r3, #85	; 0x55
 80106ae:	781b      	ldrb	r3, [r3, #0]
 80106b0:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 80106b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80106b4:	4618      	mov	r0, r3
 80106b6:	3714      	adds	r7, #20
 80106b8:	46bd      	mov	sp, r7
 80106ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106be:	4770      	bx	lr

080106c0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b082      	sub	sp, #8
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80106c8:	6878      	ldr	r0, [r7, #4]
 80106ca:	f7f2 f875 	bl	80027b8 <HAL_Delay>
}
 80106ce:	bf00      	nop
 80106d0:	3708      	adds	r7, #8
 80106d2:	46bd      	mov	sp, r7
 80106d4:	bd80      	pop	{r7, pc}
	...

080106d8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80106d8:	b480      	push	{r7}
 80106da:	b085      	sub	sp, #20
 80106dc:	af00      	add	r7, sp, #0
 80106de:	4603      	mov	r3, r0
 80106e0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80106e2:	2300      	movs	r3, #0
 80106e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80106e6:	79fb      	ldrb	r3, [r7, #7]
 80106e8:	2b03      	cmp	r3, #3
 80106ea:	d817      	bhi.n	801071c <USBH_Get_USB_Status+0x44>
 80106ec:	a201      	add	r2, pc, #4	; (adr r2, 80106f4 <USBH_Get_USB_Status+0x1c>)
 80106ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106f2:	bf00      	nop
 80106f4:	08010705 	.word	0x08010705
 80106f8:	0801070b 	.word	0x0801070b
 80106fc:	08010711 	.word	0x08010711
 8010700:	08010717 	.word	0x08010717
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8010704:	2300      	movs	r3, #0
 8010706:	73fb      	strb	r3, [r7, #15]
    break;
 8010708:	e00b      	b.n	8010722 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801070a:	2302      	movs	r3, #2
 801070c:	73fb      	strb	r3, [r7, #15]
    break;
 801070e:	e008      	b.n	8010722 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010710:	2301      	movs	r3, #1
 8010712:	73fb      	strb	r3, [r7, #15]
    break;
 8010714:	e005      	b.n	8010722 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8010716:	2302      	movs	r3, #2
 8010718:	73fb      	strb	r3, [r7, #15]
    break;
 801071a:	e002      	b.n	8010722 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801071c:	2302      	movs	r3, #2
 801071e:	73fb      	strb	r3, [r7, #15]
    break;
 8010720:	bf00      	nop
  }
  return usb_status;
 8010722:	7bfb      	ldrb	r3, [r7, #15]
}
 8010724:	4618      	mov	r0, r3
 8010726:	3714      	adds	r7, #20
 8010728:	46bd      	mov	sp, r7
 801072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072e:	4770      	bx	lr

08010730 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b084      	sub	sp, #16
 8010734:	af00      	add	r7, sp, #0
 8010736:	4603      	mov	r3, r0
 8010738:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801073a:	79fb      	ldrb	r3, [r7, #7]
 801073c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801073e:	79fb      	ldrb	r3, [r7, #7]
 8010740:	2b00      	cmp	r3, #0
 8010742:	d102      	bne.n	801074a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8010744:	2300      	movs	r3, #0
 8010746:	73fb      	strb	r3, [r7, #15]
 8010748:	e001      	b.n	801074e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 801074a:	2301      	movs	r3, #1
 801074c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 801074e:	7bfb      	ldrb	r3, [r7, #15]
 8010750:	461a      	mov	r2, r3
 8010752:	2101      	movs	r1, #1
 8010754:	4803      	ldr	r0, [pc, #12]	; (8010764 <MX_DriverVbusFS+0x34>)
 8010756:	f7f3 f83b 	bl	80037d0 <HAL_GPIO_WritePin>
}
 801075a:	bf00      	nop
 801075c:	3710      	adds	r7, #16
 801075e:	46bd      	mov	sp, r7
 8010760:	bd80      	pop	{r7, pc}
 8010762:	bf00      	nop
 8010764:	40020800 	.word	0x40020800

08010768 <__errno>:
 8010768:	4b01      	ldr	r3, [pc, #4]	; (8010770 <__errno+0x8>)
 801076a:	6818      	ldr	r0, [r3, #0]
 801076c:	4770      	bx	lr
 801076e:	bf00      	nop
 8010770:	2000006c 	.word	0x2000006c

08010774 <__libc_init_array>:
 8010774:	b570      	push	{r4, r5, r6, lr}
 8010776:	4d0d      	ldr	r5, [pc, #52]	; (80107ac <__libc_init_array+0x38>)
 8010778:	4c0d      	ldr	r4, [pc, #52]	; (80107b0 <__libc_init_array+0x3c>)
 801077a:	1b64      	subs	r4, r4, r5
 801077c:	10a4      	asrs	r4, r4, #2
 801077e:	2600      	movs	r6, #0
 8010780:	42a6      	cmp	r6, r4
 8010782:	d109      	bne.n	8010798 <__libc_init_array+0x24>
 8010784:	4d0b      	ldr	r5, [pc, #44]	; (80107b4 <__libc_init_array+0x40>)
 8010786:	4c0c      	ldr	r4, [pc, #48]	; (80107b8 <__libc_init_array+0x44>)
 8010788:	f000 f966 	bl	8010a58 <_init>
 801078c:	1b64      	subs	r4, r4, r5
 801078e:	10a4      	asrs	r4, r4, #2
 8010790:	2600      	movs	r6, #0
 8010792:	42a6      	cmp	r6, r4
 8010794:	d105      	bne.n	80107a2 <__libc_init_array+0x2e>
 8010796:	bd70      	pop	{r4, r5, r6, pc}
 8010798:	f855 3b04 	ldr.w	r3, [r5], #4
 801079c:	4798      	blx	r3
 801079e:	3601      	adds	r6, #1
 80107a0:	e7ee      	b.n	8010780 <__libc_init_array+0xc>
 80107a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80107a6:	4798      	blx	r3
 80107a8:	3601      	adds	r6, #1
 80107aa:	e7f2      	b.n	8010792 <__libc_init_array+0x1e>
 80107ac:	08010fa0 	.word	0x08010fa0
 80107b0:	08010fa0 	.word	0x08010fa0
 80107b4:	08010fa0 	.word	0x08010fa0
 80107b8:	08010fa4 	.word	0x08010fa4

080107bc <malloc>:
 80107bc:	4b02      	ldr	r3, [pc, #8]	; (80107c8 <malloc+0xc>)
 80107be:	4601      	mov	r1, r0
 80107c0:	6818      	ldr	r0, [r3, #0]
 80107c2:	f000 b88d 	b.w	80108e0 <_malloc_r>
 80107c6:	bf00      	nop
 80107c8:	2000006c 	.word	0x2000006c

080107cc <free>:
 80107cc:	4b02      	ldr	r3, [pc, #8]	; (80107d8 <free+0xc>)
 80107ce:	4601      	mov	r1, r0
 80107d0:	6818      	ldr	r0, [r3, #0]
 80107d2:	f000 b819 	b.w	8010808 <_free_r>
 80107d6:	bf00      	nop
 80107d8:	2000006c 	.word	0x2000006c

080107dc <memcpy>:
 80107dc:	440a      	add	r2, r1
 80107de:	4291      	cmp	r1, r2
 80107e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80107e4:	d100      	bne.n	80107e8 <memcpy+0xc>
 80107e6:	4770      	bx	lr
 80107e8:	b510      	push	{r4, lr}
 80107ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80107ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80107f2:	4291      	cmp	r1, r2
 80107f4:	d1f9      	bne.n	80107ea <memcpy+0xe>
 80107f6:	bd10      	pop	{r4, pc}

080107f8 <memset>:
 80107f8:	4402      	add	r2, r0
 80107fa:	4603      	mov	r3, r0
 80107fc:	4293      	cmp	r3, r2
 80107fe:	d100      	bne.n	8010802 <memset+0xa>
 8010800:	4770      	bx	lr
 8010802:	f803 1b01 	strb.w	r1, [r3], #1
 8010806:	e7f9      	b.n	80107fc <memset+0x4>

08010808 <_free_r>:
 8010808:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801080a:	2900      	cmp	r1, #0
 801080c:	d044      	beq.n	8010898 <_free_r+0x90>
 801080e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010812:	9001      	str	r0, [sp, #4]
 8010814:	2b00      	cmp	r3, #0
 8010816:	f1a1 0404 	sub.w	r4, r1, #4
 801081a:	bfb8      	it	lt
 801081c:	18e4      	addlt	r4, r4, r3
 801081e:	f000 f90d 	bl	8010a3c <__malloc_lock>
 8010822:	4a1e      	ldr	r2, [pc, #120]	; (801089c <_free_r+0x94>)
 8010824:	9801      	ldr	r0, [sp, #4]
 8010826:	6813      	ldr	r3, [r2, #0]
 8010828:	b933      	cbnz	r3, 8010838 <_free_r+0x30>
 801082a:	6063      	str	r3, [r4, #4]
 801082c:	6014      	str	r4, [r2, #0]
 801082e:	b003      	add	sp, #12
 8010830:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010834:	f000 b908 	b.w	8010a48 <__malloc_unlock>
 8010838:	42a3      	cmp	r3, r4
 801083a:	d908      	bls.n	801084e <_free_r+0x46>
 801083c:	6825      	ldr	r5, [r4, #0]
 801083e:	1961      	adds	r1, r4, r5
 8010840:	428b      	cmp	r3, r1
 8010842:	bf01      	itttt	eq
 8010844:	6819      	ldreq	r1, [r3, #0]
 8010846:	685b      	ldreq	r3, [r3, #4]
 8010848:	1949      	addeq	r1, r1, r5
 801084a:	6021      	streq	r1, [r4, #0]
 801084c:	e7ed      	b.n	801082a <_free_r+0x22>
 801084e:	461a      	mov	r2, r3
 8010850:	685b      	ldr	r3, [r3, #4]
 8010852:	b10b      	cbz	r3, 8010858 <_free_r+0x50>
 8010854:	42a3      	cmp	r3, r4
 8010856:	d9fa      	bls.n	801084e <_free_r+0x46>
 8010858:	6811      	ldr	r1, [r2, #0]
 801085a:	1855      	adds	r5, r2, r1
 801085c:	42a5      	cmp	r5, r4
 801085e:	d10b      	bne.n	8010878 <_free_r+0x70>
 8010860:	6824      	ldr	r4, [r4, #0]
 8010862:	4421      	add	r1, r4
 8010864:	1854      	adds	r4, r2, r1
 8010866:	42a3      	cmp	r3, r4
 8010868:	6011      	str	r1, [r2, #0]
 801086a:	d1e0      	bne.n	801082e <_free_r+0x26>
 801086c:	681c      	ldr	r4, [r3, #0]
 801086e:	685b      	ldr	r3, [r3, #4]
 8010870:	6053      	str	r3, [r2, #4]
 8010872:	4421      	add	r1, r4
 8010874:	6011      	str	r1, [r2, #0]
 8010876:	e7da      	b.n	801082e <_free_r+0x26>
 8010878:	d902      	bls.n	8010880 <_free_r+0x78>
 801087a:	230c      	movs	r3, #12
 801087c:	6003      	str	r3, [r0, #0]
 801087e:	e7d6      	b.n	801082e <_free_r+0x26>
 8010880:	6825      	ldr	r5, [r4, #0]
 8010882:	1961      	adds	r1, r4, r5
 8010884:	428b      	cmp	r3, r1
 8010886:	bf04      	itt	eq
 8010888:	6819      	ldreq	r1, [r3, #0]
 801088a:	685b      	ldreq	r3, [r3, #4]
 801088c:	6063      	str	r3, [r4, #4]
 801088e:	bf04      	itt	eq
 8010890:	1949      	addeq	r1, r1, r5
 8010892:	6021      	streq	r1, [r4, #0]
 8010894:	6054      	str	r4, [r2, #4]
 8010896:	e7ca      	b.n	801082e <_free_r+0x26>
 8010898:	b003      	add	sp, #12
 801089a:	bd30      	pop	{r4, r5, pc}
 801089c:	2000255c 	.word	0x2000255c

080108a0 <sbrk_aligned>:
 80108a0:	b570      	push	{r4, r5, r6, lr}
 80108a2:	4e0e      	ldr	r6, [pc, #56]	; (80108dc <sbrk_aligned+0x3c>)
 80108a4:	460c      	mov	r4, r1
 80108a6:	6831      	ldr	r1, [r6, #0]
 80108a8:	4605      	mov	r5, r0
 80108aa:	b911      	cbnz	r1, 80108b2 <sbrk_aligned+0x12>
 80108ac:	f000 f88c 	bl	80109c8 <_sbrk_r>
 80108b0:	6030      	str	r0, [r6, #0]
 80108b2:	4621      	mov	r1, r4
 80108b4:	4628      	mov	r0, r5
 80108b6:	f000 f887 	bl	80109c8 <_sbrk_r>
 80108ba:	1c43      	adds	r3, r0, #1
 80108bc:	d00a      	beq.n	80108d4 <sbrk_aligned+0x34>
 80108be:	1cc4      	adds	r4, r0, #3
 80108c0:	f024 0403 	bic.w	r4, r4, #3
 80108c4:	42a0      	cmp	r0, r4
 80108c6:	d007      	beq.n	80108d8 <sbrk_aligned+0x38>
 80108c8:	1a21      	subs	r1, r4, r0
 80108ca:	4628      	mov	r0, r5
 80108cc:	f000 f87c 	bl	80109c8 <_sbrk_r>
 80108d0:	3001      	adds	r0, #1
 80108d2:	d101      	bne.n	80108d8 <sbrk_aligned+0x38>
 80108d4:	f04f 34ff 	mov.w	r4, #4294967295
 80108d8:	4620      	mov	r0, r4
 80108da:	bd70      	pop	{r4, r5, r6, pc}
 80108dc:	20002560 	.word	0x20002560

080108e0 <_malloc_r>:
 80108e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108e4:	1ccd      	adds	r5, r1, #3
 80108e6:	f025 0503 	bic.w	r5, r5, #3
 80108ea:	3508      	adds	r5, #8
 80108ec:	2d0c      	cmp	r5, #12
 80108ee:	bf38      	it	cc
 80108f0:	250c      	movcc	r5, #12
 80108f2:	2d00      	cmp	r5, #0
 80108f4:	4607      	mov	r7, r0
 80108f6:	db01      	blt.n	80108fc <_malloc_r+0x1c>
 80108f8:	42a9      	cmp	r1, r5
 80108fa:	d905      	bls.n	8010908 <_malloc_r+0x28>
 80108fc:	230c      	movs	r3, #12
 80108fe:	603b      	str	r3, [r7, #0]
 8010900:	2600      	movs	r6, #0
 8010902:	4630      	mov	r0, r6
 8010904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010908:	4e2e      	ldr	r6, [pc, #184]	; (80109c4 <_malloc_r+0xe4>)
 801090a:	f000 f897 	bl	8010a3c <__malloc_lock>
 801090e:	6833      	ldr	r3, [r6, #0]
 8010910:	461c      	mov	r4, r3
 8010912:	bb34      	cbnz	r4, 8010962 <_malloc_r+0x82>
 8010914:	4629      	mov	r1, r5
 8010916:	4638      	mov	r0, r7
 8010918:	f7ff ffc2 	bl	80108a0 <sbrk_aligned>
 801091c:	1c43      	adds	r3, r0, #1
 801091e:	4604      	mov	r4, r0
 8010920:	d14d      	bne.n	80109be <_malloc_r+0xde>
 8010922:	6834      	ldr	r4, [r6, #0]
 8010924:	4626      	mov	r6, r4
 8010926:	2e00      	cmp	r6, #0
 8010928:	d140      	bne.n	80109ac <_malloc_r+0xcc>
 801092a:	6823      	ldr	r3, [r4, #0]
 801092c:	4631      	mov	r1, r6
 801092e:	4638      	mov	r0, r7
 8010930:	eb04 0803 	add.w	r8, r4, r3
 8010934:	f000 f848 	bl	80109c8 <_sbrk_r>
 8010938:	4580      	cmp	r8, r0
 801093a:	d13a      	bne.n	80109b2 <_malloc_r+0xd2>
 801093c:	6821      	ldr	r1, [r4, #0]
 801093e:	3503      	adds	r5, #3
 8010940:	1a6d      	subs	r5, r5, r1
 8010942:	f025 0503 	bic.w	r5, r5, #3
 8010946:	3508      	adds	r5, #8
 8010948:	2d0c      	cmp	r5, #12
 801094a:	bf38      	it	cc
 801094c:	250c      	movcc	r5, #12
 801094e:	4629      	mov	r1, r5
 8010950:	4638      	mov	r0, r7
 8010952:	f7ff ffa5 	bl	80108a0 <sbrk_aligned>
 8010956:	3001      	adds	r0, #1
 8010958:	d02b      	beq.n	80109b2 <_malloc_r+0xd2>
 801095a:	6823      	ldr	r3, [r4, #0]
 801095c:	442b      	add	r3, r5
 801095e:	6023      	str	r3, [r4, #0]
 8010960:	e00e      	b.n	8010980 <_malloc_r+0xa0>
 8010962:	6822      	ldr	r2, [r4, #0]
 8010964:	1b52      	subs	r2, r2, r5
 8010966:	d41e      	bmi.n	80109a6 <_malloc_r+0xc6>
 8010968:	2a0b      	cmp	r2, #11
 801096a:	d916      	bls.n	801099a <_malloc_r+0xba>
 801096c:	1961      	adds	r1, r4, r5
 801096e:	42a3      	cmp	r3, r4
 8010970:	6025      	str	r5, [r4, #0]
 8010972:	bf18      	it	ne
 8010974:	6059      	strne	r1, [r3, #4]
 8010976:	6863      	ldr	r3, [r4, #4]
 8010978:	bf08      	it	eq
 801097a:	6031      	streq	r1, [r6, #0]
 801097c:	5162      	str	r2, [r4, r5]
 801097e:	604b      	str	r3, [r1, #4]
 8010980:	4638      	mov	r0, r7
 8010982:	f104 060b 	add.w	r6, r4, #11
 8010986:	f000 f85f 	bl	8010a48 <__malloc_unlock>
 801098a:	f026 0607 	bic.w	r6, r6, #7
 801098e:	1d23      	adds	r3, r4, #4
 8010990:	1af2      	subs	r2, r6, r3
 8010992:	d0b6      	beq.n	8010902 <_malloc_r+0x22>
 8010994:	1b9b      	subs	r3, r3, r6
 8010996:	50a3      	str	r3, [r4, r2]
 8010998:	e7b3      	b.n	8010902 <_malloc_r+0x22>
 801099a:	6862      	ldr	r2, [r4, #4]
 801099c:	42a3      	cmp	r3, r4
 801099e:	bf0c      	ite	eq
 80109a0:	6032      	streq	r2, [r6, #0]
 80109a2:	605a      	strne	r2, [r3, #4]
 80109a4:	e7ec      	b.n	8010980 <_malloc_r+0xa0>
 80109a6:	4623      	mov	r3, r4
 80109a8:	6864      	ldr	r4, [r4, #4]
 80109aa:	e7b2      	b.n	8010912 <_malloc_r+0x32>
 80109ac:	4634      	mov	r4, r6
 80109ae:	6876      	ldr	r6, [r6, #4]
 80109b0:	e7b9      	b.n	8010926 <_malloc_r+0x46>
 80109b2:	230c      	movs	r3, #12
 80109b4:	603b      	str	r3, [r7, #0]
 80109b6:	4638      	mov	r0, r7
 80109b8:	f000 f846 	bl	8010a48 <__malloc_unlock>
 80109bc:	e7a1      	b.n	8010902 <_malloc_r+0x22>
 80109be:	6025      	str	r5, [r4, #0]
 80109c0:	e7de      	b.n	8010980 <_malloc_r+0xa0>
 80109c2:	bf00      	nop
 80109c4:	2000255c 	.word	0x2000255c

080109c8 <_sbrk_r>:
 80109c8:	b538      	push	{r3, r4, r5, lr}
 80109ca:	4d06      	ldr	r5, [pc, #24]	; (80109e4 <_sbrk_r+0x1c>)
 80109cc:	2300      	movs	r3, #0
 80109ce:	4604      	mov	r4, r0
 80109d0:	4608      	mov	r0, r1
 80109d2:	602b      	str	r3, [r5, #0]
 80109d4:	f7f1 fc46 	bl	8002264 <_sbrk>
 80109d8:	1c43      	adds	r3, r0, #1
 80109da:	d102      	bne.n	80109e2 <_sbrk_r+0x1a>
 80109dc:	682b      	ldr	r3, [r5, #0]
 80109de:	b103      	cbz	r3, 80109e2 <_sbrk_r+0x1a>
 80109e0:	6023      	str	r3, [r4, #0]
 80109e2:	bd38      	pop	{r3, r4, r5, pc}
 80109e4:	20002564 	.word	0x20002564

080109e8 <strncpy>:
 80109e8:	b510      	push	{r4, lr}
 80109ea:	3901      	subs	r1, #1
 80109ec:	4603      	mov	r3, r0
 80109ee:	b132      	cbz	r2, 80109fe <strncpy+0x16>
 80109f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80109f4:	f803 4b01 	strb.w	r4, [r3], #1
 80109f8:	3a01      	subs	r2, #1
 80109fa:	2c00      	cmp	r4, #0
 80109fc:	d1f7      	bne.n	80109ee <strncpy+0x6>
 80109fe:	441a      	add	r2, r3
 8010a00:	2100      	movs	r1, #0
 8010a02:	4293      	cmp	r3, r2
 8010a04:	d100      	bne.n	8010a08 <strncpy+0x20>
 8010a06:	bd10      	pop	{r4, pc}
 8010a08:	f803 1b01 	strb.w	r1, [r3], #1
 8010a0c:	e7f9      	b.n	8010a02 <strncpy+0x1a>

08010a0e <strstr>:
 8010a0e:	780a      	ldrb	r2, [r1, #0]
 8010a10:	b570      	push	{r4, r5, r6, lr}
 8010a12:	b96a      	cbnz	r2, 8010a30 <strstr+0x22>
 8010a14:	bd70      	pop	{r4, r5, r6, pc}
 8010a16:	429a      	cmp	r2, r3
 8010a18:	d109      	bne.n	8010a2e <strstr+0x20>
 8010a1a:	460c      	mov	r4, r1
 8010a1c:	4605      	mov	r5, r0
 8010a1e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d0f6      	beq.n	8010a14 <strstr+0x6>
 8010a26:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8010a2a:	429e      	cmp	r6, r3
 8010a2c:	d0f7      	beq.n	8010a1e <strstr+0x10>
 8010a2e:	3001      	adds	r0, #1
 8010a30:	7803      	ldrb	r3, [r0, #0]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d1ef      	bne.n	8010a16 <strstr+0x8>
 8010a36:	4618      	mov	r0, r3
 8010a38:	e7ec      	b.n	8010a14 <strstr+0x6>
	...

08010a3c <__malloc_lock>:
 8010a3c:	4801      	ldr	r0, [pc, #4]	; (8010a44 <__malloc_lock+0x8>)
 8010a3e:	f000 b809 	b.w	8010a54 <__retarget_lock_acquire_recursive>
 8010a42:	bf00      	nop
 8010a44:	20002568 	.word	0x20002568

08010a48 <__malloc_unlock>:
 8010a48:	4801      	ldr	r0, [pc, #4]	; (8010a50 <__malloc_unlock+0x8>)
 8010a4a:	f000 b804 	b.w	8010a56 <__retarget_lock_release_recursive>
 8010a4e:	bf00      	nop
 8010a50:	20002568 	.word	0x20002568

08010a54 <__retarget_lock_acquire_recursive>:
 8010a54:	4770      	bx	lr

08010a56 <__retarget_lock_release_recursive>:
 8010a56:	4770      	bx	lr

08010a58 <_init>:
 8010a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a5a:	bf00      	nop
 8010a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a5e:	bc08      	pop	{r3}
 8010a60:	469e      	mov	lr, r3
 8010a62:	4770      	bx	lr

08010a64 <_fini>:
 8010a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a66:	bf00      	nop
 8010a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a6a:	bc08      	pop	{r3}
 8010a6c:	469e      	mov	lr, r3
 8010a6e:	4770      	bx	lr
